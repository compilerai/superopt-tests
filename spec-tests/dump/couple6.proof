=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A2.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L4%6%bbentry L4%7%d L4%8%bbentry L4%10%bbentry L4%18%bbentry L4%19%d L4%20%bbentry L4%22%bbentry L4%26%d L4%27%bbentry L4%28%bbentry L4%31%bbentry E0%0%d
=Edges:
L0%0%d => L4%6%bbentry
L4%6%bbentry => L4%7%d
L4%7%d => L4%10%bbentry
L4%7%d => L4%8%bbentry
L4%8%bbentry => E0%0%d
L4%10%bbentry => L4%18%bbentry
L4%18%bbentry => L4%19%d
L4%19%d => L4%22%bbentry
L4%19%d => L4%20%bbentry
L4%20%bbentry => L4%6%bbentry (backedge) 
L4%22%bbentry => L4%26%d
L4%26%d => L4%28%bbentry
L4%26%d => L4%27%bbentry
L4%27%bbentry => L4%31%bbentry
L4%28%bbentry => L4%31%bbentry
L4%31%bbentry => L4%18%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%18%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%19%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%20%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%22%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%26%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%27%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%28%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L4%31%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L4%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L4%6%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L4%6%bbentry => L4%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L4%7%d
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L4%7%d => L4%10%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L4%7%d => L4%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L4%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L4%10%bbentry => L4%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L4%18%bbentry
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%var-x_i-0.L4%18%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L4%18%bbentry
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L4%18%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L4%18%bbentry => L4%19%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L4%19%d
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L4%19%d => L4%22%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L4%19%d => L4%20%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L4%20%bbentry => L4%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-1.L4%6%bbentry
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=spec-%var-ret-1.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%var-x-0.L4%6%bbentry
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L4%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%tmpvar-8.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%tmpvar-9.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%var-u-0.L4%6%bbentry
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L4%22%bbentry => L4%26%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-2.L4%26%d
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-3.L4%26%d
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L4%26%d
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*intrinsic_app_bvugt)
tfg_edge_comment end

=Edge: L4%26%d => L4%28%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_false_split
tfg_edge_comment end

=Edge: L4%26%d => L4%27%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_true_split
tfg_edge_comment end

=Edge: L4%27%bbentry => L4%31%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-4.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvadd)*ite_true_merge)
tfg_edge_comment end

=Edge: L4%28%bbentry => L4%31%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-5.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvsub)*ite_false_merge)
tfg_edge_comment end

=Edge: L4%31%bbentry => L4%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L4%18%bbentry
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=spec-%var-j-0.L4%18%bbentry
1 : input.spec-%tmpvar-2.L4%26%d : BV:32
=spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%tmpvar-6.L4%31%bbentry : BV:32
=spec-%var-x_i-0.L4%18%bbentry
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : input.src.spec-ghostvar.itervar.2.L4%18%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 35 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 36 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L4%7%d
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L4%19%d
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L4%26%d
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
=Loc 40 in src.spec.foo.
REGMEM
spec-%var-i-1.L4%6%bbentry
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%var-x-0.L4%6%bbentry
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 42 in src.spec.foo.
REGMEM
spec-%var-j-0.L4%18%bbentry
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L4%18%bbentry
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-16.E0%0%d
1 : input.spec-%tmpvar-16.E0%0%d : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%var-ret-1.L4%6%bbentry
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L4%26%d
1 : input.spec-%tmpvar-1.L4%26%d : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L4%26%d
1 : input.spec-%tmpvar-2.L4%26%d : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-i-0.L4%18%bbentry
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L4%26%d
1 : input.spec-%var-x_ij-0.L4%26%d : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-18.L4%6%bbentry
1 : input.spec-%tmpvar-18.L4%6%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-19.L4%6%bbentry
1 : input.spec-%tmpvar-19.L4%6%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L4%6%bbentry : BV:32
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L4%18%bbentry
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L4%6%bbentry
1 : input.spec-%tmpvar-14.L4%6%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L4%6%bbentry
1 : input.spec-%tmpvar-8.L4%6%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L4%6%bbentry
1 : input.spec-%tmpvar-9.L4%6%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%var-u-0.L4%6%bbentry
1 : input.spec-%var-u-0.L4%6%bbentry : UNIT
=Loc 63 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%tmpvar-6.L4%31%bbentry : BV:32
=Loc 64 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : input.src.spec-ghostvar.itervar.2.L4%18%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L4%18%bbentry
1 : input.spec-%tmpvar-11.L4%18%bbentry : BV:32
=Loc 66 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L4%18%bbentry
1 : input.spec-%tmpvar-13.L4%18%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L4%18%bbentry
1 : input.spec-%var-x_i-1.L4%18%bbentry : MAP[BV:32 -> BV:32]
=Loc 68 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L4%31%bbentry
1 : input.spec-%tmpvar-4.L4%31%bbentry : BV:32
=Loc 69 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L4%31%bbentry
1 : input.spec-%tmpvar-5.L4%31%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L4%6%bbentry
40, 41, 48, 
=live locs at L4%7%d
37, 40, 41, 48, 
=live locs at L4%8%bbentry
48, 
=live locs at L4%10%bbentry
37, 40, 41, 48, 
=live locs at L4%18%bbentry
41, 42, 43, 52, 57, 61, 
=live locs at L4%19%d
38, 41, 42, 43, 52, 57, 61, 
=live locs at L4%20%bbentry
41, 57, 61, 
=live locs at L4%22%bbentry
38, 41, 42, 43, 52, 57, 61, 
=live locs at L4%26%d
39, 41, 43, 51, 52, 53, 57, 61, 
=live locs at L4%27%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L4%28%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L4%31%bbentry
41, 43, 51, 52, 57, 63, 
=live locs at E0%0%d
47[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 35, 36
=loc definedness at L4%6%bbentry
1, 35, 36, 40, 41, 48, 54, 55, 56
=loc definedness at L4%7%d
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L4%8%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L4%10%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L4%18%bbentry
1, 35, 36, 37, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%19%d
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%20%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%22%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%26%d
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%27%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%28%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L4%31%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67
=loc definedness at E0%0%d
1, 35, 36, 37, 40, 41, 44, 45, 46, 47, 48, 49, 54, 55, 56

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L4%6%bbentry
40, 41
=branch affecting variable locs at L4%7%d
37, 40, 41
=branch affecting variable locs at L4%8%bbentry

=branch affecting variable locs at L4%10%bbentry
37, 40, 41
=branch affecting variable locs at L4%18%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L4%19%d
38, 41, 42, 43, 52, 57
=branch affecting variable locs at L4%20%bbentry
41, 57
=branch affecting variable locs at L4%22%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L4%26%d
39, 41, 43, 51, 52, 57
=branch affecting variable locs at L4%27%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L4%28%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L4%31%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 40 {input.spec-%var-i-1.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 41 {input.spec-%var-x-0.L4%6%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 48 {input.spec-%var-ret-1.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 54 {input.spec-%tmpvar-18.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 55 {input.spec-%tmpvar-19.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L4%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L4%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%6%bbentry=>L4%7%d
=graph_with_edge_structures.loc_to_expr_map at L4%6%bbentry=>L4%7%d for loc_id 37 {input.spec-%tmpvar-10.L4%7%d }
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L4%6%bbentry=>L4%7%d done
=graph_with_edge_structures.loc_to_expr_map at L4%7%d=>L4%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%7%d=>L4%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%7%d=>L4%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%7%d=>L4%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 44 {input.spec-%tmpvar-16.E0%0%d }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 45 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 46 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 47 {input.spec-%tmpvar-21.E0%0%d }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d for loc_id 49 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L4%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 42 {input.spec-%var-j-0.L4%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 43 {input.spec-%var-x_i-0.L4%18%bbentry }
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 52 {input.spec-%var-i-0.L4%18%bbentry }
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 57 {input.spec-%tmpvar-12.L4%18%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 61 {input.spec-%var-ret-0.L4%18%bbentry }
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L4%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 65 {input.spec-%tmpvar-11.L4%18%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 66 {input.spec-%tmpvar-13.L4%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry for loc_id 67 {input.spec-%var-x_i-1.L4%18%bbentry }
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L4%10%bbentry=>L4%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%18%bbentry=>L4%19%d
=graph_with_edge_structures.loc_to_expr_map at L4%18%bbentry=>L4%19%d for loc_id 38 {input.spec-%tmpvar-0.L4%19%d }
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L4%18%bbentry=>L4%19%d done
=graph_with_edge_structures.loc_to_expr_map at L4%19%d=>L4%20%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%19%d=>L4%20%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%19%d=>L4%22%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%19%d=>L4%22%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 40 {input.spec-%var-i-1.L4%6%bbentry }
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 48 {input.spec-%var-ret-1.L4%6%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L4%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L4%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 58 {input.spec-%tmpvar-14.L4%6%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 59 {input.spec-%tmpvar-8.L4%6%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 60 {input.spec-%tmpvar-9.L4%6%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry for loc_id 62 {input.spec-%var-u-0.L4%6%bbentry }
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L4%20%bbentry=>L4%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d for loc_id 39 {input.spec-%tmpvar-3.L4%26%d }
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d for loc_id 50 {input.spec-%tmpvar-1.L4%26%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d for loc_id 51 {input.spec-%tmpvar-2.L4%26%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d for loc_id 53 {input.spec-%var-x_ij-0.L4%26%d }
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%22%bbentry=>L4%26%d done
=graph_with_edge_structures.loc_to_expr_map at L4%26%d=>L4%27%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%26%d=>L4%27%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%26%d=>L4%28%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%26%d=>L4%28%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%27%bbentry=>L4%31%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%27%bbentry=>L4%31%bbentry for loc_id 63 {input.spec-%tmpvar-6.L4%31%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%27%bbentry=>L4%31%bbentry for loc_id 68 {input.spec-%tmpvar-4.L4%31%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%27%bbentry=>L4%31%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%28%bbentry=>L4%31%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%28%bbentry=>L4%31%bbentry for loc_id 63 {input.spec-%tmpvar-6.L4%31%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L4%26%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%28%bbentry=>L4%31%bbentry for loc_id 69 {input.spec-%tmpvar-5.L4%31%bbentry }
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L4%26%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%28%bbentry=>L4%31%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry for loc_id 42 {input.spec-%var-j-0.L4%18%bbentry }
1 : input.spec-%tmpvar-2.L4%26%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry for loc_id 61 {input.spec-%var-ret-0.L4%18%bbentry }
1 : input.spec-%tmpvar-6.L4%31%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L4%18%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L4%18%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L4%31%bbentry=>L4%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L4%6%bbentry:
vacuous mls at L4%7%d:
vacuous mls at L4%8%bbentry:
vacuous mls at L4%10%bbentry:
vacuous mls at L4%18%bbentry:
vacuous mls at L4%19%d:
vacuous mls at L4%20%bbentry:
vacuous mls at L4%22%bbentry:
vacuous mls at L4%26%d:
vacuous mls at L4%27%bbentry:
vacuous mls at L4%28%bbentry:
vacuous mls at L4%31%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L4%6%bbentry:
non-vacuous mls at L4%7%d:
non-vacuous mls at L4%8%bbentry:
non-vacuous mls at L4%10%bbentry:
non-vacuous mls at L4%18%bbentry:
non-vacuous mls at L4%19%d:
non-vacuous mls at L4%20%bbentry:
non-vacuous mls at L4%22%bbentry:
non-vacuous mls at L4%26%d:
non-vacuous mls at L4%27%bbentry:
non-vacuous mls at L4%28%bbentry:
non-vacuous mls at L4%31%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 41
=loc_expr
140378 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 50
=loc_expr
140614 : input.spec-%tmpvar-1.L4%26%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140616 : input.spec-%tmpvar-18.L4%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140617 : input.spec-%tmpvar-19.L4%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 65
=loc_expr
140622 : input.spec-%tmpvar-11.L4%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 66
=loc_expr
140623 : input.spec-%tmpvar-13.L4%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 50 expr
1 : input.spec-%tmpvar-1.L4%26%d : BV:32
=loc 50 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-18.L4%6%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-19.L4%6%bbentry : BV:32
=loc 55 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 65 expr
1 : input.spec-%tmpvar-11.L4%18%bbentry : BV:32
=loc 65 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 66 expr
1 : input.spec-%tmpvar-13.L4%18%bbentry : BV:32
=loc 66 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 50 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L4%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%6%bbentry=>L4%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%7%d=>L4%8%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%7%d=>L4%10%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%10%bbentry=>L4%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%18%bbentry=>L4%19%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%19%d=>L4%20%bbentry
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%19%d=>L4%22%bbentry
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%20%bbentry=>L4%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%22%bbentry=>L4%26%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%26%d=>L4%27%bbentry
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%26%d=>L4%28%bbentry
1 : input.spec-%tmpvar-3.L4%26%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%27%bbentry=>L4%31%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%28%bbentry=>L4%31%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L4%31%bbentry=>L4%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L4%6%bbentry
=spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L4%6%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%6%bbentry=>L4%7%d
=spec-%tmpvar-10.L4%7%d
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%7%d=>L4%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%7%d=>L4%10%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%8%bbentry=>E0%0%d
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%10%bbentry=>L4%18%bbentry
=spec-%var-i-0.L4%18%bbentry
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=spec-%var-x_i-0.L4%18%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L4%18%bbentry
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%18%bbentry=>L4%19%d
=spec-%tmpvar-0.L4%19%d
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%19%d=>L4%20%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%19%d=>L4%22%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%20%bbentry=>L4%6%bbentry
=spec-%var-i-1.L4%6%bbentry
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=spec-%var-ret-1.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L4%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%tmpvar-8.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%tmpvar-9.L4%6%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=spec-%var-u-0.L4%6%bbentry
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%22%bbentry=>L4%26%d
=spec-%tmpvar-2.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-3.L4%26%d
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L4%26%d
1 : input.spec-%tmpvar-0.L4%19%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%26%d=>L4%27%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%26%d=>L4%28%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%27%bbentry=>L4%31%bbentry
=spec-%tmpvar-4.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L4%26%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%28%bbentry=>L4%31%bbentry
=spec-%tmpvar-6.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L4%26%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-5.L4%31%bbentry
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L4%26%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L4%31%bbentry=>L4%18%bbentry
=spec-%var-j-0.L4%18%bbentry
1 : input.spec-%tmpvar-2.L4%26%d : BV:32
=spec-%var-ret-0.L4%18%bbentry
1 : input.spec-%tmpvar-6.L4%31%bbentry : BV:32
=src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L4%18%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L4%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L4%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%6%bbentry=>L4%7%d
=graph_with_simplified_assets.simplified_assumes at L4%6%bbentry=>L4%7%d done
=graph_with_simplified_assets.simplified_assumes at L4%7%d=>L4%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%7%d=>L4%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%7%d=>L4%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%7%d=>L4%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L4%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L4%10%bbentry=>L4%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%10%bbentry=>L4%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%18%bbentry=>L4%19%d
=graph_with_simplified_assets.simplified_assumes at L4%18%bbentry=>L4%19%d done
=graph_with_simplified_assets.simplified_assumes at L4%19%d=>L4%20%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%19%d=>L4%20%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%19%d=>L4%22%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%19%d=>L4%22%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%20%bbentry=>L4%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%20%bbentry=>L4%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%22%bbentry=>L4%26%d
=graph_with_simplified_assets.simplified_assumes at L4%22%bbentry=>L4%26%d done
=graph_with_simplified_assets.simplified_assumes at L4%26%d=>L4%27%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%26%d=>L4%27%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%26%d=>L4%28%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%26%d=>L4%28%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%27%bbentry=>L4%31%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%27%bbentry=>L4%31%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%28%bbentry=>L4%31%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%28%bbentry=>L4%31%bbentry done
=graph_with_simplified_assets.simplified_assumes at L4%31%bbentry=>L4%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L4%31%bbentry=>L4%18%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L4%6%bbentry for src.spec.foo
=suffixpath_at_L4%6%bbentry.graph_edge_composition
(L0%0%d=>L4%6%bbentry)
=suffixpath_at_L4%7%d for src.spec.foo
=suffixpath_at_L4%7%d.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*(L4%6%bbentry=>L4%7%d))
=suffixpath_at_L4%8%bbentry for src.spec.foo
=suffixpath_at_L4%8%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*(L4%7%d=>L4%8%bbentry)))
=suffixpath_at_L4%10%bbentry for src.spec.foo
=suffixpath_at_L4%10%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*(L4%7%d=>L4%10%bbentry)))
=suffixpath_at_L4%18%bbentry for src.spec.foo
=suffixpath_at_L4%18%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*(L4%10%bbentry=>L4%18%bbentry))))
=suffixpath_at_L4%19%d for src.spec.foo
=suffixpath_at_L4%19%d.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*(L4%18%bbentry=>L4%19%d)))))
=suffixpath_at_L4%20%bbentry for src.spec.foo
=suffixpath_at_L4%20%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*(L4%19%d=>L4%20%bbentry))))))
=suffixpath_at_L4%22%bbentry for src.spec.foo
=suffixpath_at_L4%22%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*(L4%19%d=>L4%22%bbentry))))))
=suffixpath_at_L4%26%d for src.spec.foo
=suffixpath_at_L4%26%d.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*(L4%22%bbentry=>L4%26%d)))))))
=suffixpath_at_L4%27%bbentry for src.spec.foo
=suffixpath_at_L4%27%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*((L4%22%bbentry=>L4%26%d)*(L4%26%d=>L4%27%bbentry))))))))
=suffixpath_at_L4%28%bbentry for src.spec.foo
=suffixpath_at_L4%28%bbentry.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*((L4%22%bbentry=>L4%26%d)*(L4%26%d=>L4%28%bbentry))))))))
=suffixpath_at_L4%31%bbentry for src.spec.foo
=suffixpath_at_L4%31%bbentry.graph_edge_composition
(((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*((L4%22%bbentry=>L4%26%d)*((L4%26%d=>L4%27%bbentry)*(L4%27%bbentry=>L4%31%bbentry)))))))))+((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%10%bbentry)*((L4%10%bbentry=>L4%18%bbentry)*((L4%18%bbentry=>L4%19%d)*((L4%19%d=>L4%22%bbentry)*((L4%22%bbentry=>L4%26%d)*((L4%26%d=>L4%28%bbentry)*(L4%28%bbentry=>L4%31%bbentry))))))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L4%6%bbentry)*((L4%6%bbentry=>L4%7%d)*((L4%7%d=>L4%8%bbentry)*(L4%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L4%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L4%6%bbentry done
tfg.assumes_around_edge at L4%6%bbentry=>L4%7%d
tfg.assumes_around_edge at L4%6%bbentry=>L4%7%d done
tfg.assumes_around_edge at L4%7%d=>L4%8%bbentry
tfg.assumes_around_edge at L4%7%d=>L4%8%bbentry done
tfg.assumes_around_edge at L4%7%d=>L4%10%bbentry
tfg.assumes_around_edge at L4%7%d=>L4%10%bbentry done
tfg.assumes_around_edge at L4%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L4%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L4%10%bbentry=>L4%18%bbentry
tfg.assumes_around_edge at L4%10%bbentry=>L4%18%bbentry done
tfg.assumes_around_edge at L4%18%bbentry=>L4%19%d
tfg.assumes_around_edge at L4%18%bbentry=>L4%19%d done
tfg.assumes_around_edge at L4%19%d=>L4%20%bbentry
tfg.assumes_around_edge at L4%19%d=>L4%20%bbentry done
tfg.assumes_around_edge at L4%19%d=>L4%22%bbentry
tfg.assumes_around_edge at L4%19%d=>L4%22%bbentry done
tfg.assumes_around_edge at L4%20%bbentry=>L4%6%bbentry
tfg.assumes_around_edge at L4%20%bbentry=>L4%6%bbentry done
tfg.assumes_around_edge at L4%22%bbentry=>L4%26%d
tfg.assumes_around_edge at L4%22%bbentry=>L4%26%d done
tfg.assumes_around_edge at L4%26%d=>L4%27%bbentry
tfg.assumes_around_edge at L4%26%d=>L4%27%bbentry done
tfg.assumes_around_edge at L4%26%d=>L4%28%bbentry
tfg.assumes_around_edge at L4%26%d=>L4%28%bbentry done
tfg.assumes_around_edge at L4%27%bbentry=>L4%31%bbentry
tfg.assumes_around_edge at L4%27%bbentry=>L4%31%bbentry done
tfg.assumes_around_edge at L4%28%bbentry=>L4%31%bbentry
tfg.assumes_around_edge at L4%28%bbentry=>L4%31%bbentry done
tfg.assumes_around_edge at L4%31%bbentry=>L4%18%bbentry
tfg.assumes_around_edge at L4%31%bbentry=>L4%18%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.body3%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end10%1%d Lfor.inc8%1%d Lif.else%1%d Lif.end%1%bbentry Lif.then%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end10%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc8%1%d
Lfor.body3%1%d => Lfor.body3%2%d
Lfor.body3%2%d => Lif.then%1%d
Lfor.body3%2%d => Lif.else%1%d
Lif.then%1%d => Lif.end%1%bbentry
Lif.else%1%d => Lif.end%1%bbentry
Lif.end%1%bbentry => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc8%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end10%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end10%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc8%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.else%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;foo}
mlvar.dst.llvm.foo.2 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.4 for call-context {*;foo}
mlvar.dst.llvm.foo.3 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end10%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc8%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.body3%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  %cmp4 = icmp ugt i32 %i.0, %j.0, !dbg !36
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.else%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lif.then%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40))*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40)))*((  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40*  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40)*(((  %add = add i32 %ret.1, %1, !dbg !41*  br label %if.end, !dbg !42)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end, !dbg !42))*(  br label %if.end, !dbg !42*  br label %if.end, !dbg !42))))
tfg_edge_comment end

=Edge: Lif.else%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.3 : MEMLABEL
4 : mlvar.dst.llvm.foo.2 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.2 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*(  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43))*(  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43*  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43))*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43)))*((  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43*  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43)*(((  %sub = sub i32 %ret.1, %3, !dbg !44*  br label %if.end)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end))*(  br label %if.end*  br label %if.end))))
tfg_edge_comment end

=Edge: Lif.end%1%bbentry => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((((bb_entry*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*(  %inc = add i32 %j.0, 1, !dbg !47*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  br label %for.cond1, !dbg !48, !llvm.loop !49)*(  br label %for.cond1, !dbg !48, !llvm.loop !49*  br label %for.cond1, !dbg !48, !llvm.loop !49))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.inc8%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc9 = add i32 %i.0, 1, !dbg !52*  br label %for.cond, !dbg !53, !llvm.loop !54)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !53, !llvm.loop !54))*  br label %for.cond, !dbg !53, !llvm.loop !54)*(  br label %for.cond, !dbg !53, !llvm.loop !54*  br label %for.cond, !dbg !53, !llvm.loop !54))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end10%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !56
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100061 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100062 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100063 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100064 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100065 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100066 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100067 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100086 in dst.llvm.foo.
REGMEM
dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100087 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100088 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100089 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100090 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=Loc 100091 in dst.llvm.foo.
REGMEM
dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=Loc 100092 in dst.llvm.foo.
REGMEM
dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=Loc 100093 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=Loc 100094 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=Loc 100095 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100096 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100097 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100098 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100099 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100100 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100101 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=Loc 100102 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=Loc 100103 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=Loc 100104 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=Loc 100105 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100106 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100107 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100108 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100109 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100110 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100111 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=Loc 100112 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=Loc 100113 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=Loc 100114 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=Loc 100115 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100116 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073, 
=live locs at Lfor.body3%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.body3%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100068, 100069, 100070, 100083, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 
=live locs at Lfor.cond%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 100075, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100076, 100083, 
=live locs at Lfor.end10%1%d
100065, 100073[f], 
=live locs at Lfor.inc8%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100083, 
=live locs at Lif.else%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lif.end%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100090, 
=live locs at Lif.then%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at E0%0%d
100065, 100073[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.body3%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.body3%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.end10%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.inc8%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.else%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.end%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100090, 100115, 100116
=loc definedness at Lif.then%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at E0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100071, 100072, 100073, 100074, 100075, 100077, 100078, 100079, 100115, 100116

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100069
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.body3%2%d
100006, 100012, 100068, 100069, 100070
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100069
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100069, 100075
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100069, 100070, 100076
=branch affecting variable locs at Lfor.end10%1%d

=branch affecting variable locs at Lfor.inc8%1%d
100006, 100012, 100069
=branch affecting variable locs at Lif.else%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.end%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.then%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100077 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100115 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100116 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100085 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100086 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d for loc_id 100068 {input.dst.llvm-%cmp4.Lfor.body3%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100075 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100076 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100071 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100072 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100074 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100080 {input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100081 {input.dst.llvm-%inc9.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100082 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100091 {input.dst.llvm-%2.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100092 {input.dst.llvm-%3.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100093 {input.dst.llvm-%arrayidx6.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100094 {input.dst.llvm-%arrayidx7.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100095 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100096 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100097 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100098 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100099 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100100 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100101 {input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100102 {input.dst.llvm-%sub.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100086 {input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100087 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100088 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100089 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100103 {input.dst.llvm-%0.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100104 {input.dst.llvm-%1.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100105 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100106 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100107 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100108 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100109 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100110 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100111 {input.dst.llvm-%add.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100112 {input.dst.llvm-%arrayidx.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100113 {input.dst.llvm-%arrayidx5.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100114 {input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.body3%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end10%1%d:
vacuous mls at Lfor.inc8%1%d:
vacuous mls at Lif.else%1%d:
vacuous mls at Lif.end%1%bbentry:
vacuous mls at Lif.then%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.body3%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end10%1%d:
non-vacuous mls at Lfor.inc8%1%d:
non-vacuous mls at Lif.else%1%d:
non-vacuous mls at Lif.end%1%bbentry:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140427 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140428 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140426 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100046
=loc_expr
140530 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100048
=loc_expr
140531 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100049
=loc_expr
140533 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100050
=loc_expr
140535 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100051
=loc_expr
140537 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100056
=loc_expr
140438 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100057
=loc_expr
140431 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100058
=loc_expr
140432 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100059
=loc_expr
140433 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100071
=loc_expr
140867 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140868 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140869 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140870 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100078
=loc_expr
140871 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100082
=loc_expr
140874 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100084
=loc_expr
140875 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100089
=loc_expr
140879 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100115
=loc_expr
140904 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100116
=loc_expr
140905 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100074 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100074 spreled-expr
140267 : retaddr_const : BV:32
=loc 100077 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100077 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100078 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100078 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100084 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100084 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100115 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100115 spreled-expr
140438 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100116 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100116 spreled-expr
140437 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100088 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100089 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100090 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100091 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100092 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100093 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100094 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100095 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100096 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100097 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100098 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100099 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100100 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100101 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100102 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100103 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100104 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100105 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100106 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100107 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100108 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100109 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100110 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100111 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100112 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100113 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100114 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100115 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100074 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100115 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.else%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.then%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end10%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc8%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end10%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.else%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.body3%2%d
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.else%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end10%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc8%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end10%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.else%1%d=>Lif.end%1%bbentry
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lif.end%1%bbentry
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.body3%2%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*(Lfor.body3%1%d=>Lfor.body3%2%d)))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end10%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end10%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end10%1%d)))
=suffixpath_at_Lfor.inc8%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc8%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc8%1%d))))))
=suffixpath_at_Lif.else%1%d for dst.llvm.foo
=suffixpath_at_Lif.else%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.else%1%d))))))))
=suffixpath_at_Lif.end%1%bbentry for dst.llvm.foo
=suffixpath_at_Lif.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lif.end%1%bbentry)))))))))+((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lif.end%1%bbentry))))))))))
=suffixpath_at_Lif.then%1%d for dst.llvm.foo
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.then%1%d))))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end10%1%d)*(Lfor.end10%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140426 : input.dst.llvm-%x : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140439 : islangaligned(140426, 140412) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d done
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140589 : 4 { 0x4 +1.0e1025 } : BV:64
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140460 : 32 { 0x20 +1.0e1025 } : INT
140829 : bvsign_ext(140799, 140460) : BV:64
140980 : bvmul(140589, 140829) : BV:64
140464 : 63 { 0x3f +1.0e1025 } : INT
140981 : bvextract(140980, 140464, 140460) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140828 : bvslt(140799, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140994 : ite(140828, 140337, 140276) : BV:32
140996 : eq(140981, 140994) : BOOL
140412 : 4 { 0x4 +1.0e1025 } : INT
140998 : isindexforsize(140996, 140412) : BOOL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
141000 : isgepoffset(140924, 140921) : BOOL
141004 : islangaligned(140924, 140412) : BOOL
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
141006 : islangaligned(140930, 140412) : BOOL
141009 : and(141004, 141006) : BOOL
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140844 : bvsign_ext(140800, 140460) : BV:64
141022 : bvmul(140589, 140844) : BV:64
141023 : bvextract(141022, 140464, 140460) : BV:32
140843 : bvslt(140800, 140276) : BOOL
141036 : ite(140843, 140337, 140276) : BV:32
141038 : eq(141023, 141036) : BOOL
141040 : isindexforsize(141038, 140412) : BOOL
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
141042 : isgepoffset(140935, 140933) : BOOL
141047 : and(140998, 141000, 141004, 141009, 141040, 141042) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
140962 : islangaligned(140935, 140412) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140589 : 4 { 0x4 +1.0e1025 } : BV:64
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140460 : 32 { 0x20 +1.0e1025 } : INT
140829 : bvsign_ext(140799, 140460) : BV:64
140980 : bvmul(140589, 140829) : BV:64
140464 : 63 { 0x3f +1.0e1025 } : INT
140981 : bvextract(140980, 140464, 140460) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140828 : bvslt(140799, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140994 : ite(140828, 140337, 140276) : BV:32
140996 : eq(140981, 140994) : BOOL
140412 : 4 { 0x4 +1.0e1025 } : INT
140998 : isindexforsize(140996, 140412) : BOOL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
141000 : isgepoffset(140924, 140921) : BOOL
141004 : islangaligned(140924, 140412) : BOOL
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
141006 : islangaligned(140930, 140412) : BOOL
141009 : and(141004, 141006) : BOOL
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140844 : bvsign_ext(140800, 140460) : BV:64
141022 : bvmul(140589, 140844) : BV:64
141023 : bvextract(141022, 140464, 140460) : BV:32
140843 : bvslt(140800, 140276) : BOOL
141036 : ite(140843, 140337, 140276) : BV:32
141038 : eq(141023, 141036) : BOOL
141040 : isindexforsize(141038, 140412) : BOOL
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
141042 : isgepoffset(140935, 140933) : BOOL
141047 : and(140998, 141000, 141004, 141009, 141040, 141042) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
140962 : islangaligned(140935, 140412) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 10
=pc
Lfor.end10%1%d
=linename
line 11
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc8%1%d
=linename
line 3
=pc
Lfor.inc8%2%d
=linename
line 3
=pc
Lif.else%1%d
=linename
line 8
=pc
Lif.else%2%d
=linename
line 8
=pc
Lif.else%3%d
=linename
line 8
=pc
Lif.else%4%d
=linename
line 8
=pc
Lif.else%5%d
=linename
line 8
=pc
Lif.end%1%d
=linename
line 9
=pc
Lif.then%1%d
=linename
line 6
=pc
Lif.then%2%d
=linename
line 6
=pc
Lif.then%3%d
=linename
line 6
=pc
Lif.then%4%d
=linename
line 6
=pc
Lif.then%5%d
=linename
line 6
=pc
Lif.then%6%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 13
=pc
Lfor.body3%2%d
=column_name
 at column 11
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end10%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc8%1%d
=column_name
 at column 31
=pc
Lfor.inc8%2%d
=column_name
 at column 3
=pc
Lif.else%1%d
=column_name
 at column 16
=pc
Lif.else%2%d
=column_name
 at column 16
=pc
Lif.else%3%d
=column_name
 at column 16
=pc
Lif.else%4%d
=column_name
 at column 16
=pc
Lif.else%5%d
=column_name
 at column 13
=pc
Lif.end%1%d
=column_name
 at column 5
=pc
Lif.then%1%d
=column_name
 at column 16
=pc
Lif.then%2%d
=column_name
 at column 16
=pc
Lif.then%3%d
=column_name
 at column 16
=pc
Lif.then%4%d
=column_name
 at column 16
=pc
Lif.then%5%d
=column_name
 at column 13
=pc
Lif.then%6%d
=column_name
 at column 9
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 13)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 10
=pc
Lfor.end10%1%d
=line_and_column
line 11
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc8%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc8%2%d
=line_and_column
(line 3 at column 3)
=pc
Lif.else%1%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%2%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%3%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%4%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%5%d
=line_and_column
(line 8 at column 13)
=pc
Lif.end%1%d
=line_and_column
line 9
=pc
Lif.then%1%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%2%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%3%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%4%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%5%d
=line_and_column
(line 6 at column 13)
=pc
Lif.then%6%d
=line_and_column
(line 6 at column 9)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%n : L0%0%d : n'
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset : L0%0%d : (input.dst.llvm-%0 + input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset)
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx5]_4
input.dst.llvm-%add : Lif.then%6%bbentry : ret'
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset)
input.dst.llvm-%2 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx6]_4
input.dst.llvm-%3 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx7]_4
input.dst.llvm-%sub : Lif.else%6%bbentry : ret'
input.dst.llvm-%ret.2 : Lif.end%1%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%ret.2
input.dst.llvm-%inc9 : Lfor.inc8%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%arrayidx5 : L0%0%d : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.then : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx6 : L0%0%d : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset
input.dst.llvm-%arrayidx7 : L0%0%d : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.else : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : L0%0%d : input.dst.llvm-%ret.2.Lif.end%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d={L0%0%d}
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx5
=dst.llvm-%arrayidx5 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx5 val_scevb
=dst.llvm-%arrayidx5 val_scevb scev
=dst.llvm-%arrayidx5 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr done
=dst.llvm-%arrayidx5 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb
=dst.llvm-%arrayidx5 atuse_scevb scev
=dst.llvm-%arrayidx5 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx5 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atexit_scev
=dst.llvm-%arrayidx5 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx5 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%ret.2
=dst.llvm-%ret.2 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.2 val_scevb
=dst.llvm-%ret.2 val_scevb scev
=dst.llvm-%ret.2 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 val_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 val_scevb scev scev_expr done
=dst.llvm-%ret.2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb
=dst.llvm-%ret.2 atuse_scevb scev
=dst.llvm-%ret.2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 atuse_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atuse_scevb scev scev_expr done
=dst.llvm-%ret.2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atexit_scev
=dst.llvm-%ret.2 atexit_scev loop: L0%0%d
=dst.llvm-%ret.2 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.2 atexit_scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atexit_scev scev_expr done
=dst.llvm-%arrayidx6
=dst.llvm-%arrayidx6 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx6 val_scevb
=dst.llvm-%arrayidx6 val_scevb scev
=dst.llvm-%arrayidx6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr done
=dst.llvm-%arrayidx6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb
=dst.llvm-%arrayidx6 atuse_scevb scev
=dst.llvm-%arrayidx6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atexit_scev
=dst.llvm-%arrayidx6 atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atexit_scev scev_expr done
=dst.llvm-%2
=dst.llvm-%2 loop pc: Lfor.cond1%1%d
=dst.llvm-%2 val_scevb
=dst.llvm-%2 val_scevb scev
=dst.llvm-%2 val_scevb scev loop: L0%0%d
=dst.llvm-%2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%2 val_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 val_scevb scev scev_expr done
=dst.llvm-%2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb
=dst.llvm-%2 atuse_scevb scev
=dst.llvm-%2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%2 atuse_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atuse_scevb scev scev_expr done
=dst.llvm-%2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atexit_scev
=dst.llvm-%2 atexit_scev loop: L0%0%d
=dst.llvm-%2 atexit_scev scev_overflow_flag: 
=dst.llvm-%2 atexit_scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atexit_scev scev_expr done
=dst.llvm-%arrayidx7
=dst.llvm-%arrayidx7 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx7 val_scevb
=dst.llvm-%arrayidx7 val_scevb scev
=dst.llvm-%arrayidx7 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr done
=dst.llvm-%arrayidx7 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb
=dst.llvm-%arrayidx7 atuse_scevb scev
=dst.llvm-%arrayidx7 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx7 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atexit_scev
=dst.llvm-%arrayidx7 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx7 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
20 : input.dst.llvm-%2 : BV32
22 : scev_op_add(15, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr done
=dst.llvm-%3
=dst.llvm-%3 loop pc: Lfor.cond1%1%d
=dst.llvm-%3 val_scevb
=dst.llvm-%3 val_scevb scev
=dst.llvm-%3 val_scevb scev loop: L0%0%d
=dst.llvm-%3 val_scevb scev scev_overflow_flag: 
=dst.llvm-%3 val_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 val_scevb scev scev_expr done
=dst.llvm-%3 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb
=dst.llvm-%3 atuse_scevb scev
=dst.llvm-%3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%3 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%3 atuse_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atuse_scevb scev scev_expr done
=dst.llvm-%3 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atexit_scev
=dst.llvm-%3 atexit_scev loop: L0%0%d
=dst.llvm-%3 atexit_scev scev_overflow_flag: 
=dst.llvm-%3 atexit_scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atexit_scev scev_expr done
=dst.llvm-%sub
=dst.llvm-%sub loop pc: Lfor.cond1%1%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev
=dst.llvm-%sub atexit_scev loop: L0%0%d
=dst.llvm-%sub atexit_scev scev_overflow_flag: 
=dst.llvm-%sub atexit_scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
28 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc9
=dst.llvm-%inc9 loop pc: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb
=dst.llvm-%inc9 val_scevb scev
=dst.llvm-%inc9 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 val_scevb scev scev_expr done
=dst.llvm-%inc9 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb
=dst.llvm-%inc9 atuse_scevb scev
=dst.llvm-%inc9 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 atuse_scevb scev scev_expr done
=dst.llvm-%inc9 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atexit_scev
=dst.llvm-%inc9 atexit_scev loop: L0%0%d
=dst.llvm-%inc9 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc9 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
30 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc9 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.end10%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc8%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.else%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 21 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 22 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns for expr 54
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 54 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 54 edges done
=reaching defns for expr 55
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 55 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 55 edges done
=reaching defns for expr 56
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 56 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 56 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%add.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp4.Lfor.body3%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%3.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc9.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sub.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple6.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L4%6%bbentry_Lfor.cond%1%bbentry L4%18%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L4%6%bbentry_Lfor.cond%1%bbentry
L4%6%bbentry_Lfor.cond%1%bbentry => L4%18%bbentry_Lfor.cond1%1%bbentry
L4%18%bbentry_Lfor.cond1%1%bbentry => L4%6%bbentry_Lfor.cond%1%bbentry
L4%18%bbentry_Lfor.cond1%1%bbentry => L4%18%bbentry_Lfor.cond1%1%bbentry
L4%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Input: tfg-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L4%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L4%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L4%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L4%6%bbentry_Lfor.cond%1%bbentry => L4%18%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L4%6%bbentry to L4%18%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L4%6%bbentry#{0,0}=>L4%7%d#{0,0})*((L4%7%d#{0,0}=>L4%10%bbentry#{0,0})*(L4%10%bbentry#{0,0}=>L4%18%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L4%18%bbentry_Lfor.cond1%1%bbentry => L4%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L4%18%bbentry to L4%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L4%18%bbentry#{0,0}=>L4%19%d#{0,0})*((L4%19%d#{0,0}=>L4%20%bbentry#{0,0})*(L4%20%bbentry#{0,0}=>L4%6%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc8%1%d#{0,0})*(Lfor.inc8%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L4%18%bbentry_Lfor.cond1%1%bbentry => L4%18%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L4%18%bbentry to L4%18%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L4%18%bbentry#{0,0}=>L4%19%d#{0,0})*(((L4%19%d#{0,0}=>L4%20%bbentry#{0,0})*((L4%20%bbentry#{0,0}=>L4%6%bbentry#{0,0})*((L4%6%bbentry#{0,0}=>L4%7%d#{0,0})*((L4%7%d#{0,0}=>L4%10%bbentry#{0,0})*(L4%10%bbentry#{0,0}=>L4%18%bbentry#{1,0})))))+((L4%19%d#{0,0}=>L4%22%bbentry#{0,0})*((L4%22%bbentry#{0,0}=>L4%26%d#{0,0})*((((L4%26%d#{0,0}=>L4%27%bbentry#{0,0})*(L4%27%bbentry#{0,0}=>L4%31%bbentry#{0,0}))+((L4%26%d#{0,0}=>L4%28%bbentry#{0,0})*(L4%28%bbentry#{0,0}=>L4%31%bbentry#{0,0})))*(L4%31%bbentry#{0,0}=>L4%18%bbentry#{1,0}))))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*((Lfor.body3%1%d#{0,0}=>Lfor.body3%2%d#{0,0})*((((Lfor.body3%2%d#{0,0}=>Lif.else%1%d#{0,0})*(Lif.else%1%d#{0,0}=>Lif.end%1%bbentry#{0,0}))+((Lfor.body3%2%d#{0,0}=>Lif.then%1%d#{0,0})*(Lif.then%1%d#{0,0}=>Lif.end%1%bbentry#{0,0})))*(Lif.end%1%bbentry#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L4%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L4%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L4%6%bbentry#{0,0}=>L4%7%d#{0,0})*((L4%7%d#{0,0}=>L4%8%bbentry#{0,0})*(L4%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end10%1%d#{0,0})*(Lfor.end10%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.2
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A2.B4.C1.D2.E1
=Locs end
=Liveness in foo.A2.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L4%6%bbentry_Lfor.cond%1%bbentry

=live locs at L4%18%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A2.B4.C1.D2.E1

=Branch affecting variable locs in foo.A2.B4.C1.D2.E1

=Relevant Memlabels in foo.A2.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A2.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A2.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 ef30c47a3bddbf5151755dcd2e1ec913
=input.spec-%var-x-1
1 : Lambda45 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda48 : BV:32
11 : Lambda46 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda47 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1104073823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1104073824; 1104073827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1104073828; 3820985019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3820985020; 3820985023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3820985024; 4223643811 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4223643812; 4223643815 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4223643816; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1104073824 { 0x41ced460 +1.61585617e4 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3820985020 { 0xe3bf9abc -473982276 -1.49690961e72 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4223643812 { 0xfbbfb0a4 -71323484 -1.49757814e120 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda45 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda48 : BV:32
11 : Lambda46 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda47 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4223643812 { 0xfbbfb0a4 -71323484 -1.49757814e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4223643815 { 0xfbbfb0a7 -71323481 -1.49757850e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1104073824 { 0x41ced460 +1.61585617e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1104073827 { 0x41ced463 +1.61585652e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3820985020 { 0xe3bf9abc -473982276 -1.49690961e72 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3820985023 { 0xe3bf9abf -473982273 -1.49690997e72 } : BV:32
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 3029df3c3daafe9cbc6da6332deacaad
=input.spec-%var-x-1
1 : Lambda71 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda74 : BV:32
11 : Lambda72 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda73 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 139 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 140; 143 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 144; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 140 { 0x8c +1.1668e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda80 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda83 : BV:32
11 : Lambda81 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda82 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 140 { 0x8c +1.1668e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 143 { 0x8f +1.1704e129 } : BV:32
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce25.num_edges_traversed2
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce25 dc46b597ebec6c6d4ae1befdbd74c0
=input.spec-%var-x-1
1 : Lambda128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda131 : BV:32
18 : Lambda129 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda130 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 814661 ] -> 0, [ 814662; 814662 ] -> 1, [ 814663; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 605447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 605448; 605451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 605452; 814659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 814660; 814663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 814664; 933383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 933384; 933387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 933388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 605448 { 0x93d08 +1.7217502e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 933384 { 0xe3e08 +1.11126804e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 814660 { 0xc6e44 +1.9711503e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda131 : BV:32
18 : Lambda129 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda130 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda5247 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda5248 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda5249 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5250 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda5251 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5252 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda111 : BV:32
2 : Lambda112 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda113 : BV:32
2 : Lambda114 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 814660 { 0xc6e44 +1.9711503e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 814663 { 0xc6e47 +1.9711539e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 605448 { 0x93d08 +1.7217502e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 605451 { 0x93d0b +1.7217538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 933384 { 0xe3e08 +1.11126804e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 933387 { 0xe3e0b +1.11126840e129 } : BV:32
=counter_example.random_seed
1269331065
=counter_example_end
=global nodece 2 num_edges_traversed 2
=global nodece 2 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce36.num_edges_traversed2
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce36 b43daf8f9eb91dd8d42cdca98fb5b30
=input.spec-%var-x-1
1 : Lambda186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda189 : BV:32
18 : Lambda187 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda188 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1819934699 ] -> 0, [ 1819934700; 1819934700 ] -> 2, [ 1819934701; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 502787959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 502787960; 502787963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 502787964; 1811775471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1811775472; 1811775475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1811775476; 1819934699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1819934700; 1819934703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1819934704; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 502787960 { 0x1df7ef78 +1.93699550e188 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1811775472 { 0x6bfd7ff0 +1.98046684e88 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 813103484 { 0x3076f97c +1.92948865e225 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda189 : BV:32
18 : Lambda187 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda188 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda5239 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda5240 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
13 : eq(11, 12) : BOOL
14 : 2 { 0x2 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda5241 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5242 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda5243 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5244 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
11 : eq(9, 10) : BOOL
12 : 2 { 0x2 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda156 : BV:32
2 : Lambda157 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda158 : BV:32
2 : Lambda159 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 813103484 { 0x3076f97c +1.92948865e225 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1819934703 { 0x6c79ffef +1.95312297e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 502787960 { 0x1df7ef78 +1.93699550e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 502787963 { 0x1df7ef7b +1.93699586e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1811775472 { 0x6bfd7ff0 +1.98046684e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1811775475 { 0x6bfd7ff3 +1.98046720e88 } : BV:32
=counter_example.random_seed
897371356
=counter_example_end
=global nodece 3 num_edges_traversed 2
=global nodece 3 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce58.num_edges_traversed2
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce58 2ee81e0438934f43715a2dab8f72c
=input.spec-%var-x-1
1 : Lambda266 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda269 : BV:32
18 : Lambda267 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda268 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
30 : eq(25, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 28, 31) : BV:8
33 : ite(27, 28, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 24, 2) : BV:32
36 : eq(35, 26) : BOOL
37 : eq(35, 29) : BOOL
38 : ite(37, 28, 31) : BV:8
39 : ite(36, 28, 38) : BV:8
40 : 1 { 0x1 +1.11e129 } : BV:32
41 : bvadd(40, 24, 2) : BV:32
42 : eq(41, 26) : BOOL
43 : eq(41, 29) : BOOL
44 : ite(43, 28, 31) : BV:8
45 : ite(42, 28, 44) : BV:8
46 : bvadd(24, 2) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : ite(48, 28, 31) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : bvconcat(33, 39, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : ite(54, 28, 31) : BV:8
56 : ite(53, 28, 55) : BV:8
57 : bvadd(34, 23, 51) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : ite(59, 28, 31) : BV:8
61 : ite(58, 28, 60) : BV:8
62 : bvadd(40, 23, 51) : BV:32
63 : eq(62, 26) : BOOL
64 : eq(62, 29) : BOOL
65 : ite(64, 28, 31) : BV:8
66 : ite(63, 28, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 26) : BOOL
69 : eq(67, 29) : BOOL
70 : ite(69, 28, 31) : BV:8
71 : ite(68, 28, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : lambda(17, 74) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
76 : map(16, 75) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
77 : sym_const(76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 257 { 0x101 +1.3063e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2018390119 ] -> 0, [ 2018390120; 2018390121 ] -> 1, [ 2018390122; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2018390119 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2018390120; 2018390123 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2018390124; 2916966963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2916966964; 2916966967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2916966968; 3672776947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3672776948; 3672776951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3672776952; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2916966964 { 0xaddd6234 -1378000332 -1.72955942e220 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3672776948 { 0xdaea20f4 -622190348 -1.82913064e54 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2037241556 { 0x796dd6d4 +1.85811853e115 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda266 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda269 : BV:32
18 : Lambda267 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda268 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
30 : eq(25, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 28, 31) : BV:8
33 : ite(27, 28, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 24, 2) : BV:32
36 : eq(35, 26) : BOOL
37 : eq(35, 29) : BOOL
38 : ite(37, 28, 31) : BV:8
39 : ite(36, 28, 38) : BV:8
40 : 1 { 0x1 +1.11e129 } : BV:32
41 : bvadd(40, 24, 2) : BV:32
42 : eq(41, 26) : BOOL
43 : eq(41, 29) : BOOL
44 : ite(43, 28, 31) : BV:8
45 : ite(42, 28, 44) : BV:8
46 : bvadd(24, 2) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : ite(48, 28, 31) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : bvconcat(33, 39, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : ite(54, 28, 31) : BV:8
56 : ite(53, 28, 55) : BV:8
57 : bvadd(34, 23, 51) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : ite(59, 28, 31) : BV:8
61 : ite(58, 28, 60) : BV:8
62 : bvadd(40, 23, 51) : BV:32
63 : eq(62, 26) : BOOL
64 : eq(62, 29) : BOOL
65 : ite(64, 28, 31) : BV:8
66 : ite(63, 28, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 26) : BOOL
69 : eq(67, 29) : BOOL
70 : ite(69, 28, 31) : BV:8
71 : ite(68, 28, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : lambda(17, 74) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
76 : map(16, 75) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
77 : sym_const(76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda5231 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda5232 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
16 : eq(11, 15) : BOOL
17 : 0 { 0x0 } : BV:8
18 : ite(16, 14, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 15) : BOOL
24 : ite(23, 14, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : bvadd(1, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : ite(28, 14, 17) : BV:8
30 : ite(27, 14, 29) : BV:8
31 : bvadd(9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 15) : BOOL
34 : ite(33, 14, 17) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : lambda(6, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(5, 37) : MAP[BV:32 -> BV:32]
39 : sum(1, 2, 38) : SUM[UNIT,MAP[BV:32 -> BV:32]]
40 : sym_const(39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda5233 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5234 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
14 : eq(9, 13) : BOOL
15 : 0 { 0x0 } : BV:8
16 : ite(14, 12, 15) : BV:8
17 : ite(11, 12, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 7, 8) : BV:32
20 : eq(19, 10) : BOOL
21 : eq(19, 13) : BOOL
22 : ite(21, 12, 15) : BV:8
23 : ite(20, 12, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : ite(27, 12, 15) : BV:8
29 : ite(26, 12, 28) : BV:8
30 : bvadd(7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 13) : BOOL
33 : ite(32, 12, 15) : BV:8
34 : ite(31, 12, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : lambda(4, 35) : FUNCTION[BV:32 -> BV:32]
37 : map(3, 36) : MAP[BV:32 -> BV:32]
38 : sym_const(37) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda5235 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5236 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
14 : eq(9, 13) : BOOL
15 : 0 { 0x0 } : BV:8
16 : ite(14, 12, 15) : BV:8
17 : ite(11, 12, 16) : BV:8
18 : 2 { 0x2 +1.23e129 } : BV:32
19 : bvadd(18, 7, 8) : BV:32
20 : eq(19, 10) : BOOL
21 : eq(19, 13) : BOOL
22 : ite(21, 12, 15) : BV:8
23 : ite(20, 12, 22) : BV:8
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : ite(27, 12, 15) : BV:8
29 : ite(26, 12, 28) : BV:8
30 : bvadd(7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 13) : BOOL
33 : ite(32, 12, 15) : BV:8
34 : ite(31, 12, 33) : BV:8
35 : bvconcat(17, 23, 29, 34) : BV:32
36 : lambda(4, 35) : FUNCTION[BV:32 -> BV:32]
37 : map(3, 36) : MAP[BV:32 -> BV:32]
38 : sym_const(37) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda236 : BV:32
2 : Lambda237 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda238 : BV:32
2 : Lambda239 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2037241556 { 0x796dd6d4 +1.85811853e115 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2018390123 { 0x784e306b +1.61085259e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2916966964 { 0xaddd6234 -1378000332 -1.72955942e220 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2916966967 { 0xaddd6237 -1378000329 -1.72955977e220 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3672776948 { 0xdaea20f4 -622190348 -1.82913064e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3672776951 { 0xdaea20f7 -622190345 -1.82913100e54 } : BV:32
=counter_example.random_seed
4141140507
=counter_example_end
=global nodece 4 num_edges_traversed 2
=global nodece 4 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce80.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce80 97e9f5bea67cb62ae39a9ea3262d3bcf
=input.spec-%var-x-1
1 : Lambda342 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda345 : BV:32
11 : Lambda343 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda344 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4103723283 ] -> 0, [ 4103723284; 4103723284 ] -> 16, [ 4103723285; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1959502879 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1959502880; 1959502883 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1959502884; 3236277211 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3236277212; 3236277215 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3236277216; 4103723283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4103723284; 4103723287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4103723288; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1959502880 { 0x74cba420 +1.59094619e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3236277212 { 0xc0e5abdc -1058690084 -1.79430723e2 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 465042699 { 0x1bb7fd0b +1.43740975e184 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda342 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda345 : BV:32
11 : Lambda343 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda344 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda314 : BV:32
2 : Lambda315 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda316 : BV:32
2 : Lambda317 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 465042699 { 0x1bb7fd0b +1.43740975e184 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3236277212 { 0xc0e5abdc -1058690084 -1.79430723e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3236277215 { 0xc0e5abdf -1058690081 -1.79430758e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4103723287 { 0xf499d917 -191244009 -1.20193755e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1959502880 { 0x74cba420 +1.59094619e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1959502883 { 0x74cba423 +1.59094655e106 } : BV:32
=counter_example.random_seed
3507222290
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3v487.ce81.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3v487.ce81 3b6320083d52e7146ffb7cfcfd47e
=input.spec-%var-x-1
1 : Lambda364 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda367 : BV:32
11 : Lambda365 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda366 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 262148 { 0x40004 +1.3125047e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
24 : eq(19, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : ite(24, 22, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : eq(29, 23) : BOOL
32 : ite(31, 22, 25) : BV:8
33 : ite(30, 22, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : ite(37, 22, 25) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : bvadd(17, 18) : BV:32
41 : eq(40, 20) : BOOL
42 : eq(40, 23) : BOOL
43 : ite(42, 22, 25) : BV:8
44 : ite(41, 22, 43) : BV:8
45 : bvconcat(27, 33, 39, 44) : BV:32
46 : bvadd(14, 16, 45) : BV:32
47 : eq(46, 20) : BOOL
48 : eq(46, 23) : BOOL
49 : ite(48, 22, 25) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : bvadd(28, 16, 45) : BV:32
52 : eq(51, 20) : BOOL
53 : eq(51, 23) : BOOL
54 : ite(53, 22, 25) : BV:8
55 : ite(52, 22, 54) : BV:8
56 : bvadd(34, 16, 45) : BV:32
57 : eq(56, 20) : BOOL
58 : eq(56, 23) : BOOL
59 : ite(58, 22, 25) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : bvadd(16, 45) : BV:32
62 : eq(61, 20) : BOOL
63 : eq(61, 23) : BOOL
64 : ite(63, 22, 25) : BV:8
65 : ite(62, 22, 64) : BV:8
66 : bvconcat(50, 55, 60, 65) : BV:32
67 : lambda(13, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(12, 67) : MAP[BV:32 -> BV:32]
69 : lambda(10, 68) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
70 : map(9, 69) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
71 : sym_const(70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 262148 { 0x40004 +1.3125047e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1319591 ] -> 0, [ 1319592; 1319592 ] -> 4, [ 1319593; 1319593 ] -> 0, [ 1319594; 1319594 ] -> 4, [ 1319595; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 534827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 534828; 534831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 534832; 1319591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1319592; 1319595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1319596; 4194315 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194316; 4194319 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194320; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194316 { 0x40000c +1.50000143e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 534828 { 0x8292c +1.6375646e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1165676134 { 0x457ace66 +1.95942378e11 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda364 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda367 : BV:32
11 : Lambda365 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda366 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 262148 { 0x40004 +1.3125047e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
24 : eq(19, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : ite(24, 22, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : eq(29, 23) : BOOL
32 : ite(31, 22, 25) : BV:8
33 : ite(30, 22, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : ite(37, 22, 25) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : bvadd(17, 18) : BV:32
41 : eq(40, 20) : BOOL
42 : eq(40, 23) : BOOL
43 : ite(42, 22, 25) : BV:8
44 : ite(41, 22, 43) : BV:8
45 : bvconcat(27, 33, 39, 44) : BV:32
46 : bvadd(14, 16, 45) : BV:32
47 : eq(46, 20) : BOOL
48 : eq(46, 23) : BOOL
49 : ite(48, 22, 25) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : bvadd(28, 16, 45) : BV:32
52 : eq(51, 20) : BOOL
53 : eq(51, 23) : BOOL
54 : ite(53, 22, 25) : BV:8
55 : ite(52, 22, 54) : BV:8
56 : bvadd(34, 16, 45) : BV:32
57 : eq(56, 20) : BOOL
58 : eq(56, 23) : BOOL
59 : ite(58, 22, 25) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : bvadd(16, 45) : BV:32
62 : eq(61, 20) : BOOL
63 : eq(61, 23) : BOOL
64 : ite(63, 22, 25) : BV:8
65 : ite(62, 22, 64) : BV:8
66 : bvconcat(50, 55, 60, 65) : BV:32
67 : lambda(13, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(12, 67) : MAP[BV:32 -> BV:32]
69 : lambda(10, 68) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
70 : map(9, 69) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
71 : sym_const(70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda325 : BV:32
2 : Lambda326 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 262148 { 0x40004 +1.3125047e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 4 { 0x4 } : BV:8
12 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda327 : BV:32
2 : Lambda328 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 262148 { 0x40004 +1.3125047e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 4 { 0x4 } : BV:8
12 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1165676134 { 0x457ace66 +1.95942378e11 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 534828 { 0x8292c +1.6375646e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 534831 { 0x8292f +1.6375682e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1319595 { 0x1422ab +1.15730798e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194316 { 0x40000c +1.50000143e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194319 { 0x40000f +1.50000178e129 } : BV:32
=counter_example.random_seed
845577775
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3v487.ce102.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3v487.ce102 dbb8e5104a995efeaeb3e6eb6d65d7a
=input.spec-%var-x-1
1 : Lambda417 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda420 : BV:32
11 : Lambda418 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda419 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435594 ] -> 0, [ 268435595; 268435595 ] -> 128, [ 268435596; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2096959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2096960; 2096963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2096964; 2097219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097220; 2097223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097224; 268435591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435592; 268435595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 268435596; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097220 { 0x200044 +1.25000810e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 268435592 { 0x10000088 +1.1621e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2096960 { 0x1fff40 +1.24997711e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 304110632 { 0x12205c28 +1.25281238e165 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda417 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda420 : BV:32
11 : Lambda418 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda419 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda400 : BV:32
2 : Lambda401 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda402 : BV:32
2 : Lambda403 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 304110632 { 0x12205c28 +1.25281238e165 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2096960 { 0x1fff40 +1.24997711e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2096963 { 0x1fff43 +1.24997746e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097220 { 0x200044 +1.25000810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097223 { 0x200047 +1.25000846e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 268435592 { 0x10000088 +1.1621e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
=counter_example.random_seed
3425201161
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce113.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce113 83c67d34945d29674f11bc1c11684c
=input.spec-%var-x-1
1 : Lambda460 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda463 : BV:32
11 : Lambda461 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda462 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435594 ] -> 0, [ 268435595; 268435595 ] -> 1, [ 268435596; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2096959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2096960; 2096963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2096964; 2097219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097220; 2097223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097224; 268435591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435592; 268435595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 268435596; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097220 { 0x200044 +1.25000810e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 268435592 { 0x10000088 +1.1621e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2096960 { 0x1fff40 +1.24997711e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda460 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda463 : BV:32
11 : Lambda461 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda462 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda443 : BV:32
2 : Lambda444 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda445 : BV:32
2 : Lambda446 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2096960 { 0x1fff40 +1.24997711e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2096963 { 0x1fff43 +1.24997746e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097220 { 0x200044 +1.25000810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097223 { 0x200047 +1.25000846e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 268435592 { 0x10000088 +1.1621e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
=counter_example.random_seed
867572303
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3v487.ce124.num_edges_traversed2
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce124 6261d7c4fdd4bf1a42b07f8c66ef9358
=input.spec-%var-x-1
1 : Lambda519 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269488143 { 0x1010100f +1.12549006e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269488144 { 0x10101010 +1.12549018e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda522 : BV:32
18 : Lambda520 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 269488145 { 0x10101011 +1.12549030e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 269488128 { 0x10101000 +1.12548828e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 269488129 { 0x10101001 +1.12548840e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 269488130 { 0x10101002 +1.12548851e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda521 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
65 : eq(60, 64) : BOOL
66 : 8 { 0x8 +1.95e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 210248785 { 0xc882451 +1.6360828e154 } : BV:32
69 : eq(60, 68) : BOOL
70 : 5 { 0x5 +1.59e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 210248787 { 0xc882453 +1.6360852e154 } : BV:32
75 : eq(60, 74) : BOOL
76 : eq(60, 2) : BOOL
77 : 5 { 0x5 } : BV:8
78 : 210248786 { 0xc882452 +1.6360840e154 } : BV:32
79 : eq(60, 78) : BOOL
80 : 7 { 0x7 +1.83e129 } : BV:32
81 : eq(60, 80) : BOOL
82 : eq(60, 56) : BOOL
83 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
84 : eq(60, 83) : BOOL
85 : 1 { 0x1 } : BV:8
86 : 6 { 0x6 +1.71e129 } : BV:32
87 : eq(60, 86) : BOOL
88 : 16 { 0x10 } : BV:8
89 : ite(87, 63, 88) : BV:8
90 : ite(84, 85, 89) : BV:8
91 : ite(82, 63, 90) : BV:8
92 : ite(81, 63, 91) : BV:8
93 : ite(79, 63, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(75, 63, 94) : BV:8
96 : ite(73, 63, 95) : BV:8
97 : ite(71, 63, 96) : BV:8
98 : ite(69, 63, 97) : BV:8
99 : ite(67, 63, 98) : BV:8
100 : ite(65, 63, 99) : BV:8
101 : ite(62, 63, 100) : BV:8
102 : bvadd(61, 59, 2) : BV:32
103 : eq(102, 61) : BOOL
104 : eq(102, 64) : BOOL
105 : eq(102, 66) : BOOL
106 : eq(102, 68) : BOOL
107 : eq(102, 70) : BOOL
108 : eq(102, 72) : BOOL
109 : eq(102, 74) : BOOL
110 : eq(102, 2) : BOOL
111 : eq(102, 78) : BOOL
112 : eq(102, 80) : BOOL
113 : eq(102, 56) : BOOL
114 : eq(102, 83) : BOOL
115 : eq(102, 86) : BOOL
116 : ite(115, 63, 88) : BV:8
117 : ite(114, 85, 116) : BV:8
118 : ite(113, 63, 117) : BV:8
119 : ite(112, 63, 118) : BV:8
120 : ite(111, 63, 119) : BV:8
121 : ite(110, 77, 120) : BV:8
122 : ite(109, 63, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : ite(107, 63, 123) : BV:8
125 : ite(106, 63, 124) : BV:8
126 : ite(105, 63, 125) : BV:8
127 : ite(104, 63, 126) : BV:8
128 : ite(103, 63, 127) : BV:8
129 : bvadd(72, 59, 2) : BV:32
130 : eq(129, 61) : BOOL
131 : eq(129, 64) : BOOL
132 : eq(129, 66) : BOOL
133 : eq(129, 68) : BOOL
134 : eq(129, 70) : BOOL
135 : eq(129, 72) : BOOL
136 : eq(129, 74) : BOOL
137 : eq(129, 2) : BOOL
138 : eq(129, 78) : BOOL
139 : eq(129, 80) : BOOL
140 : eq(129, 56) : BOOL
141 : eq(129, 83) : BOOL
142 : eq(129, 86) : BOOL
143 : ite(142, 63, 88) : BV:8
144 : ite(141, 85, 143) : BV:8
145 : ite(140, 63, 144) : BV:8
146 : ite(139, 63, 145) : BV:8
147 : ite(138, 63, 146) : BV:8
148 : ite(137, 77, 147) : BV:8
149 : ite(136, 63, 148) : BV:8
150 : ite(135, 63, 149) : BV:8
151 : ite(134, 63, 150) : BV:8
152 : ite(133, 63, 151) : BV:8
153 : ite(132, 63, 152) : BV:8
154 : ite(131, 63, 153) : BV:8
155 : ite(130, 63, 154) : BV:8
156 : bvadd(59, 2) : BV:32
157 : eq(156, 61) : BOOL
158 : eq(156, 64) : BOOL
159 : eq(156, 66) : BOOL
160 : eq(156, 68) : BOOL
161 : eq(156, 70) : BOOL
162 : eq(156, 72) : BOOL
163 : eq(156, 74) : BOOL
164 : eq(156, 2) : BOOL
165 : eq(156, 78) : BOOL
166 : eq(156, 80) : BOOL
167 : eq(156, 56) : BOOL
168 : eq(156, 83) : BOOL
169 : eq(156, 86) : BOOL
170 : ite(169, 63, 88) : BV:8
171 : ite(168, 85, 170) : BV:8
172 : ite(167, 63, 171) : BV:8
173 : ite(166, 63, 172) : BV:8
174 : ite(165, 63, 173) : BV:8
175 : ite(164, 77, 174) : BV:8
176 : ite(163, 63, 175) : BV:8
177 : ite(162, 63, 176) : BV:8
178 : ite(161, 63, 177) : BV:8
179 : ite(160, 63, 178) : BV:8
180 : ite(159, 63, 179) : BV:8
181 : ite(158, 63, 180) : BV:8
182 : ite(157, 63, 181) : BV:8
183 : bvconcat(101, 128, 155, 182) : BV:32
184 : bvadd(56, 58, 183) : BV:32
185 : eq(184, 61) : BOOL
186 : eq(184, 64) : BOOL
187 : eq(184, 66) : BOOL
188 : eq(184, 68) : BOOL
189 : eq(184, 70) : BOOL
190 : eq(184, 72) : BOOL
191 : eq(184, 74) : BOOL
192 : eq(184, 2) : BOOL
193 : eq(184, 78) : BOOL
194 : eq(184, 80) : BOOL
195 : eq(184, 56) : BOOL
196 : eq(184, 83) : BOOL
197 : eq(184, 86) : BOOL
198 : ite(197, 63, 88) : BV:8
199 : ite(196, 85, 198) : BV:8
200 : ite(195, 63, 199) : BV:8
201 : ite(194, 63, 200) : BV:8
202 : ite(193, 63, 201) : BV:8
203 : ite(192, 77, 202) : BV:8
204 : ite(191, 63, 203) : BV:8
205 : ite(190, 63, 204) : BV:8
206 : ite(189, 63, 205) : BV:8
207 : ite(188, 63, 206) : BV:8
208 : ite(187, 63, 207) : BV:8
209 : ite(186, 63, 208) : BV:8
210 : ite(185, 63, 209) : BV:8
211 : bvadd(61, 58, 183) : BV:32
212 : eq(211, 61) : BOOL
213 : eq(211, 64) : BOOL
214 : eq(211, 66) : BOOL
215 : eq(211, 68) : BOOL
216 : eq(211, 70) : BOOL
217 : eq(211, 72) : BOOL
218 : eq(211, 74) : BOOL
219 : eq(211, 2) : BOOL
220 : eq(211, 78) : BOOL
221 : eq(211, 80) : BOOL
222 : eq(211, 56) : BOOL
223 : eq(211, 83) : BOOL
224 : eq(211, 86) : BOOL
225 : ite(224, 63, 88) : BV:8
226 : ite(223, 85, 225) : BV:8
227 : ite(222, 63, 226) : BV:8
228 : ite(221, 63, 227) : BV:8
229 : ite(220, 63, 228) : BV:8
230 : ite(219, 77, 229) : BV:8
231 : ite(218, 63, 230) : BV:8
232 : ite(217, 63, 231) : BV:8
233 : ite(216, 63, 232) : BV:8
234 : ite(215, 63, 233) : BV:8
235 : ite(214, 63, 234) : BV:8
236 : ite(213, 63, 235) : BV:8
237 : ite(212, 63, 236) : BV:8
238 : bvadd(72, 58, 183) : BV:32
239 : eq(238, 61) : BOOL
240 : eq(238, 64) : BOOL
241 : eq(238, 66) : BOOL
242 : eq(238, 68) : BOOL
243 : eq(238, 70) : BOOL
244 : eq(238, 72) : BOOL
245 : eq(238, 74) : BOOL
246 : eq(238, 2) : BOOL
247 : eq(238, 78) : BOOL
248 : eq(238, 80) : BOOL
249 : eq(238, 56) : BOOL
250 : eq(238, 83) : BOOL
251 : eq(238, 86) : BOOL
252 : ite(251, 63, 88) : BV:8
253 : ite(250, 85, 252) : BV:8
254 : ite(249, 63, 253) : BV:8
255 : ite(248, 63, 254) : BV:8
256 : ite(247, 63, 255) : BV:8
257 : ite(246, 77, 256) : BV:8
258 : ite(245, 63, 257) : BV:8
259 : ite(244, 63, 258) : BV:8
260 : ite(243, 63, 259) : BV:8
261 : ite(242, 63, 260) : BV:8
262 : ite(241, 63, 261) : BV:8
263 : ite(240, 63, 262) : BV:8
264 : ite(239, 63, 263) : BV:8
265 : bvadd(58, 183) : BV:32
266 : eq(265, 61) : BOOL
267 : eq(265, 64) : BOOL
268 : eq(265, 66) : BOOL
269 : eq(265, 68) : BOOL
270 : eq(265, 70) : BOOL
271 : eq(265, 72) : BOOL
272 : eq(265, 74) : BOOL
273 : eq(265, 2) : BOOL
274 : eq(265, 78) : BOOL
275 : eq(265, 80) : BOOL
276 : eq(265, 56) : BOOL
277 : eq(265, 83) : BOOL
278 : eq(265, 86) : BOOL
279 : ite(278, 63, 88) : BV:8
280 : ite(277, 85, 279) : BV:8
281 : ite(276, 63, 280) : BV:8
282 : ite(275, 63, 281) : BV:8
283 : ite(274, 63, 282) : BV:8
284 : ite(273, 77, 283) : BV:8
285 : ite(272, 63, 284) : BV:8
286 : ite(271, 63, 285) : BV:8
287 : ite(270, 63, 286) : BV:8
288 : ite(269, 63, 287) : BV:8
289 : ite(268, 63, 288) : BV:8
290 : ite(267, 63, 289) : BV:8
291 : ite(266, 63, 290) : BV:8
292 : bvconcat(210, 237, 264, 291) : BV:32
293 : ite(55, 2, 292) : BV:32
294 : lambda(52, 293) : FUNCTION[BV:32 -> BV:32]
295 : map(51, 294) : MAP[BV:32 -> BV:32]
296 : lambda(17, 295) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
297 : map(16, 296) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
298 : sym_const(297) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 269488144 { 0x10101010 +1.12549018e161 } : BV:32
=input.dst.llvm-%m
1 : 269488129 { 0x10101001 +1.12548840e161 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 5, [ 1; 3 ] -> 0, [ 4; 4 ] -> 16, [ 5; 8 ] -> 0, [ 9; 210248783 ] -> 16, [ 210248784; 210248787 ] -> 0, [ 210248788; 302780935 ] -> 16, [ 302780936; 302780936 ] -> 1, [ 302780937; 4294967295 ] -> 16, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 35459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 35460; 35463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 35464; 210248783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 210248784; 210248787 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 210248788; 302780935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 302780936; 302780939 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 302780940; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 35460 { 0x8a84 +1.422716e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 767520291 { 0x2dbf6e23 +1.49554860e220 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda519 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 269488143 { 0x1010100f +1.12549006e161 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 269488144 { 0x10101010 +1.12549018e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda522 : BV:32
18 : Lambda520 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 269488145 { 0x10101011 +1.12549030e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 269488128 { 0x10101000 +1.12548828e161 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 269488129 { 0x10101001 +1.12548840e161 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 269488130 { 0x10101002 +1.12548851e161 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda521 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 0 { 0x0 } : BV:8
64 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
65 : eq(60, 64) : BOOL
66 : 8 { 0x8 +1.95e129 } : BV:32
67 : eq(60, 66) : BOOL
68 : 210248785 { 0xc882451 +1.6360828e154 } : BV:32
69 : eq(60, 68) : BOOL
70 : 5 { 0x5 +1.59e129 } : BV:32
71 : eq(60, 70) : BOOL
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(60, 72) : BOOL
74 : 210248787 { 0xc882453 +1.6360852e154 } : BV:32
75 : eq(60, 74) : BOOL
76 : eq(60, 2) : BOOL
77 : 5 { 0x5 } : BV:8
78 : 210248786 { 0xc882452 +1.6360840e154 } : BV:32
79 : eq(60, 78) : BOOL
80 : 7 { 0x7 +1.83e129 } : BV:32
81 : eq(60, 80) : BOOL
82 : eq(60, 56) : BOOL
83 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
84 : eq(60, 83) : BOOL
85 : 1 { 0x1 } : BV:8
86 : 6 { 0x6 +1.71e129 } : BV:32
87 : eq(60, 86) : BOOL
88 : 16 { 0x10 } : BV:8
89 : ite(87, 63, 88) : BV:8
90 : ite(84, 85, 89) : BV:8
91 : ite(82, 63, 90) : BV:8
92 : ite(81, 63, 91) : BV:8
93 : ite(79, 63, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(75, 63, 94) : BV:8
96 : ite(73, 63, 95) : BV:8
97 : ite(71, 63, 96) : BV:8
98 : ite(69, 63, 97) : BV:8
99 : ite(67, 63, 98) : BV:8
100 : ite(65, 63, 99) : BV:8
101 : ite(62, 63, 100) : BV:8
102 : bvadd(61, 59, 2) : BV:32
103 : eq(102, 61) : BOOL
104 : eq(102, 64) : BOOL
105 : eq(102, 66) : BOOL
106 : eq(102, 68) : BOOL
107 : eq(102, 70) : BOOL
108 : eq(102, 72) : BOOL
109 : eq(102, 74) : BOOL
110 : eq(102, 2) : BOOL
111 : eq(102, 78) : BOOL
112 : eq(102, 80) : BOOL
113 : eq(102, 56) : BOOL
114 : eq(102, 83) : BOOL
115 : eq(102, 86) : BOOL
116 : ite(115, 63, 88) : BV:8
117 : ite(114, 85, 116) : BV:8
118 : ite(113, 63, 117) : BV:8
119 : ite(112, 63, 118) : BV:8
120 : ite(111, 63, 119) : BV:8
121 : ite(110, 77, 120) : BV:8
122 : ite(109, 63, 121) : BV:8
123 : ite(108, 63, 122) : BV:8
124 : ite(107, 63, 123) : BV:8
125 : ite(106, 63, 124) : BV:8
126 : ite(105, 63, 125) : BV:8
127 : ite(104, 63, 126) : BV:8
128 : ite(103, 63, 127) : BV:8
129 : bvadd(72, 59, 2) : BV:32
130 : eq(129, 61) : BOOL
131 : eq(129, 64) : BOOL
132 : eq(129, 66) : BOOL
133 : eq(129, 68) : BOOL
134 : eq(129, 70) : BOOL
135 : eq(129, 72) : BOOL
136 : eq(129, 74) : BOOL
137 : eq(129, 2) : BOOL
138 : eq(129, 78) : BOOL
139 : eq(129, 80) : BOOL
140 : eq(129, 56) : BOOL
141 : eq(129, 83) : BOOL
142 : eq(129, 86) : BOOL
143 : ite(142, 63, 88) : BV:8
144 : ite(141, 85, 143) : BV:8
145 : ite(140, 63, 144) : BV:8
146 : ite(139, 63, 145) : BV:8
147 : ite(138, 63, 146) : BV:8
148 : ite(137, 77, 147) : BV:8
149 : ite(136, 63, 148) : BV:8
150 : ite(135, 63, 149) : BV:8
151 : ite(134, 63, 150) : BV:8
152 : ite(133, 63, 151) : BV:8
153 : ite(132, 63, 152) : BV:8
154 : ite(131, 63, 153) : BV:8
155 : ite(130, 63, 154) : BV:8
156 : bvadd(59, 2) : BV:32
157 : eq(156, 61) : BOOL
158 : eq(156, 64) : BOOL
159 : eq(156, 66) : BOOL
160 : eq(156, 68) : BOOL
161 : eq(156, 70) : BOOL
162 : eq(156, 72) : BOOL
163 : eq(156, 74) : BOOL
164 : eq(156, 2) : BOOL
165 : eq(156, 78) : BOOL
166 : eq(156, 80) : BOOL
167 : eq(156, 56) : BOOL
168 : eq(156, 83) : BOOL
169 : eq(156, 86) : BOOL
170 : ite(169, 63, 88) : BV:8
171 : ite(168, 85, 170) : BV:8
172 : ite(167, 63, 171) : BV:8
173 : ite(166, 63, 172) : BV:8
174 : ite(165, 63, 173) : BV:8
175 : ite(164, 77, 174) : BV:8
176 : ite(163, 63, 175) : BV:8
177 : ite(162, 63, 176) : BV:8
178 : ite(161, 63, 177) : BV:8
179 : ite(160, 63, 178) : BV:8
180 : ite(159, 63, 179) : BV:8
181 : ite(158, 63, 180) : BV:8
182 : ite(157, 63, 181) : BV:8
183 : bvconcat(101, 128, 155, 182) : BV:32
184 : bvadd(56, 58, 183) : BV:32
185 : eq(184, 61) : BOOL
186 : eq(184, 64) : BOOL
187 : eq(184, 66) : BOOL
188 : eq(184, 68) : BOOL
189 : eq(184, 70) : BOOL
190 : eq(184, 72) : BOOL
191 : eq(184, 74) : BOOL
192 : eq(184, 2) : BOOL
193 : eq(184, 78) : BOOL
194 : eq(184, 80) : BOOL
195 : eq(184, 56) : BOOL
196 : eq(184, 83) : BOOL
197 : eq(184, 86) : BOOL
198 : ite(197, 63, 88) : BV:8
199 : ite(196, 85, 198) : BV:8
200 : ite(195, 63, 199) : BV:8
201 : ite(194, 63, 200) : BV:8
202 : ite(193, 63, 201) : BV:8
203 : ite(192, 77, 202) : BV:8
204 : ite(191, 63, 203) : BV:8
205 : ite(190, 63, 204) : BV:8
206 : ite(189, 63, 205) : BV:8
207 : ite(188, 63, 206) : BV:8
208 : ite(187, 63, 207) : BV:8
209 : ite(186, 63, 208) : BV:8
210 : ite(185, 63, 209) : BV:8
211 : bvadd(61, 58, 183) : BV:32
212 : eq(211, 61) : BOOL
213 : eq(211, 64) : BOOL
214 : eq(211, 66) : BOOL
215 : eq(211, 68) : BOOL
216 : eq(211, 70) : BOOL
217 : eq(211, 72) : BOOL
218 : eq(211, 74) : BOOL
219 : eq(211, 2) : BOOL
220 : eq(211, 78) : BOOL
221 : eq(211, 80) : BOOL
222 : eq(211, 56) : BOOL
223 : eq(211, 83) : BOOL
224 : eq(211, 86) : BOOL
225 : ite(224, 63, 88) : BV:8
226 : ite(223, 85, 225) : BV:8
227 : ite(222, 63, 226) : BV:8
228 : ite(221, 63, 227) : BV:8
229 : ite(220, 63, 228) : BV:8
230 : ite(219, 77, 229) : BV:8
231 : ite(218, 63, 230) : BV:8
232 : ite(217, 63, 231) : BV:8
233 : ite(216, 63, 232) : BV:8
234 : ite(215, 63, 233) : BV:8
235 : ite(214, 63, 234) : BV:8
236 : ite(213, 63, 235) : BV:8
237 : ite(212, 63, 236) : BV:8
238 : bvadd(72, 58, 183) : BV:32
239 : eq(238, 61) : BOOL
240 : eq(238, 64) : BOOL
241 : eq(238, 66) : BOOL
242 : eq(238, 68) : BOOL
243 : eq(238, 70) : BOOL
244 : eq(238, 72) : BOOL
245 : eq(238, 74) : BOOL
246 : eq(238, 2) : BOOL
247 : eq(238, 78) : BOOL
248 : eq(238, 80) : BOOL
249 : eq(238, 56) : BOOL
250 : eq(238, 83) : BOOL
251 : eq(238, 86) : BOOL
252 : ite(251, 63, 88) : BV:8
253 : ite(250, 85, 252) : BV:8
254 : ite(249, 63, 253) : BV:8
255 : ite(248, 63, 254) : BV:8
256 : ite(247, 63, 255) : BV:8
257 : ite(246, 77, 256) : BV:8
258 : ite(245, 63, 257) : BV:8
259 : ite(244, 63, 258) : BV:8
260 : ite(243, 63, 259) : BV:8
261 : ite(242, 63, 260) : BV:8
262 : ite(241, 63, 261) : BV:8
263 : ite(240, 63, 262) : BV:8
264 : ite(239, 63, 263) : BV:8
265 : bvadd(58, 183) : BV:32
266 : eq(265, 61) : BOOL
267 : eq(265, 64) : BOOL
268 : eq(265, 66) : BOOL
269 : eq(265, 68) : BOOL
270 : eq(265, 70) : BOOL
271 : eq(265, 72) : BOOL
272 : eq(265, 74) : BOOL
273 : eq(265, 2) : BOOL
274 : eq(265, 78) : BOOL
275 : eq(265, 80) : BOOL
276 : eq(265, 56) : BOOL
277 : eq(265, 83) : BOOL
278 : eq(265, 86) : BOOL
279 : ite(278, 63, 88) : BV:8
280 : ite(277, 85, 279) : BV:8
281 : ite(276, 63, 280) : BV:8
282 : ite(275, 63, 281) : BV:8
283 : ite(274, 63, 282) : BV:8
284 : ite(273, 77, 283) : BV:8
285 : ite(272, 63, 284) : BV:8
286 : ite(271, 63, 285) : BV:8
287 : ite(270, 63, 286) : BV:8
288 : ite(269, 63, 287) : BV:8
289 : ite(268, 63, 288) : BV:8
290 : ite(267, 63, 289) : BV:8
291 : ite(266, 63, 290) : BV:8
292 : bvconcat(210, 237, 264, 291) : BV:32
293 : ite(55, 2, 292) : BV:32
294 : lambda(52, 293) : FUNCTION[BV:32 -> BV:32]
295 : map(51, 294) : MAP[BV:32 -> BV:32]
296 : lambda(17, 295) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
297 : map(16, 296) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
298 : sym_const(297) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda5215 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 269488128 { 0x10101000 +1.12548828e161 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 269488129 { 0x10101001 +1.12548840e161 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 269488130 { 0x10101002 +1.12548851e161 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda5216 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : 4 { 0x4 +1.47e129 } : BV:32
32 : bvmul(31, 27) : BV:32
33 : 5 { 0x5 +1.59e129 } : BV:32
34 : bvadd(30, 32, 33) : BV:32
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : eq(34, 35) : BOOL
37 : 0 { 0x0 } : BV:8
38 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
39 : eq(34, 38) : BOOL
40 : 8 { 0x8 +1.95e129 } : BV:32
41 : eq(34, 40) : BOOL
42 : 210248785 { 0xc882451 +1.6360828e154 } : BV:32
43 : eq(34, 42) : BOOL
44 : eq(34, 33) : BOOL
45 : eq(34, 1) : BOOL
46 : 210248787 { 0xc882453 +1.6360852e154 } : BV:32
47 : eq(34, 46) : BOOL
48 : eq(34, 5) : BOOL
49 : 5 { 0x5 } : BV:8
50 : 210248786 { 0xc882452 +1.6360840e154 } : BV:32
51 : eq(34, 50) : BOOL
52 : 7 { 0x7 +1.83e129 } : BV:32
53 : eq(34, 52) : BOOL
54 : eq(34, 30) : BOOL
55 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
56 : eq(34, 55) : BOOL
57 : 1 { 0x1 } : BV:8
58 : 6 { 0x6 +1.71e129 } : BV:32
59 : eq(34, 58) : BOOL
60 : 16 { 0x10 } : BV:8
61 : ite(59, 37, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 37, 62) : BV:8
64 : ite(53, 37, 63) : BV:8
65 : ite(51, 37, 64) : BV:8
66 : ite(48, 49, 65) : BV:8
67 : ite(47, 37, 66) : BV:8
68 : ite(45, 37, 67) : BV:8
69 : ite(44, 37, 68) : BV:8
70 : ite(43, 37, 69) : BV:8
71 : ite(41, 37, 70) : BV:8
72 : ite(39, 37, 71) : BV:8
73 : ite(36, 37, 72) : BV:8
74 : bvadd(35, 32, 33) : BV:32
75 : eq(74, 35) : BOOL
76 : eq(74, 38) : BOOL
77 : eq(74, 40) : BOOL
78 : eq(74, 42) : BOOL
79 : eq(74, 33) : BOOL
80 : eq(74, 1) : BOOL
81 : eq(74, 46) : BOOL
82 : eq(74, 5) : BOOL
83 : eq(74, 50) : BOOL
84 : eq(74, 52) : BOOL
85 : eq(74, 30) : BOOL
86 : eq(74, 55) : BOOL
87 : eq(74, 58) : BOOL
88 : ite(87, 37, 60) : BV:8
89 : ite(86, 57, 88) : BV:8
90 : ite(85, 37, 89) : BV:8
91 : ite(84, 37, 90) : BV:8
92 : ite(83, 37, 91) : BV:8
93 : ite(82, 49, 92) : BV:8
94 : ite(81, 37, 93) : BV:8
95 : ite(80, 37, 94) : BV:8
96 : ite(79, 37, 95) : BV:8
97 : ite(78, 37, 96) : BV:8
98 : ite(77, 37, 97) : BV:8
99 : ite(76, 37, 98) : BV:8
100 : ite(75, 37, 99) : BV:8
101 : bvadd(1, 32, 33) : BV:32
102 : eq(101, 35) : BOOL
103 : eq(101, 38) : BOOL
104 : eq(101, 40) : BOOL
105 : eq(101, 42) : BOOL
106 : eq(101, 33) : BOOL
107 : eq(101, 1) : BOOL
108 : eq(101, 46) : BOOL
109 : eq(101, 5) : BOOL
110 : eq(101, 50) : BOOL
111 : eq(101, 52) : BOOL
112 : eq(101, 30) : BOOL
113 : eq(101, 55) : BOOL
114 : eq(101, 58) : BOOL
115 : ite(114, 37, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 37, 116) : BV:8
118 : ite(111, 37, 117) : BV:8
119 : ite(110, 37, 118) : BV:8
120 : ite(109, 49, 119) : BV:8
121 : ite(108, 37, 120) : BV:8
122 : ite(107, 37, 121) : BV:8
123 : ite(106, 37, 122) : BV:8
124 : ite(105, 37, 123) : BV:8
125 : ite(104, 37, 124) : BV:8
126 : ite(103, 37, 125) : BV:8
127 : ite(102, 37, 126) : BV:8
128 : bvadd(32, 33) : BV:32
129 : eq(128, 35) : BOOL
130 : eq(128, 38) : BOOL
131 : eq(128, 40) : BOOL
132 : eq(128, 42) : BOOL
133 : eq(128, 33) : BOOL
134 : eq(128, 1) : BOOL
135 : eq(128, 46) : BOOL
136 : eq(128, 5) : BOOL
137 : eq(128, 50) : BOOL
138 : eq(128, 52) : BOOL
139 : eq(128, 30) : BOOL
140 : eq(128, 55) : BOOL
141 : eq(128, 58) : BOOL
142 : ite(141, 37, 60) : BV:8
143 : ite(140, 57, 142) : BV:8
144 : ite(139, 37, 143) : BV:8
145 : ite(138, 37, 144) : BV:8
146 : ite(137, 37, 145) : BV:8
147 : ite(136, 49, 146) : BV:8
148 : ite(135, 37, 147) : BV:8
149 : ite(134, 37, 148) : BV:8
150 : ite(133, 37, 149) : BV:8
151 : ite(132, 37, 150) : BV:8
152 : ite(131, 37, 151) : BV:8
153 : ite(130, 37, 152) : BV:8
154 : ite(129, 37, 153) : BV:8
155 : bvconcat(73, 100, 127, 154) : BV:32
156 : ite(29, 5, 155) : BV:32
157 : lambda(27, 156) : FUNCTION[BV:32 -> BV:32]
158 : map(26, 157) : MAP[BV:32 -> BV:32]
159 : sum(1, 2, 158) : SUM[UNIT,MAP[BV:32 -> BV:32]]
160 : sym_const(159) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda5217 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269488128 { 0x10101000 +1.12548828e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269488129 { 0x10101001 +1.12548840e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 269488130 { 0x10101002 +1.12548851e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda5218 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : 5 { 0x5 +1.59e129 } : BV:32
32 : bvadd(28, 30, 31) : BV:32
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : eq(32, 33) : BOOL
35 : 0 { 0x0 } : BV:8
36 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
37 : eq(32, 36) : BOOL
38 : 8 { 0x8 +1.95e129 } : BV:32
39 : eq(32, 38) : BOOL
40 : 210248785 { 0xc882451 +1.6360828e154 } : BV:32
41 : eq(32, 40) : BOOL
42 : eq(32, 31) : BOOL
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : eq(32, 43) : BOOL
45 : 210248787 { 0xc882453 +1.6360852e154 } : BV:32
46 : eq(32, 45) : BOOL
47 : eq(32, 3) : BOOL
48 : 5 { 0x5 } : BV:8
49 : 210248786 { 0xc882452 +1.6360840e154 } : BV:32
50 : eq(32, 49) : BOOL
51 : 7 { 0x7 +1.83e129 } : BV:32
52 : eq(32, 51) : BOOL
53 : eq(32, 28) : BOOL
54 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
55 : eq(32, 54) : BOOL
56 : 1 { 0x1 } : BV:8
57 : 6 { 0x6 +1.71e129 } : BV:32
58 : eq(32, 57) : BOOL
59 : 16 { 0x10 } : BV:8
60 : ite(58, 35, 59) : BV:8
61 : ite(55, 56, 60) : BV:8
62 : ite(53, 35, 61) : BV:8
63 : ite(52, 35, 62) : BV:8
64 : ite(50, 35, 63) : BV:8
65 : ite(47, 48, 64) : BV:8
66 : ite(46, 35, 65) : BV:8
67 : ite(44, 35, 66) : BV:8
68 : ite(42, 35, 67) : BV:8
69 : ite(41, 35, 68) : BV:8
70 : ite(39, 35, 69) : BV:8
71 : ite(37, 35, 70) : BV:8
72 : ite(34, 35, 71) : BV:8
73 : bvadd(33, 30, 31) : BV:32
74 : eq(73, 33) : BOOL
75 : eq(73, 36) : BOOL
76 : eq(73, 38) : BOOL
77 : eq(73, 40) : BOOL
78 : eq(73, 31) : BOOL
79 : eq(73, 43) : BOOL
80 : eq(73, 45) : BOOL
81 : eq(73, 3) : BOOL
82 : eq(73, 49) : BOOL
83 : eq(73, 51) : BOOL
84 : eq(73, 28) : BOOL
85 : eq(73, 54) : BOOL
86 : eq(73, 57) : BOOL
87 : ite(86, 35, 59) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 35, 88) : BV:8
90 : ite(83, 35, 89) : BV:8
91 : ite(82, 35, 90) : BV:8
92 : ite(81, 48, 91) : BV:8
93 : ite(80, 35, 92) : BV:8
94 : ite(79, 35, 93) : BV:8
95 : ite(78, 35, 94) : BV:8
96 : ite(77, 35, 95) : BV:8
97 : ite(76, 35, 96) : BV:8
98 : ite(75, 35, 97) : BV:8
99 : ite(74, 35, 98) : BV:8
100 : bvadd(43, 30, 31) : BV:32
101 : eq(100, 33) : BOOL
102 : eq(100, 36) : BOOL
103 : eq(100, 38) : BOOL
104 : eq(100, 40) : BOOL
105 : eq(100, 31) : BOOL
106 : eq(100, 43) : BOOL
107 : eq(100, 45) : BOOL
108 : eq(100, 3) : BOOL
109 : eq(100, 49) : BOOL
110 : eq(100, 51) : BOOL
111 : eq(100, 28) : BOOL
112 : eq(100, 54) : BOOL
113 : eq(100, 57) : BOOL
114 : ite(113, 35, 59) : BV:8
115 : ite(112, 56, 114) : BV:8
116 : ite(111, 35, 115) : BV:8
117 : ite(110, 35, 116) : BV:8
118 : ite(109, 35, 117) : BV:8
119 : ite(108, 48, 118) : BV:8
120 : ite(107, 35, 119) : BV:8
121 : ite(106, 35, 120) : BV:8
122 : ite(105, 35, 121) : BV:8
123 : ite(104, 35, 122) : BV:8
124 : ite(103, 35, 123) : BV:8
125 : ite(102, 35, 124) : BV:8
126 : ite(101, 35, 125) : BV:8
127 : bvadd(30, 31) : BV:32
128 : eq(127, 33) : BOOL
129 : eq(127, 36) : BOOL
130 : eq(127, 38) : BOOL
131 : eq(127, 40) : BOOL
132 : eq(127, 31) : BOOL
133 : eq(127, 43) : BOOL
134 : eq(127, 45) : BOOL
135 : eq(127, 3) : BOOL
136 : eq(127, 49) : BOOL
137 : eq(127, 51) : BOOL
138 : eq(127, 28) : BOOL
139 : eq(127, 54) : BOOL
140 : eq(127, 57) : BOOL
141 : ite(140, 35, 59) : BV:8
142 : ite(139, 56, 141) : BV:8
143 : ite(138, 35, 142) : BV:8
144 : ite(137, 35, 143) : BV:8
145 : ite(136, 35, 144) : BV:8
146 : ite(135, 48, 145) : BV:8
147 : ite(134, 35, 146) : BV:8
148 : ite(133, 35, 147) : BV:8
149 : ite(132, 35, 148) : BV:8
150 : ite(131, 35, 149) : BV:8
151 : ite(130, 35, 150) : BV:8
152 : ite(129, 35, 151) : BV:8
153 : ite(128, 35, 152) : BV:8
154 : bvconcat(72, 99, 126, 153) : BV:32
155 : ite(27, 3, 154) : BV:32
156 : lambda(25, 155) : FUNCTION[BV:32 -> BV:32]
157 : map(24, 156) : MAP[BV:32 -> BV:32]
158 : sym_const(157) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda5219 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269488128 { 0x10101000 +1.12548828e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269488129 { 0x10101001 +1.12548840e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 269488130 { 0x10101002 +1.12548851e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda5220 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : 3 { 0x3 +1.35e129 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 25) : BV:32
31 : 5 { 0x5 +1.59e129 } : BV:32
32 : bvadd(28, 30, 31) : BV:32
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : eq(32, 33) : BOOL
35 : 0 { 0x0 } : BV:8
36 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
37 : eq(32, 36) : BOOL
38 : 8 { 0x8 +1.95e129 } : BV:32
39 : eq(32, 38) : BOOL
40 : 210248785 { 0xc882451 +1.6360828e154 } : BV:32
41 : eq(32, 40) : BOOL
42 : eq(32, 31) : BOOL
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : eq(32, 43) : BOOL
45 : 210248787 { 0xc882453 +1.6360852e154 } : BV:32
46 : eq(32, 45) : BOOL
47 : eq(32, 3) : BOOL
48 : 5 { 0x5 } : BV:8
49 : 210248786 { 0xc882452 +1.6360840e154 } : BV:32
50 : eq(32, 49) : BOOL
51 : 7 { 0x7 +1.83e129 } : BV:32
52 : eq(32, 51) : BOOL
53 : eq(32, 28) : BOOL
54 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
55 : eq(32, 54) : BOOL
56 : 1 { 0x1 } : BV:8
57 : 6 { 0x6 +1.71e129 } : BV:32
58 : eq(32, 57) : BOOL
59 : 16 { 0x10 } : BV:8
60 : ite(58, 35, 59) : BV:8
61 : ite(55, 56, 60) : BV:8
62 : ite(53, 35, 61) : BV:8
63 : ite(52, 35, 62) : BV:8
64 : ite(50, 35, 63) : BV:8
65 : ite(47, 48, 64) : BV:8
66 : ite(46, 35, 65) : BV:8
67 : ite(44, 35, 66) : BV:8
68 : ite(42, 35, 67) : BV:8
69 : ite(41, 35, 68) : BV:8
70 : ite(39, 35, 69) : BV:8
71 : ite(37, 35, 70) : BV:8
72 : ite(34, 35, 71) : BV:8
73 : bvadd(33, 30, 31) : BV:32
74 : eq(73, 33) : BOOL
75 : eq(73, 36) : BOOL
76 : eq(73, 38) : BOOL
77 : eq(73, 40) : BOOL
78 : eq(73, 31) : BOOL
79 : eq(73, 43) : BOOL
80 : eq(73, 45) : BOOL
81 : eq(73, 3) : BOOL
82 : eq(73, 49) : BOOL
83 : eq(73, 51) : BOOL
84 : eq(73, 28) : BOOL
85 : eq(73, 54) : BOOL
86 : eq(73, 57) : BOOL
87 : ite(86, 35, 59) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 35, 88) : BV:8
90 : ite(83, 35, 89) : BV:8
91 : ite(82, 35, 90) : BV:8
92 : ite(81, 48, 91) : BV:8
93 : ite(80, 35, 92) : BV:8
94 : ite(79, 35, 93) : BV:8
95 : ite(78, 35, 94) : BV:8
96 : ite(77, 35, 95) : BV:8
97 : ite(76, 35, 96) : BV:8
98 : ite(75, 35, 97) : BV:8
99 : ite(74, 35, 98) : BV:8
100 : bvadd(43, 30, 31) : BV:32
101 : eq(100, 33) : BOOL
102 : eq(100, 36) : BOOL
103 : eq(100, 38) : BOOL
104 : eq(100, 40) : BOOL
105 : eq(100, 31) : BOOL
106 : eq(100, 43) : BOOL
107 : eq(100, 45) : BOOL
108 : eq(100, 3) : BOOL
109 : eq(100, 49) : BOOL
110 : eq(100, 51) : BOOL
111 : eq(100, 28) : BOOL
112 : eq(100, 54) : BOOL
113 : eq(100, 57) : BOOL
114 : ite(113, 35, 59) : BV:8
115 : ite(112, 56, 114) : BV:8
116 : ite(111, 35, 115) : BV:8
117 : ite(110, 35, 116) : BV:8
118 : ite(109, 35, 117) : BV:8
119 : ite(108, 48, 118) : BV:8
120 : ite(107, 35, 119) : BV:8
121 : ite(106, 35, 120) : BV:8
122 : ite(105, 35, 121) : BV:8
123 : ite(104, 35, 122) : BV:8
124 : ite(103, 35, 123) : BV:8
125 : ite(102, 35, 124) : BV:8
126 : ite(101, 35, 125) : BV:8
127 : bvadd(30, 31) : BV:32
128 : eq(127, 33) : BOOL
129 : eq(127, 36) : BOOL
130 : eq(127, 38) : BOOL
131 : eq(127, 40) : BOOL
132 : eq(127, 31) : BOOL
133 : eq(127, 43) : BOOL
134 : eq(127, 45) : BOOL
135 : eq(127, 3) : BOOL
136 : eq(127, 49) : BOOL
137 : eq(127, 51) : BOOL
138 : eq(127, 28) : BOOL
139 : eq(127, 54) : BOOL
140 : eq(127, 57) : BOOL
141 : ite(140, 35, 59) : BV:8
142 : ite(139, 56, 141) : BV:8
143 : ite(138, 35, 142) : BV:8
144 : ite(137, 35, 143) : BV:8
145 : ite(136, 35, 144) : BV:8
146 : ite(135, 48, 145) : BV:8
147 : ite(134, 35, 146) : BV:8
148 : ite(133, 35, 147) : BV:8
149 : ite(132, 35, 148) : BV:8
150 : ite(131, 35, 149) : BV:8
151 : ite(130, 35, 150) : BV:8
152 : ite(129, 35, 151) : BV:8
153 : ite(128, 35, 152) : BV:8
154 : bvconcat(72, 99, 126, 153) : BV:32
155 : ite(27, 3, 154) : BV:32
156 : lambda(25, 155) : FUNCTION[BV:32 -> BV:32]
157 : map(24, 156) : MAP[BV:32 -> BV:32]
158 : sym_const(157) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 269488143 ] -> true, [ 269488144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 269488143 ] -> true, [ 269488144; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda486 : BV:32
2 : Lambda487 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269488143 { 0x1010100f +1.12549006e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269488144 { 0x10101010 +1.12549018e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 269488145 { 0x10101011 +1.12549030e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 269488128 { 0x10101000 +1.12548828e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 269488129 { 0x10101001 +1.12548840e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 269488130 { 0x10101002 +1.12548851e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda491 : BV:32
2 : Lambda492 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
16 : eq(11, 15) : BOOL
17 : 8 { 0x8 +1.95e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 210248785 { 0xc882451 +1.6360828e154 } : BV:32
20 : eq(11, 19) : BOOL
21 : 5 { 0x5 +1.59e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 210248787 { 0xc882453 +1.6360852e154 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 3) : BOOL
28 : 5 { 0x5 } : BV:8
29 : 210248786 { 0xc882452 +1.6360840e154 } : BV:32
30 : eq(11, 29) : BOOL
31 : 7 { 0x7 +1.83e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : eq(11, 7) : BOOL
34 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
35 : eq(11, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : eq(11, 37) : BOOL
39 : 16 { 0x10 } : BV:8
40 : ite(38, 14, 39) : BV:8
41 : ite(35, 36, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : ite(32, 14, 42) : BV:8
44 : ite(30, 14, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : ite(26, 14, 45) : BV:8
47 : ite(24, 14, 46) : BV:8
48 : ite(22, 14, 47) : BV:8
49 : ite(20, 14, 48) : BV:8
50 : ite(18, 14, 49) : BV:8
51 : ite(16, 14, 50) : BV:8
52 : ite(13, 14, 51) : BV:8
53 : bvadd(12, 10, 3) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 15) : BOOL
56 : eq(53, 17) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 21) : BOOL
59 : eq(53, 23) : BOOL
60 : eq(53, 25) : BOOL
61 : eq(53, 3) : BOOL
62 : eq(53, 29) : BOOL
63 : eq(53, 31) : BOOL
64 : eq(53, 7) : BOOL
65 : eq(53, 34) : BOOL
66 : eq(53, 37) : BOOL
67 : ite(66, 14, 39) : BV:8
68 : ite(65, 36, 67) : BV:8
69 : ite(64, 14, 68) : BV:8
70 : ite(63, 14, 69) : BV:8
71 : ite(62, 14, 70) : BV:8
72 : ite(61, 28, 71) : BV:8
73 : ite(60, 14, 72) : BV:8
74 : ite(59, 14, 73) : BV:8
75 : ite(58, 14, 74) : BV:8
76 : ite(57, 14, 75) : BV:8
77 : ite(56, 14, 76) : BV:8
78 : ite(55, 14, 77) : BV:8
79 : ite(54, 14, 78) : BV:8
80 : bvadd(23, 10, 3) : BV:32
81 : eq(80, 12) : BOOL
82 : eq(80, 15) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 21) : BOOL
86 : eq(80, 23) : BOOL
87 : eq(80, 25) : BOOL
88 : eq(80, 3) : BOOL
89 : eq(80, 29) : BOOL
90 : eq(80, 31) : BOOL
91 : eq(80, 7) : BOOL
92 : eq(80, 34) : BOOL
93 : eq(80, 37) : BOOL
94 : ite(93, 14, 39) : BV:8
95 : ite(92, 36, 94) : BV:8
96 : ite(91, 14, 95) : BV:8
97 : ite(90, 14, 96) : BV:8
98 : ite(89, 14, 97) : BV:8
99 : ite(88, 28, 98) : BV:8
100 : ite(87, 14, 99) : BV:8
101 : ite(86, 14, 100) : BV:8
102 : ite(85, 14, 101) : BV:8
103 : ite(84, 14, 102) : BV:8
104 : ite(83, 14, 103) : BV:8
105 : ite(82, 14, 104) : BV:8
106 : ite(81, 14, 105) : BV:8
107 : bvadd(10, 3) : BV:32
108 : eq(107, 12) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 17) : BOOL
111 : eq(107, 19) : BOOL
112 : eq(107, 21) : BOOL
113 : eq(107, 23) : BOOL
114 : eq(107, 25) : BOOL
115 : eq(107, 3) : BOOL
116 : eq(107, 29) : BOOL
117 : eq(107, 31) : BOOL
118 : eq(107, 7) : BOOL
119 : eq(107, 34) : BOOL
120 : eq(107, 37) : BOOL
121 : ite(120, 14, 39) : BV:8
122 : ite(119, 36, 121) : BV:8
123 : ite(118, 14, 122) : BV:8
124 : ite(117, 14, 123) : BV:8
125 : ite(116, 14, 124) : BV:8
126 : ite(115, 28, 125) : BV:8
127 : ite(114, 14, 126) : BV:8
128 : ite(113, 14, 127) : BV:8
129 : ite(112, 14, 128) : BV:8
130 : ite(111, 14, 129) : BV:8
131 : ite(110, 14, 130) : BV:8
132 : ite(109, 14, 131) : BV:8
133 : ite(108, 14, 132) : BV:8
134 : bvconcat(52, 79, 106, 133) : BV:32
135 : bvadd(7, 9, 134) : BV:32
136 : eq(135, 12) : BOOL
137 : eq(135, 15) : BOOL
138 : eq(135, 17) : BOOL
139 : eq(135, 19) : BOOL
140 : eq(135, 21) : BOOL
141 : eq(135, 23) : BOOL
142 : eq(135, 25) : BOOL
143 : eq(135, 3) : BOOL
144 : eq(135, 29) : BOOL
145 : eq(135, 31) : BOOL
146 : eq(135, 7) : BOOL
147 : eq(135, 34) : BOOL
148 : eq(135, 37) : BOOL
149 : ite(148, 14, 39) : BV:8
150 : ite(147, 36, 149) : BV:8
151 : ite(146, 14, 150) : BV:8
152 : ite(145, 14, 151) : BV:8
153 : ite(144, 14, 152) : BV:8
154 : ite(143, 28, 153) : BV:8
155 : ite(142, 14, 154) : BV:8
156 : ite(141, 14, 155) : BV:8
157 : ite(140, 14, 156) : BV:8
158 : ite(139, 14, 157) : BV:8
159 : ite(138, 14, 158) : BV:8
160 : ite(137, 14, 159) : BV:8
161 : ite(136, 14, 160) : BV:8
162 : bvadd(12, 9, 134) : BV:32
163 : eq(162, 12) : BOOL
164 : eq(162, 15) : BOOL
165 : eq(162, 17) : BOOL
166 : eq(162, 19) : BOOL
167 : eq(162, 21) : BOOL
168 : eq(162, 23) : BOOL
169 : eq(162, 25) : BOOL
170 : eq(162, 3) : BOOL
171 : eq(162, 29) : BOOL
172 : eq(162, 31) : BOOL
173 : eq(162, 7) : BOOL
174 : eq(162, 34) : BOOL
175 : eq(162, 37) : BOOL
176 : ite(175, 14, 39) : BV:8
177 : ite(174, 36, 176) : BV:8
178 : ite(173, 14, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 28, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : ite(164, 14, 186) : BV:8
188 : ite(163, 14, 187) : BV:8
189 : bvadd(23, 9, 134) : BV:32
190 : eq(189, 12) : BOOL
191 : eq(189, 15) : BOOL
192 : eq(189, 17) : BOOL
193 : eq(189, 19) : BOOL
194 : eq(189, 21) : BOOL
195 : eq(189, 23) : BOOL
196 : eq(189, 25) : BOOL
197 : eq(189, 3) : BOOL
198 : eq(189, 29) : BOOL
199 : eq(189, 31) : BOOL
200 : eq(189, 7) : BOOL
201 : eq(189, 34) : BOOL
202 : eq(189, 37) : BOOL
203 : ite(202, 14, 39) : BV:8
204 : ite(201, 36, 203) : BV:8
205 : ite(200, 14, 204) : BV:8
206 : ite(199, 14, 205) : BV:8
207 : ite(198, 14, 206) : BV:8
208 : ite(197, 28, 207) : BV:8
209 : ite(196, 14, 208) : BV:8
210 : ite(195, 14, 209) : BV:8
211 : ite(194, 14, 210) : BV:8
212 : ite(193, 14, 211) : BV:8
213 : ite(192, 14, 212) : BV:8
214 : ite(191, 14, 213) : BV:8
215 : ite(190, 14, 214) : BV:8
216 : bvadd(9, 134) : BV:32
217 : eq(216, 12) : BOOL
218 : eq(216, 15) : BOOL
219 : eq(216, 17) : BOOL
220 : eq(216, 19) : BOOL
221 : eq(216, 21) : BOOL
222 : eq(216, 23) : BOOL
223 : eq(216, 25) : BOOL
224 : eq(216, 3) : BOOL
225 : eq(216, 29) : BOOL
226 : eq(216, 31) : BOOL
227 : eq(216, 7) : BOOL
228 : eq(216, 34) : BOOL
229 : eq(216, 37) : BOOL
230 : ite(229, 14, 39) : BV:8
231 : ite(228, 36, 230) : BV:8
232 : ite(227, 14, 231) : BV:8
233 : ite(226, 14, 232) : BV:8
234 : ite(225, 14, 233) : BV:8
235 : ite(224, 28, 234) : BV:8
236 : ite(223, 14, 235) : BV:8
237 : ite(222, 14, 236) : BV:8
238 : ite(221, 14, 237) : BV:8
239 : ite(220, 14, 238) : BV:8
240 : ite(219, 14, 239) : BV:8
241 : ite(218, 14, 240) : BV:8
242 : ite(217, 14, 241) : BV:8
243 : bvconcat(161, 188, 215, 242) : BV:32
244 : ite(6, 3, 243) : BV:32
245 : ite(6, 3, 244) : BV:32
246 : lambda(1, 2, 245) : FUNCTION[BV:32,BV:32 -> BV:32]
247 : sym_const(246) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda495 : BV:32
2 : Lambda496 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 269488143 { 0x1010100f +1.12549006e161 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 269488144 { 0x10101010 +1.12549018e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 269488145 { 0x10101011 +1.12549030e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 269488128 { 0x10101000 +1.12548828e161 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 269488129 { 0x10101001 +1.12548840e161 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 269488130 { 0x10101002 +1.12548851e161 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda493 : BV:32
2 : Lambda494 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
16 : eq(11, 15) : BOOL
17 : 8 { 0x8 +1.95e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 210248785 { 0xc882451 +1.6360828e154 } : BV:32
20 : eq(11, 19) : BOOL
21 : 5 { 0x5 +1.59e129 } : BV:32
22 : eq(11, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(11, 23) : BOOL
25 : 210248787 { 0xc882453 +1.6360852e154 } : BV:32
26 : eq(11, 25) : BOOL
27 : eq(11, 3) : BOOL
28 : 5 { 0x5 } : BV:8
29 : 210248786 { 0xc882452 +1.6360840e154 } : BV:32
30 : eq(11, 29) : BOOL
31 : 7 { 0x7 +1.83e129 } : BV:32
32 : eq(11, 31) : BOOL
33 : eq(11, 7) : BOOL
34 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
35 : eq(11, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : eq(11, 37) : BOOL
39 : 16 { 0x10 } : BV:8
40 : ite(38, 14, 39) : BV:8
41 : ite(35, 36, 40) : BV:8
42 : ite(33, 14, 41) : BV:8
43 : ite(32, 14, 42) : BV:8
44 : ite(30, 14, 43) : BV:8
45 : ite(27, 28, 44) : BV:8
46 : ite(26, 14, 45) : BV:8
47 : ite(24, 14, 46) : BV:8
48 : ite(22, 14, 47) : BV:8
49 : ite(20, 14, 48) : BV:8
50 : ite(18, 14, 49) : BV:8
51 : ite(16, 14, 50) : BV:8
52 : ite(13, 14, 51) : BV:8
53 : bvadd(12, 10, 3) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 15) : BOOL
56 : eq(53, 17) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 21) : BOOL
59 : eq(53, 23) : BOOL
60 : eq(53, 25) : BOOL
61 : eq(53, 3) : BOOL
62 : eq(53, 29) : BOOL
63 : eq(53, 31) : BOOL
64 : eq(53, 7) : BOOL
65 : eq(53, 34) : BOOL
66 : eq(53, 37) : BOOL
67 : ite(66, 14, 39) : BV:8
68 : ite(65, 36, 67) : BV:8
69 : ite(64, 14, 68) : BV:8
70 : ite(63, 14, 69) : BV:8
71 : ite(62, 14, 70) : BV:8
72 : ite(61, 28, 71) : BV:8
73 : ite(60, 14, 72) : BV:8
74 : ite(59, 14, 73) : BV:8
75 : ite(58, 14, 74) : BV:8
76 : ite(57, 14, 75) : BV:8
77 : ite(56, 14, 76) : BV:8
78 : ite(55, 14, 77) : BV:8
79 : ite(54, 14, 78) : BV:8
80 : bvadd(23, 10, 3) : BV:32
81 : eq(80, 12) : BOOL
82 : eq(80, 15) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 21) : BOOL
86 : eq(80, 23) : BOOL
87 : eq(80, 25) : BOOL
88 : eq(80, 3) : BOOL
89 : eq(80, 29) : BOOL
90 : eq(80, 31) : BOOL
91 : eq(80, 7) : BOOL
92 : eq(80, 34) : BOOL
93 : eq(80, 37) : BOOL
94 : ite(93, 14, 39) : BV:8
95 : ite(92, 36, 94) : BV:8
96 : ite(91, 14, 95) : BV:8
97 : ite(90, 14, 96) : BV:8
98 : ite(89, 14, 97) : BV:8
99 : ite(88, 28, 98) : BV:8
100 : ite(87, 14, 99) : BV:8
101 : ite(86, 14, 100) : BV:8
102 : ite(85, 14, 101) : BV:8
103 : ite(84, 14, 102) : BV:8
104 : ite(83, 14, 103) : BV:8
105 : ite(82, 14, 104) : BV:8
106 : ite(81, 14, 105) : BV:8
107 : bvadd(10, 3) : BV:32
108 : eq(107, 12) : BOOL
109 : eq(107, 15) : BOOL
110 : eq(107, 17) : BOOL
111 : eq(107, 19) : BOOL
112 : eq(107, 21) : BOOL
113 : eq(107, 23) : BOOL
114 : eq(107, 25) : BOOL
115 : eq(107, 3) : BOOL
116 : eq(107, 29) : BOOL
117 : eq(107, 31) : BOOL
118 : eq(107, 7) : BOOL
119 : eq(107, 34) : BOOL
120 : eq(107, 37) : BOOL
121 : ite(120, 14, 39) : BV:8
122 : ite(119, 36, 121) : BV:8
123 : ite(118, 14, 122) : BV:8
124 : ite(117, 14, 123) : BV:8
125 : ite(116, 14, 124) : BV:8
126 : ite(115, 28, 125) : BV:8
127 : ite(114, 14, 126) : BV:8
128 : ite(113, 14, 127) : BV:8
129 : ite(112, 14, 128) : BV:8
130 : ite(111, 14, 129) : BV:8
131 : ite(110, 14, 130) : BV:8
132 : ite(109, 14, 131) : BV:8
133 : ite(108, 14, 132) : BV:8
134 : bvconcat(52, 79, 106, 133) : BV:32
135 : bvadd(7, 9, 134) : BV:32
136 : eq(135, 12) : BOOL
137 : eq(135, 15) : BOOL
138 : eq(135, 17) : BOOL
139 : eq(135, 19) : BOOL
140 : eq(135, 21) : BOOL
141 : eq(135, 23) : BOOL
142 : eq(135, 25) : BOOL
143 : eq(135, 3) : BOOL
144 : eq(135, 29) : BOOL
145 : eq(135, 31) : BOOL
146 : eq(135, 7) : BOOL
147 : eq(135, 34) : BOOL
148 : eq(135, 37) : BOOL
149 : ite(148, 14, 39) : BV:8
150 : ite(147, 36, 149) : BV:8
151 : ite(146, 14, 150) : BV:8
152 : ite(145, 14, 151) : BV:8
153 : ite(144, 14, 152) : BV:8
154 : ite(143, 28, 153) : BV:8
155 : ite(142, 14, 154) : BV:8
156 : ite(141, 14, 155) : BV:8
157 : ite(140, 14, 156) : BV:8
158 : ite(139, 14, 157) : BV:8
159 : ite(138, 14, 158) : BV:8
160 : ite(137, 14, 159) : BV:8
161 : ite(136, 14, 160) : BV:8
162 : bvadd(12, 9, 134) : BV:32
163 : eq(162, 12) : BOOL
164 : eq(162, 15) : BOOL
165 : eq(162, 17) : BOOL
166 : eq(162, 19) : BOOL
167 : eq(162, 21) : BOOL
168 : eq(162, 23) : BOOL
169 : eq(162, 25) : BOOL
170 : eq(162, 3) : BOOL
171 : eq(162, 29) : BOOL
172 : eq(162, 31) : BOOL
173 : eq(162, 7) : BOOL
174 : eq(162, 34) : BOOL
175 : eq(162, 37) : BOOL
176 : ite(175, 14, 39) : BV:8
177 : ite(174, 36, 176) : BV:8
178 : ite(173, 14, 177) : BV:8
179 : ite(172, 14, 178) : BV:8
180 : ite(171, 14, 179) : BV:8
181 : ite(170, 28, 180) : BV:8
182 : ite(169, 14, 181) : BV:8
183 : ite(168, 14, 182) : BV:8
184 : ite(167, 14, 183) : BV:8
185 : ite(166, 14, 184) : BV:8
186 : ite(165, 14, 185) : BV:8
187 : ite(164, 14, 186) : BV:8
188 : ite(163, 14, 187) : BV:8
189 : bvadd(23, 9, 134) : BV:32
190 : eq(189, 12) : BOOL
191 : eq(189, 15) : BOOL
192 : eq(189, 17) : BOOL
193 : eq(189, 19) : BOOL
194 : eq(189, 21) : BOOL
195 : eq(189, 23) : BOOL
196 : eq(189, 25) : BOOL
197 : eq(189, 3) : BOOL
198 : eq(189, 29) : BOOL
199 : eq(189, 31) : BOOL
200 : eq(189, 7) : BOOL
201 : eq(189, 34) : BOOL
202 : eq(189, 37) : BOOL
203 : ite(202, 14, 39) : BV:8
204 : ite(201, 36, 203) : BV:8
205 : ite(200, 14, 204) : BV:8
206 : ite(199, 14, 205) : BV:8
207 : ite(198, 14, 206) : BV:8
208 : ite(197, 28, 207) : BV:8
209 : ite(196, 14, 208) : BV:8
210 : ite(195, 14, 209) : BV:8
211 : ite(194, 14, 210) : BV:8
212 : ite(193, 14, 211) : BV:8
213 : ite(192, 14, 212) : BV:8
214 : ite(191, 14, 213) : BV:8
215 : ite(190, 14, 214) : BV:8
216 : bvadd(9, 134) : BV:32
217 : eq(216, 12) : BOOL
218 : eq(216, 15) : BOOL
219 : eq(216, 17) : BOOL
220 : eq(216, 19) : BOOL
221 : eq(216, 21) : BOOL
222 : eq(216, 23) : BOOL
223 : eq(216, 25) : BOOL
224 : eq(216, 3) : BOOL
225 : eq(216, 29) : BOOL
226 : eq(216, 31) : BOOL
227 : eq(216, 7) : BOOL
228 : eq(216, 34) : BOOL
229 : eq(216, 37) : BOOL
230 : ite(229, 14, 39) : BV:8
231 : ite(228, 36, 230) : BV:8
232 : ite(227, 14, 231) : BV:8
233 : ite(226, 14, 232) : BV:8
234 : ite(225, 14, 233) : BV:8
235 : ite(224, 28, 234) : BV:8
236 : ite(223, 14, 235) : BV:8
237 : ite(222, 14, 236) : BV:8
238 : ite(221, 14, 237) : BV:8
239 : ite(220, 14, 238) : BV:8
240 : ite(219, 14, 239) : BV:8
241 : ite(218, 14, 240) : BV:8
242 : ite(217, 14, 241) : BV:8
243 : bvconcat(161, 188, 215, 242) : BV:32
244 : ite(6, 3, 243) : BV:32
245 : lambda(1, 2, 244) : FUNCTION[BV:32,BV:32 -> BV:32]
246 : sym_const(245) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 767520291 { 0x2dbf6e23 +1.49554860e220 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 35460 { 0x8a84 +1.422716e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 35463 { 0x8a87 +1.422751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 210248784 { 0xc882450 +1.6360816e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 210248787 { 0xc882453 +1.6360852e154 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 302780936 { 0x120c1208 +1.9430027e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 302780939 { 0x120c120b +1.9430062e165 } : BV:32
=counter_example.random_seed
572758108
=counter_example_end
=global nodece 9 num_edges_traversed 2
=global nodece 9 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce146.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce146 9c769b4f4c91e4748e2e5b5cba7cf4d8
=input.spec-%var-x-1
1 : Lambda597 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda600 : BV:32
17 : Lambda598 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda599 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1174116315 ] -> 0, [ 1174116316; 1174116319 ] -> 255, [ 1174116320; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 118132599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 118132600; 118132603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 118132604; 1139493215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1139493216; 1139493219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1139493220; 1174116315 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1174116316; 1174116319 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1174116320; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 118132600 { 0x70a8f78 +1.8250331e143 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1139493216 { 0x43eb4960 +1.83817672e8 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 629915159 { 0x258bbe17 +1.9173858e204 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda597 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda600 : BV:32
17 : Lambda598 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda599 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda5207 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda5208 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
13 : eq(11, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
16 : eq(11, 15) : BOOL
17 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
18 : eq(11, 17) : BOOL
19 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
20 : eq(11, 19) : BOOL
21 : 0 { 0x0 } : BV:8
22 : ite(20, 14, 21) : BV:8
23 : ite(18, 14, 22) : BV:8
24 : ite(16, 14, 23) : BV:8
25 : ite(13, 14, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 9, 10) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 15) : BOOL
30 : eq(27, 17) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 14, 21) : BV:8
33 : ite(30, 14, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 14, 34) : BV:8
36 : bvadd(1, 9, 10) : BV:32
37 : eq(36, 12) : BOOL
38 : eq(36, 15) : BOOL
39 : eq(36, 17) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 14, 21) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 14, 42) : BV:8
44 : ite(37, 14, 43) : BV:8
45 : bvadd(9, 10) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 14, 21) : BV:8
51 : ite(48, 14, 50) : BV:8
52 : ite(47, 14, 51) : BV:8
53 : ite(46, 14, 52) : BV:8
54 : bvconcat(25, 35, 44, 53) : BV:32
55 : lambda(6, 54) : FUNCTION[BV:32 -> BV:32]
56 : map(5, 55) : MAP[BV:32 -> BV:32]
57 : sum(1, 2, 56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
58 : sym_const(57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda5209 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5210 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
14 : eq(9, 13) : BOOL
15 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
16 : eq(9, 15) : BOOL
17 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
18 : eq(9, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 12, 19) : BV:8
21 : ite(16, 12, 20) : BV:8
22 : ite(14, 12, 21) : BV:8
23 : ite(11, 12, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : eq(25, 15) : BOOL
29 : eq(25, 17) : BOOL
30 : ite(29, 12, 19) : BV:8
31 : ite(28, 12, 30) : BV:8
32 : ite(27, 12, 31) : BV:8
33 : ite(26, 12, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 17) : BOOL
40 : ite(39, 12, 19) : BV:8
41 : ite(38, 12, 40) : BV:8
42 : ite(37, 12, 41) : BV:8
43 : ite(36, 12, 42) : BV:8
44 : bvadd(7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 17) : BOOL
49 : ite(48, 12, 19) : BV:8
50 : ite(47, 12, 49) : BV:8
51 : ite(46, 12, 50) : BV:8
52 : ite(45, 12, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(4, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(3, 54) : MAP[BV:32 -> BV:32]
56 : sym_const(55) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda5211 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5212 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
11 : eq(9, 10) : BOOL
12 : 255 { 0xff -1 } : BV:8
13 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
14 : eq(9, 13) : BOOL
15 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
16 : eq(9, 15) : BOOL
17 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
18 : eq(9, 17) : BOOL
19 : 0 { 0x0 } : BV:8
20 : ite(18, 12, 19) : BV:8
21 : ite(16, 12, 20) : BV:8
22 : ite(14, 12, 21) : BV:8
23 : ite(11, 12, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 7, 8) : BV:32
26 : eq(25, 10) : BOOL
27 : eq(25, 13) : BOOL
28 : eq(25, 15) : BOOL
29 : eq(25, 17) : BOOL
30 : ite(29, 12, 19) : BV:8
31 : ite(28, 12, 30) : BV:8
32 : ite(27, 12, 31) : BV:8
33 : ite(26, 12, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 7, 8) : BV:32
36 : eq(35, 10) : BOOL
37 : eq(35, 13) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 17) : BOOL
40 : ite(39, 12, 19) : BV:8
41 : ite(38, 12, 40) : BV:8
42 : ite(37, 12, 41) : BV:8
43 : ite(36, 12, 42) : BV:8
44 : bvadd(7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 17) : BOOL
49 : ite(48, 12, 19) : BV:8
50 : ite(47, 12, 49) : BV:8
51 : ite(46, 12, 50) : BV:8
52 : ite(45, 12, 51) : BV:8
53 : bvconcat(23, 33, 43, 52) : BV:32
54 : lambda(4, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(3, 54) : MAP[BV:32 -> BV:32]
56 : sym_const(55) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda567 : BV:32
2 : Lambda568 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda569 : BV:32
2 : Lambda570 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 629915159 { 0x258bbe17 +1.9173858e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 118132600 { 0x70a8f78 +1.8250331e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 118132603 { 0x70a8f7b +1.8250367e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1139493216 { 0x43eb4960 +1.83817672e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1139493219 { 0x43eb4963 +1.83817708e8 } : BV:32
=counter_example.random_seed
1243065997
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 11
=global nodece 11 nodece z3v487.ce168.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)*(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry))
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3v487.ce168 c15b8575018a1d39bf5fda7c6f1694
=input.spec-%var-x-1
1 : Lambda677 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda680 : BV:32
18 : Lambda678 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda679 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1065474 ] -> 0, [ 1065475; 1065475 ] -> 128, [ 1065476; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 510211 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 510212; 510215 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 510216; 525319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 525320; 525323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 525324; 1065471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1065472; 1065475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1065476; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 525320 { 0x80408 +1.6262302e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 510212 { 0x7c904 +1.6082201e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1065472 { 0x104200 +1.12701416e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1350824237 { 0x5083f12d +1.3079760e34 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda677 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda680 : BV:32
18 : Lambda678 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda679 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda5199 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda5200 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda5201 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5202 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 128 { 0x80 -128 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda5203 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda5204 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 128 { 0x80 -128 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda647 : BV:32
2 : Lambda648 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda649 : BV:32
2 : Lambda650 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1350824237 { 0x5083f12d +1.3079760e34 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1065472 { 0x104200 +1.12701416e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 525320 { 0x80408 +1.6262302e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 525323 { 0x8040b +1.6262338e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 510212 { 0x7c904 +1.6082201e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 510215 { 0x7c907 +1.6082236e129 } : BV:32
=counter_example.random_seed
4113372681
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce190.num_edges_traversed1
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce190 e6fa82f81b539ee434c48f67c779fe34
=input.spec-%var-x-1
1 : Lambda753 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda756 : BV:32
11 : Lambda754 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda755 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 131079 { 0x20007 +1.1562583e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 131078 { 0x20006 +1.1562571e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 131077 { 0x20005 +1.1562559e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 131076 { 0x20004 +1.1562547e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 131075 ] -> 0, [ 131076; 131079 ] -> 255, [ 131080; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 1607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1608; 1611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1612; 131075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131076; 131079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 131080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1608 { 0x648 +1.19168e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 131076 { 0x20004 +1.1562547e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 879024595 { 0x3464d9d3 +1.78789746e233 } : COUNT
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda753 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda756 : BV:32
11 : Lambda754 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda755 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 131079 { 0x20007 +1.1562583e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 131078 { 0x20006 +1.1562571e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 131077 { 0x20005 +1.1562559e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 131076 { 0x20004 +1.1562547e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda725 : BV:32
2 : Lambda726 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 131079 { 0x20007 +1.1562583e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 131078 { 0x20006 +1.1562571e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 131077 { 0x20005 +1.1562559e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 131076 { 0x20004 +1.1562547e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda727 : BV:32
2 : Lambda728 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 131079 { 0x20007 +1.1562583e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 131078 { 0x20006 +1.1562571e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 131077 { 0x20005 +1.1562559e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 131076 { 0x20004 +1.1562547e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 879024595 { 0x3464d9d3 +1.78789746e233 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1608 { 0x648 +1.19168e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1611 { 0x64b +1.19204e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 131076 { 0x20004 +1.1562547e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 131079 { 0x20007 +1.1562583e129 } : BV:32
=counter_example.random_seed
1171462168
=counter_example_end
=global nodece 12 num_edges_traversed 1
=global nodece 12 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce1782.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce1782 e224cb085762f893520a77e4e9f91e
=input.spec-%var-x-1
1 : Lambda5098 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5101 : BV:32
18 : Lambda5099 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda5100 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 158 { 0x9e -98 } : BV:8
28 : eq(25, 21) : BOOL
29 : 141 { 0x8d -115 } : BV:8
30 : eq(25, 4) : BOOL
31 : 229 { 0xe5 -27 } : BV:8
32 : 191 { 0xbf -65 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : ite(26, 27, 34) : BV:8
36 : bvadd(8, 24) : BV:32
37 : eq(36, 2) : BOOL
38 : eq(36, 21) : BOOL
39 : eq(36, 4) : BOOL
40 : ite(39, 31, 32) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : ite(37, 27, 41) : BV:8
43 : bvadd(4, 24) : BV:32
44 : eq(43, 2) : BOOL
45 : eq(43, 21) : BOOL
46 : eq(43, 4) : BOOL
47 : ite(46, 31, 32) : BV:8
48 : ite(45, 29, 47) : BV:8
49 : ite(44, 27, 48) : BV:8
50 : eq(24, 2) : BOOL
51 : eq(24, 21) : BOOL
52 : eq(24, 4) : BOOL
53 : ite(52, 31, 32) : BV:8
54 : ite(51, 29, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : bvconcat(35, 42, 49, 55) : BV:32
57 : bvadd(21, 23, 56) : BV:32
58 : eq(57, 2) : BOOL
59 : eq(57, 21) : BOOL
60 : eq(57, 4) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : ite(58, 27, 62) : BV:8
64 : bvadd(8, 23, 56) : BV:32
65 : eq(64, 2) : BOOL
66 : eq(64, 21) : BOOL
67 : eq(64, 4) : BOOL
68 : ite(67, 31, 32) : BV:8
69 : ite(66, 29, 68) : BV:8
70 : ite(65, 27, 69) : BV:8
71 : bvadd(4, 23, 56) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 21) : BOOL
74 : eq(71, 4) : BOOL
75 : ite(74, 31, 32) : BV:8
76 : ite(73, 29, 75) : BV:8
77 : ite(72, 27, 76) : BV:8
78 : bvadd(23, 56) : BV:32
79 : eq(78, 2) : BOOL
80 : eq(78, 21) : BOOL
81 : eq(78, 4) : BOOL
82 : ite(81, 31, 32) : BV:8
83 : ite(80, 29, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : bvconcat(63, 70, 77, 84) : BV:32
86 : lambda(20, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(19, 86) : MAP[BV:32 -> BV:32]
88 : lambda(17, 87) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
89 : map(16, 88) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
90 : sym_const(89) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 158, [ 1; 1 ] -> 229, [ 2; 2 ] -> 191, [ 3; 3 ] -> 141, [ 4; 4294967295 ] -> 191, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2963398443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2963398444; 2963398447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2963398448; 3135366195 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3135366196; 3135366199 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3135366200; 3939500511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3939500512; 3939500515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3939500516; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3135366196 { 0xbae1e434 -1159601100 -1.76477670e246 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2963398444 { 0xb0a1df2c -1331568852 -1.26462316e226 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3939500512 { 0xead001e0 -355466784 -1.62505722e86 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda5105 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5108 : BV:32
18 : Lambda5106 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda5107 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 158 { 0x9e -98 } : BV:8
28 : eq(25, 21) : BOOL
29 : 141 { 0x8d -115 } : BV:8
30 : eq(25, 4) : BOOL
31 : 229 { 0xe5 -27 } : BV:8
32 : 191 { 0xbf -65 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(28, 29, 33) : BV:8
35 : ite(26, 27, 34) : BV:8
36 : bvadd(8, 24) : BV:32
37 : eq(36, 2) : BOOL
38 : eq(36, 21) : BOOL
39 : eq(36, 4) : BOOL
40 : ite(39, 31, 32) : BV:8
41 : ite(38, 29, 40) : BV:8
42 : ite(37, 27, 41) : BV:8
43 : bvadd(4, 24) : BV:32
44 : eq(43, 2) : BOOL
45 : eq(43, 21) : BOOL
46 : eq(43, 4) : BOOL
47 : ite(46, 31, 32) : BV:8
48 : ite(45, 29, 47) : BV:8
49 : ite(44, 27, 48) : BV:8
50 : eq(24, 2) : BOOL
51 : eq(24, 21) : BOOL
52 : eq(24, 4) : BOOL
53 : ite(52, 31, 32) : BV:8
54 : ite(51, 29, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : bvconcat(35, 42, 49, 55) : BV:32
57 : bvadd(21, 23, 56) : BV:32
58 : eq(57, 2) : BOOL
59 : eq(57, 21) : BOOL
60 : eq(57, 4) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 29, 61) : BV:8
63 : ite(58, 27, 62) : BV:8
64 : bvadd(8, 23, 56) : BV:32
65 : eq(64, 2) : BOOL
66 : eq(64, 21) : BOOL
67 : eq(64, 4) : BOOL
68 : ite(67, 31, 32) : BV:8
69 : ite(66, 29, 68) : BV:8
70 : ite(65, 27, 69) : BV:8
71 : bvadd(4, 23, 56) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 21) : BOOL
74 : eq(71, 4) : BOOL
75 : ite(74, 31, 32) : BV:8
76 : ite(73, 29, 75) : BV:8
77 : ite(72, 27, 76) : BV:8
78 : bvadd(23, 56) : BV:32
79 : eq(78, 2) : BOOL
80 : eq(78, 21) : BOOL
81 : eq(78, 4) : BOOL
82 : ite(81, 31, 32) : BV:8
83 : ite(80, 29, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : bvconcat(63, 70, 77, 84) : BV:32
86 : lambda(20, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(19, 86) : MAP[BV:32 -> BV:32]
88 : lambda(17, 87) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
89 : map(16, 88) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
90 : sym_const(89) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda5067 : BV:32
2 : Lambda5068 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 158 { 0x9e -98 } : BV:8
11 : eq(7, 3) : BOOL
12 : 141 { 0x8d -115 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 229 { 0xe5 -27 } : BV:8
16 : 191 { 0xbf -65 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda5071 : BV:32
2 : Lambda5072 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 158 { 0x9e -98 } : BV:8
11 : eq(7, 3) : BOOL
12 : 141 { 0x8d -115 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 229 { 0xe5 -27 } : BV:8
16 : 191 { 0xbf -65 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3939500512 { 0xead001e0 -355466784 -1.62505722e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3939500515 { 0xead001e3 -355466781 -1.62505757e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3135366196 { 0xbae1e434 -1159601100 -1.76477670e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3135366199 { 0xbae1e437 -1159601097 -1.76477706e246 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2963398444 { 0xb0a1df2c -1331568852 -1.26462316e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2963398447 { 0xb0a1df2f -1331568849 -1.26462352e226 } : BV:32
=counter_example.random_seed
2458692702
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce1783.num_edges_traversed0
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce1783 35fb85222afbef86953a5671a7ddd4
=input.spec-%var-x-1
1 : Lambda5122 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5125 : BV:32
18 : Lambda5123 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda5124 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 271 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 272; 275 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 276; 391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 392; 395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 396; 2147483843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483844; 2147483847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483848; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 392 { 0x188 +1.4673e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 272 { 0x110 +1.3242e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483844 { 0x800000c4 -2147483452 -1.2336e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda5131 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5134 : BV:32
18 : Lambda5132 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda5133 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483844 { 0x800000c4 -2147483452 -1.2336e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483847 { 0x800000c7 -2147483449 -1.2372e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 392 { 0x188 +1.4673e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 395 { 0x18b +1.4708e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 272 { 0x110 +1.3242e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 275 { 0x113 +1.3278e129 } : BV:32
=counter_example.random_seed
1325606256
=counter_example_end
=global nodece 14 num_edges_traversed 0
=global nodece 14 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3v487.ce6372.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce6372 276a2cde1c2dcd9027e5cfbb4ddd0c3
=input.spec-%var-x-1
1 : Lambda17190 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17193 : BV:32
18 : Lambda17191 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17192 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%n
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 39 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 40; 43 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 44; 51 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 52; 55 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 56; 16383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16384; 16387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 52 { 0x34 +1.619e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 40 { 0x28 +1.476e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17199 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17202 : BV:32
18 : Lambda17200 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17201 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17227 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda17228 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17229 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda17230 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17231 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda17232 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 40 { 0x28 +1.476e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 43 { 0x2b +1.512e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 52 { 0x34 +1.619e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 55 { 0x37 +1.655e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16387 { 0x4003 +1.195348e129 } : BV:32
=counter_example.random_seed
925669380
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce6373.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce6373 a98bab4612ea40c59e1ca2178268fd
=input.spec-%var-x-1
1 : Lambda17214 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17217 : BV:32
18 : Lambda17215 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17216 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 216 { 0xd8 -40 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 191 { 0xbf -65 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 123 { 0x7b } : BV:8
35 : 119 { 0x77 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : bvadd(8, 23, 60) : BV:32
69 : eq(68, 22) : BOOL
70 : eq(68, 29) : BOOL
71 : eq(68, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : bvadd(4, 23, 60) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 29) : BOOL
78 : eq(75, 32) : BOOL
79 : ite(78, 34, 35) : BV:8
80 : ite(77, 31, 79) : BV:8
81 : ite(76, 28, 80) : BV:8
82 : bvadd(23, 60) : BV:32
83 : eq(82, 22) : BOOL
84 : eq(82, 29) : BOOL
85 : eq(82, 32) : BOOL
86 : ite(85, 34, 35) : BV:8
87 : ite(84, 31, 86) : BV:8
88 : ite(83, 28, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(20, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(19, 90) : MAP[BV:32 -> BV:32]
92 : lambda(17, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(16, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 119, [ 4; 4 ] -> 216, [ 5; 5 ] -> 123, [ 6; 6 ] -> 191, [ 7; 4294967295 ] -> 119, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2563639603 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2563639604; 2563639607 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2563639608; 2919617807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2919617808; 2919617811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2919617812; 3100697667 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3100697668; 3100697671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3100697672; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2919617808 { 0xae05d510 -1375349488 -1.4556465e221 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2563639604 { 0x98ce0934 -1731327692 -1.60965585e178 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3100697668 { 0xb8d0e444 -1194269628 -1.63196611e242 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17221 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17224 : BV:32
18 : Lambda17222 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17223 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 216 { 0xd8 -40 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 191 { 0xbf -65 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 123 { 0x7b } : BV:8
35 : 119 { 0x77 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : bvadd(8, 23, 60) : BV:32
69 : eq(68, 22) : BOOL
70 : eq(68, 29) : BOOL
71 : eq(68, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : bvadd(4, 23, 60) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 29) : BOOL
78 : eq(75, 32) : BOOL
79 : ite(78, 34, 35) : BV:8
80 : ite(77, 31, 79) : BV:8
81 : ite(76, 28, 80) : BV:8
82 : bvadd(23, 60) : BV:32
83 : eq(82, 22) : BOOL
84 : eq(82, 29) : BOOL
85 : eq(82, 32) : BOOL
86 : ite(85, 34, 35) : BV:8
87 : ite(84, 31, 86) : BV:8
88 : ite(83, 28, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(20, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(19, 90) : MAP[BV:32 -> BV:32]
92 : lambda(17, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(16, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17235 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda17236 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 2009037784 { 0x77bf7bd8 +1.49596691e112 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : eq(11, 8) : BOOL
13 : 216 { 0xd8 -40 } : BV:8
14 : 6 { 0x6 +1.71e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 191 { 0xbf -65 } : BV:8
17 : 5 { 0x5 +1.59e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 123 { 0x7b } : BV:8
20 : 119 { 0x77 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 9, 10) : BV:32
26 : eq(25, 8) : BOOL
27 : eq(25, 14) : BOOL
28 : eq(25, 17) : BOOL
29 : ite(28, 19, 20) : BV:8
30 : ite(27, 16, 29) : BV:8
31 : ite(26, 13, 30) : BV:8
32 : bvadd(1, 9, 10) : BV:32
33 : eq(32, 8) : BOOL
34 : eq(32, 14) : BOOL
35 : eq(32, 17) : BOOL
36 : ite(35, 19, 20) : BV:8
37 : ite(34, 16, 36) : BV:8
38 : ite(33, 13, 37) : BV:8
39 : bvadd(9, 10) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 14) : BOOL
42 : eq(39, 17) : BOOL
43 : ite(42, 19, 20) : BV:8
44 : ite(41, 16, 43) : BV:8
45 : ite(40, 13, 44) : BV:8
46 : bvconcat(23, 31, 38, 45) : BV:32
47 : lambda(6, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(5, 47) : MAP[BV:32 -> BV:32]
49 : sum(1, 2, 48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
50 : sym_const(49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17237 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda17238 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2009037784 { 0x77bf7bd8 +1.49596691e112 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : eq(9, 6) : BOOL
11 : 216 { 0xd8 -40 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(9, 12) : BOOL
14 : 191 { 0xbf -65 } : BV:8
15 : 5 { 0x5 +1.59e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 123 { 0x7b } : BV:8
18 : 119 { 0x77 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 6) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 6) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(7, 8) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : lambda(4, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(3, 46) : MAP[BV:32 -> BV:32]
48 : sym_const(47) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17239 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda17240 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2009037784 { 0x77bf7bd8 +1.49596691e112 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : eq(9, 6) : BOOL
11 : 216 { 0xd8 -40 } : BV:8
12 : 6 { 0x6 +1.71e129 } : BV:32
13 : eq(9, 12) : BOOL
14 : 191 { 0xbf -65 } : BV:8
15 : 5 { 0x5 +1.59e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 123 { 0x7b } : BV:8
18 : 119 { 0x77 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 6) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 6) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(7, 8) : BV:32
39 : eq(38, 6) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : lambda(4, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(3, 46) : MAP[BV:32 -> BV:32]
48 : sym_const(47) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17171 : BV:32
2 : Lambda17172 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 216 { 0xd8 -40 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 191 { 0xbf -65 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 123 { 0x7b } : BV:8
17 : 119 { 0x77 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17175 : BV:32
2 : Lambda17176 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 216 { 0xd8 -40 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 191 { 0xbf -65 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 123 { 0x7b } : BV:8
17 : 119 { 0x77 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3100697668 { 0xb8d0e444 -1194269628 -1.63196611e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3100697671 { 0xb8d0e447 -1194269625 -1.63196647e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2919617808 { 0xae05d510 -1375349488 -1.4556465e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2919617811 { 0xae05d513 -1375349485 -1.4556500e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2563639604 { 0x98ce0934 -1731327692 -1.60965585e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2563639607 { 0x98ce0937 -1731327689 -1.60965621e178 } : BV:32
=counter_example.random_seed
3311823279
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce6412.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce6412 f14a112325f9151b8a3b13ca51ab4ec
=input.spec-%var-x-1
1 : Lambda17348 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17351 : BV:32
18 : Lambda17349 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda17350 : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 2) : BOOL
56 : 123 { 0x7b } : BV:8
57 : eq(54, 50) : BOOL
58 : 190 { 0xbe -66 } : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : eq(54, 59) : BOOL
61 : 157 { 0x9d -99 } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(54, 62) : BOOL
64 : 126 { 0x7e } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(57, 58, 67) : BV:8
69 : ite(55, 56, 68) : BV:8
70 : bvadd(62, 53) : BV:32
71 : eq(70, 2) : BOOL
72 : eq(70, 50) : BOOL
73 : eq(70, 59) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 58, 76) : BV:8
78 : ite(71, 56, 77) : BV:8
79 : bvadd(59, 53) : BV:32
80 : eq(79, 2) : BOOL
81 : eq(79, 50) : BOOL
82 : eq(79, 59) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 58, 85) : BV:8
87 : ite(80, 56, 86) : BV:8
88 : eq(53, 2) : BOOL
89 : eq(53, 50) : BOOL
90 : eq(53, 59) : BOOL
91 : eq(53, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 58, 93) : BV:8
95 : ite(88, 56, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(50, 52, 96) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 50) : BOOL
100 : eq(97, 59) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 58, 103) : BV:8
105 : ite(98, 56, 104) : BV:8
106 : bvadd(62, 52, 96) : BV:32
107 : eq(106, 2) : BOOL
108 : eq(106, 50) : BOOL
109 : eq(106, 59) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 58, 112) : BV:8
114 : ite(107, 56, 113) : BV:8
115 : bvadd(59, 52, 96) : BV:32
116 : eq(115, 2) : BOOL
117 : eq(115, 50) : BOOL
118 : eq(115, 59) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 58, 121) : BV:8
123 : ite(116, 56, 122) : BV:8
124 : bvadd(52, 96) : BV:32
125 : eq(124, 2) : BOOL
126 : eq(124, 50) : BOOL
127 : eq(124, 59) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 58, 130) : BV:8
132 : ite(125, 56, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 123, [ 1; 1 ] -> 157, [ 2; 2 ] -> 126, [ 3; 3 ] -> 190, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2513655803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2513655804; 2513655807 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2513655808; 2733839479 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2733839480; 2733839483 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2733839484; 3124605819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3124605820; 3124605823 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3124605824; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3124605820 { 0xba3db37c -1170361476 -1.48203992e245 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2733839480 { 0xa2f31478 -1561127816 -1.89906215e198 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2513655804 { 0x95d357fc -1781311492 -1.65112257e172 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17353 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17356 : BV:32
18 : Lambda17354 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda17355 : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : 123 { 0x7b } : BV:8
72 : eq(69, 65) : BOOL
73 : 190 { 0xbe -66 } : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : eq(69, 74) : BOOL
76 : 157 { 0x9d -99 } : BV:8
77 : 2 { 0x2 +1.23e129 } : BV:32
78 : eq(69, 77) : BOOL
79 : 126 { 0x7e } : BV:8
80 : 0 { 0x0 } : BV:8
81 : ite(78, 79, 80) : BV:8
82 : ite(75, 76, 81) : BV:8
83 : ite(72, 73, 82) : BV:8
84 : ite(70, 71, 83) : BV:8
85 : bvadd(77, 68) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 65) : BOOL
88 : eq(85, 74) : BOOL
89 : eq(85, 77) : BOOL
90 : ite(89, 79, 80) : BV:8
91 : ite(88, 76, 90) : BV:8
92 : ite(87, 73, 91) : BV:8
93 : ite(86, 71, 92) : BV:8
94 : bvadd(74, 68) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 74) : BOOL
98 : eq(94, 77) : BOOL
99 : ite(98, 79, 80) : BV:8
100 : ite(97, 76, 99) : BV:8
101 : ite(96, 73, 100) : BV:8
102 : ite(95, 71, 101) : BV:8
103 : eq(68, 2) : BOOL
104 : eq(68, 65) : BOOL
105 : eq(68, 74) : BOOL
106 : eq(68, 77) : BOOL
107 : ite(106, 79, 80) : BV:8
108 : ite(105, 76, 107) : BV:8
109 : ite(104, 73, 108) : BV:8
110 : ite(103, 71, 109) : BV:8
111 : bvconcat(84, 93, 102, 110) : BV:32
112 : bvadd(65, 67, 111) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 65) : BOOL
115 : eq(112, 74) : BOOL
116 : eq(112, 77) : BOOL
117 : ite(116, 79, 80) : BV:8
118 : ite(115, 76, 117) : BV:8
119 : ite(114, 73, 118) : BV:8
120 : ite(113, 71, 119) : BV:8
121 : bvadd(77, 67, 111) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 65) : BOOL
124 : eq(121, 74) : BOOL
125 : eq(121, 77) : BOOL
126 : ite(125, 79, 80) : BV:8
127 : ite(124, 76, 126) : BV:8
128 : ite(123, 73, 127) : BV:8
129 : ite(122, 71, 128) : BV:8
130 : bvadd(74, 67, 111) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 65) : BOOL
133 : eq(130, 74) : BOOL
134 : eq(130, 77) : BOOL
135 : ite(134, 79, 80) : BV:8
136 : ite(133, 76, 135) : BV:8
137 : ite(132, 73, 136) : BV:8
138 : ite(131, 71, 137) : BV:8
139 : bvadd(67, 111) : BV:32
140 : eq(139, 2) : BOOL
141 : eq(139, 65) : BOOL
142 : eq(139, 74) : BOOL
143 : eq(139, 77) : BOOL
144 : ite(143, 79, 80) : BV:8
145 : ite(142, 76, 144) : BV:8
146 : ite(141, 73, 145) : BV:8
147 : ite(140, 71, 146) : BV:8
148 : bvconcat(120, 129, 138, 147) : BV:32
149 : ite(49, 2, 148) : BV:32
150 : ite(64, 149, 148) : BV:32
151 : ite(49, 2, 150) : BV:32
152 : lambda(46, 151) : FUNCTION[BV:32 -> BV:32]
153 : map(45, 152) : MAP[BV:32 -> BV:32]
154 : lambda(17, 153) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
155 : map(16, 154) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
156 : sym_const(155) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17379 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 10, 10) : BV:32
15 : ite(9, 5, 14) : BV:32
16 : eq(15, 5) : BOOL
17 : and(4, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 4, 18) : BOOL
20 : lambda(3, 19) : FUNCTION[BV:32 -> BOOL]
21 : Lambda17380 : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : bvule(5, 21) : BOOL
25 : bvule(21, 7) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(10, 21) : BOOL
28 : bvule(21, 10) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 10, 10) : BV:32
31 : ite(26, 5, 30) : BV:32
32 : eq(31, 5) : BOOL
33 : and(4, 32) : BOOL
34 : ite(33, 4, 18) : BOOL
35 : and(4, 34) : BOOL
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvmul(37, 21) : BV:32
39 : 3195968891 { 0xbe7e9d7b -1098998405 -1.98918092e253 } : BV:32
40 : bvadd(36, 38, 39) : BV:32
41 : eq(40, 5) : BOOL
42 : 123 { 0x7b } : BV:8
43 : eq(40, 36) : BOOL
44 : 190 { 0xbe -66 } : BV:8
45 : eq(40, 1) : BOOL
46 : 157 { 0x9d -99 } : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : eq(40, 47) : BOOL
49 : 126 { 0x7e } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(43, 44, 52) : BV:8
54 : ite(41, 42, 53) : BV:8
55 : bvadd(47, 38, 39) : BV:32
56 : eq(55, 5) : BOOL
57 : eq(55, 36) : BOOL
58 : eq(55, 1) : BOOL
59 : eq(55, 47) : BOOL
60 : ite(59, 49, 50) : BV:8
61 : ite(58, 46, 60) : BV:8
62 : ite(57, 44, 61) : BV:8
63 : ite(56, 42, 62) : BV:8
64 : bvadd(1, 38, 39) : BV:32
65 : eq(64, 5) : BOOL
66 : eq(64, 36) : BOOL
67 : eq(64, 1) : BOOL
68 : eq(64, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 44, 70) : BV:8
72 : ite(65, 42, 71) : BV:8
73 : bvadd(38, 39) : BV:32
74 : eq(73, 5) : BOOL
75 : eq(73, 36) : BOOL
76 : eq(73, 1) : BOOL
77 : eq(73, 47) : BOOL
78 : ite(77, 49, 50) : BV:8
79 : ite(76, 46, 78) : BV:8
80 : ite(75, 44, 79) : BV:8
81 : ite(74, 42, 80) : BV:8
82 : bvconcat(54, 63, 72, 81) : BV:32
83 : ite(23, 5, 82) : BV:32
84 : ite(35, 83, 82) : BV:32
85 : ite(23, 5, 84) : BV:32
86 : lambda(21, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(20, 86) : MAP[BV:32 -> BV:32]
88 : sum(1, 2, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17381 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : ite(11, 8, 8) : BV:32
13 : ite(7, 3, 12) : BV:32
14 : eq(13, 3) : BOOL
15 : and(2, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 2, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17382 : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : bvule(3, 19) : BOOL
23 : bvule(19, 5) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(8, 19) : BOOL
26 : bvule(19, 8) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 8, 8) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(2, 30) : BOOL
32 : ite(31, 2, 16) : BOOL
33 : and(2, 32) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : 4 { 0x4 +1.47e129 } : BV:32
36 : bvmul(35, 19) : BV:32
37 : 3195968891 { 0xbe7e9d7b -1098998405 -1.98918092e253 } : BV:32
38 : bvadd(34, 36, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : 123 { 0x7b } : BV:8
41 : eq(38, 34) : BOOL
42 : 190 { 0xbe -66 } : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : eq(38, 43) : BOOL
45 : 157 { 0x9d -99 } : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : eq(38, 46) : BOOL
48 : 126 { 0x7e } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : bvadd(46, 36, 37) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 34) : BOOL
57 : eq(54, 43) : BOOL
58 : eq(54, 46) : BOOL
59 : ite(58, 48, 49) : BV:8
60 : ite(57, 45, 59) : BV:8
61 : ite(56, 42, 60) : BV:8
62 : ite(55, 40, 61) : BV:8
63 : bvadd(43, 36, 37) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 34) : BOOL
66 : eq(63, 43) : BOOL
67 : eq(63, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : bvadd(36, 37) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 34) : BOOL
75 : eq(72, 43) : BOOL
76 : eq(72, 46) : BOOL
77 : ite(76, 48, 49) : BV:8
78 : ite(75, 45, 77) : BV:8
79 : ite(74, 42, 78) : BV:8
80 : ite(73, 40, 79) : BV:8
81 : bvconcat(53, 62, 71, 80) : BV:32
82 : ite(21, 3, 81) : BV:32
83 : ite(33, 82, 81) : BV:32
84 : ite(21, 3, 83) : BV:32
85 : lambda(19, 84) : FUNCTION[BV:32 -> BV:32]
86 : map(18, 85) : MAP[BV:32 -> BV:32]
87 : sym_const(86) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17383 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : ite(11, 8, 8) : BV:32
13 : ite(7, 3, 12) : BV:32
14 : eq(13, 3) : BOOL
15 : and(2, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 2, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda17384 : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : bvule(3, 19) : BOOL
23 : bvule(19, 5) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(8, 19) : BOOL
26 : bvule(19, 8) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 8, 8) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(2, 30) : BOOL
32 : ite(31, 2, 16) : BOOL
33 : and(2, 32) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : 4 { 0x4 +1.47e129 } : BV:32
36 : bvmul(35, 19) : BV:32
37 : 3195968891 { 0xbe7e9d7b -1098998405 -1.98918092e253 } : BV:32
38 : bvadd(34, 36, 37) : BV:32
39 : eq(38, 3) : BOOL
40 : 123 { 0x7b } : BV:8
41 : eq(38, 34) : BOOL
42 : 190 { 0xbe -66 } : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : eq(38, 43) : BOOL
45 : 157 { 0x9d -99 } : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : eq(38, 46) : BOOL
48 : 126 { 0x7e } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : bvadd(46, 36, 37) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 34) : BOOL
57 : eq(54, 43) : BOOL
58 : eq(54, 46) : BOOL
59 : ite(58, 48, 49) : BV:8
60 : ite(57, 45, 59) : BV:8
61 : ite(56, 42, 60) : BV:8
62 : ite(55, 40, 61) : BV:8
63 : bvadd(43, 36, 37) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 34) : BOOL
66 : eq(63, 43) : BOOL
67 : eq(63, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 40, 70) : BV:8
72 : bvadd(36, 37) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 34) : BOOL
75 : eq(72, 43) : BOOL
76 : eq(72, 46) : BOOL
77 : ite(76, 48, 49) : BV:8
78 : ite(75, 45, 77) : BV:8
79 : ite(74, 42, 78) : BV:8
80 : ite(73, 40, 79) : BV:8
81 : bvconcat(53, 62, 71, 80) : BV:32
82 : ite(21, 3, 81) : BV:32
83 : ite(33, 82, 81) : BV:32
84 : ite(21, 3, 83) : BV:32
85 : lambda(19, 84) : FUNCTION[BV:32 -> BV:32]
86 : map(18, 85) : MAP[BV:32 -> BV:32]
87 : sym_const(86) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17307 : BV:32
2 : Lambda17308 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870913 { 0x20000001 +1.11e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 536870912 { 0x20000000 +1.0e193 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17312 : BV:32
2 : Lambda17313 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 536870913 { 0x20000001 +1.11e193 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 3) : BOOL
48 : 123 { 0x7b } : BV:8
49 : eq(46, 42) : BOOL
50 : 190 { 0xbe -66 } : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : eq(46, 51) : BOOL
53 : 157 { 0x9d -99 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(46, 54) : BOOL
56 : 126 { 0x7e } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(49, 50, 59) : BV:8
61 : ite(47, 48, 60) : BV:8
62 : bvadd(54, 45) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 42) : BOOL
65 : eq(62, 51) : BOOL
66 : eq(62, 54) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 53, 67) : BV:8
69 : ite(64, 50, 68) : BV:8
70 : ite(63, 48, 69) : BV:8
71 : bvadd(51, 45) : BV:32
72 : eq(71, 3) : BOOL
73 : eq(71, 42) : BOOL
74 : eq(71, 51) : BOOL
75 : eq(71, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 53, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : ite(72, 48, 78) : BV:8
80 : eq(45, 3) : BOOL
81 : eq(45, 42) : BOOL
82 : eq(45, 51) : BOOL
83 : eq(45, 54) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 53, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : ite(80, 48, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(42, 44, 88) : BV:32
90 : eq(89, 3) : BOOL
91 : eq(89, 42) : BOOL
92 : eq(89, 51) : BOOL
93 : eq(89, 54) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 53, 94) : BV:8
96 : ite(91, 50, 95) : BV:8
97 : ite(90, 48, 96) : BV:8
98 : bvadd(54, 44, 88) : BV:32
99 : eq(98, 3) : BOOL
100 : eq(98, 42) : BOOL
101 : eq(98, 51) : BOOL
102 : eq(98, 54) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 53, 103) : BV:8
105 : ite(100, 50, 104) : BV:8
106 : ite(99, 48, 105) : BV:8
107 : bvadd(51, 44, 88) : BV:32
108 : eq(107, 3) : BOOL
109 : eq(107, 42) : BOOL
110 : eq(107, 51) : BOOL
111 : eq(107, 54) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 53, 112) : BV:8
114 : ite(109, 50, 113) : BV:8
115 : ite(108, 48, 114) : BV:8
116 : bvadd(44, 88) : BV:32
117 : eq(116, 3) : BOOL
118 : eq(116, 42) : BOOL
119 : eq(116, 51) : BOOL
120 : eq(116, 54) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 53, 121) : BV:8
123 : ite(118, 50, 122) : BV:8
124 : ite(117, 48, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(6, 3, 125) : BV:32
127 : ite(41, 126, 125) : BV:32
128 : ite(6, 3, 127) : BV:32
129 : lambda(1, 2, 128) : FUNCTION[BV:32,BV:32 -> BV:32]
130 : sym_const(129) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17314 : BV:32
2 : Lambda17315 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870913 { 0x20000001 +1.11e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 536870912 { 0x20000000 +1.0e193 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17318 : BV:32
2 : Lambda17319 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 123 { 0x7b } : BV:8
14 : eq(11, 7) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 157 { 0x9d -99 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 126 { 0x7e } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2513655804 { 0x95d357fc -1781311492 -1.65112257e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2513655807 { 0x95d357ff -1781311489 -1.65112292e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3124605820 { 0xba3db37c -1170361476 -1.48203992e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3124605823 { 0xba3db37f -1170361473 -1.48204028e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2733839480 { 0xa2f31478 -1561127816 -1.89906215e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2733839483 { 0xa2f3147b -1561127813 -1.89906251e198 } : BV:32
=counter_example.random_seed
811101378
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce6452.num_edges_traversed1
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce6452 453e284a9ca6ff512e1da464b24cf81
=input.spec-%var-x-1
1 : Lambda17450 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17453 : BV:32
18 : Lambda17451 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17452 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4099 { 0x1003 +1.48863e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 231 { 0xe7 -25 } : BV:8
64 : 4098 { 0x1002 +1.48851e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 227 { 0xe3 -29 } : BV:8
67 : eq(61, 22) : BOOL
68 : 26 { 0x1a } : BV:8
69 : eq(61, 8) : BOOL
70 : 240 { 0xf0 -16 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(67, 68, 72) : BV:8
74 : ite(65, 66, 73) : BV:8
75 : ite(62, 63, 74) : BV:8
76 : bvadd(64, 60) : BV:32
77 : eq(76, 59) : BOOL
78 : eq(76, 64) : BOOL
79 : eq(76, 22) : BOOL
80 : eq(76, 8) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 68, 81) : BV:8
83 : ite(78, 66, 82) : BV:8
84 : ite(77, 63, 83) : BV:8
85 : bvadd(22, 60) : BV:32
86 : eq(85, 59) : BOOL
87 : eq(85, 64) : BOOL
88 : eq(85, 22) : BOOL
89 : eq(85, 8) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : bvadd(8, 60) : BV:32
95 : eq(94, 59) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 22) : BOOL
98 : eq(94, 8) : BOOL
99 : ite(98, 70, 71) : BV:8
100 : ite(97, 68, 99) : BV:8
101 : ite(96, 66, 100) : BV:8
102 : ite(95, 63, 101) : BV:8
103 : bvconcat(75, 84, 93, 102) : BV:32
104 : bvadd(56, 58, 103) : BV:32
105 : eq(104, 59) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 22) : BOOL
108 : eq(104, 8) : BOOL
109 : ite(108, 70, 71) : BV:8
110 : ite(107, 68, 109) : BV:8
111 : ite(106, 66, 110) : BV:8
112 : ite(105, 63, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 58, 103) : BV:32
115 : eq(114, 59) : BOOL
116 : eq(114, 64) : BOOL
117 : eq(114, 22) : BOOL
118 : eq(114, 8) : BOOL
119 : ite(118, 70, 71) : BV:8
120 : ite(117, 68, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : 1 { 0x1 +1.11e129 } : BV:32
124 : bvadd(123, 58, 103) : BV:32
125 : eq(124, 59) : BOOL
126 : eq(124, 64) : BOOL
127 : eq(124, 22) : BOOL
128 : eq(124, 8) : BOOL
129 : ite(128, 70, 71) : BV:8
130 : ite(127, 68, 129) : BV:8
131 : ite(126, 66, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : bvadd(58, 103) : BV:32
134 : eq(133, 59) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 22) : BOOL
137 : eq(133, 8) : BOOL
138 : ite(137, 70, 71) : BV:8
139 : ite(136, 68, 138) : BV:8
140 : ite(135, 66, 139) : BV:8
141 : ite(134, 63, 140) : BV:8
142 : bvconcat(112, 122, 132, 141) : BV:32
143 : ite(55, 2, 142) : BV:32
144 : lambda(52, 143) : FUNCTION[BV:32 -> BV:32]
145 : map(51, 144) : MAP[BV:32 -> BV:32]
146 : lambda(17, 145) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
147 : map(16, 146) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
148 : sym_const(147) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4095 ] -> 0, [ 4096; 4096 ] -> 240, [ 4097; 4097 ] -> 26, [ 4098; 4098 ] -> 227, [ 4099; 4099 ] -> 231, [ 4100; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540313587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 540313588; 540313591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 540313592; 1438193771 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1438193772; 1438193775 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1438193776; 2924963735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2924963736; 2924963739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2924963740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 540313588 { 0x203487f4 +1.41039896e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1438193772 { 0x55b9186c +1.44605779e44 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2924963736 { 0xae576798 -1370003560 -1.68284893e221 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17455 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17458 : BV:32
18 : Lambda17456 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17457 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4099 { 0x1003 +1.48863e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 231 { 0xe7 -25 } : BV:8
83 : 4098 { 0x1002 +1.48851e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 227 { 0xe3 -29 } : BV:8
86 : eq(80, 22) : BOOL
87 : 26 { 0x1a } : BV:8
88 : eq(80, 8) : BOOL
89 : 240 { 0xf0 -16 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(86, 87, 91) : BV:8
93 : ite(84, 85, 92) : BV:8
94 : ite(81, 82, 93) : BV:8
95 : bvadd(83, 79) : BV:32
96 : eq(95, 78) : BOOL
97 : eq(95, 83) : BOOL
98 : eq(95, 22) : BOOL
99 : eq(95, 8) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 87, 100) : BV:8
102 : ite(97, 85, 101) : BV:8
103 : ite(96, 82, 102) : BV:8
104 : bvadd(22, 79) : BV:32
105 : eq(104, 78) : BOOL
106 : eq(104, 83) : BOOL
107 : eq(104, 22) : BOOL
108 : eq(104, 8) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 87, 109) : BV:8
111 : ite(106, 85, 110) : BV:8
112 : ite(105, 82, 111) : BV:8
113 : bvadd(8, 79) : BV:32
114 : eq(113, 78) : BOOL
115 : eq(113, 83) : BOOL
116 : eq(113, 22) : BOOL
117 : eq(113, 8) : BOOL
118 : ite(117, 89, 90) : BV:8
119 : ite(116, 87, 118) : BV:8
120 : ite(115, 85, 119) : BV:8
121 : ite(114, 82, 120) : BV:8
122 : bvconcat(94, 103, 112, 121) : BV:32
123 : bvadd(75, 77, 122) : BV:32
124 : eq(123, 78) : BOOL
125 : eq(123, 83) : BOOL
126 : eq(123, 22) : BOOL
127 : eq(123, 8) : BOOL
128 : ite(127, 89, 90) : BV:8
129 : ite(126, 87, 128) : BV:8
130 : ite(125, 85, 129) : BV:8
131 : ite(124, 82, 130) : BV:8
132 : 2 { 0x2 +1.23e129 } : BV:32
133 : bvadd(132, 77, 122) : BV:32
134 : eq(133, 78) : BOOL
135 : eq(133, 83) : BOOL
136 : eq(133, 22) : BOOL
137 : eq(133, 8) : BOOL
138 : ite(137, 89, 90) : BV:8
139 : ite(136, 87, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 82, 140) : BV:8
142 : 1 { 0x1 +1.11e129 } : BV:32
143 : bvadd(142, 77, 122) : BV:32
144 : eq(143, 78) : BOOL
145 : eq(143, 83) : BOOL
146 : eq(143, 22) : BOOL
147 : eq(143, 8) : BOOL
148 : ite(147, 89, 90) : BV:8
149 : ite(146, 87, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 82, 150) : BV:8
152 : bvadd(77, 122) : BV:32
153 : eq(152, 78) : BOOL
154 : eq(152, 83) : BOOL
155 : eq(152, 22) : BOOL
156 : eq(152, 8) : BOOL
157 : ite(156, 89, 90) : BV:8
158 : ite(155, 87, 157) : BV:8
159 : ite(154, 85, 158) : BV:8
160 : ite(153, 82, 159) : BV:8
161 : bvconcat(131, 141, 151, 160) : BV:32
162 : ite(55, 2, 161) : BV:32
163 : ite(74, 162, 161) : BV:32
164 : ite(55, 2, 163) : BV:32
165 : lambda(52, 164) : FUNCTION[BV:32 -> BV:32]
166 : map(51, 165) : MAP[BV:32 -> BV:32]
167 : lambda(17, 166) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
168 : map(16, 167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
169 : sym_const(168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17479 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda17480 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 27) : BV:32
49 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
50 : bvadd(46, 48, 49) : BV:32
51 : 4099 { 0x1003 +1.48863e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 231 { 0xe7 -25 } : BV:8
54 : 4098 { 0x1002 +1.48851e129 } : BV:32
55 : eq(50, 54) : BOOL
56 : 227 { 0xe3 -29 } : BV:8
57 : 4097 { 0x1001 +1.48840e129 } : BV:32
58 : eq(50, 57) : BOOL
59 : 26 { 0x1a } : BV:8
60 : 4096 { 0x1000 +1.48828e129 } : BV:32
61 : eq(50, 60) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(52, 53, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 48, 49) : BV:32
70 : eq(69, 51) : BOOL
71 : eq(69, 54) : BOOL
72 : eq(69, 57) : BOOL
73 : eq(69, 60) : BOOL
74 : ite(73, 62, 63) : BV:8
75 : ite(72, 59, 74) : BV:8
76 : ite(71, 56, 75) : BV:8
77 : ite(70, 53, 76) : BV:8
78 : bvadd(1, 48, 49) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 54) : BOOL
81 : eq(78, 57) : BOOL
82 : eq(78, 60) : BOOL
83 : ite(82, 62, 63) : BV:8
84 : ite(81, 59, 83) : BV:8
85 : ite(80, 56, 84) : BV:8
86 : ite(79, 53, 85) : BV:8
87 : bvadd(48, 49) : BV:32
88 : eq(87, 51) : BOOL
89 : eq(87, 54) : BOOL
90 : eq(87, 57) : BOOL
91 : eq(87, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : ite(88, 53, 94) : BV:8
96 : bvconcat(67, 77, 86, 95) : BV:32
97 : ite(29, 5, 96) : BV:32
98 : ite(45, 97, 96) : BV:32
99 : ite(29, 5, 98) : BV:32
100 : lambda(27, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(26, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17481 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17482 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 4099 { 0x1003 +1.48863e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 231 { 0xe7 -25 } : BV:8
52 : 4098 { 0x1002 +1.48851e129 } : BV:32
53 : eq(48, 52) : BOOL
54 : 227 { 0xe3 -29 } : BV:8
55 : 4097 { 0x1001 +1.48840e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 26 { 0x1a } : BV:8
58 : 4096 { 0x1000 +1.48828e129 } : BV:32
59 : eq(48, 58) : BOOL
60 : 240 { 0xf0 -16 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 46, 47) : BV:32
68 : eq(67, 49) : BOOL
69 : eq(67, 52) : BOOL
70 : eq(67, 55) : BOOL
71 : eq(67, 58) : BOOL
72 : ite(71, 60, 61) : BV:8
73 : ite(70, 57, 72) : BV:8
74 : ite(69, 54, 73) : BV:8
75 : ite(68, 51, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 46, 47) : BV:32
78 : eq(77, 49) : BOOL
79 : eq(77, 52) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : ite(81, 60, 61) : BV:8
83 : ite(80, 57, 82) : BV:8
84 : ite(79, 54, 83) : BV:8
85 : ite(78, 51, 84) : BV:8
86 : bvadd(46, 47) : BV:32
87 : eq(86, 49) : BOOL
88 : eq(86, 52) : BOOL
89 : eq(86, 55) : BOOL
90 : eq(86, 58) : BOOL
91 : ite(90, 60, 61) : BV:8
92 : ite(89, 57, 91) : BV:8
93 : ite(88, 54, 92) : BV:8
94 : ite(87, 51, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(27, 3, 95) : BV:32
97 : ite(43, 96, 95) : BV:32
98 : ite(27, 3, 97) : BV:32
99 : lambda(25, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(24, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17483 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17484 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 4099 { 0x1003 +1.48863e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 231 { 0xe7 -25 } : BV:8
52 : 4098 { 0x1002 +1.48851e129 } : BV:32
53 : eq(48, 52) : BOOL
54 : 227 { 0xe3 -29 } : BV:8
55 : 4097 { 0x1001 +1.48840e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 26 { 0x1a } : BV:8
58 : 4096 { 0x1000 +1.48828e129 } : BV:32
59 : eq(48, 58) : BOOL
60 : 240 { 0xf0 -16 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 46, 47) : BV:32
68 : eq(67, 49) : BOOL
69 : eq(67, 52) : BOOL
70 : eq(67, 55) : BOOL
71 : eq(67, 58) : BOOL
72 : ite(71, 60, 61) : BV:8
73 : ite(70, 57, 72) : BV:8
74 : ite(69, 54, 73) : BV:8
75 : ite(68, 51, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 46, 47) : BV:32
78 : eq(77, 49) : BOOL
79 : eq(77, 52) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : ite(81, 60, 61) : BV:8
83 : ite(80, 57, 82) : BV:8
84 : ite(79, 54, 83) : BV:8
85 : ite(78, 51, 84) : BV:8
86 : bvadd(46, 47) : BV:32
87 : eq(86, 49) : BOOL
88 : eq(86, 52) : BOOL
89 : eq(86, 55) : BOOL
90 : eq(86, 58) : BOOL
91 : ite(90, 60, 61) : BV:8
92 : ite(89, 57, 91) : BV:8
93 : ite(88, 54, 92) : BV:8
94 : ite(87, 51, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(27, 3, 95) : BV:32
97 : ite(43, 96, 95) : BV:32
98 : ite(27, 3, 97) : BV:32
99 : lambda(25, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(24, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17409 : BV:32
2 : Lambda17410 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4096 { 0x1000 +1.48828e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17414 : BV:32
2 : Lambda17415 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4097 { 0x1001 +1.48840e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4099 { 0x1003 +1.48863e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 231 { 0xe7 -25 } : BV:8
56 : 4098 { 0x1002 +1.48851e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 227 { 0xe3 -29 } : BV:8
59 : eq(53, 20) : BOOL
60 : 26 { 0x1a } : BV:8
61 : eq(53, 12) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(59, 60, 64) : BV:8
66 : ite(57, 58, 65) : BV:8
67 : ite(54, 55, 66) : BV:8
68 : bvadd(56, 52) : BV:32
69 : eq(68, 51) : BOOL
70 : eq(68, 56) : BOOL
71 : eq(68, 20) : BOOL
72 : eq(68, 12) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 60, 73) : BV:8
75 : ite(70, 58, 74) : BV:8
76 : ite(69, 55, 75) : BV:8
77 : bvadd(20, 52) : BV:32
78 : eq(77, 51) : BOOL
79 : eq(77, 56) : BOOL
80 : eq(77, 20) : BOOL
81 : eq(77, 12) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 60, 82) : BV:8
84 : ite(79, 58, 83) : BV:8
85 : ite(78, 55, 84) : BV:8
86 : bvadd(12, 52) : BV:32
87 : eq(86, 51) : BOOL
88 : eq(86, 56) : BOOL
89 : eq(86, 20) : BOOL
90 : eq(86, 12) : BOOL
91 : ite(90, 62, 63) : BV:8
92 : ite(89, 60, 91) : BV:8
93 : ite(88, 58, 92) : BV:8
94 : ite(87, 55, 93) : BV:8
95 : bvconcat(67, 76, 85, 94) : BV:32
96 : bvadd(48, 50, 95) : BV:32
97 : eq(96, 51) : BOOL
98 : eq(96, 56) : BOOL
99 : eq(96, 20) : BOOL
100 : eq(96, 12) : BOOL
101 : ite(100, 62, 63) : BV:8
102 : ite(99, 60, 101) : BV:8
103 : ite(98, 58, 102) : BV:8
104 : ite(97, 55, 103) : BV:8
105 : 2 { 0x2 +1.23e129 } : BV:32
106 : bvadd(105, 50, 95) : BV:32
107 : eq(106, 51) : BOOL
108 : eq(106, 56) : BOOL
109 : eq(106, 20) : BOOL
110 : eq(106, 12) : BOOL
111 : ite(110, 62, 63) : BV:8
112 : ite(109, 60, 111) : BV:8
113 : ite(108, 58, 112) : BV:8
114 : ite(107, 55, 113) : BV:8
115 : 1 { 0x1 +1.11e129 } : BV:32
116 : bvadd(115, 50, 95) : BV:32
117 : eq(116, 51) : BOOL
118 : eq(116, 56) : BOOL
119 : eq(116, 20) : BOOL
120 : eq(116, 12) : BOOL
121 : ite(120, 62, 63) : BV:8
122 : ite(119, 60, 121) : BV:8
123 : ite(118, 58, 122) : BV:8
124 : ite(117, 55, 123) : BV:8
125 : bvadd(50, 95) : BV:32
126 : eq(125, 51) : BOOL
127 : eq(125, 56) : BOOL
128 : eq(125, 20) : BOOL
129 : eq(125, 12) : BOOL
130 : ite(129, 62, 63) : BV:8
131 : ite(128, 60, 130) : BV:8
132 : ite(127, 58, 131) : BV:8
133 : ite(126, 55, 132) : BV:8
134 : bvconcat(104, 114, 124, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : ite(47, 135, 134) : BV:32
137 : ite(6, 3, 136) : BV:32
138 : lambda(1, 2, 137) : FUNCTION[BV:32,BV:32 -> BV:32]
139 : sym_const(138) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17416 : BV:32
2 : Lambda17417 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4096 { 0x1000 +1.48828e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17420 : BV:32
2 : Lambda17421 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4099 { 0x1003 +1.48863e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 231 { 0xe7 -25 } : BV:8
15 : 4098 { 0x1002 +1.48851e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 227 { 0xe3 -29 } : BV:8
18 : 4097 { 0x1001 +1.48840e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 26 { 0x1a } : BV:8
21 : 4096 { 0x1000 +1.48828e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : bvadd(15, 11) : BV:32
30 : eq(29, 10) : BOOL
31 : eq(29, 15) : BOOL
32 : eq(29, 18) : BOOL
33 : eq(29, 21) : BOOL
34 : ite(33, 23, 24) : BV:8
35 : ite(32, 20, 34) : BV:8
36 : ite(31, 17, 35) : BV:8
37 : ite(30, 14, 36) : BV:8
38 : bvadd(18, 11) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 15) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : ite(42, 23, 24) : BV:8
44 : ite(41, 20, 43) : BV:8
45 : ite(40, 17, 44) : BV:8
46 : ite(39, 14, 45) : BV:8
47 : bvadd(21, 11) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 15) : BOOL
50 : eq(47, 18) : BOOL
51 : eq(47, 21) : BOOL
52 : ite(51, 23, 24) : BV:8
53 : ite(50, 20, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 14, 54) : BV:8
56 : bvconcat(28, 37, 46, 55) : BV:32
57 : bvadd(7, 9, 56) : BV:32
58 : eq(57, 10) : BOOL
59 : eq(57, 15) : BOOL
60 : eq(57, 18) : BOOL
61 : eq(57, 21) : BOOL
62 : ite(61, 23, 24) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 17, 63) : BV:8
65 : ite(58, 14, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 9, 56) : BV:32
68 : eq(67, 10) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : ite(71, 23, 24) : BV:8
73 : ite(70, 20, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 14, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 9, 56) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : ite(81, 23, 24) : BV:8
83 : ite(80, 20, 82) : BV:8
84 : ite(79, 17, 83) : BV:8
85 : ite(78, 14, 84) : BV:8
86 : bvadd(9, 56) : BV:32
87 : eq(86, 10) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : ite(90, 23, 24) : BV:8
92 : ite(89, 20, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 14, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(6, 3, 95) : BV:32
97 : lambda(1, 2, 96) : FUNCTION[BV:32,BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2924963736 { 0xae576798 -1370003560 -1.68284893e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2924963739 { 0xae57679b -1370003557 -1.68284928e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 540313588 { 0x203487f4 +1.41039896e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 540313591 { 0x203487f7 +1.41039931e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1438193772 { 0x55b9186c +1.44605779e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1438193775 { 0x55b9186f +1.44605815e44 } : BV:32
=counter_example.random_seed
3547141825
=counter_example_end
=global nodece 18 num_edges_traversed 1
=global nodece 18 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3.ce9845.num_edges_traversed0
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce9845 fe9839960a8e8f3b0b78316ff5e9899
=input.spec-%var-x-1
1 : Lambda24115 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24118 : BV:32
18 : Lambda24116 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24117 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 623571623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 623571624; 623571627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 623571628; 1997431111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1997431112; 1997431115 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1997431116; 2188560947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2188560948; 2188560951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2188560952; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2188560948 { 0x8272ca34 -2106406348 -1.89679574e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1997431112 { 0x770e6148 +1.11234378e111 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 623571624 { 0x252af2a8 +1.33553028e203 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24126 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24129 : BV:32
18 : Lambda24127 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24128 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24119 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24120 : BV:32
7 : 251937864 { 0xf044448 +1.3333377e159 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24132 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24133 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 623571624 { 0x252af2a8 +1.33553028e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 623571627 { 0x252af2ab +1.33553063e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2188560948 { 0x8272ca34 -2106406348 -1.89679574e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2188560951 { 0x8272ca37 -2106406345 -1.89679610e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1997431112 { 0x770e6148 +1.11234378e111 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1997431115 { 0x770e614b +1.11234414e111 } : BV:32
=counter_example.random_seed
1074296044
=counter_example_end
=global nodece 19 num_edges_traversed 0
=global nodece 19 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 20
=global nodece 20 nodece z3v487.ce9846.num_edges_traversed0
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3v487.ce9846 3cf88e5e5c8f7c595947e54a17a2f138
=input.spec-%var-x-1
1 : Lambda24151 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24154 : BV:32
18 : Lambda24152 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24153 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 20; 33554431 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554432; 33554435 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 33554436; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24162 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24165 : BV:32
18 : Lambda24163 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24164 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24155 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24156 : BV:32
7 : 2076168154 { 0x7bbfcfda +1.49853062e120 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24168 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24169 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 33554435 { 0x2000003 +1.35e133 } : BV:32
=counter_example.random_seed
2942813791
=counter_example_end
=global nodece 20 num_edges_traversed 0
=global nodece 20 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3v487.ce9950.num_edges_traversed4
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce9950 73a784a2722b5e9b6d413e476fd5350
=input.spec-%var-x-1
1 : Lambda128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda131 : BV:32
18 : Lambda129 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda130 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 814661 ] -> 0, [ 814662; 814662 ] -> 1, [ 814663; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 605447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 605448; 605451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 605452; 814659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 814660; 814663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 814664; 933383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 933384; 933387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 933388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 605448 { 0x93d08 +1.7217502e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 933384 { 0xe3e08 +1.11126804e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 814660 { 0xc6e44 +1.9711503e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda131 : BV:32
18 : Lambda129 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda130 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24380 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24381 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24382 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24383 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda24384 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24385 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda111 : BV:32
2 : Lambda112 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda113 : BV:32
2 : Lambda114 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 814660 { 0xc6e44 +1.9711503e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 814663 { 0xc6e47 +1.9711539e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 605448 { 0x93d08 +1.7217502e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 605451 { 0x93d0b +1.7217538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 933384 { 0xe3e08 +1.11126804e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 933387 { 0xe3e0b +1.11126840e129 } : BV:32
=counter_example.random_seed
1269331065
=counter_example_end
=global nodece 21 num_edges_traversed 4
=global nodece 21 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce9985.num_edges_traversed6
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce9985 391a7cd29c2d465948f94791e2d3357
=input.spec-%var-x-1
1 : Lambda128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda131 : BV:32
18 : Lambda129 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda130 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 814661 ] -> 0, [ 814662; 814662 ] -> 1, [ 814663; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 605447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 605448; 605451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 605452; 814659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 814660; 814663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 814664; 933383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 933384; 933387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 933388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 605448 { 0x93d08 +1.7217502e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 933384 { 0xe3e08 +1.11126804e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 814660 { 0xc6e44 +1.9711503e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda131 : BV:32
18 : Lambda129 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda130 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24390 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24391 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 1 { 0x1 } : BV:8
15 : 0 { 0x0 } : BV:8
16 : ite(13, 14, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 9, 10) : BV:32
19 : eq(18, 12) : BOOL
20 : ite(19, 14, 15) : BV:8
21 : bvadd(1, 9, 10) : BV:32
22 : eq(21, 12) : BOOL
23 : ite(22, 14, 15) : BV:8
24 : bvadd(9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : ite(25, 14, 15) : BV:8
27 : bvconcat(16, 20, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24392 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24393 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda24394 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24395 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 0 { 0x0 } : BV:8
14 : ite(11, 12, 13) : BV:8
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvadd(15, 7, 8) : BV:32
17 : eq(16, 10) : BOOL
18 : ite(17, 12, 13) : BV:8
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : bvadd(19, 7, 8) : BV:32
21 : eq(20, 10) : BOOL
22 : ite(21, 12, 13) : BV:8
23 : bvadd(7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : ite(24, 12, 13) : BV:8
26 : bvconcat(14, 18, 22, 25) : BV:32
27 : lambda(4, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(3, 27) : MAP[BV:32 -> BV:32]
29 : sym_const(28) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda111 : BV:32
2 : Lambda112 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda113 : BV:32
2 : Lambda114 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 814660 { 0xc6e44 +1.9711503e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 814663 { 0xc6e47 +1.9711539e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 605448 { 0x93d08 +1.7217502e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 605451 { 0x93d0b +1.7217538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 933384 { 0xe3e08 +1.11126804e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 933387 { 0xe3e0b +1.11126840e129 } : BV:32
=counter_example.random_seed
1269331065
=counter_example_end
=global nodece 22 num_edges_traversed 6
=global nodece 22 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 23
=global nodece 23 nodece z3v487.ce10020.num_edges_traversed7
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce10020 37b2e4e7ac1dc779d6cbe83345c185f
=input.spec-%var-x-1
1 : Lambda128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda131 : BV:32
18 : Lambda129 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda130 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 814661 ] -> 0, [ 814662; 814662 ] -> 1, [ 814663; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 605447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 605448; 605451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 605452; 814659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 814660; 814663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 814664; 933383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 933384; 933387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 933388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 605448 { 0x93d08 +1.7217502e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 933384 { 0xe3e08 +1.11126804e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 814660 { 0xc6e44 +1.9711503e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 65535 { 0xffff +1.781238e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 65536 { 0x10000 +1.781250e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda131 : BV:32
18 : Lambda129 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda130 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 65535 ] -> true, [ 65536; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda111 : BV:32
2 : Lambda112 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda113 : BV:32
2 : Lambda114 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 814662 { 0xc6e46 +1.9711527e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 220800936 { 0xd2927a8 +1.32152271e155 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 814660 { 0xc6e44 +1.9711503e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 814663 { 0xc6e47 +1.9711539e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 605448 { 0x93d08 +1.7217502e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 605451 { 0x93d0b +1.7217538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 933384 { 0xe3e08 +1.11126804e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 933387 { 0xe3e0b +1.11126840e129 } : BV:32
=counter_example.random_seed
1269331065
=counter_example_end
=global nodece 23 num_edges_traversed 7
=global nodece 23 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3.ce9940.num_edges_traversed3
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce9940 9be353de5e75c4ab1a54d97188786c4
=input.spec-%var-x-1
1 : Lambda186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda189 : BV:32
18 : Lambda187 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda188 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1819934699 ] -> 0, [ 1819934700; 1819934700 ] -> 2, [ 1819934701; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 502787959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 502787960; 502787963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 502787964; 1811775471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1811775472; 1811775475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1811775476; 1819934699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1819934700; 1819934703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1819934704; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 502787960 { 0x1df7ef78 +1.93699550e188 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1811775472 { 0x6bfd7ff0 +1.98046684e88 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda186 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda189 : BV:32
18 : Lambda187 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda188 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : bvadd(8, 24, 2) : BV:32
32 : eq(31, 26) : BOOL
33 : ite(32, 28, 29) : BV:8
34 : bvadd(4, 24, 2) : BV:32
35 : eq(34, 26) : BOOL
36 : ite(35, 28, 29) : BV:8
37 : bvadd(24, 2) : BV:32
38 : eq(37, 26) : BOOL
39 : ite(38, 28, 29) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : bvadd(21, 23, 40) : BV:32
42 : eq(41, 26) : BOOL
43 : ite(42, 28, 29) : BV:8
44 : bvadd(8, 23, 40) : BV:32
45 : eq(44, 26) : BOOL
46 : ite(45, 28, 29) : BV:8
47 : bvadd(4, 23, 40) : BV:32
48 : eq(47, 26) : BOOL
49 : ite(48, 28, 29) : BV:8
50 : bvadd(23, 40) : BV:32
51 : eq(50, 26) : BOOL
52 : ite(51, 28, 29) : BV:8
53 : bvconcat(43, 46, 49, 52) : BV:32
54 : lambda(20, 53) : FUNCTION[BV:32 -> BV:32]
55 : map(19, 54) : MAP[BV:32 -> BV:32]
56 : lambda(17, 55) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
57 : map(16, 56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
58 : sym_const(57) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda156 : BV:32
2 : Lambda157 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda158 : BV:32
2 : Lambda159 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 2 { 0x2 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 813103484 { 0x3076f97c +1.92948865e225 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1819934700 { 0x6c79ffec +1.95312261e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1819934703 { 0x6c79ffef +1.95312297e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 502787960 { 0x1df7ef78 +1.93699550e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 502787963 { 0x1df7ef7b +1.93699586e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1811775472 { 0x6bfd7ff0 +1.98046684e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1811775475 { 0x6bfd7ff3 +1.98046720e88 } : BV:32
=counter_example.random_seed
897371356
=counter_example_end
=global nodece 24 num_edges_traversed 3
=global nodece 24 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce9930.num_edges_traversed3
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce9930 1ce639bd99e6cf4b034486dad223f1c
=input.spec-%var-x-1
1 : Lambda266 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda269 : BV:32
18 : Lambda267 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda268 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
30 : eq(25, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 28, 31) : BV:8
33 : ite(27, 28, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 24, 2) : BV:32
36 : eq(35, 26) : BOOL
37 : eq(35, 29) : BOOL
38 : ite(37, 28, 31) : BV:8
39 : ite(36, 28, 38) : BV:8
40 : 1 { 0x1 +1.11e129 } : BV:32
41 : bvadd(40, 24, 2) : BV:32
42 : eq(41, 26) : BOOL
43 : eq(41, 29) : BOOL
44 : ite(43, 28, 31) : BV:8
45 : ite(42, 28, 44) : BV:8
46 : bvadd(24, 2) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : ite(48, 28, 31) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : bvconcat(33, 39, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : ite(54, 28, 31) : BV:8
56 : ite(53, 28, 55) : BV:8
57 : bvadd(34, 23, 51) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : ite(59, 28, 31) : BV:8
61 : ite(58, 28, 60) : BV:8
62 : bvadd(40, 23, 51) : BV:32
63 : eq(62, 26) : BOOL
64 : eq(62, 29) : BOOL
65 : ite(64, 28, 31) : BV:8
66 : ite(63, 28, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 26) : BOOL
69 : eq(67, 29) : BOOL
70 : ite(69, 28, 31) : BV:8
71 : ite(68, 28, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : lambda(17, 74) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
76 : map(16, 75) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
77 : sym_const(76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 257 { 0x101 +1.3063e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2018390119 ] -> 0, [ 2018390120; 2018390121 ] -> 1, [ 2018390122; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2018390119 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2018390120; 2018390123 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2018390124; 2916966963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2916966964; 2916966967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2916966968; 3672776947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3672776948; 3672776951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3672776952; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2916966964 { 0xaddd6234 -1378000332 -1.72955942e220 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3672776948 { 0xdaea20f4 -622190348 -1.82913064e54 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda266 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda269 : BV:32
18 : Lambda267 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda268 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
27 : eq(25, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
30 : eq(25, 29) : BOOL
31 : 0 { 0x0 } : BV:8
32 : ite(30, 28, 31) : BV:8
33 : ite(27, 28, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 24, 2) : BV:32
36 : eq(35, 26) : BOOL
37 : eq(35, 29) : BOOL
38 : ite(37, 28, 31) : BV:8
39 : ite(36, 28, 38) : BV:8
40 : 1 { 0x1 +1.11e129 } : BV:32
41 : bvadd(40, 24, 2) : BV:32
42 : eq(41, 26) : BOOL
43 : eq(41, 29) : BOOL
44 : ite(43, 28, 31) : BV:8
45 : ite(42, 28, 44) : BV:8
46 : bvadd(24, 2) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : ite(48, 28, 31) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : bvconcat(33, 39, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : ite(54, 28, 31) : BV:8
56 : ite(53, 28, 55) : BV:8
57 : bvadd(34, 23, 51) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : ite(59, 28, 31) : BV:8
61 : ite(58, 28, 60) : BV:8
62 : bvadd(40, 23, 51) : BV:32
63 : eq(62, 26) : BOOL
64 : eq(62, 29) : BOOL
65 : ite(64, 28, 31) : BV:8
66 : ite(63, 28, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 26) : BOOL
69 : eq(67, 29) : BOOL
70 : ite(69, 28, 31) : BV:8
71 : ite(68, 28, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : lambda(17, 74) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
76 : map(16, 75) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
77 : sym_const(76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda236 : BV:32
2 : Lambda237 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda238 : BV:32
2 : Lambda239 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2018390121 { 0x784e3069 +1.61085236e113 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2037241556 { 0x796dd6d4 +1.85811853e115 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2018390120 { 0x784e3068 +1.61085224e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2018390123 { 0x784e306b +1.61085259e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2916966964 { 0xaddd6234 -1378000332 -1.72955942e220 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2916966967 { 0xaddd6237 -1378000329 -1.72955977e220 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3672776948 { 0xdaea20f4 -622190348 -1.82913064e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3672776951 { 0xdaea20f7 -622190345 -1.82913100e54 } : BV:32
=counter_example.random_seed
4141140507
=counter_example_end
=global nodece 25 num_edges_traversed 3
=global nodece 25 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3.ce9916.num_edges_traversed3
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce9916 a88f2bcf3382d12f04ac5a29f7d59b8
=input.spec-%var-x-1
1 : Lambda597 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda600 : BV:32
17 : Lambda598 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda599 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1174116315 ] -> 0, [ 1174116316; 1174116319 ] -> 255, [ 1174116320; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 118132599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 118132600; 118132603 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 118132604; 1139493215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1139493216; 1139493219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1139493220; 1174116315 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1174116316; 1174116319 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1174116320; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 118132600 { 0x70a8f78 +1.8250331e143 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1139493216 { 0x43eb4960 +1.83817672e8 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda597 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda600 : BV:32
17 : Lambda598 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda599 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
29 : eq(24, 28) : BOOL
30 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
31 : eq(24, 30) : BOOL
32 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda567 : BV:32
2 : Lambda568 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda569 : BV:32
2 : Lambda570 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1174116317 { 0x45fb97dd +1.96557199e12 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 1174116318 { 0x45fb97de +1.96557211e12 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 629915159 { 0x258bbe17 +1.9173858e204 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1174116316 { 0x45fb97dc +1.96557188e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1174116319 { 0x45fb97df +1.96557223e12 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 118132600 { 0x70a8f78 +1.8250331e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 118132603 { 0x70a8f7b +1.8250367e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1139493216 { 0x43eb4960 +1.83817672e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1139493219 { 0x43eb4963 +1.83817708e8 } : BV:32
=counter_example.random_seed
1243065997
=counter_example_end
=global nodece 26 num_edges_traversed 3
=global nodece 26 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3v487.ce9906.num_edges_traversed3
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(epsilon)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3v487.ce9906 1f21da868d64cd18e7967e66617bf7f2
=input.spec-%var-x-1
1 : Lambda677 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda680 : BV:32
18 : Lambda678 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda679 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1065474 ] -> 0, [ 1065475; 1065475 ] -> 128, [ 1065476; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 510211 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 510212; 510215 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 510216; 525319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 525320; 525323 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 525324; 1065471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1065472; 1065475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1065476; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 525320 { 0x80408 +1.6262302e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 510212 { 0x7c904 +1.6082201e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1065472 { 0x104200 +1.12701416e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda677 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda680 : BV:32
18 : Lambda678 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda679 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
27 : eq(25, 26) : BOOL
28 : 128 { 0x80 -128 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda647 : BV:32
2 : Lambda648 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda649 : BV:32
2 : Lambda650 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1350824237 { 0x5083f12d +1.3079760e34 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1065472 { 0x104200 +1.12701416e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1065475 { 0x104203 +1.12701451e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 525320 { 0x80408 +1.6262302e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 525323 { 0x8040b +1.6262338e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 510212 { 0x7c904 +1.6082201e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 510215 { 0x7c907 +1.6082236e129 } : BV:32
=counter_example.random_seed
4113372681
=counter_example_end
=global nodece 27 num_edges_traversed 3
=global nodece 27 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce9896.num_edges_traversed2
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(epsilon)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce9896 5a6d66d1dbb66aec21d1cf75dcffd
=input.spec-%var-x-1
1 : Lambda17190 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17193 : BV:32
18 : Lambda17191 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17192 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%n
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 39 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 40; 43 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 44; 51 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 52; 55 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 56; 16383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16384; 16387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 52 { 0x34 +1.619e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 40 { 0x28 +1.476e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17199 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17202 : BV:32
18 : Lambda17200 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17201 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 214501494 { 0xcc90876 +1.57057070e154 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 913081123 { 0x366c8323 +1.84775197e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 40 { 0x28 +1.476e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 43 { 0x2b +1.512e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 52 { 0x34 +1.619e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 55 { 0x37 +1.655e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16387 { 0x4003 +1.195348e129 } : BV:32
=counter_example.random_seed
5139404
=counter_example_end
=global nodece 28 num_edges_traversed 2
=global nodece 28 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3.ce9886.num_edges_traversed2
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(epsilon)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3.ce9886 3b341beff3f94ef9cdad7a4b2ccbb237
=input.spec-%var-x-1
1 : Lambda17214 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17217 : BV:32
18 : Lambda17215 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17216 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 216 { 0xd8 -40 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 191 { 0xbf -65 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 123 { 0x7b } : BV:8
35 : 119 { 0x77 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : bvadd(8, 23, 60) : BV:32
69 : eq(68, 22) : BOOL
70 : eq(68, 29) : BOOL
71 : eq(68, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : bvadd(4, 23, 60) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 29) : BOOL
78 : eq(75, 32) : BOOL
79 : ite(78, 34, 35) : BV:8
80 : ite(77, 31, 79) : BV:8
81 : ite(76, 28, 80) : BV:8
82 : bvadd(23, 60) : BV:32
83 : eq(82, 22) : BOOL
84 : eq(82, 29) : BOOL
85 : eq(82, 32) : BOOL
86 : ite(85, 34, 35) : BV:8
87 : ite(84, 31, 86) : BV:8
88 : ite(83, 28, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(20, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(19, 90) : MAP[BV:32 -> BV:32]
92 : lambda(17, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(16, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 119, [ 4; 4 ] -> 216, [ 5; 5 ] -> 123, [ 6; 6 ] -> 191, [ 7; 4294967295 ] -> 119, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2563639603 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2563639604; 2563639607 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2563639608; 2919617807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2919617808; 2919617811 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2919617812; 3100697667 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3100697668; 3100697671 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3100697672; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2919617808 { 0xae05d510 -1375349488 -1.4556465e221 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2563639604 { 0x98ce0934 -1731327692 -1.60965585e178 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3100697668 { 0xb8d0e444 -1194269628 -1.63196611e242 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17221 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17224 : BV:32
18 : Lambda17222 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda17223 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : 7 { 0x7 +1.83e129 } : BV:32
25 : bvmul(22, 17) : BV:32
26 : bvadd(24, 25) : BV:32
27 : eq(26, 22) : BOOL
28 : 216 { 0xd8 -40 } : BV:8
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : eq(26, 29) : BOOL
31 : 191 { 0xbf -65 } : BV:8
32 : 5 { 0x5 +1.59e129 } : BV:32
33 : eq(26, 32) : BOOL
34 : 123 { 0x7b } : BV:8
35 : 119 { 0x77 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : bvadd(29, 25) : BV:32
40 : eq(39, 22) : BOOL
41 : eq(39, 29) : BOOL
42 : eq(39, 32) : BOOL
43 : ite(42, 34, 35) : BV:8
44 : ite(41, 31, 43) : BV:8
45 : ite(40, 28, 44) : BV:8
46 : bvadd(32, 25) : BV:32
47 : eq(46, 22) : BOOL
48 : eq(46, 29) : BOOL
49 : eq(46, 32) : BOOL
50 : ite(49, 34, 35) : BV:8
51 : ite(48, 31, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : bvadd(22, 25) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 29) : BOOL
56 : eq(53, 32) : BOOL
57 : ite(56, 34, 35) : BV:8
58 : ite(55, 31, 57) : BV:8
59 : ite(54, 28, 58) : BV:8
60 : bvconcat(38, 45, 52, 59) : BV:32
61 : bvadd(21, 23, 60) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : ite(64, 34, 35) : BV:8
66 : ite(63, 31, 65) : BV:8
67 : ite(62, 28, 66) : BV:8
68 : bvadd(8, 23, 60) : BV:32
69 : eq(68, 22) : BOOL
70 : eq(68, 29) : BOOL
71 : eq(68, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : bvadd(4, 23, 60) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 29) : BOOL
78 : eq(75, 32) : BOOL
79 : ite(78, 34, 35) : BV:8
80 : ite(77, 31, 79) : BV:8
81 : ite(76, 28, 80) : BV:8
82 : bvadd(23, 60) : BV:32
83 : eq(82, 22) : BOOL
84 : eq(82, 29) : BOOL
85 : eq(82, 32) : BOOL
86 : ite(85, 34, 35) : BV:8
87 : ite(84, 31, 86) : BV:8
88 : ite(83, 28, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(20, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(19, 90) : MAP[BV:32 -> BV:32]
92 : lambda(17, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(16, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1934190343 { 0x73496707 +1.57345664e103 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17171 : BV:32
2 : Lambda17172 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 216 { 0xd8 -40 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 191 { 0xbf -65 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 123 { 0x7b } : BV:8
17 : 119 { 0x77 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17175 : BV:32
2 : Lambda17176 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvmul(4, 1) : BV:32
8 : bvadd(6, 7) : BV:32
9 : eq(8, 4) : BOOL
10 : 216 { 0xd8 -40 } : BV:8
11 : 6 { 0x6 +1.71e129 } : BV:32
12 : eq(8, 11) : BOOL
13 : 191 { 0xbf -65 } : BV:8
14 : 5 { 0x5 +1.59e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 123 { 0x7b } : BV:8
17 : 119 { 0x77 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(11, 7) : BV:32
22 : eq(21, 4) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 14) : BOOL
25 : ite(24, 16, 17) : BV:8
26 : ite(23, 13, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(14, 7) : BV:32
29 : eq(28, 4) : BOOL
30 : eq(28, 11) : BOOL
31 : eq(28, 14) : BOOL
32 : ite(31, 16, 17) : BV:8
33 : ite(30, 13, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : bvadd(4, 7) : BV:32
36 : eq(35, 4) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : ite(38, 16, 17) : BV:8
40 : ite(37, 13, 39) : BV:8
41 : ite(36, 10, 40) : BV:8
42 : bvconcat(20, 27, 34, 41) : BV:32
43 : bvadd(3, 5, 42) : BV:32
44 : eq(43, 4) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 14) : BOOL
47 : ite(46, 16, 17) : BV:8
48 : ite(45, 13, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : 2 { 0x2 +1.23e129 } : BV:32
51 : bvadd(50, 5, 42) : BV:32
52 : eq(51, 4) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 5, 42) : BV:32
60 : eq(59, 4) : BOOL
61 : eq(59, 11) : BOOL
62 : eq(59, 14) : BOOL
63 : ite(62, 16, 17) : BV:8
64 : ite(61, 13, 63) : BV:8
65 : ite(60, 10, 64) : BV:8
66 : bvadd(5, 42) : BV:32
67 : eq(66, 4) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : ite(69, 16, 17) : BV:8
71 : ite(68, 13, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : bvconcat(49, 57, 65, 72) : BV:32
74 : lambda(1, 2, 73) : FUNCTION[BV:32,BV:32 -> BV:32]
75 : sym_const(74) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1384429693 { 0x5284b87d +1.3688013e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3100697668 { 0xb8d0e444 -1194269628 -1.63196611e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3100697671 { 0xb8d0e447 -1194269625 -1.63196647e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2919617808 { 0xae05d510 -1375349488 -1.4556465e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2919617811 { 0xae05d513 -1375349485 -1.4556500e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2563639604 { 0x98ce0934 -1731327692 -1.60965585e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2563639607 { 0x98ce0937 -1731327689 -1.60965621e178 } : BV:32
=counter_example.random_seed
1555955863
=counter_example_end
=global nodece 29 num_edges_traversed 2
=global nodece 29 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 30
=global nodece 30 nodece z3.ce9868.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce9868 a89697a88abd3465bdaed87f15114716
=input.spec-%var-x-1
1 : Lambda24115 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24118 : BV:32
18 : Lambda24116 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24117 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 623571623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 623571624; 623571627 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 623571628; 1997431111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1997431112; 1997431115 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1997431116; 2188560947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2188560948; 2188560951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2188560952; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2188560948 { 0x8272ca34 -2106406348 -1.89679574e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1997431112 { 0x770e6148 +1.11234378e111 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 623571624 { 0x252af2a8 +1.33553028e203 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24126 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24129 : BV:32
18 : Lambda24127 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24128 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1603644944 { 0x5f95ae10 +1.16937446e64 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 471599641 { 0x1c1c0a19 +1.21905815e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 623571624 { 0x252af2a8 +1.33553028e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 623571627 { 0x252af2ab +1.33553063e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2188560948 { 0x8272ca34 -2106406348 -1.89679574e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2188560951 { 0x8272ca37 -2106406345 -1.89679610e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1997431112 { 0x770e6148 +1.11234378e111 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1997431115 { 0x770e614b +1.11234414e111 } : BV:32
=counter_example.random_seed
2465744820
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 31
=global nodece 31 nodece z3v487.ce10217.num_edges_traversed1
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce10217 e644235bfd7aef0b76fc047ccbb718
=input.spec-%var-x-1
1 : Lambda24745 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24748 : BV:32
18 : Lambda24746 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24747 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 257 { 0x101 +1.3063e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044; 2047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2048; 1016823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1016824; 1016827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1016828; 537870339 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537870340; 537870343 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 537870344; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1016824 { 0xf83f8 +1.12121486e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 537870340 { 0x200f4004 +1.11914110e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2044 { 0x7fc +1.24366e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24756 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24759 : BV:32
18 : Lambda24757 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24758 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24749 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24750 : BV:32
7 : 1958547239 { 0x74bd0f27 +1.47702491e106 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1991847919 { 0x76b92fef +1.44677531e110 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24762 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24763 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1815377489 { 0x6c347651 +1.40986073e89 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2044 { 0x7fc +1.24366e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2047 { 0x7ff +1.24402e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1016824 { 0xf83f8 +1.12121486e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1016827 { 0xf83fb +1.12121522e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 537870340 { 0x200f4004 +1.11914110e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 537870343 { 0x200f4007 +1.11914145e193 } : BV:32
=counter_example.random_seed
393083804
=counter_example_end
=global nodece 31 num_edges_traversed 1
=global nodece 31 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 32
=global nodece 32 nodece z3v487.ce10247.num_edges_traversed2
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3v487.ce10247 af83aca958d3c35b9e1a757c5366cd5
=input.spec-%var-x-1
1 : Lambda24745 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24748 : BV:32
18 : Lambda24746 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24747 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 257 { 0x101 +1.3063e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044; 2047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2048; 1016823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1016824; 1016827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1016828; 537870339 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537870340; 537870343 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 537870344; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1016824 { 0xf83f8 +1.12121486e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 537870340 { 0x200f4004 +1.11914110e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2044 { 0x7fc +1.24366e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24756 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24759 : BV:32
18 : Lambda24757 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24758 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24804 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24805 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1991847919 { 0x76b92fef +1.44677531e110 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24806 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24807 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda24808 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24809 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1815377489 { 0x6c347651 +1.40986073e89 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2044 { 0x7fc +1.24366e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2047 { 0x7ff +1.24402e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1016824 { 0xf83f8 +1.12121486e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1016827 { 0xf83fb +1.12121522e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 537870340 { 0x200f4004 +1.11914110e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 537870343 { 0x200f4007 +1.11914145e193 } : BV:32
=counter_example.random_seed
393083804
=counter_example_end
=global nodece 32 num_edges_traversed 2
=global nodece 32 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 33
=global nodece 33 nodece z3v487.ce10270.num_edges_traversed4
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3v487.ce10270 2884348283cf141d3c366060b753843b
=input.spec-%var-x-1
1 : Lambda24745 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24748 : BV:32
18 : Lambda24746 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24747 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 257 { 0x101 +1.3063e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2043 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044; 2047 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2048; 1016823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1016824; 1016827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1016828; 537870339 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 537870340; 537870343 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 537870344; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1016824 { 0xf83f8 +1.12121486e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 537870340 { 0x200f4004 +1.11914110e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2044 { 0x7fc +1.24366e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24756 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 256 { 0x100 +1.3051e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 257 { 0x101 +1.3063e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24759 : BV:32
18 : Lambda24757 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24758 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24814 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24815 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1991847920 { 0x76b92ff0 +1.44677543e110 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24816 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24817 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda24818 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda24819 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 256 ] -> true, [ 257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1815377490 { 0x6c347652 +1.40986084e89 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2044 { 0x7fc +1.24366e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2047 { 0x7ff +1.24402e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1016824 { 0xf83f8 +1.12121486e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1016827 { 0xf83fb +1.12121522e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 537870340 { 0x200f4004 +1.11914110e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 537870343 { 0x200f4007 +1.11914145e193 } : BV:32
=counter_example.random_seed
393083804
=counter_example_end
=global nodece 33 num_edges_traversed 4
=global nodece 33 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 34
=global nodece 34 nodece z3.ce10315.num_edges_traversed1
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce10315 c1f66640d2e95566f430cfa571108662
=input.spec-%var-x-1
1 : Lambda24883 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24886 : BV:32
18 : Lambda24884 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24885 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 421453607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 421453608; 421453611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 421453612; 1343319475 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1343319476; 1343319479 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1343319480; 2760244391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2760244392; 2760244395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2760244396; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1343319476 { 0x50116db4 +1.13616037e33 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 421453608 { 0x191edf28 +1.24118518e179 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2760244392 { 0xa485fca8 -1534722904 -1.4677295e202 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda24894 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda24897 : BV:32
18 : Lambda24895 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda24896 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda24887 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda24888 : BV:32
7 : 774662809 { 0x2e2c6a99 +1.34700310e221 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 15089795 { 0xe64083 +1.79884374e130 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda24900 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda24901 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1781464308 { 0x6a2efcf4 +1.36709451e85 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2760244392 { 0xa485fca8 -1534722904 -1.4677295e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2760244395 { 0xa485fcab -1534722901 -1.4677331e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1343319476 { 0x50116db4 +1.13616037e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1343319479 { 0x50116db7 +1.13616073e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 421453608 { 0x191edf28 +1.24118518e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 421453611 { 0x191edf2b +1.24118554e179 } : BV:32
=counter_example.random_seed
2432516413
=counter_example_end
=global nodece 34 num_edges_traversed 1
=global nodece 34 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 35
=global nodece 35 nodece z3v487.ce10378.num_edges_traversed1
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3v487.ce10378 f5248fe052d058e9ff83bb4a3d9212c
=input.spec-%var-x-1
1 : Lambda25011 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25014 : BV:32
18 : Lambda25012 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25013 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 227 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 228; 231 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 232; 1027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1028; 1031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1032; 16777343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16777344; 16777347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16777348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16777344 { 0x1000080 +1.1525e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 228 { 0xe4 +1.2717e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25022 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25025 : BV:32
18 : Lambda25023 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25024 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25015 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25016 : BV:32
7 : 1650275168 { 0x625d3360 +1.72813034e69 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 131833644 { 0x7db9f2c +1.71579504e144 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25028 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25029 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1335446453 { 0x4f994bb5 +1.19762289e32 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 228 { 0xe4 +1.2717e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 231 { 0xe7 +1.2753e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1031 { 0x407 +1.12290e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16777344 { 0x1000080 +1.1525e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16777347 { 0x1000083 +1.1561e131 } : BV:32
=counter_example.random_seed
2662624758
=counter_example_end
=global nodece 35 num_edges_traversed 1
=global nodece 35 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 36
=global nodece 36 nodece z3v487.ce10408.num_edges_traversed2
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3v487.ce10408 1a2aca2d53cf81716d5d6caa8ed2bfb
=input.spec-%var-x-1
1 : Lambda25011 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25014 : BV:32
18 : Lambda25012 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25013 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 227 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 228; 231 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 232; 1027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1028; 1031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1032; 16777343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16777344; 16777347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16777348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16777344 { 0x1000080 +1.1525e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 228 { 0xe4 +1.2717e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25022 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25025 : BV:32
18 : Lambda25023 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25024 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25070 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25071 : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 131833644 { 0x7db9f2c +1.71579504e144 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25072 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25073 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda25074 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25075 : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1335446453 { 0x4f994bb5 +1.19762289e32 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 228 { 0xe4 +1.2717e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 231 { 0xe7 +1.2753e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1031 { 0x407 +1.12290e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16777344 { 0x1000080 +1.1525e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16777347 { 0x1000083 +1.1561e131 } : BV:32
=counter_example.random_seed
2662624758
=counter_example_end
=global nodece 36 num_edges_traversed 2
=global nodece 36 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 37
=global nodece 37 nodece z3v487.ce10431.num_edges_traversed3
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(epsilon)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3v487.ce10431 571b81e7f2bd91aa204cba8858462427
=input.spec-%var-x-1
1 : Lambda25011 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25014 : BV:32
18 : Lambda25012 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25013 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 227 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 228; 231 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 232; 1027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1028; 1031 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1032; 16777343 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16777344; 16777347 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 16777348; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 16777344 { 0x1000080 +1.1525e131 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 228 { 0xe4 +1.2717e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25022 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25025 : BV:32
18 : Lambda25023 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25024 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 131833645 { 0x7db9f2d +1.71579515e144 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1335446454 { 0x4f994bb6 +1.19762301e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 228 { 0xe4 +1.2717e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 231 { 0xe7 +1.2753e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1031 { 0x407 +1.12290e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 16777344 { 0x1000080 +1.1525e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 16777347 { 0x1000083 +1.1561e131 } : BV:32
=counter_example.random_seed
2662624758
=counter_example_end
=global nodece 37 num_edges_traversed 3
=global nodece 37 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 38
=global nodece 38 nodece z3.ce10476.num_edges_traversed1
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce10476 760caf32c22e34ddde62898b4e994
=input.spec-%var-x-1
1 : Lambda25305 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2833760119 { 0xa8e7bf77 -1461207177 -1.81053054e210 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25308 : BV:32
18 : Lambda25306 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25307 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 228 { 0xe4 -28 } : BV:8
28 : eq(25, 21) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 141 { 0x8d -115 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 228, [ 1; 1 ] -> 253, [ 2; 2 ] -> 141, [ 3; 3 ] -> 85, [ 4; 4294967295 ] -> 141, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1326578939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1326578940; 1326578943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1326578944; 1531112823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1531112824; 1531112827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1531112828; 3060215867 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3060215868; 3060215871 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3060215872; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3060215868 { 0xb667303c -1234751428 -1.80615949e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1326578940 { 0x4f11fcfc +1.14053297e31 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1531112824 { 0x5b42ed78 +1.52287197e55 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2833760119 { 0xa8e7bf77 -1461207177 -1.81053054e210 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25315 : BV:32
18 : Lambda25313 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25314 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 228 { 0xe4 -28 } : BV:8
28 : eq(25, 21) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 141 { 0x8d -115 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25344 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25345 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 2374864269 { 0x8d8d8d8d -1920103027 -1.10588228e156 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 228 { 0xe4 -28 } : BV:8
15 : eq(11, 7) : BOOL
16 : 85 { 0x55 } : BV:8
17 : eq(11, 1) : BOOL
18 : 253 { 0xfd -3 } : BV:8
19 : 141 { 0x8d -115 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25346 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25347 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2374864269 { 0x8d8d8d8d -1920103027 -1.10588228e156 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 228 { 0xe4 -28 } : BV:8
13 : eq(9, 5) : BOOL
14 : 85 { 0x55 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 141 { 0x8d -115 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda25348 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25349 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2374864269 { 0x8d8d8d8d -1920103027 -1.10588228e156 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 228 { 0xe4 -28 } : BV:8
13 : eq(9, 5) : BOOL
14 : 85 { 0x55 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 141 { 0x8d -115 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2833760119 ] -> true, [ 2833760120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2833760119 ] -> true, [ 2833760120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda25274 : BV:32
2 : Lambda25275 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 228 { 0xe4 -28 } : BV:8
11 : eq(7, 3) : BOOL
12 : 85 { 0x55 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 141 { 0x8d -115 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda25278 : BV:32
2 : Lambda25279 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 228 { 0xe4 -28 } : BV:8
11 : eq(7, 3) : BOOL
12 : 85 { 0x55 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 141 { 0x8d -115 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1531112824 { 0x5b42ed78 +1.52287197e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1531112827 { 0x5b42ed7b +1.52287232e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3060215868 { 0xb667303c -1234751428 -1.80615949e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3060215871 { 0xb667303f -1234751425 -1.80615985e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1326578940 { 0x4f11fcfc +1.14053297e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1326578943 { 0x4f11fcff +1.14053332e31 } : BV:32
=counter_example.random_seed
3478345806
=counter_example_end
=global nodece 38 num_edges_traversed 1
=global nodece 38 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 39
=global nodece 39 nodece z3.ce10509.num_edges_traversed3
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3.ce10509 cda1f14e54f518539ac6bd2e6dd7e88
=input.spec-%var-x-1
1 : Lambda25305 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2833760119 { 0xa8e7bf77 -1461207177 -1.81053054e210 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25308 : BV:32
18 : Lambda25306 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25307 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 228 { 0xe4 -28 } : BV:8
28 : eq(25, 21) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 141 { 0x8d -115 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 228, [ 1; 1 ] -> 253, [ 2; 2 ] -> 141, [ 3; 3 ] -> 85, [ 4; 4294967295 ] -> 141, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1326578939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1326578940; 1326578943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1326578944; 1531112823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1531112824; 1531112827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1531112828; 3060215867 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3060215868; 3060215871 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3060215872; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3060215868 { 0xb667303c -1234751428 -1.80615949e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1326578940 { 0x4f11fcfc +1.14053297e31 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1531112824 { 0x5b42ed78 +1.52287197e55 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2833760119 { 0xa8e7bf77 -1461207177 -1.81053054e210 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25315 : BV:32
18 : Lambda25313 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25314 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 228 { 0xe4 -28 } : BV:8
28 : eq(25, 21) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 141 { 0x8d -115 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25354 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25355 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 1435368932 { 0x558dfde4 +1.10931062e44 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 0 { 0x0 +1.0e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 228 { 0xe4 -28 } : BV:8
15 : eq(11, 7) : BOOL
16 : 85 { 0x55 } : BV:8
17 : eq(11, 1) : BOOL
18 : 253 { 0xfd -3 } : BV:8
19 : 141 { 0x8d -115 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(15, 16, 20) : BV:8
22 : ite(13, 14, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 9, 10) : BV:32
25 : eq(24, 12) : BOOL
26 : eq(24, 7) : BOOL
27 : eq(24, 1) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 14, 29) : BV:8
31 : bvadd(1, 9, 10) : BV:32
32 : eq(31, 12) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 1) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 14, 36) : BV:8
38 : bvadd(9, 10) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : eq(38, 1) : BOOL
42 : ite(41, 18, 19) : BV:8
43 : ite(40, 16, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : bvconcat(22, 30, 37, 44) : BV:32
46 : lambda(6, 45) : FUNCTION[BV:32 -> BV:32]
47 : map(5, 46) : MAP[BV:32 -> BV:32]
48 : sum(1, 2, 47) : SUM[UNIT,MAP[BV:32 -> BV:32]]
49 : sym_const(48) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 437790600 { 0x1a182788 +1.18870639e181 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25356 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25357 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1435368932 { 0x558dfde4 +1.10931062e44 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 228 { 0xe4 -28 } : BV:8
13 : eq(9, 5) : BOOL
14 : 85 { 0x55 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 141 { 0x8d -115 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda25358 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25359 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1435368932 { 0x558dfde4 +1.10931062e44 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 0 { 0x0 +1.0e129 } : BV:32
11 : eq(9, 10) : BOOL
12 : 228 { 0xe4 -28 } : BV:8
13 : eq(9, 5) : BOOL
14 : 85 { 0x55 } : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : eq(9, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 141 { 0x8d -115 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(11, 12, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 7, 8) : BV:32
24 : eq(23, 10) : BOOL
25 : eq(23, 5) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 12, 28) : BV:8
30 : bvadd(15, 7, 8) : BV:32
31 : eq(30, 10) : BOOL
32 : eq(30, 5) : BOOL
33 : eq(30, 15) : BOOL
34 : ite(33, 17, 18) : BV:8
35 : ite(32, 14, 34) : BV:8
36 : ite(31, 12, 35) : BV:8
37 : bvadd(7, 8) : BV:32
38 : eq(37, 10) : BOOL
39 : eq(37, 5) : BOOL
40 : eq(37, 15) : BOOL
41 : ite(40, 17, 18) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : ite(38, 12, 42) : BV:8
44 : bvconcat(21, 29, 36, 43) : BV:32
45 : lambda(4, 44) : FUNCTION[BV:32 -> BV:32]
46 : map(3, 45) : MAP[BV:32 -> BV:32]
47 : sym_const(46) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2833760119 ] -> true, [ 2833760120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2833760119 ] -> true, [ 2833760120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda25274 : BV:32
2 : Lambda25275 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 228 { 0xe4 -28 } : BV:8
11 : eq(7, 3) : BOOL
12 : 85 { 0x55 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 141 { 0x8d -115 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda25278 : BV:32
2 : Lambda25279 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 228 { 0xe4 -28 } : BV:8
11 : eq(7, 3) : BOOL
12 : 85 { 0x55 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 141 { 0x8d -115 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1535515617 { 0x5b861be1 +1.4772579e56 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1531112824 { 0x5b42ed78 +1.52287197e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1531112827 { 0x5b42ed7b +1.52287232e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3060215868 { 0xb667303c -1234751428 -1.80615949e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3060215871 { 0xb667303f -1234751425 -1.80615985e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1326578940 { 0x4f11fcfc +1.14053297e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1326578943 { 0x4f11fcff +1.14053332e31 } : BV:32
=counter_example.random_seed
2949358038
=counter_example_end
=global nodece 39 num_edges_traversed 3
=global nodece 39 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 40
=global nodece 40 nodece z3.ce10544.num_edges_traversed4
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(epsilon)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3.ce10544 1ffe12bfc73c4fa13693fff6f65a2dba
=input.spec-%var-x-1
1 : Lambda25305 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2833760119 { 0xa8e7bf77 -1461207177 -1.81053054e210 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25308 : BV:32
18 : Lambda25306 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25307 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 228 { 0xe4 -28 } : BV:8
28 : eq(25, 21) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 141 { 0x8d -115 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 228, [ 1; 1 ] -> 253, [ 2; 2 ] -> 141, [ 3; 3 ] -> 85, [ 4; 4294967295 ] -> 141, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1326578939 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1326578940; 1326578943 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1326578944; 1531112823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1531112824; 1531112827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1531112828; 3060215867 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3060215868; 3060215871 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3060215872; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3060215868 { 0xb667303c -1234751428 -1.80615949e237 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1326578940 { 0x4f11fcfc +1.14053297e31 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1531112824 { 0x5b42ed78 +1.52287197e55 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2833760119 { 0xa8e7bf77 -1461207177 -1.81053054e210 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2833760120 { 0xa8e7bf78 -1461207176 -1.81053066e210 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25315 : BV:32
18 : Lambda25313 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25314 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 228 { 0xe4 -28 } : BV:8
28 : eq(25, 21) : BOOL
29 : 85 { 0x55 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 141 { 0x8d -115 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 437790601 { 0x1a182789 +1.18870651e181 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2833760119 ] -> true, [ 2833760120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2833760119 ] -> true, [ 2833760120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda25274 : BV:32
2 : Lambda25275 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 228 { 0xe4 -28 } : BV:8
11 : eq(7, 3) : BOOL
12 : 85 { 0x55 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 141 { 0x8d -115 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda25278 : BV:32
2 : Lambda25279 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 228 { 0xe4 -28 } : BV:8
11 : eq(7, 3) : BOOL
12 : 85 { 0x55 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : 141 { 0x8d -115 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1535515618 { 0x5b861be2 +1.4772591e56 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1531112824 { 0x5b42ed78 +1.52287197e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1531112827 { 0x5b42ed7b +1.52287232e55 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3060215868 { 0xb667303c -1234751428 -1.80615949e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3060215871 { 0xb667303f -1234751425 -1.80615985e237 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1326578940 { 0x4f11fcfc +1.14053297e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1326578943 { 0x4f11fcff +1.14053332e31 } : BV:32
=counter_example.random_seed
2949358038
=counter_example_end
=global nodece 40 num_edges_traversed 4
=global nodece 40 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 41
=global nodece 41 nodece z3v487.ce10570.num_edges_traversed1
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce10570 8d10a6c44d4e3ef553aa8b93b12924a
=input.spec-%var-x-1
1 : Lambda25625 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25628 : BV:32
18 : Lambda25626 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25627 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2176639 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2176640; 2176643 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2176644; 269561891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 269561892; 269561895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 269561896; 276824087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 276824088; 276824091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 276824092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 276824088 { 0x10800018 +1.286e162 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 269561892 { 0x10113024 +1.13428163e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2176640 { 0x213680 +1.25947570e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25636 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25639 : BV:32
18 : Lambda25637 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25638 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25629 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25630 : BV:32
7 : 1533928028 { 0x5b6de25c +1.85847043e55 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 491287551 { 0x1d4873ff +1.56603991e187 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25642 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda25643 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 546793050 { 0x2097665a +1.18281102e194 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2176640 { 0x213680 +1.25947570e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2176643 { 0x213683 +1.25947606e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 276824088 { 0x10800018 +1.286e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 276824091 { 0x1080001b +1.321e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 269561892 { 0x10113024 +1.13428163e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 269561895 { 0x10113027 +1.13428199e161 } : BV:32
=counter_example.random_seed
3896897380
=counter_example_end
=global nodece 41 num_edges_traversed 1
=global nodece 41 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 42
=global nodece 42 nodece z3.ce10614.num_edges_traversed1
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3.ce10614 2e8748786e9872e61bb1aab944abb5
=input.spec-%var-x-1
1 : Lambda25835 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda25838 : BV:32
17 : Lambda25836 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda25837 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 125 { 0x7d } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 233 { 0xe9 -23 } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 156 { 0x9c -100 } : BV:8
34 : 247 { 0xf7 -9 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967287 ] -> 247, [ 4294967288; 4294967288 ] -> 156, [ 4294967289; 4294967289 ] -> 125, [ 4294967290; 4294967290 ] -> 233, [ 4294967291; 4294967295 ] -> 247, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 240607679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 240607680; 240607683 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 240607684; 1337512131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1337512132; 1337512135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1337512136; 1550467679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1550467680; 1550467683 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1550467684; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 240607680 { 0xe5761c0 +1.68267059e157 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1550467680 { 0x5c6a4260 +1.83015060e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1337512132 { 0x4fb8d0c4 +1.44387102e32 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25842 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda25845 : BV:32
17 : Lambda25843 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda25844 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 125 { 0x7d } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 233 { 0xe9 -23 } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 156 { 0x9c -100 } : BV:8
34 : 247 { 0xf7 -9 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda25874 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda25875 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : 4159274396 { 0xf7e97d9c -135692900 -1.82414579e112 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 125 { 0x7d } : BV:8
15 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 233 { 0xe9 -23 } : BV:8
18 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
19 : eq(11, 18) : BOOL
20 : 156 { 0x9c -100 } : BV:8
21 : 247 { 0xf7 -9 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 10) : BV:32
27 : eq(26, 12) : BOOL
28 : eq(26, 15) : BOOL
29 : eq(26, 18) : BOOL
30 : ite(29, 20, 21) : BV:8
31 : ite(28, 17, 30) : BV:8
32 : ite(27, 14, 31) : BV:8
33 : bvadd(1, 9, 10) : BV:32
34 : eq(33, 12) : BOOL
35 : eq(33, 15) : BOOL
36 : eq(33, 18) : BOOL
37 : ite(36, 20, 21) : BV:8
38 : ite(35, 17, 37) : BV:8
39 : ite(34, 14, 38) : BV:8
40 : bvadd(9, 10) : BV:32
41 : eq(40, 12) : BOOL
42 : eq(40, 15) : BOOL
43 : eq(40, 18) : BOOL
44 : ite(43, 20, 21) : BV:8
45 : ite(42, 17, 44) : BV:8
46 : ite(41, 14, 45) : BV:8
47 : bvconcat(24, 32, 39, 46) : BV:32
48 : lambda(6, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(5, 48) : MAP[BV:32 -> BV:32]
50 : sum(1, 2, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda25876 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25877 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4159274396 { 0xf7e97d9c -135692900 -1.82414579e112 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 125 { 0x7d } : BV:8
13 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 233 { 0xe9 -23 } : BV:8
16 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
17 : eq(9, 16) : BOOL
18 : 156 { 0x9c -100 } : BV:8
19 : 247 { 0xf7 -9 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda25878 : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda25879 : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 4159274396 { 0xf7e97d9c -135692900 -1.82414579e112 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
11 : eq(9, 10) : BOOL
12 : 125 { 0x7d } : BV:8
13 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
14 : eq(9, 13) : BOOL
15 : 233 { 0xe9 -23 } : BV:8
16 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
17 : eq(9, 16) : BOOL
18 : 156 { 0x9c -100 } : BV:8
19 : 247 { 0xf7 -9 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(11, 12, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 7, 8) : BV:32
25 : eq(24, 10) : BOOL
26 : eq(24, 13) : BOOL
27 : eq(24, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : ite(26, 15, 28) : BV:8
30 : ite(25, 12, 29) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 7, 8) : BV:32
33 : eq(32, 10) : BOOL
34 : eq(32, 13) : BOOL
35 : eq(32, 16) : BOOL
36 : ite(35, 18, 19) : BV:8
37 : ite(34, 15, 36) : BV:8
38 : ite(33, 12, 37) : BV:8
39 : bvadd(7, 8) : BV:32
40 : eq(39, 10) : BOOL
41 : eq(39, 13) : BOOL
42 : eq(39, 16) : BOOL
43 : ite(42, 18, 19) : BV:8
44 : ite(41, 15, 43) : BV:8
45 : ite(40, 12, 44) : BV:8
46 : bvconcat(22, 30, 38, 45) : BV:32
47 : lambda(4, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(3, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda25804 : BV:32
2 : Lambda25805 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 125 { 0x7d } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 233 { 0xe9 -23 } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 156 { 0x9c -100 } : BV:8
17 : 247 { 0xf7 -9 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda25808 : BV:32
2 : Lambda25809 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 125 { 0x7d } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 233 { 0xe9 -23 } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 156 { 0x9c -100 } : BV:8
17 : 247 { 0xf7 -9 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1337512132 { 0x4fb8d0c4 +1.44387102e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1337512135 { 0x4fb8d0c7 +1.44387137e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 240607680 { 0xe5761c0 +1.68267059e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 240607683 { 0xe5761c3 +1.68267095e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1550467680 { 0x5c6a4260 +1.83015060e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1550467683 { 0x5c6a4263 +1.83015096e57 } : BV:32
=counter_example.random_seed
811115134
=counter_example_end
=global nodece 42 num_edges_traversed 1
=global nodece 42 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 43
=global nodece 43 nodece z3.ce10647.num_edges_traversed2
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(epsilon)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3.ce10647 ebbcde55bb89c745fb9f5f80a1255
=input.spec-%var-x-1
1 : Lambda25835 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda25838 : BV:32
17 : Lambda25836 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda25837 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 125 { 0x7d } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 233 { 0xe9 -23 } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 156 { 0x9c -100 } : BV:8
34 : 247 { 0xf7 -9 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967287 ] -> 247, [ 4294967288; 4294967288 ] -> 156, [ 4294967289; 4294967289 ] -> 125, [ 4294967290; 4294967290 ] -> 233, [ 4294967291; 4294967295 ] -> 247, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 240607679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 240607680; 240607683 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 240607684; 1337512131 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1337512132; 1337512135 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1337512136; 1550467679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1550467680; 1550467683 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1550467684; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 240607680 { 0xe5761c0 +1.68267059e157 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1550467680 { 0x5c6a4260 +1.83015060e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1337512132 { 0x4fb8d0c4 +1.44387102e32 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25842 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda25845 : BV:32
17 : Lambda25843 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda25844 : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23) : BV:32
25 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
26 : eq(24, 25) : BOOL
27 : 125 { 0x7d } : BV:8
28 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
29 : eq(24, 28) : BOOL
30 : 233 { 0xe9 -23 } : BV:8
31 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
32 : eq(24, 31) : BOOL
33 : 156 { 0x9c -100 } : BV:8
34 : 247 { 0xf7 -9 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 23) : BV:32
40 : eq(39, 25) : BOOL
41 : eq(39, 28) : BOOL
42 : eq(39, 31) : BOOL
43 : ite(42, 33, 34) : BV:8
44 : ite(41, 30, 43) : BV:8
45 : ite(40, 27, 44) : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : bvadd(46, 23) : BV:32
48 : eq(47, 25) : BOOL
49 : eq(47, 28) : BOOL
50 : eq(47, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : eq(23, 25) : BOOL
55 : eq(23, 28) : BOOL
56 : eq(23, 31) : BOOL
57 : ite(56, 33, 34) : BV:8
58 : ite(55, 30, 57) : BV:8
59 : ite(54, 27, 58) : BV:8
60 : bvconcat(37, 45, 53, 59) : BV:32
61 : bvadd(20, 22, 60) : BV:32
62 : eq(61, 25) : BOOL
63 : eq(61, 28) : BOOL
64 : eq(61, 31) : BOOL
65 : ite(64, 33, 34) : BV:8
66 : ite(63, 30, 65) : BV:8
67 : ite(62, 27, 66) : BV:8
68 : bvadd(38, 22, 60) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : ite(71, 33, 34) : BV:8
73 : ite(70, 30, 72) : BV:8
74 : ite(69, 27, 73) : BV:8
75 : bvadd(46, 22, 60) : BV:32
76 : eq(75, 25) : BOOL
77 : eq(75, 28) : BOOL
78 : eq(75, 31) : BOOL
79 : ite(78, 33, 34) : BV:8
80 : ite(77, 30, 79) : BV:8
81 : ite(76, 27, 80) : BV:8
82 : bvadd(22, 60) : BV:32
83 : eq(82, 25) : BOOL
84 : eq(82, 28) : BOOL
85 : eq(82, 31) : BOOL
86 : ite(85, 33, 34) : BV:8
87 : ite(84, 30, 86) : BV:8
88 : ite(83, 27, 87) : BV:8
89 : bvconcat(67, 74, 81, 88) : BV:32
90 : lambda(19, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(18, 90) : MAP[BV:32 -> BV:32]
92 : lambda(16, 91) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
93 : map(15, 92) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
94 : sym_const(93) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 63739487 { 0x3cc965f +1.59833896e136 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda25804 : BV:32
2 : Lambda25805 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 125 { 0x7d } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 233 { 0xe9 -23 } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 156 { 0x9c -100 } : BV:8
17 : 247 { 0xf7 -9 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda25808 : BV:32
2 : Lambda25809 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
9 : eq(7, 8) : BOOL
10 : 125 { 0x7d } : BV:8
11 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
12 : eq(7, 11) : BOOL
13 : 233 { 0xe9 -23 } : BV:8
14 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
15 : eq(7, 14) : BOOL
16 : 156 { 0x9c -100 } : BV:8
17 : 247 { 0xf7 -9 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : eq(6, 8) : BOOL
38 : eq(6, 11) : BOOL
39 : eq(6, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : ite(37, 10, 41) : BV:8
43 : bvconcat(20, 28, 36, 42) : BV:32
44 : bvadd(3, 5, 43) : BV:32
45 : eq(44, 8) : BOOL
46 : eq(44, 11) : BOOL
47 : eq(44, 14) : BOOL
48 : ite(47, 16, 17) : BV:8
49 : ite(46, 13, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : bvadd(21, 5, 43) : BV:32
52 : eq(51, 8) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : ite(52, 10, 56) : BV:8
58 : bvadd(29, 5, 43) : BV:32
59 : eq(58, 8) : BOOL
60 : eq(58, 11) : BOOL
61 : eq(58, 14) : BOOL
62 : ite(61, 16, 17) : BV:8
63 : ite(60, 13, 62) : BV:8
64 : ite(59, 10, 63) : BV:8
65 : bvadd(5, 43) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 14) : BOOL
69 : ite(68, 16, 17) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 10, 70) : BV:8
72 : bvconcat(50, 57, 64, 71) : BV:32
73 : lambda(1, 2, 72) : FUNCTION[BV:32,BV:32 -> BV:32]
74 : sym_const(73) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 725010570 { 0x2b36c88a +1.42799496e215 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1337512132 { 0x4fb8d0c4 +1.44387102e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1337512135 { 0x4fb8d0c7 +1.44387137e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 240607680 { 0xe5761c0 +1.68267059e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 240607683 { 0xe5761c3 +1.68267095e157 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1550467680 { 0x5c6a4260 +1.83015060e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1550467683 { 0x5c6a4263 +1.83015096e57 } : BV:32
=counter_example.random_seed
3938086406
=counter_example_end
=global nodece 43 num_edges_traversed 2
=global nodece 43 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 44
=global nodece 44 nodece z3v487.ce10677.num_edges_traversed1
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce10677 6880793722a381bcb8f2b3dc2a749a99
=input.spec-%var-x-1
1 : Lambda26147 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26150 : BV:32
17 : Lambda26148 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26149 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : sum(1, 2, 1) : SUM[UNIT,BV:32]
4 : sym_const(3) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 262143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 262144; 262147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 262148; 134217727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134217728; 134217731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 134217732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26158 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26161 : BV:32
17 : Lambda26159 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26160 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26151 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26152 : BV:32
7 : 1471142174 { 0x57afd91e +1.37381339e48 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 2048011525 { 0x7a122d05 +1.14199888e117 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26164 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26165 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-0.L4%6%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1446680437 { 0x563a9775 +1.45774710e45 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 134217731 { 0x8000003 +1.35e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 262147 { 0x40003 +1.3125035e129 } : BV:32
=counter_example.random_seed
271649926
=counter_example_end
=global nodece 44 num_edges_traversed 1
=global nodece 44 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 45
=global nodece 45 nodece z3.ce10721.num_edges_traversed0
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce10721 a4e82678773a5c9ca5a27ce477f95d1
=input.spec-%var-x-1
1 : Lambda26479 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2215926527 { 0x84145aff -2079040769 -1.15902698e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2215926528 { 0x84145b00 -2079040768 -1.15902709e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26482 : BV:32
18 : Lambda26480 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2215926529 { 0x84145b01 -2079040767 -1.15902721e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 33554432 { 0x2000000 +1.0e133 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33554433 { 0x2000001 +1.11e133 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26481 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 248948731 { 0xed6a7fb +1.67700135e158 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2415919100 { 0x8ffffffc -1879048196 -1.99999952e160 } : BV:32
63 : eq(61, 62) : BOOL
64 : 253 { 0xfd -3 } : BV:8
65 : eq(61, 59) : BOOL
66 : 203 { 0xcb -53 } : BV:8
67 : 248948728 { 0xed6a7f8 +1.67700099e158 } : BV:32
68 : eq(61, 67) : BOOL
69 : 249 { 0xf9 -7 } : BV:8
70 : 2415919102 { 0x8ffffffe -1879048194 -1.99999976e160 } : BV:32
71 : eq(61, 70) : BOOL
72 : 192 { 0xc0 -64 } : BV:8
73 : 2415919103 { 0x8fffffff -1879048193 -1.99999988e160 } : BV:32
74 : eq(61, 73) : BOOL
75 : 121 { 0x79 } : BV:8
76 : 248948730 { 0xed6a7fa +1.67700123e158 } : BV:32
77 : eq(61, 76) : BOOL
78 : 125 { 0x7d } : BV:8
79 : 248948729 { 0xed6a7f9 +1.67700111e158 } : BV:32
80 : eq(61, 79) : BOOL
81 : 191 { 0xbf -65 } : BV:8
82 : 2415919101 { 0x8ffffffd -1879048195 -1.99999964e160 } : BV:32
83 : eq(61, 82) : BOOL
84 : 127 { 0x7f } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(76, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(79, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(67, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 541742593 { 0x204a5601 +1.58074963e193 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 541742594 { 0x204a5602 +1.58074975e193 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 248948728 { 0xed6a7f8 +1.67700099e158 } : BV:32
=input.dst.llvm-%n
1 : 2215926528 { 0x84145b00 -2079040768 -1.15902709e137 } : BV:32
=input.dst.llvm-%m
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 248948727 ] -> 0, [ 248948728; 248948728 ] -> 249, [ 248948729; 248948729 ] -> 191, [ 248948730; 248948730 ] -> 125, [ 248948731; 248948731 ] -> 203, [ 248948732; 2415919099 ] -> 0, [ 2415919100; 2415919100 ] -> 253, [ 2415919101; 2415919101 ] -> 127, [ 2415919102; 2415919102 ] -> 192, [ 2415919103; 2415919103 ] -> 121, [ 2415919104; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2043618267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2043618268; 2043618271 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2043618272; 2106532127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2106532128; 2106532131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2106532132; 3810363255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3810363256; 3810363259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3810363260; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3810363256 { 0xe31d8778 -484604040 -1.23069667e71 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2043618268 { 0x79cf23dc +1.61828184e116 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2106532128 { 0x7d8f2120 +1.11819839e124 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26486 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2215926527 { 0x84145aff -2079040769 -1.15902698e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2215926528 { 0x84145b00 -2079040768 -1.15902709e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26489 : BV:32
18 : Lambda26487 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2215926529 { 0x84145b01 -2079040767 -1.15902721e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 33554432 { 0x2000000 +1.0e133 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 33554433 { 0x2000001 +1.11e133 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26488 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 248948731 { 0xed6a7fb +1.67700135e158 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2415919100 { 0x8ffffffc -1879048196 -1.99999952e160 } : BV:32
82 : eq(80, 81) : BOOL
83 : 253 { 0xfd -3 } : BV:8
84 : eq(80, 78) : BOOL
85 : 203 { 0xcb -53 } : BV:8
86 : 248948728 { 0xed6a7f8 +1.67700099e158 } : BV:32
87 : eq(80, 86) : BOOL
88 : 249 { 0xf9 -7 } : BV:8
89 : 2415919102 { 0x8ffffffe -1879048194 -1.99999976e160 } : BV:32
90 : eq(80, 89) : BOOL
91 : 192 { 0xc0 -64 } : BV:8
92 : 2415919103 { 0x8fffffff -1879048193 -1.99999988e160 } : BV:32
93 : eq(80, 92) : BOOL
94 : 121 { 0x79 } : BV:8
95 : 248948730 { 0xed6a7fa +1.67700123e158 } : BV:32
96 : eq(80, 95) : BOOL
97 : 125 { 0x7d } : BV:8
98 : 248948729 { 0xed6a7f9 +1.67700111e158 } : BV:32
99 : eq(80, 98) : BOOL
100 : 191 { 0xbf -65 } : BV:8
101 : 2415919101 { 0x8ffffffd -1879048195 -1.99999964e160 } : BV:32
102 : eq(80, 101) : BOOL
103 : 127 { 0x7f } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(95, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(98, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(86, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 236, 235) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26483 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26484 : BV:32
7 : 187499485 { 0xb2d03dd +1.35168039e151 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26491 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26492 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2042658813 { 0x79c07ffd +1.50390589e116 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2415919100 { 0x8ffffffc -1879048196 -1.99999952e160 } : BV:32
25 : eq(23, 24) : BOOL
26 : 253 { 0xfd -3 } : BV:8
27 : 248948731 { 0xed6a7fb +1.67700135e158 } : BV:32
28 : eq(23, 27) : BOOL
29 : 203 { 0xcb -53 } : BV:8
30 : 248948728 { 0xed6a7f8 +1.67700099e158 } : BV:32
31 : eq(23, 30) : BOOL
32 : 249 { 0xf9 -7 } : BV:8
33 : 2415919102 { 0x8ffffffe -1879048194 -1.99999976e160 } : BV:32
34 : eq(23, 33) : BOOL
35 : 192 { 0xc0 -64 } : BV:8
36 : 2415919103 { 0x8fffffff -1879048193 -1.99999988e160 } : BV:32
37 : eq(23, 36) : BOOL
38 : 121 { 0x79 } : BV:8
39 : 248948730 { 0xed6a7fa +1.67700123e158 } : BV:32
40 : eq(23, 39) : BOOL
41 : 125 { 0x7d } : BV:8
42 : 248948729 { 0xed6a7f9 +1.67700111e158 } : BV:32
43 : eq(23, 42) : BOOL
44 : 191 { 0xbf -65 } : BV:8
45 : 2415919101 { 0x8ffffffd -1879048195 -1.99999964e160 } : BV:32
46 : eq(23, 45) : BOOL
47 : 127 { 0x7f } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 541742593 { 0x204a5601 +1.58074963e193 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2215926527 ] -> true, [ 2215926528; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2215926527 ] -> true, [ 2215926528; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26428 : BV:32
2 : Lambda26429 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2215926527 { 0x84145aff -2079040769 -1.15902698e137 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2215926528 { 0x84145b00 -2079040768 -1.15902709e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2215926529 { 0x84145b01 -2079040767 -1.15902721e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 33554432 { 0x2000000 +1.0e133 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33554433 { 0x2000001 +1.11e133 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26433 : BV:32
2 : Lambda26434 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2215926527 { 0x84145aff -2079040769 -1.15902698e137 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2215926528 { 0x84145b00 -2079040768 -1.15902709e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2215926529 { 0x84145b01 -2079040767 -1.15902721e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 33554432 { 0x2000000 +1.0e133 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 33554433 { 0x2000001 +1.11e133 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 248948731 { 0xed6a7fb +1.67700135e158 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2415919100 { 0x8ffffffc -1879048196 -1.99999952e160 } : BV:32
55 : eq(53, 54) : BOOL
56 : 253 { 0xfd -3 } : BV:8
57 : eq(53, 51) : BOOL
58 : 203 { 0xcb -53 } : BV:8
59 : 248948728 { 0xed6a7f8 +1.67700099e158 } : BV:32
60 : eq(53, 59) : BOOL
61 : 249 { 0xf9 -7 } : BV:8
62 : 2415919102 { 0x8ffffffe -1879048194 -1.99999976e160 } : BV:32
63 : eq(53, 62) : BOOL
64 : 192 { 0xc0 -64 } : BV:8
65 : 2415919103 { 0x8fffffff -1879048193 -1.99999988e160 } : BV:32
66 : eq(53, 65) : BOOL
67 : 121 { 0x79 } : BV:8
68 : 248948730 { 0xed6a7fa +1.67700123e158 } : BV:32
69 : eq(53, 68) : BOOL
70 : 125 { 0x7d } : BV:8
71 : 248948729 { 0xed6a7f9 +1.67700111e158 } : BV:32
72 : eq(53, 71) : BOOL
73 : 191 { 0xbf -65 } : BV:8
74 : 2415919101 { 0x8ffffffd -1879048195 -1.99999964e160 } : BV:32
75 : eq(53, 74) : BOOL
76 : 127 { 0x7f } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(68, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(71, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(59, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 209, 208) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26435 : BV:32
2 : Lambda26436 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2215926527 { 0x84145aff -2079040769 -1.15902698e137 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2215926528 { 0x84145b00 -2079040768 -1.15902709e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2215926529 { 0x84145b01 -2079040767 -1.15902721e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 33554432 { 0x2000000 +1.0e133 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 33554433 { 0x2000001 +1.11e133 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26439 : BV:32
2 : Lambda26440 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 248948731 { 0xed6a7fb +1.67700135e158 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2415919100 { 0x8ffffffc -1879048196 -1.99999952e160 } : BV:32
14 : eq(12, 13) : BOOL
15 : 253 { 0xfd -3 } : BV:8
16 : eq(12, 10) : BOOL
17 : 203 { 0xcb -53 } : BV:8
18 : 248948728 { 0xed6a7f8 +1.67700099e158 } : BV:32
19 : eq(12, 18) : BOOL
20 : 249 { 0xf9 -7 } : BV:8
21 : 2415919102 { 0x8ffffffe -1879048194 -1.99999976e160 } : BV:32
22 : eq(12, 21) : BOOL
23 : 192 { 0xc0 -64 } : BV:8
24 : 2415919103 { 0x8fffffff -1879048193 -1.99999988e160 } : BV:32
25 : eq(12, 24) : BOOL
26 : 121 { 0x79 } : BV:8
27 : 248948730 { 0xed6a7fa +1.67700123e158 } : BV:32
28 : eq(12, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 248948729 { 0xed6a7f9 +1.67700111e158 } : BV:32
31 : eq(12, 30) : BOOL
32 : 191 { 0xbf -65 } : BV:8
33 : 2415919101 { 0x8ffffffd -1879048195 -1.99999964e160 } : BV:32
34 : eq(12, 33) : BOOL
35 : 127 { 0x7f } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(27, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(30, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(18, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda26444 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2042658813 { 0x79c07ffd +1.50390589e116 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2415919100 { 0x8ffffffc -1879048196 -1.99999952e160 } : BV:32
10 : eq(8, 9) : BOOL
11 : 253 { 0xfd -3 } : BV:8
12 : 248948731 { 0xed6a7fb +1.67700135e158 } : BV:32
13 : eq(8, 12) : BOOL
14 : 203 { 0xcb -53 } : BV:8
15 : 248948728 { 0xed6a7f8 +1.67700099e158 } : BV:32
16 : eq(8, 15) : BOOL
17 : 249 { 0xf9 -7 } : BV:8
18 : 2415919102 { 0x8ffffffe -1879048194 -1.99999976e160 } : BV:32
19 : eq(8, 18) : BOOL
20 : 192 { 0xc0 -64 } : BV:8
21 : 2415919103 { 0x8fffffff -1879048193 -1.99999988e160 } : BV:32
22 : eq(8, 21) : BOOL
23 : 121 { 0x79 } : BV:8
24 : 248948730 { 0xed6a7fa +1.67700123e158 } : BV:32
25 : eq(8, 24) : BOOL
26 : 125 { 0x7d } : BV:8
27 : 248948729 { 0xed6a7f9 +1.67700111e158 } : BV:32
28 : eq(8, 27) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 2415919101 { 0x8ffffffd -1879048195 -1.99999964e160 } : BV:32
31 : eq(8, 30) : BOOL
32 : 127 { 0x7f } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 541742593 { 0x204a5601 +1.58074963e193 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2106532128 { 0x7d8f2120 +1.11819839e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2106532131 { 0x7d8f2123 +1.11819875e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3810363256 { 0xe31d8778 -484604040 -1.23069667e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3810363259 { 0xe31d877b -484604037 -1.23069703e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2043618268 { 0x79cf23dc +1.61828184e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2043618271 { 0x79cf23df +1.61828219e116 } : BV:32
=counter_example.random_seed
4187301095
=counter_example_end
=global nodece 45 num_edges_traversed 0
=global nodece 45 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 46
=global nodece 46 nodece z3v487.ce10722.num_edges_traversed0
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(epsilon)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3v487.ce10722 4b6e9f41f80bbfbe96eb66a63ba2599
=input.spec-%var-x-1
1 : Lambda26508 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26511 : BV:32
18 : Lambda26509 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 134217728 { 0x8000000 +1.0e145 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 134217729 { 0x8000001 +1.11e145 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26510 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 169869312 { 0xa200000 +1.25000000e149 } : BV:32
=input.dst.llvm-%n
1 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 151164931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 151164932; 151164935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 151164936; 1107702467 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1107702468; 1107702471 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1107702472; 2418185919 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418185920; 2418185923 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2418185924; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1107702468 { 0x420632c4 +1.4842424e5 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 151164932 { 0x9029804 +1.2026414e147 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2418185920 { 0x902296c0 -1876781376 -1.27022552e161 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26515 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26518 : BV:32
18 : Lambda26516 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 134217728 { 0x8000000 +1.0e145 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 134217729 { 0x8000001 +1.11e145 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26517 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 75, 2) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26512 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26513 : BV:32
7 : 1403247223 { 0x53a3da77 +1.28010451e40 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26520 : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : 134217728 { 0x8000000 +1.0e145 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26521 : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : bvule(11, 10) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(10, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : lambda(10, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(9, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2281701375 ] -> true, [ 2281701376; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2281701375 ] -> true, [ 2281701376; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26451 : BV:32
2 : Lambda26452 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 134217728 { 0x8000000 +1.0e145 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 134217729 { 0x8000001 +1.11e145 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26456 : BV:32
2 : Lambda26457 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 134217728 { 0x8000000 +1.0e145 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 134217729 { 0x8000001 +1.11e145 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 48, 3) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26458 : BV:32
2 : Lambda26459 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 134217728 { 0x8000000 +1.0e145 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 134217729 { 0x8000001 +1.11e145 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : Lambda26464 : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : 134217728 { 0x8000000 +1.0e145 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : sym_const(9) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2418185920 { 0x902296c0 -1876781376 -1.27022552e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2418185923 { 0x902296c3 -1876781373 -1.27022588e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1107702468 { 0x420632c4 +1.4842424e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1107702471 { 0x420632c7 +1.4842460e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 151164932 { 0x9029804 +1.2026414e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 151164935 { 0x9029807 +1.2026450e147 } : BV:32
=counter_example.random_seed
1252923027
=counter_example_end
=global nodece 46 num_edges_traversed 0
=global nodece 46 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 47
=global nodece 47 nodece z3.ce10815.num_edges_traversed2
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3.ce10815 6378775d8b7b276f99acafc141636080
=input.spec-%var-x-1
1 : Lambda17450 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17453 : BV:32
18 : Lambda17451 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17452 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4099 { 0x1003 +1.48863e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 231 { 0xe7 -25 } : BV:8
64 : 4098 { 0x1002 +1.48851e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 227 { 0xe3 -29 } : BV:8
67 : eq(61, 22) : BOOL
68 : 26 { 0x1a } : BV:8
69 : eq(61, 8) : BOOL
70 : 240 { 0xf0 -16 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(67, 68, 72) : BV:8
74 : ite(65, 66, 73) : BV:8
75 : ite(62, 63, 74) : BV:8
76 : bvadd(64, 60) : BV:32
77 : eq(76, 59) : BOOL
78 : eq(76, 64) : BOOL
79 : eq(76, 22) : BOOL
80 : eq(76, 8) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 68, 81) : BV:8
83 : ite(78, 66, 82) : BV:8
84 : ite(77, 63, 83) : BV:8
85 : bvadd(22, 60) : BV:32
86 : eq(85, 59) : BOOL
87 : eq(85, 64) : BOOL
88 : eq(85, 22) : BOOL
89 : eq(85, 8) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : bvadd(8, 60) : BV:32
95 : eq(94, 59) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 22) : BOOL
98 : eq(94, 8) : BOOL
99 : ite(98, 70, 71) : BV:8
100 : ite(97, 68, 99) : BV:8
101 : ite(96, 66, 100) : BV:8
102 : ite(95, 63, 101) : BV:8
103 : bvconcat(75, 84, 93, 102) : BV:32
104 : bvadd(56, 58, 103) : BV:32
105 : eq(104, 59) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 22) : BOOL
108 : eq(104, 8) : BOOL
109 : ite(108, 70, 71) : BV:8
110 : ite(107, 68, 109) : BV:8
111 : ite(106, 66, 110) : BV:8
112 : ite(105, 63, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 58, 103) : BV:32
115 : eq(114, 59) : BOOL
116 : eq(114, 64) : BOOL
117 : eq(114, 22) : BOOL
118 : eq(114, 8) : BOOL
119 : ite(118, 70, 71) : BV:8
120 : ite(117, 68, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : 1 { 0x1 +1.11e129 } : BV:32
124 : bvadd(123, 58, 103) : BV:32
125 : eq(124, 59) : BOOL
126 : eq(124, 64) : BOOL
127 : eq(124, 22) : BOOL
128 : eq(124, 8) : BOOL
129 : ite(128, 70, 71) : BV:8
130 : ite(127, 68, 129) : BV:8
131 : ite(126, 66, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : bvadd(58, 103) : BV:32
134 : eq(133, 59) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 22) : BOOL
137 : eq(133, 8) : BOOL
138 : ite(137, 70, 71) : BV:8
139 : ite(136, 68, 138) : BV:8
140 : ite(135, 66, 139) : BV:8
141 : ite(134, 63, 140) : BV:8
142 : bvconcat(112, 122, 132, 141) : BV:32
143 : ite(55, 2, 142) : BV:32
144 : lambda(52, 143) : FUNCTION[BV:32 -> BV:32]
145 : map(51, 144) : MAP[BV:32 -> BV:32]
146 : lambda(17, 145) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
147 : map(16, 146) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
148 : sym_const(147) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4095 ] -> 0, [ 4096; 4096 ] -> 240, [ 4097; 4097 ] -> 26, [ 4098; 4098 ] -> 227, [ 4099; 4099 ] -> 231, [ 4100; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540313587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 540313588; 540313591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 540313592; 1438193771 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1438193772; 1438193775 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1438193776; 2924963735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2924963736; 2924963739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2924963740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 540313588 { 0x203487f4 +1.41039896e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1438193772 { 0x55b9186c +1.44605779e44 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2924963736 { 0xae576798 -1370003560 -1.68284893e221 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17455 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17458 : BV:32
18 : Lambda17456 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17457 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4099 { 0x1003 +1.48863e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 231 { 0xe7 -25 } : BV:8
83 : 4098 { 0x1002 +1.48851e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 227 { 0xe3 -29 } : BV:8
86 : eq(80, 22) : BOOL
87 : 26 { 0x1a } : BV:8
88 : eq(80, 8) : BOOL
89 : 240 { 0xf0 -16 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(86, 87, 91) : BV:8
93 : ite(84, 85, 92) : BV:8
94 : ite(81, 82, 93) : BV:8
95 : bvadd(83, 79) : BV:32
96 : eq(95, 78) : BOOL
97 : eq(95, 83) : BOOL
98 : eq(95, 22) : BOOL
99 : eq(95, 8) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 87, 100) : BV:8
102 : ite(97, 85, 101) : BV:8
103 : ite(96, 82, 102) : BV:8
104 : bvadd(22, 79) : BV:32
105 : eq(104, 78) : BOOL
106 : eq(104, 83) : BOOL
107 : eq(104, 22) : BOOL
108 : eq(104, 8) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 87, 109) : BV:8
111 : ite(106, 85, 110) : BV:8
112 : ite(105, 82, 111) : BV:8
113 : bvadd(8, 79) : BV:32
114 : eq(113, 78) : BOOL
115 : eq(113, 83) : BOOL
116 : eq(113, 22) : BOOL
117 : eq(113, 8) : BOOL
118 : ite(117, 89, 90) : BV:8
119 : ite(116, 87, 118) : BV:8
120 : ite(115, 85, 119) : BV:8
121 : ite(114, 82, 120) : BV:8
122 : bvconcat(94, 103, 112, 121) : BV:32
123 : bvadd(75, 77, 122) : BV:32
124 : eq(123, 78) : BOOL
125 : eq(123, 83) : BOOL
126 : eq(123, 22) : BOOL
127 : eq(123, 8) : BOOL
128 : ite(127, 89, 90) : BV:8
129 : ite(126, 87, 128) : BV:8
130 : ite(125, 85, 129) : BV:8
131 : ite(124, 82, 130) : BV:8
132 : 2 { 0x2 +1.23e129 } : BV:32
133 : bvadd(132, 77, 122) : BV:32
134 : eq(133, 78) : BOOL
135 : eq(133, 83) : BOOL
136 : eq(133, 22) : BOOL
137 : eq(133, 8) : BOOL
138 : ite(137, 89, 90) : BV:8
139 : ite(136, 87, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 82, 140) : BV:8
142 : 1 { 0x1 +1.11e129 } : BV:32
143 : bvadd(142, 77, 122) : BV:32
144 : eq(143, 78) : BOOL
145 : eq(143, 83) : BOOL
146 : eq(143, 22) : BOOL
147 : eq(143, 8) : BOOL
148 : ite(147, 89, 90) : BV:8
149 : ite(146, 87, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 82, 150) : BV:8
152 : bvadd(77, 122) : BV:32
153 : eq(152, 78) : BOOL
154 : eq(152, 83) : BOOL
155 : eq(152, 22) : BOOL
156 : eq(152, 8) : BOOL
157 : ite(156, 89, 90) : BV:8
158 : ite(155, 87, 157) : BV:8
159 : ite(154, 85, 158) : BV:8
160 : ite(153, 82, 159) : BV:8
161 : bvconcat(131, 141, 151, 160) : BV:32
162 : ite(55, 2, 161) : BV:32
163 : ite(74, 162, 161) : BV:32
164 : ite(55, 2, 163) : BV:32
165 : lambda(52, 164) : FUNCTION[BV:32 -> BV:32]
166 : map(51, 165) : MAP[BV:32 -> BV:32]
167 : lambda(17, 166) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
168 : map(16, 167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
169 : sym_const(168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17479 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda17480 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 27) : BV:32
49 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
50 : bvadd(46, 48, 49) : BV:32
51 : 4099 { 0x1003 +1.48863e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 231 { 0xe7 -25 } : BV:8
54 : 4098 { 0x1002 +1.48851e129 } : BV:32
55 : eq(50, 54) : BOOL
56 : 227 { 0xe3 -29 } : BV:8
57 : 4097 { 0x1001 +1.48840e129 } : BV:32
58 : eq(50, 57) : BOOL
59 : 26 { 0x1a } : BV:8
60 : 4096 { 0x1000 +1.48828e129 } : BV:32
61 : eq(50, 60) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(52, 53, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 48, 49) : BV:32
70 : eq(69, 51) : BOOL
71 : eq(69, 54) : BOOL
72 : eq(69, 57) : BOOL
73 : eq(69, 60) : BOOL
74 : ite(73, 62, 63) : BV:8
75 : ite(72, 59, 74) : BV:8
76 : ite(71, 56, 75) : BV:8
77 : ite(70, 53, 76) : BV:8
78 : bvadd(1, 48, 49) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 54) : BOOL
81 : eq(78, 57) : BOOL
82 : eq(78, 60) : BOOL
83 : ite(82, 62, 63) : BV:8
84 : ite(81, 59, 83) : BV:8
85 : ite(80, 56, 84) : BV:8
86 : ite(79, 53, 85) : BV:8
87 : bvadd(48, 49) : BV:32
88 : eq(87, 51) : BOOL
89 : eq(87, 54) : BOOL
90 : eq(87, 57) : BOOL
91 : eq(87, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : ite(88, 53, 94) : BV:8
96 : bvconcat(67, 77, 86, 95) : BV:32
97 : ite(29, 5, 96) : BV:32
98 : ite(45, 97, 96) : BV:32
99 : ite(29, 5, 98) : BV:32
100 : lambda(27, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(26, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17481 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17482 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 4099 { 0x1003 +1.48863e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 231 { 0xe7 -25 } : BV:8
52 : 4098 { 0x1002 +1.48851e129 } : BV:32
53 : eq(48, 52) : BOOL
54 : 227 { 0xe3 -29 } : BV:8
55 : 4097 { 0x1001 +1.48840e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 26 { 0x1a } : BV:8
58 : 4096 { 0x1000 +1.48828e129 } : BV:32
59 : eq(48, 58) : BOOL
60 : 240 { 0xf0 -16 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 46, 47) : BV:32
68 : eq(67, 49) : BOOL
69 : eq(67, 52) : BOOL
70 : eq(67, 55) : BOOL
71 : eq(67, 58) : BOOL
72 : ite(71, 60, 61) : BV:8
73 : ite(70, 57, 72) : BV:8
74 : ite(69, 54, 73) : BV:8
75 : ite(68, 51, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 46, 47) : BV:32
78 : eq(77, 49) : BOOL
79 : eq(77, 52) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : ite(81, 60, 61) : BV:8
83 : ite(80, 57, 82) : BV:8
84 : ite(79, 54, 83) : BV:8
85 : ite(78, 51, 84) : BV:8
86 : bvadd(46, 47) : BV:32
87 : eq(86, 49) : BOOL
88 : eq(86, 52) : BOOL
89 : eq(86, 55) : BOOL
90 : eq(86, 58) : BOOL
91 : ite(90, 60, 61) : BV:8
92 : ite(89, 57, 91) : BV:8
93 : ite(88, 54, 92) : BV:8
94 : ite(87, 51, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(27, 3, 95) : BV:32
97 : ite(43, 96, 95) : BV:32
98 : ite(27, 3, 97) : BV:32
99 : lambda(25, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(24, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17483 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17484 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 4099 { 0x1003 +1.48863e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 231 { 0xe7 -25 } : BV:8
52 : 4098 { 0x1002 +1.48851e129 } : BV:32
53 : eq(48, 52) : BOOL
54 : 227 { 0xe3 -29 } : BV:8
55 : 4097 { 0x1001 +1.48840e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 26 { 0x1a } : BV:8
58 : 4096 { 0x1000 +1.48828e129 } : BV:32
59 : eq(48, 58) : BOOL
60 : 240 { 0xf0 -16 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 46, 47) : BV:32
68 : eq(67, 49) : BOOL
69 : eq(67, 52) : BOOL
70 : eq(67, 55) : BOOL
71 : eq(67, 58) : BOOL
72 : ite(71, 60, 61) : BV:8
73 : ite(70, 57, 72) : BV:8
74 : ite(69, 54, 73) : BV:8
75 : ite(68, 51, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 46, 47) : BV:32
78 : eq(77, 49) : BOOL
79 : eq(77, 52) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : ite(81, 60, 61) : BV:8
83 : ite(80, 57, 82) : BV:8
84 : ite(79, 54, 83) : BV:8
85 : ite(78, 51, 84) : BV:8
86 : bvadd(46, 47) : BV:32
87 : eq(86, 49) : BOOL
88 : eq(86, 52) : BOOL
89 : eq(86, 55) : BOOL
90 : eq(86, 58) : BOOL
91 : ite(90, 60, 61) : BV:8
92 : ite(89, 57, 91) : BV:8
93 : ite(88, 54, 92) : BV:8
94 : ite(87, 51, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(27, 3, 95) : BV:32
97 : ite(43, 96, 95) : BV:32
98 : ite(27, 3, 97) : BV:32
99 : lambda(25, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(24, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17409 : BV:32
2 : Lambda17410 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4096 { 0x1000 +1.48828e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17414 : BV:32
2 : Lambda17415 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4097 { 0x1001 +1.48840e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4099 { 0x1003 +1.48863e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 231 { 0xe7 -25 } : BV:8
56 : 4098 { 0x1002 +1.48851e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 227 { 0xe3 -29 } : BV:8
59 : eq(53, 20) : BOOL
60 : 26 { 0x1a } : BV:8
61 : eq(53, 12) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(59, 60, 64) : BV:8
66 : ite(57, 58, 65) : BV:8
67 : ite(54, 55, 66) : BV:8
68 : bvadd(56, 52) : BV:32
69 : eq(68, 51) : BOOL
70 : eq(68, 56) : BOOL
71 : eq(68, 20) : BOOL
72 : eq(68, 12) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 60, 73) : BV:8
75 : ite(70, 58, 74) : BV:8
76 : ite(69, 55, 75) : BV:8
77 : bvadd(20, 52) : BV:32
78 : eq(77, 51) : BOOL
79 : eq(77, 56) : BOOL
80 : eq(77, 20) : BOOL
81 : eq(77, 12) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 60, 82) : BV:8
84 : ite(79, 58, 83) : BV:8
85 : ite(78, 55, 84) : BV:8
86 : bvadd(12, 52) : BV:32
87 : eq(86, 51) : BOOL
88 : eq(86, 56) : BOOL
89 : eq(86, 20) : BOOL
90 : eq(86, 12) : BOOL
91 : ite(90, 62, 63) : BV:8
92 : ite(89, 60, 91) : BV:8
93 : ite(88, 58, 92) : BV:8
94 : ite(87, 55, 93) : BV:8
95 : bvconcat(67, 76, 85, 94) : BV:32
96 : bvadd(48, 50, 95) : BV:32
97 : eq(96, 51) : BOOL
98 : eq(96, 56) : BOOL
99 : eq(96, 20) : BOOL
100 : eq(96, 12) : BOOL
101 : ite(100, 62, 63) : BV:8
102 : ite(99, 60, 101) : BV:8
103 : ite(98, 58, 102) : BV:8
104 : ite(97, 55, 103) : BV:8
105 : 2 { 0x2 +1.23e129 } : BV:32
106 : bvadd(105, 50, 95) : BV:32
107 : eq(106, 51) : BOOL
108 : eq(106, 56) : BOOL
109 : eq(106, 20) : BOOL
110 : eq(106, 12) : BOOL
111 : ite(110, 62, 63) : BV:8
112 : ite(109, 60, 111) : BV:8
113 : ite(108, 58, 112) : BV:8
114 : ite(107, 55, 113) : BV:8
115 : 1 { 0x1 +1.11e129 } : BV:32
116 : bvadd(115, 50, 95) : BV:32
117 : eq(116, 51) : BOOL
118 : eq(116, 56) : BOOL
119 : eq(116, 20) : BOOL
120 : eq(116, 12) : BOOL
121 : ite(120, 62, 63) : BV:8
122 : ite(119, 60, 121) : BV:8
123 : ite(118, 58, 122) : BV:8
124 : ite(117, 55, 123) : BV:8
125 : bvadd(50, 95) : BV:32
126 : eq(125, 51) : BOOL
127 : eq(125, 56) : BOOL
128 : eq(125, 20) : BOOL
129 : eq(125, 12) : BOOL
130 : ite(129, 62, 63) : BV:8
131 : ite(128, 60, 130) : BV:8
132 : ite(127, 58, 131) : BV:8
133 : ite(126, 55, 132) : BV:8
134 : bvconcat(104, 114, 124, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : ite(47, 135, 134) : BV:32
137 : ite(6, 3, 136) : BV:32
138 : lambda(1, 2, 137) : FUNCTION[BV:32,BV:32 -> BV:32]
139 : sym_const(138) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17416 : BV:32
2 : Lambda17417 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4096 { 0x1000 +1.48828e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17420 : BV:32
2 : Lambda17421 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4099 { 0x1003 +1.48863e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 231 { 0xe7 -25 } : BV:8
15 : 4098 { 0x1002 +1.48851e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 227 { 0xe3 -29 } : BV:8
18 : 4097 { 0x1001 +1.48840e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 26 { 0x1a } : BV:8
21 : 4096 { 0x1000 +1.48828e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : bvadd(15, 11) : BV:32
30 : eq(29, 10) : BOOL
31 : eq(29, 15) : BOOL
32 : eq(29, 18) : BOOL
33 : eq(29, 21) : BOOL
34 : ite(33, 23, 24) : BV:8
35 : ite(32, 20, 34) : BV:8
36 : ite(31, 17, 35) : BV:8
37 : ite(30, 14, 36) : BV:8
38 : bvadd(18, 11) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 15) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : ite(42, 23, 24) : BV:8
44 : ite(41, 20, 43) : BV:8
45 : ite(40, 17, 44) : BV:8
46 : ite(39, 14, 45) : BV:8
47 : bvadd(21, 11) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 15) : BOOL
50 : eq(47, 18) : BOOL
51 : eq(47, 21) : BOOL
52 : ite(51, 23, 24) : BV:8
53 : ite(50, 20, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 14, 54) : BV:8
56 : bvconcat(28, 37, 46, 55) : BV:32
57 : bvadd(7, 9, 56) : BV:32
58 : eq(57, 10) : BOOL
59 : eq(57, 15) : BOOL
60 : eq(57, 18) : BOOL
61 : eq(57, 21) : BOOL
62 : ite(61, 23, 24) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 17, 63) : BV:8
65 : ite(58, 14, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 9, 56) : BV:32
68 : eq(67, 10) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : ite(71, 23, 24) : BV:8
73 : ite(70, 20, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 14, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 9, 56) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : ite(81, 23, 24) : BV:8
83 : ite(80, 20, 82) : BV:8
84 : ite(79, 17, 83) : BV:8
85 : ite(78, 14, 84) : BV:8
86 : bvadd(9, 56) : BV:32
87 : eq(86, 10) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : ite(90, 23, 24) : BV:8
92 : ite(89, 20, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 14, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(6, 3, 95) : BV:32
97 : lambda(1, 2, 96) : FUNCTION[BV:32,BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2924963736 { 0xae576798 -1370003560 -1.68284893e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2924963739 { 0xae57679b -1370003557 -1.68284928e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 540313588 { 0x203487f4 +1.41039896e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 540313591 { 0x203487f7 +1.41039931e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1438193772 { 0x55b9186c +1.44605779e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1438193775 { 0x55b9186f +1.44605815e44 } : BV:32
=counter_example.random_seed
3547141825
=counter_example_end
=global nodece 47 num_edges_traversed 2
=global nodece 47 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 48
=global nodece 48 nodece z3.ce10883.num_edges_traversed3
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3.ce10883 45124ee33ee75bbf8bf3912ecd40e45a
=input.spec-%var-x-1
1 : Lambda17450 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17453 : BV:32
18 : Lambda17451 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17452 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4099 { 0x1003 +1.48863e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 231 { 0xe7 -25 } : BV:8
64 : 4098 { 0x1002 +1.48851e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 227 { 0xe3 -29 } : BV:8
67 : eq(61, 22) : BOOL
68 : 26 { 0x1a } : BV:8
69 : eq(61, 8) : BOOL
70 : 240 { 0xf0 -16 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(67, 68, 72) : BV:8
74 : ite(65, 66, 73) : BV:8
75 : ite(62, 63, 74) : BV:8
76 : bvadd(64, 60) : BV:32
77 : eq(76, 59) : BOOL
78 : eq(76, 64) : BOOL
79 : eq(76, 22) : BOOL
80 : eq(76, 8) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 68, 81) : BV:8
83 : ite(78, 66, 82) : BV:8
84 : ite(77, 63, 83) : BV:8
85 : bvadd(22, 60) : BV:32
86 : eq(85, 59) : BOOL
87 : eq(85, 64) : BOOL
88 : eq(85, 22) : BOOL
89 : eq(85, 8) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : bvadd(8, 60) : BV:32
95 : eq(94, 59) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 22) : BOOL
98 : eq(94, 8) : BOOL
99 : ite(98, 70, 71) : BV:8
100 : ite(97, 68, 99) : BV:8
101 : ite(96, 66, 100) : BV:8
102 : ite(95, 63, 101) : BV:8
103 : bvconcat(75, 84, 93, 102) : BV:32
104 : bvadd(56, 58, 103) : BV:32
105 : eq(104, 59) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 22) : BOOL
108 : eq(104, 8) : BOOL
109 : ite(108, 70, 71) : BV:8
110 : ite(107, 68, 109) : BV:8
111 : ite(106, 66, 110) : BV:8
112 : ite(105, 63, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 58, 103) : BV:32
115 : eq(114, 59) : BOOL
116 : eq(114, 64) : BOOL
117 : eq(114, 22) : BOOL
118 : eq(114, 8) : BOOL
119 : ite(118, 70, 71) : BV:8
120 : ite(117, 68, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : 1 { 0x1 +1.11e129 } : BV:32
124 : bvadd(123, 58, 103) : BV:32
125 : eq(124, 59) : BOOL
126 : eq(124, 64) : BOOL
127 : eq(124, 22) : BOOL
128 : eq(124, 8) : BOOL
129 : ite(128, 70, 71) : BV:8
130 : ite(127, 68, 129) : BV:8
131 : ite(126, 66, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : bvadd(58, 103) : BV:32
134 : eq(133, 59) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 22) : BOOL
137 : eq(133, 8) : BOOL
138 : ite(137, 70, 71) : BV:8
139 : ite(136, 68, 138) : BV:8
140 : ite(135, 66, 139) : BV:8
141 : ite(134, 63, 140) : BV:8
142 : bvconcat(112, 122, 132, 141) : BV:32
143 : ite(55, 2, 142) : BV:32
144 : lambda(52, 143) : FUNCTION[BV:32 -> BV:32]
145 : map(51, 144) : MAP[BV:32 -> BV:32]
146 : lambda(17, 145) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
147 : map(16, 146) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
148 : sym_const(147) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%x
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4095 ] -> 0, [ 4096; 4096 ] -> 240, [ 4097; 4097 ] -> 26, [ 4098; 4098 ] -> 227, [ 4099; 4099 ] -> 231, [ 4100; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540313587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 540313588; 540313591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 540313592; 1438193771 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1438193772; 1438193775 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1438193776; 2924963735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2924963736; 2924963739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2924963740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 540313588 { 0x203487f4 +1.41039896e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1438193772 { 0x55b9186c +1.44605779e44 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2924963736 { 0xae576798 -1370003560 -1.68284893e221 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17455 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17458 : BV:32
18 : Lambda17456 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17457 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4099 { 0x1003 +1.48863e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 231 { 0xe7 -25 } : BV:8
83 : 4098 { 0x1002 +1.48851e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 227 { 0xe3 -29 } : BV:8
86 : eq(80, 22) : BOOL
87 : 26 { 0x1a } : BV:8
88 : eq(80, 8) : BOOL
89 : 240 { 0xf0 -16 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(86, 87, 91) : BV:8
93 : ite(84, 85, 92) : BV:8
94 : ite(81, 82, 93) : BV:8
95 : bvadd(83, 79) : BV:32
96 : eq(95, 78) : BOOL
97 : eq(95, 83) : BOOL
98 : eq(95, 22) : BOOL
99 : eq(95, 8) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 87, 100) : BV:8
102 : ite(97, 85, 101) : BV:8
103 : ite(96, 82, 102) : BV:8
104 : bvadd(22, 79) : BV:32
105 : eq(104, 78) : BOOL
106 : eq(104, 83) : BOOL
107 : eq(104, 22) : BOOL
108 : eq(104, 8) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 87, 109) : BV:8
111 : ite(106, 85, 110) : BV:8
112 : ite(105, 82, 111) : BV:8
113 : bvadd(8, 79) : BV:32
114 : eq(113, 78) : BOOL
115 : eq(113, 83) : BOOL
116 : eq(113, 22) : BOOL
117 : eq(113, 8) : BOOL
118 : ite(117, 89, 90) : BV:8
119 : ite(116, 87, 118) : BV:8
120 : ite(115, 85, 119) : BV:8
121 : ite(114, 82, 120) : BV:8
122 : bvconcat(94, 103, 112, 121) : BV:32
123 : bvadd(75, 77, 122) : BV:32
124 : eq(123, 78) : BOOL
125 : eq(123, 83) : BOOL
126 : eq(123, 22) : BOOL
127 : eq(123, 8) : BOOL
128 : ite(127, 89, 90) : BV:8
129 : ite(126, 87, 128) : BV:8
130 : ite(125, 85, 129) : BV:8
131 : ite(124, 82, 130) : BV:8
132 : 2 { 0x2 +1.23e129 } : BV:32
133 : bvadd(132, 77, 122) : BV:32
134 : eq(133, 78) : BOOL
135 : eq(133, 83) : BOOL
136 : eq(133, 22) : BOOL
137 : eq(133, 8) : BOOL
138 : ite(137, 89, 90) : BV:8
139 : ite(136, 87, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 82, 140) : BV:8
142 : 1 { 0x1 +1.11e129 } : BV:32
143 : bvadd(142, 77, 122) : BV:32
144 : eq(143, 78) : BOOL
145 : eq(143, 83) : BOOL
146 : eq(143, 22) : BOOL
147 : eq(143, 8) : BOOL
148 : ite(147, 89, 90) : BV:8
149 : ite(146, 87, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 82, 150) : BV:8
152 : bvadd(77, 122) : BV:32
153 : eq(152, 78) : BOOL
154 : eq(152, 83) : BOOL
155 : eq(152, 22) : BOOL
156 : eq(152, 8) : BOOL
157 : ite(156, 89, 90) : BV:8
158 : ite(155, 87, 157) : BV:8
159 : ite(154, 85, 158) : BV:8
160 : ite(153, 82, 159) : BV:8
161 : bvconcat(131, 141, 151, 160) : BV:32
162 : ite(55, 2, 161) : BV:32
163 : ite(74, 162, 161) : BV:32
164 : ite(55, 2, 163) : BV:32
165 : lambda(52, 164) : FUNCTION[BV:32 -> BV:32]
166 : map(51, 165) : MAP[BV:32 -> BV:32]
167 : lambda(17, 166) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
168 : map(16, 167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
169 : sym_const(168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17479 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda17480 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 27) : BV:32
49 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
50 : bvadd(46, 48, 49) : BV:32
51 : 4099 { 0x1003 +1.48863e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 231 { 0xe7 -25 } : BV:8
54 : 4098 { 0x1002 +1.48851e129 } : BV:32
55 : eq(50, 54) : BOOL
56 : 227 { 0xe3 -29 } : BV:8
57 : 4097 { 0x1001 +1.48840e129 } : BV:32
58 : eq(50, 57) : BOOL
59 : 26 { 0x1a } : BV:8
60 : 4096 { 0x1000 +1.48828e129 } : BV:32
61 : eq(50, 60) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(52, 53, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 48, 49) : BV:32
70 : eq(69, 51) : BOOL
71 : eq(69, 54) : BOOL
72 : eq(69, 57) : BOOL
73 : eq(69, 60) : BOOL
74 : ite(73, 62, 63) : BV:8
75 : ite(72, 59, 74) : BV:8
76 : ite(71, 56, 75) : BV:8
77 : ite(70, 53, 76) : BV:8
78 : bvadd(1, 48, 49) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 54) : BOOL
81 : eq(78, 57) : BOOL
82 : eq(78, 60) : BOOL
83 : ite(82, 62, 63) : BV:8
84 : ite(81, 59, 83) : BV:8
85 : ite(80, 56, 84) : BV:8
86 : ite(79, 53, 85) : BV:8
87 : bvadd(48, 49) : BV:32
88 : eq(87, 51) : BOOL
89 : eq(87, 54) : BOOL
90 : eq(87, 57) : BOOL
91 : eq(87, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : ite(88, 53, 94) : BV:8
96 : bvconcat(67, 77, 86, 95) : BV:32
97 : ite(29, 5, 96) : BV:32
98 : ite(45, 97, 96) : BV:32
99 : ite(29, 5, 98) : BV:32
100 : lambda(27, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(26, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17481 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17482 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 4099 { 0x1003 +1.48863e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 231 { 0xe7 -25 } : BV:8
52 : 4098 { 0x1002 +1.48851e129 } : BV:32
53 : eq(48, 52) : BOOL
54 : 227 { 0xe3 -29 } : BV:8
55 : 4097 { 0x1001 +1.48840e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 26 { 0x1a } : BV:8
58 : 4096 { 0x1000 +1.48828e129 } : BV:32
59 : eq(48, 58) : BOOL
60 : 240 { 0xf0 -16 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 46, 47) : BV:32
68 : eq(67, 49) : BOOL
69 : eq(67, 52) : BOOL
70 : eq(67, 55) : BOOL
71 : eq(67, 58) : BOOL
72 : ite(71, 60, 61) : BV:8
73 : ite(70, 57, 72) : BV:8
74 : ite(69, 54, 73) : BV:8
75 : ite(68, 51, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 46, 47) : BV:32
78 : eq(77, 49) : BOOL
79 : eq(77, 52) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : ite(81, 60, 61) : BV:8
83 : ite(80, 57, 82) : BV:8
84 : ite(79, 54, 83) : BV:8
85 : ite(78, 51, 84) : BV:8
86 : bvadd(46, 47) : BV:32
87 : eq(86, 49) : BOOL
88 : eq(86, 52) : BOOL
89 : eq(86, 55) : BOOL
90 : eq(86, 58) : BOOL
91 : ite(90, 60, 61) : BV:8
92 : ite(89, 57, 91) : BV:8
93 : ite(88, 54, 92) : BV:8
94 : ite(87, 51, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(27, 3, 95) : BV:32
97 : ite(43, 96, 95) : BV:32
98 : ite(27, 3, 97) : BV:32
99 : lambda(25, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(24, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17483 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17484 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 4099 { 0x1003 +1.48863e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 231 { 0xe7 -25 } : BV:8
52 : 4098 { 0x1002 +1.48851e129 } : BV:32
53 : eq(48, 52) : BOOL
54 : 227 { 0xe3 -29 } : BV:8
55 : 4097 { 0x1001 +1.48840e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 26 { 0x1a } : BV:8
58 : 4096 { 0x1000 +1.48828e129 } : BV:32
59 : eq(48, 58) : BOOL
60 : 240 { 0xf0 -16 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 46, 47) : BV:32
68 : eq(67, 49) : BOOL
69 : eq(67, 52) : BOOL
70 : eq(67, 55) : BOOL
71 : eq(67, 58) : BOOL
72 : ite(71, 60, 61) : BV:8
73 : ite(70, 57, 72) : BV:8
74 : ite(69, 54, 73) : BV:8
75 : ite(68, 51, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 46, 47) : BV:32
78 : eq(77, 49) : BOOL
79 : eq(77, 52) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : ite(81, 60, 61) : BV:8
83 : ite(80, 57, 82) : BV:8
84 : ite(79, 54, 83) : BV:8
85 : ite(78, 51, 84) : BV:8
86 : bvadd(46, 47) : BV:32
87 : eq(86, 49) : BOOL
88 : eq(86, 52) : BOOL
89 : eq(86, 55) : BOOL
90 : eq(86, 58) : BOOL
91 : ite(90, 60, 61) : BV:8
92 : ite(89, 57, 91) : BV:8
93 : ite(88, 54, 92) : BV:8
94 : ite(87, 51, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(27, 3, 95) : BV:32
97 : ite(43, 96, 95) : BV:32
98 : ite(27, 3, 97) : BV:32
99 : lambda(25, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(24, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17409 : BV:32
2 : Lambda17410 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4096 { 0x1000 +1.48828e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17414 : BV:32
2 : Lambda17415 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4097 { 0x1001 +1.48840e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4099 { 0x1003 +1.48863e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 231 { 0xe7 -25 } : BV:8
56 : 4098 { 0x1002 +1.48851e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 227 { 0xe3 -29 } : BV:8
59 : eq(53, 20) : BOOL
60 : 26 { 0x1a } : BV:8
61 : eq(53, 12) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(59, 60, 64) : BV:8
66 : ite(57, 58, 65) : BV:8
67 : ite(54, 55, 66) : BV:8
68 : bvadd(56, 52) : BV:32
69 : eq(68, 51) : BOOL
70 : eq(68, 56) : BOOL
71 : eq(68, 20) : BOOL
72 : eq(68, 12) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 60, 73) : BV:8
75 : ite(70, 58, 74) : BV:8
76 : ite(69, 55, 75) : BV:8
77 : bvadd(20, 52) : BV:32
78 : eq(77, 51) : BOOL
79 : eq(77, 56) : BOOL
80 : eq(77, 20) : BOOL
81 : eq(77, 12) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 60, 82) : BV:8
84 : ite(79, 58, 83) : BV:8
85 : ite(78, 55, 84) : BV:8
86 : bvadd(12, 52) : BV:32
87 : eq(86, 51) : BOOL
88 : eq(86, 56) : BOOL
89 : eq(86, 20) : BOOL
90 : eq(86, 12) : BOOL
91 : ite(90, 62, 63) : BV:8
92 : ite(89, 60, 91) : BV:8
93 : ite(88, 58, 92) : BV:8
94 : ite(87, 55, 93) : BV:8
95 : bvconcat(67, 76, 85, 94) : BV:32
96 : bvadd(48, 50, 95) : BV:32
97 : eq(96, 51) : BOOL
98 : eq(96, 56) : BOOL
99 : eq(96, 20) : BOOL
100 : eq(96, 12) : BOOL
101 : ite(100, 62, 63) : BV:8
102 : ite(99, 60, 101) : BV:8
103 : ite(98, 58, 102) : BV:8
104 : ite(97, 55, 103) : BV:8
105 : 2 { 0x2 +1.23e129 } : BV:32
106 : bvadd(105, 50, 95) : BV:32
107 : eq(106, 51) : BOOL
108 : eq(106, 56) : BOOL
109 : eq(106, 20) : BOOL
110 : eq(106, 12) : BOOL
111 : ite(110, 62, 63) : BV:8
112 : ite(109, 60, 111) : BV:8
113 : ite(108, 58, 112) : BV:8
114 : ite(107, 55, 113) : BV:8
115 : 1 { 0x1 +1.11e129 } : BV:32
116 : bvadd(115, 50, 95) : BV:32
117 : eq(116, 51) : BOOL
118 : eq(116, 56) : BOOL
119 : eq(116, 20) : BOOL
120 : eq(116, 12) : BOOL
121 : ite(120, 62, 63) : BV:8
122 : ite(119, 60, 121) : BV:8
123 : ite(118, 58, 122) : BV:8
124 : ite(117, 55, 123) : BV:8
125 : bvadd(50, 95) : BV:32
126 : eq(125, 51) : BOOL
127 : eq(125, 56) : BOOL
128 : eq(125, 20) : BOOL
129 : eq(125, 12) : BOOL
130 : ite(129, 62, 63) : BV:8
131 : ite(128, 60, 130) : BV:8
132 : ite(127, 58, 131) : BV:8
133 : ite(126, 55, 132) : BV:8
134 : bvconcat(104, 114, 124, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : ite(47, 135, 134) : BV:32
137 : ite(6, 3, 136) : BV:32
138 : lambda(1, 2, 137) : FUNCTION[BV:32,BV:32 -> BV:32]
139 : sym_const(138) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17416 : BV:32
2 : Lambda17417 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4096 { 0x1000 +1.48828e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17420 : BV:32
2 : Lambda17421 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4099 { 0x1003 +1.48863e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 231 { 0xe7 -25 } : BV:8
15 : 4098 { 0x1002 +1.48851e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 227 { 0xe3 -29 } : BV:8
18 : 4097 { 0x1001 +1.48840e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 26 { 0x1a } : BV:8
21 : 4096 { 0x1000 +1.48828e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : bvadd(15, 11) : BV:32
30 : eq(29, 10) : BOOL
31 : eq(29, 15) : BOOL
32 : eq(29, 18) : BOOL
33 : eq(29, 21) : BOOL
34 : ite(33, 23, 24) : BV:8
35 : ite(32, 20, 34) : BV:8
36 : ite(31, 17, 35) : BV:8
37 : ite(30, 14, 36) : BV:8
38 : bvadd(18, 11) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 15) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : ite(42, 23, 24) : BV:8
44 : ite(41, 20, 43) : BV:8
45 : ite(40, 17, 44) : BV:8
46 : ite(39, 14, 45) : BV:8
47 : bvadd(21, 11) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 15) : BOOL
50 : eq(47, 18) : BOOL
51 : eq(47, 21) : BOOL
52 : ite(51, 23, 24) : BV:8
53 : ite(50, 20, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 14, 54) : BV:8
56 : bvconcat(28, 37, 46, 55) : BV:32
57 : bvadd(7, 9, 56) : BV:32
58 : eq(57, 10) : BOOL
59 : eq(57, 15) : BOOL
60 : eq(57, 18) : BOOL
61 : eq(57, 21) : BOOL
62 : ite(61, 23, 24) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 17, 63) : BV:8
65 : ite(58, 14, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 9, 56) : BV:32
68 : eq(67, 10) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : ite(71, 23, 24) : BV:8
73 : ite(70, 20, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 14, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 9, 56) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : ite(81, 23, 24) : BV:8
83 : ite(80, 20, 82) : BV:8
84 : ite(79, 17, 83) : BV:8
85 : ite(78, 14, 84) : BV:8
86 : bvadd(9, 56) : BV:32
87 : eq(86, 10) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : ite(90, 23, 24) : BV:8
92 : ite(89, 20, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 14, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(6, 3, 95) : BV:32
97 : lambda(1, 2, 96) : FUNCTION[BV:32,BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2924963736 { 0xae576798 -1370003560 -1.68284893e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2924963739 { 0xae57679b -1370003557 -1.68284928e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 540313588 { 0x203487f4 +1.41039896e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 540313591 { 0x203487f7 +1.41039931e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1438193772 { 0x55b9186c +1.44605779e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1438193775 { 0x55b9186f +1.44605815e44 } : BV:32
=counter_example.random_seed
3547141825
=counter_example_end
=global nodece 48 num_edges_traversed 3
=global nodece 48 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 49
=global nodece 49 nodece z3.ce10919.num_edges_traversed4
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(epsilon)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce10919 d539d6d4f79e6eb329c5af97a933793d
=input.spec-%var-x-1
1 : Lambda17450 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17453 : BV:32
18 : Lambda17451 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17452 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 4099 { 0x1003 +1.48863e129 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : eq(61, 59) : BOOL
63 : 231 { 0xe7 -25 } : BV:8
64 : 4098 { 0x1002 +1.48851e129 } : BV:32
65 : eq(61, 64) : BOOL
66 : 227 { 0xe3 -29 } : BV:8
67 : eq(61, 22) : BOOL
68 : 26 { 0x1a } : BV:8
69 : eq(61, 8) : BOOL
70 : 240 { 0xf0 -16 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(67, 68, 72) : BV:8
74 : ite(65, 66, 73) : BV:8
75 : ite(62, 63, 74) : BV:8
76 : bvadd(64, 60) : BV:32
77 : eq(76, 59) : BOOL
78 : eq(76, 64) : BOOL
79 : eq(76, 22) : BOOL
80 : eq(76, 8) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 68, 81) : BV:8
83 : ite(78, 66, 82) : BV:8
84 : ite(77, 63, 83) : BV:8
85 : bvadd(22, 60) : BV:32
86 : eq(85, 59) : BOOL
87 : eq(85, 64) : BOOL
88 : eq(85, 22) : BOOL
89 : eq(85, 8) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : bvadd(8, 60) : BV:32
95 : eq(94, 59) : BOOL
96 : eq(94, 64) : BOOL
97 : eq(94, 22) : BOOL
98 : eq(94, 8) : BOOL
99 : ite(98, 70, 71) : BV:8
100 : ite(97, 68, 99) : BV:8
101 : ite(96, 66, 100) : BV:8
102 : ite(95, 63, 101) : BV:8
103 : bvconcat(75, 84, 93, 102) : BV:32
104 : bvadd(56, 58, 103) : BV:32
105 : eq(104, 59) : BOOL
106 : eq(104, 64) : BOOL
107 : eq(104, 22) : BOOL
108 : eq(104, 8) : BOOL
109 : ite(108, 70, 71) : BV:8
110 : ite(107, 68, 109) : BV:8
111 : ite(106, 66, 110) : BV:8
112 : ite(105, 63, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 58, 103) : BV:32
115 : eq(114, 59) : BOOL
116 : eq(114, 64) : BOOL
117 : eq(114, 22) : BOOL
118 : eq(114, 8) : BOOL
119 : ite(118, 70, 71) : BV:8
120 : ite(117, 68, 119) : BV:8
121 : ite(116, 66, 120) : BV:8
122 : ite(115, 63, 121) : BV:8
123 : 1 { 0x1 +1.11e129 } : BV:32
124 : bvadd(123, 58, 103) : BV:32
125 : eq(124, 59) : BOOL
126 : eq(124, 64) : BOOL
127 : eq(124, 22) : BOOL
128 : eq(124, 8) : BOOL
129 : ite(128, 70, 71) : BV:8
130 : ite(127, 68, 129) : BV:8
131 : ite(126, 66, 130) : BV:8
132 : ite(125, 63, 131) : BV:8
133 : bvadd(58, 103) : BV:32
134 : eq(133, 59) : BOOL
135 : eq(133, 64) : BOOL
136 : eq(133, 22) : BOOL
137 : eq(133, 8) : BOOL
138 : ite(137, 70, 71) : BV:8
139 : ite(136, 68, 138) : BV:8
140 : ite(135, 66, 139) : BV:8
141 : ite(134, 63, 140) : BV:8
142 : bvconcat(112, 122, 132, 141) : BV:32
143 : ite(55, 2, 142) : BV:32
144 : lambda(52, 143) : FUNCTION[BV:32 -> BV:32]
145 : map(51, 144) : MAP[BV:32 -> BV:32]
146 : lambda(17, 145) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
147 : map(16, 146) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
148 : sym_const(147) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%x
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%n
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4095 ] -> 0, [ 4096; 4096 ] -> 240, [ 4097; 4097 ] -> 26, [ 4098; 4098 ] -> 227, [ 4099; 4099 ] -> 231, [ 4100; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540313587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 540313588; 540313591 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 540313592; 1438193771 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1438193772; 1438193775 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1438193776; 2924963735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2924963736; 2924963739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2924963740; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 540313588 { 0x203487f4 +1.41039896e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1438193772 { 0x55b9186c +1.44605779e44 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2924963736 { 0xae576798 -1370003560 -1.68284893e221 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda17455 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17458 : BV:32
18 : Lambda17456 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4097 { 0x1001 +1.48840e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda17457 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 4099 { 0x1003 +1.48863e129 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : eq(80, 78) : BOOL
82 : 231 { 0xe7 -25 } : BV:8
83 : 4098 { 0x1002 +1.48851e129 } : BV:32
84 : eq(80, 83) : BOOL
85 : 227 { 0xe3 -29 } : BV:8
86 : eq(80, 22) : BOOL
87 : 26 { 0x1a } : BV:8
88 : eq(80, 8) : BOOL
89 : 240 { 0xf0 -16 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(86, 87, 91) : BV:8
93 : ite(84, 85, 92) : BV:8
94 : ite(81, 82, 93) : BV:8
95 : bvadd(83, 79) : BV:32
96 : eq(95, 78) : BOOL
97 : eq(95, 83) : BOOL
98 : eq(95, 22) : BOOL
99 : eq(95, 8) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 87, 100) : BV:8
102 : ite(97, 85, 101) : BV:8
103 : ite(96, 82, 102) : BV:8
104 : bvadd(22, 79) : BV:32
105 : eq(104, 78) : BOOL
106 : eq(104, 83) : BOOL
107 : eq(104, 22) : BOOL
108 : eq(104, 8) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 87, 109) : BV:8
111 : ite(106, 85, 110) : BV:8
112 : ite(105, 82, 111) : BV:8
113 : bvadd(8, 79) : BV:32
114 : eq(113, 78) : BOOL
115 : eq(113, 83) : BOOL
116 : eq(113, 22) : BOOL
117 : eq(113, 8) : BOOL
118 : ite(117, 89, 90) : BV:8
119 : ite(116, 87, 118) : BV:8
120 : ite(115, 85, 119) : BV:8
121 : ite(114, 82, 120) : BV:8
122 : bvconcat(94, 103, 112, 121) : BV:32
123 : bvadd(75, 77, 122) : BV:32
124 : eq(123, 78) : BOOL
125 : eq(123, 83) : BOOL
126 : eq(123, 22) : BOOL
127 : eq(123, 8) : BOOL
128 : ite(127, 89, 90) : BV:8
129 : ite(126, 87, 128) : BV:8
130 : ite(125, 85, 129) : BV:8
131 : ite(124, 82, 130) : BV:8
132 : 2 { 0x2 +1.23e129 } : BV:32
133 : bvadd(132, 77, 122) : BV:32
134 : eq(133, 78) : BOOL
135 : eq(133, 83) : BOOL
136 : eq(133, 22) : BOOL
137 : eq(133, 8) : BOOL
138 : ite(137, 89, 90) : BV:8
139 : ite(136, 87, 138) : BV:8
140 : ite(135, 85, 139) : BV:8
141 : ite(134, 82, 140) : BV:8
142 : 1 { 0x1 +1.11e129 } : BV:32
143 : bvadd(142, 77, 122) : BV:32
144 : eq(143, 78) : BOOL
145 : eq(143, 83) : BOOL
146 : eq(143, 22) : BOOL
147 : eq(143, 8) : BOOL
148 : ite(147, 89, 90) : BV:8
149 : ite(146, 87, 148) : BV:8
150 : ite(145, 85, 149) : BV:8
151 : ite(144, 82, 150) : BV:8
152 : bvadd(77, 122) : BV:32
153 : eq(152, 78) : BOOL
154 : eq(152, 83) : BOOL
155 : eq(152, 22) : BOOL
156 : eq(152, 8) : BOOL
157 : ite(156, 89, 90) : BV:8
158 : ite(155, 87, 157) : BV:8
159 : ite(154, 85, 158) : BV:8
160 : ite(153, 82, 159) : BV:8
161 : bvconcat(131, 141, 151, 160) : BV:32
162 : ite(55, 2, 161) : BV:32
163 : ite(74, 162, 161) : BV:32
164 : ite(55, 2, 163) : BV:32
165 : lambda(52, 164) : FUNCTION[BV:32 -> BV:32]
166 : map(51, 165) : MAP[BV:32 -> BV:32]
167 : lambda(17, 166) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
168 : map(16, 167) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
169 : sym_const(168) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda17479 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
8 : bvule(3, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : bvule(3, 10) : BOOL
13 : and(11, 12) : BOOL
14 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
15 : bvule(14, 3) : BOOL
16 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
17 : bvule(3, 16) : BOOL
18 : and(15, 17) : BOOL
19 : ite(18, 14, 14) : BV:32
20 : ite(13, 10, 19) : BV:32
21 : ite(9, 5, 20) : BV:32
22 : eq(21, 5) : BOOL
23 : and(4, 22) : BOOL
24 : 0 { 0x0 } : BOOL
25 : ite(23, 4, 24) : BOOL
26 : lambda(3, 25) : FUNCTION[BV:32 -> BOOL]
27 : Lambda17480 : BV:32
28 : eq(27, 5) : BOOL
29 : and(4, 28) : BOOL
30 : bvule(5, 27) : BOOL
31 : bvule(27, 7) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(10, 27) : BOOL
34 : bvule(27, 10) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(14, 27) : BOOL
37 : bvule(27, 16) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 14, 14) : BV:32
40 : ite(35, 10, 39) : BV:32
41 : ite(32, 5, 40) : BV:32
42 : eq(41, 5) : BOOL
43 : and(4, 42) : BOOL
44 : ite(43, 4, 24) : BOOL
45 : and(4, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 27) : BV:32
49 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
50 : bvadd(46, 48, 49) : BV:32
51 : 4099 { 0x1003 +1.48863e129 } : BV:32
52 : eq(50, 51) : BOOL
53 : 231 { 0xe7 -25 } : BV:8
54 : 4098 { 0x1002 +1.48851e129 } : BV:32
55 : eq(50, 54) : BOOL
56 : 227 { 0xe3 -29 } : BV:8
57 : 4097 { 0x1001 +1.48840e129 } : BV:32
58 : eq(50, 57) : BOOL
59 : 26 { 0x1a } : BV:8
60 : 4096 { 0x1000 +1.48828e129 } : BV:32
61 : eq(50, 60) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(52, 53, 66) : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : bvadd(68, 48, 49) : BV:32
70 : eq(69, 51) : BOOL
71 : eq(69, 54) : BOOL
72 : eq(69, 57) : BOOL
73 : eq(69, 60) : BOOL
74 : ite(73, 62, 63) : BV:8
75 : ite(72, 59, 74) : BV:8
76 : ite(71, 56, 75) : BV:8
77 : ite(70, 53, 76) : BV:8
78 : bvadd(1, 48, 49) : BV:32
79 : eq(78, 51) : BOOL
80 : eq(78, 54) : BOOL
81 : eq(78, 57) : BOOL
82 : eq(78, 60) : BOOL
83 : ite(82, 62, 63) : BV:8
84 : ite(81, 59, 83) : BV:8
85 : ite(80, 56, 84) : BV:8
86 : ite(79, 53, 85) : BV:8
87 : bvadd(48, 49) : BV:32
88 : eq(87, 51) : BOOL
89 : eq(87, 54) : BOOL
90 : eq(87, 57) : BOOL
91 : eq(87, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : ite(88, 53, 94) : BV:8
96 : bvconcat(67, 77, 86, 95) : BV:32
97 : ite(29, 5, 96) : BV:32
98 : ite(45, 97, 96) : BV:32
99 : ite(29, 5, 98) : BV:32
100 : lambda(27, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(26, 100) : MAP[BV:32 -> BV:32]
102 : sum(1, 2, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda17481 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17482 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 4099 { 0x1003 +1.48863e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 231 { 0xe7 -25 } : BV:8
52 : 4098 { 0x1002 +1.48851e129 } : BV:32
53 : eq(48, 52) : BOOL
54 : 227 { 0xe3 -29 } : BV:8
55 : 4097 { 0x1001 +1.48840e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 26 { 0x1a } : BV:8
58 : 4096 { 0x1000 +1.48828e129 } : BV:32
59 : eq(48, 58) : BOOL
60 : 240 { 0xf0 -16 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 46, 47) : BV:32
68 : eq(67, 49) : BOOL
69 : eq(67, 52) : BOOL
70 : eq(67, 55) : BOOL
71 : eq(67, 58) : BOOL
72 : ite(71, 60, 61) : BV:8
73 : ite(70, 57, 72) : BV:8
74 : ite(69, 54, 73) : BV:8
75 : ite(68, 51, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 46, 47) : BV:32
78 : eq(77, 49) : BOOL
79 : eq(77, 52) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : ite(81, 60, 61) : BV:8
83 : ite(80, 57, 82) : BV:8
84 : ite(79, 54, 83) : BV:8
85 : ite(78, 51, 84) : BV:8
86 : bvadd(46, 47) : BV:32
87 : eq(86, 49) : BOOL
88 : eq(86, 52) : BOOL
89 : eq(86, 55) : BOOL
90 : eq(86, 58) : BOOL
91 : ite(90, 60, 61) : BV:8
92 : ite(89, 57, 91) : BV:8
93 : ite(88, 54, 92) : BV:8
94 : ite(87, 51, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(27, 3, 95) : BV:32
97 : ite(43, 96, 95) : BV:32
98 : ite(27, 3, 97) : BV:32
99 : lambda(25, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(24, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda17483 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : and(2, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 2, 22) : BOOL
24 : lambda(1, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda17484 : BV:32
26 : eq(25, 3) : BOOL
27 : and(2, 26) : BOOL
28 : bvule(3, 25) : BOOL
29 : bvule(25, 5) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(8, 25) : BOOL
32 : bvule(25, 8) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(12, 25) : BOOL
35 : bvule(25, 14) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 12, 12) : BV:32
38 : ite(33, 8, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(2, 40) : BOOL
42 : ite(41, 2, 22) : BOOL
43 : and(2, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 25) : BV:32
47 : 3890420464 { 0xe7e31af0 -404546832 -1.77425956e80 } : BV:32
48 : bvadd(44, 46, 47) : BV:32
49 : 4099 { 0x1003 +1.48863e129 } : BV:32
50 : eq(48, 49) : BOOL
51 : 231 { 0xe7 -25 } : BV:8
52 : 4098 { 0x1002 +1.48851e129 } : BV:32
53 : eq(48, 52) : BOOL
54 : 227 { 0xe3 -29 } : BV:8
55 : 4097 { 0x1001 +1.48840e129 } : BV:32
56 : eq(48, 55) : BOOL
57 : 26 { 0x1a } : BV:8
58 : 4096 { 0x1000 +1.48828e129 } : BV:32
59 : eq(48, 58) : BOOL
60 : 240 { 0xf0 -16 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 46, 47) : BV:32
68 : eq(67, 49) : BOOL
69 : eq(67, 52) : BOOL
70 : eq(67, 55) : BOOL
71 : eq(67, 58) : BOOL
72 : ite(71, 60, 61) : BV:8
73 : ite(70, 57, 72) : BV:8
74 : ite(69, 54, 73) : BV:8
75 : ite(68, 51, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 46, 47) : BV:32
78 : eq(77, 49) : BOOL
79 : eq(77, 52) : BOOL
80 : eq(77, 55) : BOOL
81 : eq(77, 58) : BOOL
82 : ite(81, 60, 61) : BV:8
83 : ite(80, 57, 82) : BV:8
84 : ite(79, 54, 83) : BV:8
85 : ite(78, 51, 84) : BV:8
86 : bvadd(46, 47) : BV:32
87 : eq(86, 49) : BOOL
88 : eq(86, 52) : BOOL
89 : eq(86, 55) : BOOL
90 : eq(86, 58) : BOOL
91 : ite(90, 60, 61) : BV:8
92 : ite(89, 57, 91) : BV:8
93 : ite(88, 54, 92) : BV:8
94 : ite(87, 51, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(27, 3, 95) : BV:32
97 : ite(43, 96, 95) : BV:32
98 : ite(27, 3, 97) : BV:32
99 : lambda(25, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(24, 99) : MAP[BV:32 -> BV:32]
101 : sym_const(100) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda17409 : BV:32
2 : Lambda17410 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4096 { 0x1000 +1.48828e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda17414 : BV:32
2 : Lambda17415 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4095 { 0xfff +1.48816e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4096 { 0x1000 +1.48828e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4097 { 0x1001 +1.48840e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 4099 { 0x1003 +1.48863e129 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : eq(53, 51) : BOOL
55 : 231 { 0xe7 -25 } : BV:8
56 : 4098 { 0x1002 +1.48851e129 } : BV:32
57 : eq(53, 56) : BOOL
58 : 227 { 0xe3 -29 } : BV:8
59 : eq(53, 20) : BOOL
60 : 26 { 0x1a } : BV:8
61 : eq(53, 12) : BOOL
62 : 240 { 0xf0 -16 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(59, 60, 64) : BV:8
66 : ite(57, 58, 65) : BV:8
67 : ite(54, 55, 66) : BV:8
68 : bvadd(56, 52) : BV:32
69 : eq(68, 51) : BOOL
70 : eq(68, 56) : BOOL
71 : eq(68, 20) : BOOL
72 : eq(68, 12) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 60, 73) : BV:8
75 : ite(70, 58, 74) : BV:8
76 : ite(69, 55, 75) : BV:8
77 : bvadd(20, 52) : BV:32
78 : eq(77, 51) : BOOL
79 : eq(77, 56) : BOOL
80 : eq(77, 20) : BOOL
81 : eq(77, 12) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 60, 82) : BV:8
84 : ite(79, 58, 83) : BV:8
85 : ite(78, 55, 84) : BV:8
86 : bvadd(12, 52) : BV:32
87 : eq(86, 51) : BOOL
88 : eq(86, 56) : BOOL
89 : eq(86, 20) : BOOL
90 : eq(86, 12) : BOOL
91 : ite(90, 62, 63) : BV:8
92 : ite(89, 60, 91) : BV:8
93 : ite(88, 58, 92) : BV:8
94 : ite(87, 55, 93) : BV:8
95 : bvconcat(67, 76, 85, 94) : BV:32
96 : bvadd(48, 50, 95) : BV:32
97 : eq(96, 51) : BOOL
98 : eq(96, 56) : BOOL
99 : eq(96, 20) : BOOL
100 : eq(96, 12) : BOOL
101 : ite(100, 62, 63) : BV:8
102 : ite(99, 60, 101) : BV:8
103 : ite(98, 58, 102) : BV:8
104 : ite(97, 55, 103) : BV:8
105 : 2 { 0x2 +1.23e129 } : BV:32
106 : bvadd(105, 50, 95) : BV:32
107 : eq(106, 51) : BOOL
108 : eq(106, 56) : BOOL
109 : eq(106, 20) : BOOL
110 : eq(106, 12) : BOOL
111 : ite(110, 62, 63) : BV:8
112 : ite(109, 60, 111) : BV:8
113 : ite(108, 58, 112) : BV:8
114 : ite(107, 55, 113) : BV:8
115 : 1 { 0x1 +1.11e129 } : BV:32
116 : bvadd(115, 50, 95) : BV:32
117 : eq(116, 51) : BOOL
118 : eq(116, 56) : BOOL
119 : eq(116, 20) : BOOL
120 : eq(116, 12) : BOOL
121 : ite(120, 62, 63) : BV:8
122 : ite(119, 60, 121) : BV:8
123 : ite(118, 58, 122) : BV:8
124 : ite(117, 55, 123) : BV:8
125 : bvadd(50, 95) : BV:32
126 : eq(125, 51) : BOOL
127 : eq(125, 56) : BOOL
128 : eq(125, 20) : BOOL
129 : eq(125, 12) : BOOL
130 : ite(129, 62, 63) : BV:8
131 : ite(128, 60, 130) : BV:8
132 : ite(127, 58, 131) : BV:8
133 : ite(126, 55, 132) : BV:8
134 : bvconcat(104, 114, 124, 133) : BV:32
135 : ite(6, 3, 134) : BV:32
136 : ite(47, 135, 134) : BV:32
137 : ite(6, 3, 136) : BV:32
138 : lambda(1, 2, 137) : FUNCTION[BV:32,BV:32 -> BV:32]
139 : sym_const(138) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda17416 : BV:32
2 : Lambda17417 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4096 { 0x1000 +1.48828e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda17420 : BV:32
2 : Lambda17421 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 4099 { 0x1003 +1.48863e129 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : eq(12, 10) : BOOL
14 : 231 { 0xe7 -25 } : BV:8
15 : 4098 { 0x1002 +1.48851e129 } : BV:32
16 : eq(12, 15) : BOOL
17 : 227 { 0xe3 -29 } : BV:8
18 : 4097 { 0x1001 +1.48840e129 } : BV:32
19 : eq(12, 18) : BOOL
20 : 26 { 0x1a } : BV:8
21 : 4096 { 0x1000 +1.48828e129 } : BV:32
22 : eq(12, 21) : BOOL
23 : 240 { 0xf0 -16 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : bvadd(15, 11) : BV:32
30 : eq(29, 10) : BOOL
31 : eq(29, 15) : BOOL
32 : eq(29, 18) : BOOL
33 : eq(29, 21) : BOOL
34 : ite(33, 23, 24) : BV:8
35 : ite(32, 20, 34) : BV:8
36 : ite(31, 17, 35) : BV:8
37 : ite(30, 14, 36) : BV:8
38 : bvadd(18, 11) : BV:32
39 : eq(38, 10) : BOOL
40 : eq(38, 15) : BOOL
41 : eq(38, 18) : BOOL
42 : eq(38, 21) : BOOL
43 : ite(42, 23, 24) : BV:8
44 : ite(41, 20, 43) : BV:8
45 : ite(40, 17, 44) : BV:8
46 : ite(39, 14, 45) : BV:8
47 : bvadd(21, 11) : BV:32
48 : eq(47, 10) : BOOL
49 : eq(47, 15) : BOOL
50 : eq(47, 18) : BOOL
51 : eq(47, 21) : BOOL
52 : ite(51, 23, 24) : BV:8
53 : ite(50, 20, 52) : BV:8
54 : ite(49, 17, 53) : BV:8
55 : ite(48, 14, 54) : BV:8
56 : bvconcat(28, 37, 46, 55) : BV:32
57 : bvadd(7, 9, 56) : BV:32
58 : eq(57, 10) : BOOL
59 : eq(57, 15) : BOOL
60 : eq(57, 18) : BOOL
61 : eq(57, 21) : BOOL
62 : ite(61, 23, 24) : BV:8
63 : ite(60, 20, 62) : BV:8
64 : ite(59, 17, 63) : BV:8
65 : ite(58, 14, 64) : BV:8
66 : 2 { 0x2 +1.23e129 } : BV:32
67 : bvadd(66, 9, 56) : BV:32
68 : eq(67, 10) : BOOL
69 : eq(67, 15) : BOOL
70 : eq(67, 18) : BOOL
71 : eq(67, 21) : BOOL
72 : ite(71, 23, 24) : BV:8
73 : ite(70, 20, 72) : BV:8
74 : ite(69, 17, 73) : BV:8
75 : ite(68, 14, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 9, 56) : BV:32
78 : eq(77, 10) : BOOL
79 : eq(77, 15) : BOOL
80 : eq(77, 18) : BOOL
81 : eq(77, 21) : BOOL
82 : ite(81, 23, 24) : BV:8
83 : ite(80, 20, 82) : BV:8
84 : ite(79, 17, 83) : BV:8
85 : ite(78, 14, 84) : BV:8
86 : bvadd(9, 56) : BV:32
87 : eq(86, 10) : BOOL
88 : eq(86, 15) : BOOL
89 : eq(86, 18) : BOOL
90 : eq(86, 21) : BOOL
91 : ite(90, 23, 24) : BV:8
92 : ite(89, 20, 91) : BV:8
93 : ite(88, 17, 92) : BV:8
94 : ite(87, 14, 93) : BV:8
95 : bvconcat(65, 75, 85, 94) : BV:32
96 : ite(6, 3, 95) : BV:32
97 : lambda(1, 2, 96) : FUNCTION[BV:32,BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2924963736 { 0xae576798 -1370003560 -1.68284893e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2924963739 { 0xae57679b -1370003557 -1.68284928e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 540313588 { 0x203487f4 +1.41039896e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 540313591 { 0x203487f7 +1.41039931e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1438193772 { 0x55b9186c +1.44605779e44 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1438193775 { 0x55b9186f +1.44605815e44 } : BV:32
=counter_example.random_seed
3547141825
=counter_example_end
=global nodece 49 num_edges_traversed 4
=global nodece 49 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3v487.ce10752.num_edges_traversed1
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3v487.ce10752 6c9ba2a43ffe81d14bd7947d0712d21
=input.spec-%var-x-1
1 : Lambda26508 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26511 : BV:32
18 : Lambda26509 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 134217728 { 0x8000000 +1.0e145 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 134217729 { 0x8000001 +1.11e145 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26510 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 690078070 { 0x2921c176 +1.26371645e211 } : BV:32
=input.dst.llvm-%x
1 : 169869312 { 0xa200000 +1.25000000e149 } : BV:32
=input.dst.llvm-%n
1 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 151164931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 151164932; 151164935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 151164936; 1107702467 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1107702468; 1107702471 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1107702472; 2418185919 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418185920; 2418185923 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2418185924; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1107702468 { 0x420632c4 +1.4842424e5 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 151164932 { 0x9029804 +1.2026414e147 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2418185920 { 0x902296c0 -1876781376 -1.27022552e161 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26515 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26518 : BV:32
18 : Lambda26516 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 134217728 { 0x8000000 +1.0e145 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 134217729 { 0x8000001 +1.11e145 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26517 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 75, 2) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26512 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26513 : BV:32
7 : 1403247223 { 0x53a3da77 +1.28010451e40 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26520 : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : 134217728 { 0x8000000 +1.0e145 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26521 : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : bvule(11, 10) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(10, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : lambda(10, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(9, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2281701375 ] -> true, [ 2281701376; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2281701375 ] -> true, [ 2281701376; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26451 : BV:32
2 : Lambda26452 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 134217728 { 0x8000000 +1.0e145 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 134217729 { 0x8000001 +1.11e145 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26456 : BV:32
2 : Lambda26457 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 134217728 { 0x8000000 +1.0e145 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 134217729 { 0x8000001 +1.11e145 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 48, 3) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26458 : BV:32
2 : Lambda26459 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 134217728 { 0x8000000 +1.0e145 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 134217729 { 0x8000001 +1.11e145 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : Lambda26464 : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : 134217728 { 0x8000000 +1.0e145 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : sym_const(9) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2066183798 { 0x7b277676 +1.30830264e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2418185920 { 0x902296c0 -1876781376 -1.27022552e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2418185923 { 0x902296c3 -1876781373 -1.27022588e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1107702468 { 0x420632c4 +1.4842424e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1107702471 { 0x420632c7 +1.4842460e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 151164932 { 0x9029804 +1.2026414e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 151164935 { 0x9029807 +1.2026450e147 } : BV:32
=counter_example.random_seed
2586838779
=counter_example_end
=global nodece 50 num_edges_traversed 1
=global nodece 50 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 51
=global nodece 51 nodece z3v487.ce10965.num_edges_traversed2
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3v487.ce10965 11555e26d5b6e82623bf664175b11859
=input.spec-%var-x-1
1 : Lambda26508 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26511 : BV:32
18 : Lambda26509 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 134217728 { 0x8000000 +1.0e145 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 134217729 { 0x8000001 +1.11e145 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26510 : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 690078071 { 0x2921c177 +1.26371657e211 } : BV:32
=input.dst.llvm-%x
1 : 169869312 { 0xa200000 +1.25000000e149 } : BV:32
=input.dst.llvm-%n
1 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
=input.dst.llvm-%m
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 151164931 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 151164932; 151164935 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 151164936; 1107702467 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1107702468; 1107702471 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1107702472; 2418185919 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418185920; 2418185923 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2418185924; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1107702468 { 0x420632c4 +1.4842424e5 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 151164932 { 0x9029804 +1.2026414e147 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2418185920 { 0x902296c0 -1876781376 -1.27022552e161 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26515 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26518 : BV:32
18 : Lambda26516 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 134217728 { 0x8000000 +1.0e145 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 134217729 { 0x8000001 +1.11e145 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26517 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 75, 2) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26512 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26513 : BV:32
7 : 1403247223 { 0x53a3da77 +1.28010451e40 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26520 : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : 134217728 { 0x8000000 +1.0e145 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26521 : BV:32
11 : 0 { 0x0 +1.0e129 } : BV:32
12 : bvule(11, 10) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(10, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : lambda(10, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(9, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2281701375 ] -> true, [ 2281701376; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2281701375 ] -> true, [ 2281701376; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26451 : BV:32
2 : Lambda26452 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 134217728 { 0x8000000 +1.0e145 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 134217729 { 0x8000001 +1.11e145 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26456 : BV:32
2 : Lambda26457 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 134217728 { 0x8000000 +1.0e145 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 134217729 { 0x8000001 +1.11e145 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 48, 3) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26458 : BV:32
2 : Lambda26459 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2281701375 { 0x87ffffff -2013265921 -1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2281701376 { 0x88000000 -2013265920 -1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2281701377 { 0x88000001 -2013265919 -1.11e145 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 134217728 { 0x8000000 +1.0e145 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 134217729 { 0x8000001 +1.11e145 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : Lambda26464 : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : 134217728 { 0x8000000 +1.0e145 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : sym_const(9) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2066183799 { 0x7b277677 +1.30830276e119 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2418185920 { 0x902296c0 -1876781376 -1.27022552e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2418185923 { 0x902296c3 -1876781373 -1.27022588e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1107702468 { 0x420632c4 +1.4842424e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1107702471 { 0x420632c7 +1.4842460e5 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 151164932 { 0x9029804 +1.2026414e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 151164935 { 0x9029807 +1.2026450e147 } : BV:32
=counter_example.random_seed
2586838779
=counter_example_end
=global nodece 51 num_edges_traversed 2
=global nodece 51 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 52
=global nodece 52 nodece z3.ce10976.num_edges_traversed1
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3.ce10976 f04887fca846162ceae07f2b4cbb154
=input.spec-%var-x-1
1 : Lambda26663 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26666 : BV:32
18 : Lambda26664 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda26665 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
62 : eq(60, 61) : BOOL
63 : 164 { 0xa4 -92 } : BV:8
64 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
65 : eq(60, 64) : BOOL
66 : 16 { 0x10 } : BV:8
67 : eq(60, 58) : BOOL
68 : 207 { 0xcf -49 } : BV:8
69 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
70 : eq(60, 69) : BOOL
71 : 33 { 0x21 } : BV:8
72 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
73 : eq(60, 72) : BOOL
74 : 1 { 0x1 } : BV:8
75 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
76 : eq(60, 75) : BOOL
77 : 160 { 0xa0 -96 } : BV:8
78 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
79 : eq(60, 78) : BOOL
80 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
81 : eq(60, 80) : BOOL
82 : 32 { 0x20 } : BV:8
83 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
84 : eq(60, 83) : BOOL
85 : 248 { 0xf8 -8 } : BV:8
86 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
87 : eq(60, 86) : BOOL
88 : 8 { 0x8 } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 74, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(73, 74, 94) : BV:8
96 : ite(70, 71, 95) : BV:8
97 : ite(67, 68, 96) : BV:8
98 : ite(65, 66, 97) : BV:8
99 : ite(62, 63, 98) : BV:8
100 : bvadd(83, 59) : BV:32
101 : eq(100, 61) : BOOL
102 : eq(100, 64) : BOOL
103 : eq(100, 58) : BOOL
104 : eq(100, 69) : BOOL
105 : eq(100, 72) : BOOL
106 : eq(100, 75) : BOOL
107 : eq(100, 78) : BOOL
108 : eq(100, 80) : BOOL
109 : eq(100, 83) : BOOL
110 : eq(100, 86) : BOOL
111 : ite(110, 88, 89) : BV:8
112 : ite(109, 85, 111) : BV:8
113 : ite(108, 82, 112) : BV:8
114 : ite(107, 74, 113) : BV:8
115 : ite(106, 77, 114) : BV:8
116 : ite(105, 74, 115) : BV:8
117 : ite(104, 71, 116) : BV:8
118 : ite(103, 68, 117) : BV:8
119 : ite(102, 66, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
122 : bvadd(121, 59) : BV:32
123 : eq(122, 61) : BOOL
124 : eq(122, 64) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 69) : BOOL
127 : eq(122, 72) : BOOL
128 : eq(122, 75) : BOOL
129 : eq(122, 78) : BOOL
130 : eq(122, 80) : BOOL
131 : eq(122, 83) : BOOL
132 : eq(122, 86) : BOOL
133 : ite(132, 88, 89) : BV:8
134 : ite(131, 85, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 74, 135) : BV:8
137 : ite(128, 77, 136) : BV:8
138 : ite(127, 74, 137) : BV:8
139 : ite(126, 71, 138) : BV:8
140 : ite(125, 68, 139) : BV:8
141 : ite(124, 66, 140) : BV:8
142 : ite(123, 63, 141) : BV:8
143 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
144 : bvadd(143, 59) : BV:32
145 : eq(144, 61) : BOOL
146 : eq(144, 64) : BOOL
147 : eq(144, 58) : BOOL
148 : eq(144, 69) : BOOL
149 : eq(144, 72) : BOOL
150 : eq(144, 75) : BOOL
151 : eq(144, 78) : BOOL
152 : eq(144, 80) : BOOL
153 : eq(144, 83) : BOOL
154 : eq(144, 86) : BOOL
155 : ite(154, 88, 89) : BV:8
156 : ite(153, 85, 155) : BV:8
157 : ite(152, 82, 156) : BV:8
158 : ite(151, 74, 157) : BV:8
159 : ite(150, 77, 158) : BV:8
160 : ite(149, 74, 159) : BV:8
161 : ite(148, 71, 160) : BV:8
162 : ite(147, 68, 161) : BV:8
163 : ite(146, 66, 162) : BV:8
164 : ite(145, 63, 163) : BV:8
165 : bvconcat(99, 120, 142, 164) : BV:32
166 : bvadd(55, 57, 165) : BV:32
167 : eq(166, 61) : BOOL
168 : eq(166, 64) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 69) : BOOL
171 : eq(166, 72) : BOOL
172 : eq(166, 75) : BOOL
173 : eq(166, 78) : BOOL
174 : eq(166, 80) : BOOL
175 : eq(166, 83) : BOOL
176 : eq(166, 86) : BOOL
177 : ite(176, 88, 89) : BV:8
178 : ite(175, 85, 177) : BV:8
179 : ite(174, 82, 178) : BV:8
180 : ite(173, 74, 179) : BV:8
181 : ite(172, 77, 180) : BV:8
182 : ite(171, 74, 181) : BV:8
183 : ite(170, 71, 182) : BV:8
184 : ite(169, 68, 183) : BV:8
185 : ite(168, 66, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : bvadd(40, 57, 165) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 58) : BOOL
191 : eq(187, 69) : BOOL
192 : eq(187, 72) : BOOL
193 : eq(187, 75) : BOOL
194 : eq(187, 78) : BOOL
195 : eq(187, 80) : BOOL
196 : eq(187, 83) : BOOL
197 : eq(187, 86) : BOOL
198 : ite(197, 88, 89) : BV:8
199 : ite(196, 85, 198) : BV:8
200 : ite(195, 82, 199) : BV:8
201 : ite(194, 74, 200) : BV:8
202 : ite(193, 77, 201) : BV:8
203 : ite(192, 74, 202) : BV:8
204 : ite(191, 71, 203) : BV:8
205 : ite(190, 68, 204) : BV:8
206 : ite(189, 66, 205) : BV:8
207 : ite(188, 63, 206) : BV:8
208 : bvadd(36, 57, 165) : BV:32
209 : eq(208, 61) : BOOL
210 : eq(208, 64) : BOOL
211 : eq(208, 58) : BOOL
212 : eq(208, 69) : BOOL
213 : eq(208, 72) : BOOL
214 : eq(208, 75) : BOOL
215 : eq(208, 78) : BOOL
216 : eq(208, 80) : BOOL
217 : eq(208, 83) : BOOL
218 : eq(208, 86) : BOOL
219 : ite(218, 88, 89) : BV:8
220 : ite(217, 85, 219) : BV:8
221 : ite(216, 82, 220) : BV:8
222 : ite(215, 74, 221) : BV:8
223 : ite(214, 77, 222) : BV:8
224 : ite(213, 74, 223) : BV:8
225 : ite(212, 71, 224) : BV:8
226 : ite(211, 68, 225) : BV:8
227 : ite(210, 66, 226) : BV:8
228 : ite(209, 63, 227) : BV:8
229 : bvadd(57, 165) : BV:32
230 : eq(229, 61) : BOOL
231 : eq(229, 64) : BOOL
232 : eq(229, 58) : BOOL
233 : eq(229, 69) : BOOL
234 : eq(229, 72) : BOOL
235 : eq(229, 75) : BOOL
236 : eq(229, 78) : BOOL
237 : eq(229, 80) : BOOL
238 : eq(229, 83) : BOOL
239 : eq(229, 86) : BOOL
240 : ite(239, 88, 89) : BV:8
241 : ite(238, 85, 240) : BV:8
242 : ite(237, 82, 241) : BV:8
243 : ite(236, 74, 242) : BV:8
244 : ite(235, 77, 243) : BV:8
245 : ite(234, 74, 244) : BV:8
246 : ite(233, 71, 245) : BV:8
247 : ite(232, 68, 246) : BV:8
248 : ite(231, 66, 247) : BV:8
249 : ite(230, 63, 248) : BV:8
250 : bvconcat(186, 207, 228, 249) : BV:32
251 : ite(54, 2, 250) : BV:32
252 : lambda(51, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(50, 252) : MAP[BV:32 -> BV:32]
254 : lambda(17, 253) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
255 : map(16, 254) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
256 : sym_const(255) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-i-1.L4%6%bbentry
1 : 3489660927 { 0xcfffffff -805306369 -1.99999988e32 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 3489660928 { 0xd0000000 -805306368 -1.0e33 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 701212292 { 0x29cba684 +1.59101915e212 } : BV:32
=input.dst.llvm-%x
1 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
=input.dst.llvm-%n
1 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1585451141 ] -> 0, [ 1585451142; 1585451142 ] -> 248, [ 1585451143; 1585451143 ] -> 207, [ 1585451144; 2659192959 ] -> 0, [ 2659192960; 2659192960 ] -> 164, [ 2659192961; 2659192961 ] -> 8, [ 2659192962; 2659192962 ] -> 33, [ 2659192963; 2659192963 ] -> 160, [ 2659192964; 2686519459 ] -> 0, [ 2686519460; 2686519461 ] -> 1, [ 2686519462; 2686519462 ] -> 16, [ 2686519463; 2686519463 ] -> 32, [ 2686519464; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1996357671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1996357672; 1996357675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1996357676; 2719025151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2719025152; 2719025155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2719025156; 4066516995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4066516996; 4066516999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4066517000; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4066516996 { 0xf2622004 -228450300 -1.76660203e101 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2719025152 { 0xa2110800 -1575942144 -1.13305664e197 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1996357672 { 0x76fe0028 +1.98437976e110 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26670 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26673 : BV:32
18 : Lambda26671 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda26672 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
81 : eq(79, 80) : BOOL
82 : 164 { 0xa4 -92 } : BV:8
83 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
84 : eq(79, 83) : BOOL
85 : 16 { 0x10 } : BV:8
86 : eq(79, 77) : BOOL
87 : 207 { 0xcf -49 } : BV:8
88 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
89 : eq(79, 88) : BOOL
90 : 33 { 0x21 } : BV:8
91 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
92 : eq(79, 91) : BOOL
93 : 1 { 0x1 } : BV:8
94 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
95 : eq(79, 94) : BOOL
96 : 160 { 0xa0 -96 } : BV:8
97 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
98 : eq(79, 97) : BOOL
99 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
100 : eq(79, 99) : BOOL
101 : 32 { 0x20 } : BV:8
102 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
103 : eq(79, 102) : BOOL
104 : 248 { 0xf8 -8 } : BV:8
105 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
106 : eq(79, 105) : BOOL
107 : 8 { 0x8 } : BV:8
108 : 0 { 0x0 } : BV:8
109 : ite(106, 107, 108) : BV:8
110 : ite(103, 104, 109) : BV:8
111 : ite(100, 101, 110) : BV:8
112 : ite(98, 93, 111) : BV:8
113 : ite(95, 96, 112) : BV:8
114 : ite(92, 93, 113) : BV:8
115 : ite(89, 90, 114) : BV:8
116 : ite(86, 87, 115) : BV:8
117 : ite(84, 85, 116) : BV:8
118 : ite(81, 82, 117) : BV:8
119 : bvadd(102, 78) : BV:32
120 : eq(119, 80) : BOOL
121 : eq(119, 83) : BOOL
122 : eq(119, 77) : BOOL
123 : eq(119, 88) : BOOL
124 : eq(119, 91) : BOOL
125 : eq(119, 94) : BOOL
126 : eq(119, 97) : BOOL
127 : eq(119, 99) : BOOL
128 : eq(119, 102) : BOOL
129 : eq(119, 105) : BOOL
130 : ite(129, 107, 108) : BV:8
131 : ite(128, 104, 130) : BV:8
132 : ite(127, 101, 131) : BV:8
133 : ite(126, 93, 132) : BV:8
134 : ite(125, 96, 133) : BV:8
135 : ite(124, 93, 134) : BV:8
136 : ite(123, 90, 135) : BV:8
137 : ite(122, 87, 136) : BV:8
138 : ite(121, 85, 137) : BV:8
139 : ite(120, 82, 138) : BV:8
140 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
141 : bvadd(140, 78) : BV:32
142 : eq(141, 80) : BOOL
143 : eq(141, 83) : BOOL
144 : eq(141, 77) : BOOL
145 : eq(141, 88) : BOOL
146 : eq(141, 91) : BOOL
147 : eq(141, 94) : BOOL
148 : eq(141, 97) : BOOL
149 : eq(141, 99) : BOOL
150 : eq(141, 102) : BOOL
151 : eq(141, 105) : BOOL
152 : ite(151, 107, 108) : BV:8
153 : ite(150, 104, 152) : BV:8
154 : ite(149, 101, 153) : BV:8
155 : ite(148, 93, 154) : BV:8
156 : ite(147, 96, 155) : BV:8
157 : ite(146, 93, 156) : BV:8
158 : ite(145, 90, 157) : BV:8
159 : ite(144, 87, 158) : BV:8
160 : ite(143, 85, 159) : BV:8
161 : ite(142, 82, 160) : BV:8
162 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
163 : bvadd(162, 78) : BV:32
164 : eq(163, 80) : BOOL
165 : eq(163, 83) : BOOL
166 : eq(163, 77) : BOOL
167 : eq(163, 88) : BOOL
168 : eq(163, 91) : BOOL
169 : eq(163, 94) : BOOL
170 : eq(163, 97) : BOOL
171 : eq(163, 99) : BOOL
172 : eq(163, 102) : BOOL
173 : eq(163, 105) : BOOL
174 : ite(173, 107, 108) : BV:8
175 : ite(172, 104, 174) : BV:8
176 : ite(171, 101, 175) : BV:8
177 : ite(170, 93, 176) : BV:8
178 : ite(169, 96, 177) : BV:8
179 : ite(168, 93, 178) : BV:8
180 : ite(167, 90, 179) : BV:8
181 : ite(166, 87, 180) : BV:8
182 : ite(165, 85, 181) : BV:8
183 : ite(164, 82, 182) : BV:8
184 : bvconcat(118, 139, 161, 183) : BV:32
185 : bvadd(74, 76, 184) : BV:32
186 : eq(185, 80) : BOOL
187 : eq(185, 83) : BOOL
188 : eq(185, 77) : BOOL
189 : eq(185, 88) : BOOL
190 : eq(185, 91) : BOOL
191 : eq(185, 94) : BOOL
192 : eq(185, 97) : BOOL
193 : eq(185, 99) : BOOL
194 : eq(185, 102) : BOOL
195 : eq(185, 105) : BOOL
196 : ite(195, 107, 108) : BV:8
197 : ite(194, 104, 196) : BV:8
198 : ite(193, 101, 197) : BV:8
199 : ite(192, 93, 198) : BV:8
200 : ite(191, 96, 199) : BV:8
201 : ite(190, 93, 200) : BV:8
202 : ite(189, 90, 201) : BV:8
203 : ite(188, 87, 202) : BV:8
204 : ite(187, 85, 203) : BV:8
205 : ite(186, 82, 204) : BV:8
206 : bvadd(40, 76, 184) : BV:32
207 : eq(206, 80) : BOOL
208 : eq(206, 83) : BOOL
209 : eq(206, 77) : BOOL
210 : eq(206, 88) : BOOL
211 : eq(206, 91) : BOOL
212 : eq(206, 94) : BOOL
213 : eq(206, 97) : BOOL
214 : eq(206, 99) : BOOL
215 : eq(206, 102) : BOOL
216 : eq(206, 105) : BOOL
217 : ite(216, 107, 108) : BV:8
218 : ite(215, 104, 217) : BV:8
219 : ite(214, 101, 218) : BV:8
220 : ite(213, 93, 219) : BV:8
221 : ite(212, 96, 220) : BV:8
222 : ite(211, 93, 221) : BV:8
223 : ite(210, 90, 222) : BV:8
224 : ite(209, 87, 223) : BV:8
225 : ite(208, 85, 224) : BV:8
226 : ite(207, 82, 225) : BV:8
227 : bvadd(36, 76, 184) : BV:32
228 : eq(227, 80) : BOOL
229 : eq(227, 83) : BOOL
230 : eq(227, 77) : BOOL
231 : eq(227, 88) : BOOL
232 : eq(227, 91) : BOOL
233 : eq(227, 94) : BOOL
234 : eq(227, 97) : BOOL
235 : eq(227, 99) : BOOL
236 : eq(227, 102) : BOOL
237 : eq(227, 105) : BOOL
238 : ite(237, 107, 108) : BV:8
239 : ite(236, 104, 238) : BV:8
240 : ite(235, 101, 239) : BV:8
241 : ite(234, 93, 240) : BV:8
242 : ite(233, 96, 241) : BV:8
243 : ite(232, 93, 242) : BV:8
244 : ite(231, 90, 243) : BV:8
245 : ite(230, 87, 244) : BV:8
246 : ite(229, 85, 245) : BV:8
247 : ite(228, 82, 246) : BV:8
248 : bvadd(76, 184) : BV:32
249 : eq(248, 80) : BOOL
250 : eq(248, 83) : BOOL
251 : eq(248, 77) : BOOL
252 : eq(248, 88) : BOOL
253 : eq(248, 91) : BOOL
254 : eq(248, 94) : BOOL
255 : eq(248, 97) : BOOL
256 : eq(248, 99) : BOOL
257 : eq(248, 102) : BOOL
258 : eq(248, 105) : BOOL
259 : ite(258, 107, 108) : BV:8
260 : ite(257, 104, 259) : BV:8
261 : ite(256, 101, 260) : BV:8
262 : ite(255, 93, 261) : BV:8
263 : ite(254, 96, 262) : BV:8
264 : ite(253, 93, 263) : BV:8
265 : ite(252, 90, 264) : BV:8
266 : ite(251, 87, 265) : BV:8
267 : ite(250, 85, 266) : BV:8
268 : ite(249, 82, 267) : BV:8
269 : bvconcat(205, 226, 247, 268) : BV:32
270 : ite(54, 2, 269) : BV:32
271 : ite(73, 270, 269) : BV:32
272 : ite(54, 2, 271) : BV:32
273 : lambda(51, 272) : FUNCTION[BV:32 -> BV:32]
274 : map(50, 273) : MAP[BV:32 -> BV:32]
275 : lambda(17, 274) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
276 : map(16, 275) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
277 : sym_const(276) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26667 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26668 : BV:32
7 : 1416857962 { 0x5473896a +1.90263104e41 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26675 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26676 : BV:32
17 : eq(16, 2) : BOOL
18 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 16) : BV:32
22 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
25 : eq(23, 24) : BOOL
26 : 164 { 0xa4 -92 } : BV:8
27 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
28 : eq(23, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
31 : eq(23, 30) : BOOL
32 : 207 { 0xcf -49 } : BV:8
33 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
34 : eq(23, 33) : BOOL
35 : 33 { 0x21 } : BV:8
36 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
37 : eq(23, 36) : BOOL
38 : 1 { 0x1 } : BV:8
39 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
40 : eq(23, 39) : BOOL
41 : 160 { 0xa0 -96 } : BV:8
42 : eq(23, 22) : BOOL
43 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
44 : eq(23, 43) : BOOL
45 : 32 { 0x20 } : BV:8
46 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
47 : eq(23, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
50 : eq(23, 49) : BOOL
51 : 8 { 0x8 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(42, 38, 55) : BV:8
57 : ite(40, 41, 56) : BV:8
58 : ite(37, 38, 57) : BV:8
59 : ite(34, 35, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(28, 29, 60) : BV:8
62 : ite(25, 26, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : eq(64, 22) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 46) : BOOL
74 : eq(64, 49) : BOOL
75 : ite(74, 51, 52) : BV:8
76 : ite(73, 48, 75) : BV:8
77 : ite(72, 45, 76) : BV:8
78 : ite(71, 38, 77) : BV:8
79 : ite(70, 41, 78) : BV:8
80 : ite(69, 38, 79) : BV:8
81 : ite(68, 35, 80) : BV:8
82 : ite(67, 32, 81) : BV:8
83 : ite(66, 29, 82) : BV:8
84 : ite(65, 26, 83) : BV:8
85 : bvadd(7, 21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 22) : BOOL
93 : eq(85, 43) : BOOL
94 : eq(85, 46) : BOOL
95 : eq(85, 49) : BOOL
96 : ite(95, 51, 52) : BV:8
97 : ite(94, 48, 96) : BV:8
98 : ite(93, 45, 97) : BV:8
99 : ite(92, 38, 98) : BV:8
100 : ite(91, 41, 99) : BV:8
101 : ite(90, 38, 100) : BV:8
102 : ite(89, 35, 101) : BV:8
103 : ite(88, 32, 102) : BV:8
104 : ite(87, 29, 103) : BV:8
105 : ite(86, 26, 104) : BV:8
106 : bvadd(21, 22) : BV:32
107 : eq(106, 24) : BOOL
108 : eq(106, 27) : BOOL
109 : eq(106, 30) : BOOL
110 : eq(106, 33) : BOOL
111 : eq(106, 36) : BOOL
112 : eq(106, 39) : BOOL
113 : eq(106, 22) : BOOL
114 : eq(106, 43) : BOOL
115 : eq(106, 46) : BOOL
116 : eq(106, 49) : BOOL
117 : ite(116, 51, 52) : BV:8
118 : ite(115, 48, 117) : BV:8
119 : ite(114, 45, 118) : BV:8
120 : ite(113, 38, 119) : BV:8
121 : ite(112, 41, 120) : BV:8
122 : ite(111, 38, 121) : BV:8
123 : ite(110, 35, 122) : BV:8
124 : ite(109, 32, 123) : BV:8
125 : ite(108, 29, 124) : BV:8
126 : ite(107, 26, 125) : BV:8
127 : bvconcat(62, 84, 105, 126) : BV:32
128 : ite(17, 18, 127) : BV:32
129 : lambda(16, 128) : FUNCTION[BV:32 -> BV:32]
130 : map(15, 129) : MAP[BV:32 -> BV:32]
131 : sym_const(130) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 3489660927 { 0xcfffffff -805306369 -1.99999988e32 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L4%31%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 3779543915 ] -> true, [ 3779543916; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3779543915 ] -> true, [ 3779543916; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26612 : BV:32
2 : Lambda26613 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26617 : BV:32
2 : Lambda26618 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
54 : eq(52, 53) : BOOL
55 : 164 { 0xa4 -92 } : BV:8
56 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
57 : eq(52, 56) : BOOL
58 : 16 { 0x10 } : BV:8
59 : eq(52, 50) : BOOL
60 : 207 { 0xcf -49 } : BV:8
61 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
62 : eq(52, 61) : BOOL
63 : 33 { 0x21 } : BV:8
64 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
65 : eq(52, 64) : BOOL
66 : 1 { 0x1 } : BV:8
67 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
68 : eq(52, 67) : BOOL
69 : 160 { 0xa0 -96 } : BV:8
70 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
71 : eq(52, 70) : BOOL
72 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
73 : eq(52, 72) : BOOL
74 : 32 { 0x20 } : BV:8
75 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
76 : eq(52, 75) : BOOL
77 : 248 { 0xf8 -8 } : BV:8
78 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
79 : eq(52, 78) : BOOL
80 : 8 { 0x8 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(71, 66, 84) : BV:8
86 : ite(68, 69, 85) : BV:8
87 : ite(65, 66, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : ite(59, 60, 88) : BV:8
90 : ite(57, 58, 89) : BV:8
91 : ite(54, 55, 90) : BV:8
92 : bvadd(75, 51) : BV:32
93 : eq(92, 53) : BOOL
94 : eq(92, 56) : BOOL
95 : eq(92, 50) : BOOL
96 : eq(92, 61) : BOOL
97 : eq(92, 64) : BOOL
98 : eq(92, 67) : BOOL
99 : eq(92, 70) : BOOL
100 : eq(92, 72) : BOOL
101 : eq(92, 75) : BOOL
102 : eq(92, 78) : BOOL
103 : ite(102, 80, 81) : BV:8
104 : ite(101, 77, 103) : BV:8
105 : ite(100, 74, 104) : BV:8
106 : ite(99, 66, 105) : BV:8
107 : ite(98, 69, 106) : BV:8
108 : ite(97, 66, 107) : BV:8
109 : ite(96, 63, 108) : BV:8
110 : ite(95, 60, 109) : BV:8
111 : ite(94, 58, 110) : BV:8
112 : ite(93, 55, 111) : BV:8
113 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
114 : bvadd(113, 51) : BV:32
115 : eq(114, 53) : BOOL
116 : eq(114, 56) : BOOL
117 : eq(114, 50) : BOOL
118 : eq(114, 61) : BOOL
119 : eq(114, 64) : BOOL
120 : eq(114, 67) : BOOL
121 : eq(114, 70) : BOOL
122 : eq(114, 72) : BOOL
123 : eq(114, 75) : BOOL
124 : eq(114, 78) : BOOL
125 : ite(124, 80, 81) : BV:8
126 : ite(123, 77, 125) : BV:8
127 : ite(122, 74, 126) : BV:8
128 : ite(121, 66, 127) : BV:8
129 : ite(120, 69, 128) : BV:8
130 : ite(119, 66, 129) : BV:8
131 : ite(118, 63, 130) : BV:8
132 : ite(117, 60, 131) : BV:8
133 : ite(116, 58, 132) : BV:8
134 : ite(115, 55, 133) : BV:8
135 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
136 : bvadd(135, 51) : BV:32
137 : eq(136, 53) : BOOL
138 : eq(136, 56) : BOOL
139 : eq(136, 50) : BOOL
140 : eq(136, 61) : BOOL
141 : eq(136, 64) : BOOL
142 : eq(136, 67) : BOOL
143 : eq(136, 70) : BOOL
144 : eq(136, 72) : BOOL
145 : eq(136, 75) : BOOL
146 : eq(136, 78) : BOOL
147 : ite(146, 80, 81) : BV:8
148 : ite(145, 77, 147) : BV:8
149 : ite(144, 74, 148) : BV:8
150 : ite(143, 66, 149) : BV:8
151 : ite(142, 69, 150) : BV:8
152 : ite(141, 66, 151) : BV:8
153 : ite(140, 63, 152) : BV:8
154 : ite(139, 60, 153) : BV:8
155 : ite(138, 58, 154) : BV:8
156 : ite(137, 55, 155) : BV:8
157 : bvconcat(91, 112, 134, 156) : BV:32
158 : bvadd(47, 49, 157) : BV:32
159 : eq(158, 53) : BOOL
160 : eq(158, 56) : BOOL
161 : eq(158, 50) : BOOL
162 : eq(158, 61) : BOOL
163 : eq(158, 64) : BOOL
164 : eq(158, 67) : BOOL
165 : eq(158, 70) : BOOL
166 : eq(158, 72) : BOOL
167 : eq(158, 75) : BOOL
168 : eq(158, 78) : BOOL
169 : ite(168, 80, 81) : BV:8
170 : ite(167, 77, 169) : BV:8
171 : ite(166, 74, 170) : BV:8
172 : ite(165, 66, 171) : BV:8
173 : ite(164, 69, 172) : BV:8
174 : ite(163, 66, 173) : BV:8
175 : ite(162, 63, 174) : BV:8
176 : ite(161, 60, 175) : BV:8
177 : ite(160, 58, 176) : BV:8
178 : ite(159, 55, 177) : BV:8
179 : bvadd(36, 49, 157) : BV:32
180 : eq(179, 53) : BOOL
181 : eq(179, 56) : BOOL
182 : eq(179, 50) : BOOL
183 : eq(179, 61) : BOOL
184 : eq(179, 64) : BOOL
185 : eq(179, 67) : BOOL
186 : eq(179, 70) : BOOL
187 : eq(179, 72) : BOOL
188 : eq(179, 75) : BOOL
189 : eq(179, 78) : BOOL
190 : ite(189, 80, 81) : BV:8
191 : ite(188, 77, 190) : BV:8
192 : ite(187, 74, 191) : BV:8
193 : ite(186, 66, 192) : BV:8
194 : ite(185, 69, 193) : BV:8
195 : ite(184, 66, 194) : BV:8
196 : ite(183, 63, 195) : BV:8
197 : ite(182, 60, 196) : BV:8
198 : ite(181, 58, 197) : BV:8
199 : ite(180, 55, 198) : BV:8
200 : bvadd(32, 49, 157) : BV:32
201 : eq(200, 53) : BOOL
202 : eq(200, 56) : BOOL
203 : eq(200, 50) : BOOL
204 : eq(200, 61) : BOOL
205 : eq(200, 64) : BOOL
206 : eq(200, 67) : BOOL
207 : eq(200, 70) : BOOL
208 : eq(200, 72) : BOOL
209 : eq(200, 75) : BOOL
210 : eq(200, 78) : BOOL
211 : ite(210, 80, 81) : BV:8
212 : ite(209, 77, 211) : BV:8
213 : ite(208, 74, 212) : BV:8
214 : ite(207, 66, 213) : BV:8
215 : ite(206, 69, 214) : BV:8
216 : ite(205, 66, 215) : BV:8
217 : ite(204, 63, 216) : BV:8
218 : ite(203, 60, 217) : BV:8
219 : ite(202, 58, 218) : BV:8
220 : ite(201, 55, 219) : BV:8
221 : bvadd(49, 157) : BV:32
222 : eq(221, 53) : BOOL
223 : eq(221, 56) : BOOL
224 : eq(221, 50) : BOOL
225 : eq(221, 61) : BOOL
226 : eq(221, 64) : BOOL
227 : eq(221, 67) : BOOL
228 : eq(221, 70) : BOOL
229 : eq(221, 72) : BOOL
230 : eq(221, 75) : BOOL
231 : eq(221, 78) : BOOL
232 : ite(231, 80, 81) : BV:8
233 : ite(230, 77, 232) : BV:8
234 : ite(229, 74, 233) : BV:8
235 : ite(228, 66, 234) : BV:8
236 : ite(227, 69, 235) : BV:8
237 : ite(226, 66, 236) : BV:8
238 : ite(225, 63, 237) : BV:8
239 : ite(224, 60, 238) : BV:8
240 : ite(223, 58, 239) : BV:8
241 : ite(222, 55, 240) : BV:8
242 : bvconcat(178, 199, 220, 241) : BV:32
243 : ite(6, 3, 242) : BV:32
244 : ite(46, 243, 242) : BV:32
245 : ite(6, 3, 244) : BV:32
246 : lambda(1, 2, 245) : FUNCTION[BV:32,BV:32 -> BV:32]
247 : sym_const(246) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26619 : BV:32
2 : Lambda26620 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26623 : BV:32
2 : Lambda26624 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
14 : eq(12, 13) : BOOL
15 : 164 { 0xa4 -92 } : BV:8
16 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
17 : eq(12, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : eq(12, 10) : BOOL
20 : 207 { 0xcf -49 } : BV:8
21 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
22 : eq(12, 21) : BOOL
23 : 33 { 0x21 } : BV:8
24 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
28 : eq(12, 27) : BOOL
29 : 160 { 0xa0 -96 } : BV:8
30 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
33 : eq(12, 32) : BOOL
34 : 32 { 0x20 } : BV:8
35 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
36 : eq(12, 35) : BOOL
37 : 248 { 0xf8 -8 } : BV:8
38 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
39 : eq(12, 38) : BOOL
40 : 8 { 0x8 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(31, 26, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : ite(22, 23, 47) : BV:8
49 : ite(19, 20, 48) : BV:8
50 : ite(17, 18, 49) : BV:8
51 : ite(14, 15, 50) : BV:8
52 : bvadd(35, 11) : BV:32
53 : eq(52, 13) : BOOL
54 : eq(52, 16) : BOOL
55 : eq(52, 10) : BOOL
56 : eq(52, 21) : BOOL
57 : eq(52, 24) : BOOL
58 : eq(52, 27) : BOOL
59 : eq(52, 30) : BOOL
60 : eq(52, 32) : BOOL
61 : eq(52, 35) : BOOL
62 : eq(52, 38) : BOOL
63 : ite(62, 40, 41) : BV:8
64 : ite(61, 37, 63) : BV:8
65 : ite(60, 34, 64) : BV:8
66 : ite(59, 26, 65) : BV:8
67 : ite(58, 29, 66) : BV:8
68 : ite(57, 26, 67) : BV:8
69 : ite(56, 23, 68) : BV:8
70 : ite(55, 20, 69) : BV:8
71 : ite(54, 18, 70) : BV:8
72 : ite(53, 15, 71) : BV:8
73 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
74 : bvadd(73, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 10) : BOOL
78 : eq(74, 21) : BOOL
79 : eq(74, 24) : BOOL
80 : eq(74, 27) : BOOL
81 : eq(74, 30) : BOOL
82 : eq(74, 32) : BOOL
83 : eq(74, 35) : BOOL
84 : eq(74, 38) : BOOL
85 : ite(84, 40, 41) : BV:8
86 : ite(83, 37, 85) : BV:8
87 : ite(82, 34, 86) : BV:8
88 : ite(81, 26, 87) : BV:8
89 : ite(80, 29, 88) : BV:8
90 : ite(79, 26, 89) : BV:8
91 : ite(78, 23, 90) : BV:8
92 : ite(77, 20, 91) : BV:8
93 : ite(76, 18, 92) : BV:8
94 : ite(75, 15, 93) : BV:8
95 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
96 : bvadd(95, 11) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : eq(96, 35) : BOOL
106 : eq(96, 38) : BOOL
107 : ite(106, 40, 41) : BV:8
108 : ite(105, 37, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 26, 109) : BV:8
111 : ite(102, 29, 110) : BV:8
112 : ite(101, 26, 111) : BV:8
113 : ite(100, 23, 112) : BV:8
114 : ite(99, 20, 113) : BV:8
115 : ite(98, 18, 114) : BV:8
116 : ite(97, 15, 115) : BV:8
117 : bvconcat(51, 72, 94, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 10) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 30) : BOOL
126 : eq(118, 32) : BOOL
127 : eq(118, 35) : BOOL
128 : eq(118, 38) : BOOL
129 : ite(128, 40, 41) : BV:8
130 : ite(127, 37, 129) : BV:8
131 : ite(126, 34, 130) : BV:8
132 : ite(125, 26, 131) : BV:8
133 : ite(124, 29, 132) : BV:8
134 : ite(123, 26, 133) : BV:8
135 : ite(122, 23, 134) : BV:8
136 : ite(121, 20, 135) : BV:8
137 : ite(120, 18, 136) : BV:8
138 : ite(119, 15, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 9, 117) : BV:32
141 : eq(140, 13) : BOOL
142 : eq(140, 16) : BOOL
143 : eq(140, 10) : BOOL
144 : eq(140, 21) : BOOL
145 : eq(140, 24) : BOOL
146 : eq(140, 27) : BOOL
147 : eq(140, 30) : BOOL
148 : eq(140, 32) : BOOL
149 : eq(140, 35) : BOOL
150 : eq(140, 38) : BOOL
151 : ite(150, 40, 41) : BV:8
152 : ite(149, 37, 151) : BV:8
153 : ite(148, 34, 152) : BV:8
154 : ite(147, 26, 153) : BV:8
155 : ite(146, 29, 154) : BV:8
156 : ite(145, 26, 155) : BV:8
157 : ite(144, 23, 156) : BV:8
158 : ite(143, 20, 157) : BV:8
159 : ite(142, 18, 158) : BV:8
160 : ite(141, 15, 159) : BV:8
161 : 1 { 0x1 +1.11e129 } : BV:32
162 : bvadd(161, 9, 117) : BV:32
163 : eq(162, 13) : BOOL
164 : eq(162, 16) : BOOL
165 : eq(162, 10) : BOOL
166 : eq(162, 21) : BOOL
167 : eq(162, 24) : BOOL
168 : eq(162, 27) : BOOL
169 : eq(162, 30) : BOOL
170 : eq(162, 32) : BOOL
171 : eq(162, 35) : BOOL
172 : eq(162, 38) : BOOL
173 : ite(172, 40, 41) : BV:8
174 : ite(171, 37, 173) : BV:8
175 : ite(170, 34, 174) : BV:8
176 : ite(169, 26, 175) : BV:8
177 : ite(168, 29, 176) : BV:8
178 : ite(167, 26, 177) : BV:8
179 : ite(166, 23, 178) : BV:8
180 : ite(165, 20, 179) : BV:8
181 : ite(164, 18, 180) : BV:8
182 : ite(163, 15, 181) : BV:8
183 : bvadd(9, 117) : BV:32
184 : eq(183, 13) : BOOL
185 : eq(183, 16) : BOOL
186 : eq(183, 10) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 24) : BOOL
189 : eq(183, 27) : BOOL
190 : eq(183, 30) : BOOL
191 : eq(183, 32) : BOOL
192 : eq(183, 35) : BOOL
193 : eq(183, 38) : BOOL
194 : ite(193, 40, 41) : BV:8
195 : ite(192, 37, 194) : BV:8
196 : ite(191, 34, 195) : BV:8
197 : ite(190, 26, 196) : BV:8
198 : ite(189, 29, 197) : BV:8
199 : ite(188, 26, 198) : BV:8
200 : ite(187, 23, 199) : BV:8
201 : ite(186, 20, 200) : BV:8
202 : ite(185, 18, 201) : BV:8
203 : ite(184, 15, 202) : BV:8
204 : bvconcat(138, 160, 182, 203) : BV:32
205 : ite(6, 3, 204) : BV:32
206 : lambda(1, 2, 205) : FUNCTION[BV:32,BV:32 -> BV:32]
207 : sym_const(206) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda26628 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
11 : eq(9, 10) : BOOL
12 : 164 { 0xa4 -92 } : BV:8
13 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
17 : eq(9, 16) : BOOL
18 : 207 { 0xcf -49 } : BV:8
19 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
20 : eq(9, 19) : BOOL
21 : 33 { 0x21 } : BV:8
22 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
23 : eq(9, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
26 : eq(9, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : eq(9, 8) : BOOL
29 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
30 : eq(9, 29) : BOOL
31 : 32 { 0x20 } : BV:8
32 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
33 : eq(9, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
36 : eq(9, 35) : BOOL
37 : 8 { 0x8 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(28, 24, 41) : BV:8
43 : ite(26, 27, 42) : BV:8
44 : ite(23, 24, 43) : BV:8
45 : ite(20, 21, 44) : BV:8
46 : ite(17, 18, 45) : BV:8
47 : ite(14, 15, 46) : BV:8
48 : ite(11, 12, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 7, 8) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 13) : BOOL
53 : eq(50, 16) : BOOL
54 : eq(50, 19) : BOOL
55 : eq(50, 22) : BOOL
56 : eq(50, 25) : BOOL
57 : eq(50, 8) : BOOL
58 : eq(50, 29) : BOOL
59 : eq(50, 32) : BOOL
60 : eq(50, 35) : BOOL
61 : ite(60, 37, 38) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 24, 63) : BV:8
65 : ite(56, 27, 64) : BV:8
66 : ite(55, 24, 65) : BV:8
67 : ite(54, 21, 66) : BV:8
68 : ite(53, 18, 67) : BV:8
69 : ite(52, 15, 68) : BV:8
70 : ite(51, 12, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 7, 8) : BV:32
73 : eq(72, 10) : BOOL
74 : eq(72, 13) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : eq(72, 22) : BOOL
78 : eq(72, 25) : BOOL
79 : eq(72, 8) : BOOL
80 : eq(72, 29) : BOOL
81 : eq(72, 32) : BOOL
82 : eq(72, 35) : BOOL
83 : ite(82, 37, 38) : BV:8
84 : ite(81, 34, 83) : BV:8
85 : ite(80, 31, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 27, 86) : BV:8
88 : ite(77, 24, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 15, 90) : BV:8
92 : ite(73, 12, 91) : BV:8
93 : bvadd(7, 8) : BV:32
94 : eq(93, 10) : BOOL
95 : eq(93, 13) : BOOL
96 : eq(93, 16) : BOOL
97 : eq(93, 19) : BOOL
98 : eq(93, 22) : BOOL
99 : eq(93, 25) : BOOL
100 : eq(93, 8) : BOOL
101 : eq(93, 29) : BOOL
102 : eq(93, 32) : BOOL
103 : eq(93, 35) : BOOL
104 : ite(103, 37, 38) : BV:8
105 : ite(102, 34, 104) : BV:8
106 : ite(101, 31, 105) : BV:8
107 : ite(100, 24, 106) : BV:8
108 : ite(99, 27, 107) : BV:8
109 : ite(98, 24, 108) : BV:8
110 : ite(97, 21, 109) : BV:8
111 : ite(96, 18, 110) : BV:8
112 : ite(95, 15, 111) : BV:8
113 : ite(94, 12, 112) : BV:8
114 : bvconcat(48, 70, 92, 113) : BV:32
115 : ite(3, 4, 114) : BV:32
116 : lambda(1, 115) : FUNCTION[BV:32 -> BV:32]
117 : sym_const(116) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3489660927 { 0xcfffffff -805306369 -1.99999988e32 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1093352863 { 0x412b3d9f +1.33781802e3 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1996357672 { 0x76fe0028 +1.98437976e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1996357675 { 0x76fe002b +1.98438012e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4066516996 { 0xf2622004 -228450300 -1.76660203e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4066516999 { 0xf2622007 -228450297 -1.76660239e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2719025152 { 0xa2110800 -1575942144 -1.13305664e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2719025155 { 0xa2110803 -1575942141 -1.13305699e197 } : BV:32
=counter_example.random_seed
3345988261
=counter_example_end
=global nodece 52 num_edges_traversed 1
=global nodece 52 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3.ce11018.num_edges_traversed3
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3.ce11018 4842a21e9d20aba90636e7991534373
=input.spec-%var-x-1
1 : Lambda26663 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26666 : BV:32
18 : Lambda26664 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda26665 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
62 : eq(60, 61) : BOOL
63 : 164 { 0xa4 -92 } : BV:8
64 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
65 : eq(60, 64) : BOOL
66 : 16 { 0x10 } : BV:8
67 : eq(60, 58) : BOOL
68 : 207 { 0xcf -49 } : BV:8
69 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
70 : eq(60, 69) : BOOL
71 : 33 { 0x21 } : BV:8
72 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
73 : eq(60, 72) : BOOL
74 : 1 { 0x1 } : BV:8
75 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
76 : eq(60, 75) : BOOL
77 : 160 { 0xa0 -96 } : BV:8
78 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
79 : eq(60, 78) : BOOL
80 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
81 : eq(60, 80) : BOOL
82 : 32 { 0x20 } : BV:8
83 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
84 : eq(60, 83) : BOOL
85 : 248 { 0xf8 -8 } : BV:8
86 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
87 : eq(60, 86) : BOOL
88 : 8 { 0x8 } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 74, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(73, 74, 94) : BV:8
96 : ite(70, 71, 95) : BV:8
97 : ite(67, 68, 96) : BV:8
98 : ite(65, 66, 97) : BV:8
99 : ite(62, 63, 98) : BV:8
100 : bvadd(83, 59) : BV:32
101 : eq(100, 61) : BOOL
102 : eq(100, 64) : BOOL
103 : eq(100, 58) : BOOL
104 : eq(100, 69) : BOOL
105 : eq(100, 72) : BOOL
106 : eq(100, 75) : BOOL
107 : eq(100, 78) : BOOL
108 : eq(100, 80) : BOOL
109 : eq(100, 83) : BOOL
110 : eq(100, 86) : BOOL
111 : ite(110, 88, 89) : BV:8
112 : ite(109, 85, 111) : BV:8
113 : ite(108, 82, 112) : BV:8
114 : ite(107, 74, 113) : BV:8
115 : ite(106, 77, 114) : BV:8
116 : ite(105, 74, 115) : BV:8
117 : ite(104, 71, 116) : BV:8
118 : ite(103, 68, 117) : BV:8
119 : ite(102, 66, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
122 : bvadd(121, 59) : BV:32
123 : eq(122, 61) : BOOL
124 : eq(122, 64) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 69) : BOOL
127 : eq(122, 72) : BOOL
128 : eq(122, 75) : BOOL
129 : eq(122, 78) : BOOL
130 : eq(122, 80) : BOOL
131 : eq(122, 83) : BOOL
132 : eq(122, 86) : BOOL
133 : ite(132, 88, 89) : BV:8
134 : ite(131, 85, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 74, 135) : BV:8
137 : ite(128, 77, 136) : BV:8
138 : ite(127, 74, 137) : BV:8
139 : ite(126, 71, 138) : BV:8
140 : ite(125, 68, 139) : BV:8
141 : ite(124, 66, 140) : BV:8
142 : ite(123, 63, 141) : BV:8
143 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
144 : bvadd(143, 59) : BV:32
145 : eq(144, 61) : BOOL
146 : eq(144, 64) : BOOL
147 : eq(144, 58) : BOOL
148 : eq(144, 69) : BOOL
149 : eq(144, 72) : BOOL
150 : eq(144, 75) : BOOL
151 : eq(144, 78) : BOOL
152 : eq(144, 80) : BOOL
153 : eq(144, 83) : BOOL
154 : eq(144, 86) : BOOL
155 : ite(154, 88, 89) : BV:8
156 : ite(153, 85, 155) : BV:8
157 : ite(152, 82, 156) : BV:8
158 : ite(151, 74, 157) : BV:8
159 : ite(150, 77, 158) : BV:8
160 : ite(149, 74, 159) : BV:8
161 : ite(148, 71, 160) : BV:8
162 : ite(147, 68, 161) : BV:8
163 : ite(146, 66, 162) : BV:8
164 : ite(145, 63, 163) : BV:8
165 : bvconcat(99, 120, 142, 164) : BV:32
166 : bvadd(55, 57, 165) : BV:32
167 : eq(166, 61) : BOOL
168 : eq(166, 64) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 69) : BOOL
171 : eq(166, 72) : BOOL
172 : eq(166, 75) : BOOL
173 : eq(166, 78) : BOOL
174 : eq(166, 80) : BOOL
175 : eq(166, 83) : BOOL
176 : eq(166, 86) : BOOL
177 : ite(176, 88, 89) : BV:8
178 : ite(175, 85, 177) : BV:8
179 : ite(174, 82, 178) : BV:8
180 : ite(173, 74, 179) : BV:8
181 : ite(172, 77, 180) : BV:8
182 : ite(171, 74, 181) : BV:8
183 : ite(170, 71, 182) : BV:8
184 : ite(169, 68, 183) : BV:8
185 : ite(168, 66, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : bvadd(40, 57, 165) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 58) : BOOL
191 : eq(187, 69) : BOOL
192 : eq(187, 72) : BOOL
193 : eq(187, 75) : BOOL
194 : eq(187, 78) : BOOL
195 : eq(187, 80) : BOOL
196 : eq(187, 83) : BOOL
197 : eq(187, 86) : BOOL
198 : ite(197, 88, 89) : BV:8
199 : ite(196, 85, 198) : BV:8
200 : ite(195, 82, 199) : BV:8
201 : ite(194, 74, 200) : BV:8
202 : ite(193, 77, 201) : BV:8
203 : ite(192, 74, 202) : BV:8
204 : ite(191, 71, 203) : BV:8
205 : ite(190, 68, 204) : BV:8
206 : ite(189, 66, 205) : BV:8
207 : ite(188, 63, 206) : BV:8
208 : bvadd(36, 57, 165) : BV:32
209 : eq(208, 61) : BOOL
210 : eq(208, 64) : BOOL
211 : eq(208, 58) : BOOL
212 : eq(208, 69) : BOOL
213 : eq(208, 72) : BOOL
214 : eq(208, 75) : BOOL
215 : eq(208, 78) : BOOL
216 : eq(208, 80) : BOOL
217 : eq(208, 83) : BOOL
218 : eq(208, 86) : BOOL
219 : ite(218, 88, 89) : BV:8
220 : ite(217, 85, 219) : BV:8
221 : ite(216, 82, 220) : BV:8
222 : ite(215, 74, 221) : BV:8
223 : ite(214, 77, 222) : BV:8
224 : ite(213, 74, 223) : BV:8
225 : ite(212, 71, 224) : BV:8
226 : ite(211, 68, 225) : BV:8
227 : ite(210, 66, 226) : BV:8
228 : ite(209, 63, 227) : BV:8
229 : bvadd(57, 165) : BV:32
230 : eq(229, 61) : BOOL
231 : eq(229, 64) : BOOL
232 : eq(229, 58) : BOOL
233 : eq(229, 69) : BOOL
234 : eq(229, 72) : BOOL
235 : eq(229, 75) : BOOL
236 : eq(229, 78) : BOOL
237 : eq(229, 80) : BOOL
238 : eq(229, 83) : BOOL
239 : eq(229, 86) : BOOL
240 : ite(239, 88, 89) : BV:8
241 : ite(238, 85, 240) : BV:8
242 : ite(237, 82, 241) : BV:8
243 : ite(236, 74, 242) : BV:8
244 : ite(235, 77, 243) : BV:8
245 : ite(234, 74, 244) : BV:8
246 : ite(233, 71, 245) : BV:8
247 : ite(232, 68, 246) : BV:8
248 : ite(231, 66, 247) : BV:8
249 : ite(230, 63, 248) : BV:8
250 : bvconcat(186, 207, 228, 249) : BV:32
251 : ite(54, 2, 250) : BV:32
252 : lambda(51, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(50, 252) : MAP[BV:32 -> BV:32]
254 : lambda(17, 253) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
255 : map(16, 254) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
256 : sym_const(255) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3489660928 { 0xd0000000 -805306368 -1.0e33 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 3489660929 { 0xd0000001 -805306367 -1.11e33 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
=input.dst.llvm-%n
1 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1585451141 ] -> 0, [ 1585451142; 1585451142 ] -> 248, [ 1585451143; 1585451143 ] -> 207, [ 1585451144; 2659192959 ] -> 0, [ 2659192960; 2659192960 ] -> 164, [ 2659192961; 2659192961 ] -> 8, [ 2659192962; 2659192962 ] -> 33, [ 2659192963; 2659192963 ] -> 160, [ 2659192964; 2686519459 ] -> 0, [ 2686519460; 2686519461 ] -> 1, [ 2686519462; 2686519462 ] -> 16, [ 2686519463; 2686519463 ] -> 32, [ 2686519464; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1996357671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1996357672; 1996357675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1996357676; 2719025151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2719025152; 2719025155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2719025156; 4066516995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4066516996; 4066516999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4066517000; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4066516996 { 0xf2622004 -228450300 -1.76660203e101 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2719025152 { 0xa2110800 -1575942144 -1.13305664e197 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1996357672 { 0x76fe0028 +1.98437976e110 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26670 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26673 : BV:32
18 : Lambda26671 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda26672 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
81 : eq(79, 80) : BOOL
82 : 164 { 0xa4 -92 } : BV:8
83 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
84 : eq(79, 83) : BOOL
85 : 16 { 0x10 } : BV:8
86 : eq(79, 77) : BOOL
87 : 207 { 0xcf -49 } : BV:8
88 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
89 : eq(79, 88) : BOOL
90 : 33 { 0x21 } : BV:8
91 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
92 : eq(79, 91) : BOOL
93 : 1 { 0x1 } : BV:8
94 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
95 : eq(79, 94) : BOOL
96 : 160 { 0xa0 -96 } : BV:8
97 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
98 : eq(79, 97) : BOOL
99 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
100 : eq(79, 99) : BOOL
101 : 32 { 0x20 } : BV:8
102 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
103 : eq(79, 102) : BOOL
104 : 248 { 0xf8 -8 } : BV:8
105 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
106 : eq(79, 105) : BOOL
107 : 8 { 0x8 } : BV:8
108 : 0 { 0x0 } : BV:8
109 : ite(106, 107, 108) : BV:8
110 : ite(103, 104, 109) : BV:8
111 : ite(100, 101, 110) : BV:8
112 : ite(98, 93, 111) : BV:8
113 : ite(95, 96, 112) : BV:8
114 : ite(92, 93, 113) : BV:8
115 : ite(89, 90, 114) : BV:8
116 : ite(86, 87, 115) : BV:8
117 : ite(84, 85, 116) : BV:8
118 : ite(81, 82, 117) : BV:8
119 : bvadd(102, 78) : BV:32
120 : eq(119, 80) : BOOL
121 : eq(119, 83) : BOOL
122 : eq(119, 77) : BOOL
123 : eq(119, 88) : BOOL
124 : eq(119, 91) : BOOL
125 : eq(119, 94) : BOOL
126 : eq(119, 97) : BOOL
127 : eq(119, 99) : BOOL
128 : eq(119, 102) : BOOL
129 : eq(119, 105) : BOOL
130 : ite(129, 107, 108) : BV:8
131 : ite(128, 104, 130) : BV:8
132 : ite(127, 101, 131) : BV:8
133 : ite(126, 93, 132) : BV:8
134 : ite(125, 96, 133) : BV:8
135 : ite(124, 93, 134) : BV:8
136 : ite(123, 90, 135) : BV:8
137 : ite(122, 87, 136) : BV:8
138 : ite(121, 85, 137) : BV:8
139 : ite(120, 82, 138) : BV:8
140 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
141 : bvadd(140, 78) : BV:32
142 : eq(141, 80) : BOOL
143 : eq(141, 83) : BOOL
144 : eq(141, 77) : BOOL
145 : eq(141, 88) : BOOL
146 : eq(141, 91) : BOOL
147 : eq(141, 94) : BOOL
148 : eq(141, 97) : BOOL
149 : eq(141, 99) : BOOL
150 : eq(141, 102) : BOOL
151 : eq(141, 105) : BOOL
152 : ite(151, 107, 108) : BV:8
153 : ite(150, 104, 152) : BV:8
154 : ite(149, 101, 153) : BV:8
155 : ite(148, 93, 154) : BV:8
156 : ite(147, 96, 155) : BV:8
157 : ite(146, 93, 156) : BV:8
158 : ite(145, 90, 157) : BV:8
159 : ite(144, 87, 158) : BV:8
160 : ite(143, 85, 159) : BV:8
161 : ite(142, 82, 160) : BV:8
162 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
163 : bvadd(162, 78) : BV:32
164 : eq(163, 80) : BOOL
165 : eq(163, 83) : BOOL
166 : eq(163, 77) : BOOL
167 : eq(163, 88) : BOOL
168 : eq(163, 91) : BOOL
169 : eq(163, 94) : BOOL
170 : eq(163, 97) : BOOL
171 : eq(163, 99) : BOOL
172 : eq(163, 102) : BOOL
173 : eq(163, 105) : BOOL
174 : ite(173, 107, 108) : BV:8
175 : ite(172, 104, 174) : BV:8
176 : ite(171, 101, 175) : BV:8
177 : ite(170, 93, 176) : BV:8
178 : ite(169, 96, 177) : BV:8
179 : ite(168, 93, 178) : BV:8
180 : ite(167, 90, 179) : BV:8
181 : ite(166, 87, 180) : BV:8
182 : ite(165, 85, 181) : BV:8
183 : ite(164, 82, 182) : BV:8
184 : bvconcat(118, 139, 161, 183) : BV:32
185 : bvadd(74, 76, 184) : BV:32
186 : eq(185, 80) : BOOL
187 : eq(185, 83) : BOOL
188 : eq(185, 77) : BOOL
189 : eq(185, 88) : BOOL
190 : eq(185, 91) : BOOL
191 : eq(185, 94) : BOOL
192 : eq(185, 97) : BOOL
193 : eq(185, 99) : BOOL
194 : eq(185, 102) : BOOL
195 : eq(185, 105) : BOOL
196 : ite(195, 107, 108) : BV:8
197 : ite(194, 104, 196) : BV:8
198 : ite(193, 101, 197) : BV:8
199 : ite(192, 93, 198) : BV:8
200 : ite(191, 96, 199) : BV:8
201 : ite(190, 93, 200) : BV:8
202 : ite(189, 90, 201) : BV:8
203 : ite(188, 87, 202) : BV:8
204 : ite(187, 85, 203) : BV:8
205 : ite(186, 82, 204) : BV:8
206 : bvadd(40, 76, 184) : BV:32
207 : eq(206, 80) : BOOL
208 : eq(206, 83) : BOOL
209 : eq(206, 77) : BOOL
210 : eq(206, 88) : BOOL
211 : eq(206, 91) : BOOL
212 : eq(206, 94) : BOOL
213 : eq(206, 97) : BOOL
214 : eq(206, 99) : BOOL
215 : eq(206, 102) : BOOL
216 : eq(206, 105) : BOOL
217 : ite(216, 107, 108) : BV:8
218 : ite(215, 104, 217) : BV:8
219 : ite(214, 101, 218) : BV:8
220 : ite(213, 93, 219) : BV:8
221 : ite(212, 96, 220) : BV:8
222 : ite(211, 93, 221) : BV:8
223 : ite(210, 90, 222) : BV:8
224 : ite(209, 87, 223) : BV:8
225 : ite(208, 85, 224) : BV:8
226 : ite(207, 82, 225) : BV:8
227 : bvadd(36, 76, 184) : BV:32
228 : eq(227, 80) : BOOL
229 : eq(227, 83) : BOOL
230 : eq(227, 77) : BOOL
231 : eq(227, 88) : BOOL
232 : eq(227, 91) : BOOL
233 : eq(227, 94) : BOOL
234 : eq(227, 97) : BOOL
235 : eq(227, 99) : BOOL
236 : eq(227, 102) : BOOL
237 : eq(227, 105) : BOOL
238 : ite(237, 107, 108) : BV:8
239 : ite(236, 104, 238) : BV:8
240 : ite(235, 101, 239) : BV:8
241 : ite(234, 93, 240) : BV:8
242 : ite(233, 96, 241) : BV:8
243 : ite(232, 93, 242) : BV:8
244 : ite(231, 90, 243) : BV:8
245 : ite(230, 87, 244) : BV:8
246 : ite(229, 85, 245) : BV:8
247 : ite(228, 82, 246) : BV:8
248 : bvadd(76, 184) : BV:32
249 : eq(248, 80) : BOOL
250 : eq(248, 83) : BOOL
251 : eq(248, 77) : BOOL
252 : eq(248, 88) : BOOL
253 : eq(248, 91) : BOOL
254 : eq(248, 94) : BOOL
255 : eq(248, 97) : BOOL
256 : eq(248, 99) : BOOL
257 : eq(248, 102) : BOOL
258 : eq(248, 105) : BOOL
259 : ite(258, 107, 108) : BV:8
260 : ite(257, 104, 259) : BV:8
261 : ite(256, 101, 260) : BV:8
262 : ite(255, 93, 261) : BV:8
263 : ite(254, 96, 262) : BV:8
264 : ite(253, 93, 263) : BV:8
265 : ite(252, 90, 264) : BV:8
266 : ite(251, 87, 265) : BV:8
267 : ite(250, 85, 266) : BV:8
268 : ite(249, 82, 267) : BV:8
269 : bvconcat(205, 226, 247, 268) : BV:32
270 : ite(54, 2, 269) : BV:32
271 : ite(73, 270, 269) : BV:32
272 : ite(54, 2, 271) : BV:32
273 : lambda(51, 272) : FUNCTION[BV:32 -> BV:32]
274 : map(50, 273) : MAP[BV:32 -> BV:32]
275 : lambda(17, 274) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
276 : map(16, 275) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
277 : sym_const(276) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26711 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda26712 : BV:32
26 : bvule(5, 25) : BOOL
27 : bvule(25, 5) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(1, 25) : BOOL
30 : bvule(25, 1) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(12, 25) : BOOL
33 : bvule(25, 14) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 12, 12) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : ite(28, 5, 36) : BV:32
38 : eq(37, 5) : BOOL
39 : and(4, 38) : BOOL
40 : ite(39, 4, 22) : BOOL
41 : and(4, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 25) : BV:32
45 : bvadd(42, 44, 5) : BV:32
46 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
47 : eq(45, 46) : BOOL
48 : 164 { 0xa4 -92 } : BV:8
49 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
50 : eq(45, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
53 : eq(45, 52) : BOOL
54 : 207 { 0xcf -49 } : BV:8
55 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
56 : eq(45, 55) : BOOL
57 : 33 { 0x21 } : BV:8
58 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
59 : eq(45, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
62 : eq(45, 61) : BOOL
63 : 160 { 0xa0 -96 } : BV:8
64 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
65 : eq(45, 64) : BOOL
66 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
67 : eq(45, 66) : BOOL
68 : 32 { 0x20 } : BV:8
69 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
70 : eq(45, 69) : BOOL
71 : 248 { 0xf8 -8 } : BV:8
72 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
73 : eq(45, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(65, 60, 78) : BV:8
80 : ite(62, 63, 79) : BV:8
81 : ite(59, 60, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : ite(50, 51, 83) : BV:8
85 : ite(47, 48, 84) : BV:8
86 : bvadd(12, 44, 5) : BV:32
87 : eq(86, 46) : BOOL
88 : eq(86, 49) : BOOL
89 : eq(86, 52) : BOOL
90 : eq(86, 55) : BOOL
91 : eq(86, 58) : BOOL
92 : eq(86, 61) : BOOL
93 : eq(86, 64) : BOOL
94 : eq(86, 66) : BOOL
95 : eq(86, 69) : BOOL
96 : eq(86, 72) : BOOL
97 : ite(96, 74, 75) : BV:8
98 : ite(95, 71, 97) : BV:8
99 : ite(94, 68, 98) : BV:8
100 : ite(93, 60, 99) : BV:8
101 : ite(92, 63, 100) : BV:8
102 : ite(91, 60, 101) : BV:8
103 : ite(90, 57, 102) : BV:8
104 : ite(89, 54, 103) : BV:8
105 : ite(88, 51, 104) : BV:8
106 : ite(87, 48, 105) : BV:8
107 : bvadd(1, 44, 5) : BV:32
108 : eq(107, 46) : BOOL
109 : eq(107, 49) : BOOL
110 : eq(107, 52) : BOOL
111 : eq(107, 55) : BOOL
112 : eq(107, 58) : BOOL
113 : eq(107, 61) : BOOL
114 : eq(107, 64) : BOOL
115 : eq(107, 66) : BOOL
116 : eq(107, 69) : BOOL
117 : eq(107, 72) : BOOL
118 : ite(117, 74, 75) : BV:8
119 : ite(116, 71, 118) : BV:8
120 : ite(115, 68, 119) : BV:8
121 : ite(114, 60, 120) : BV:8
122 : ite(113, 63, 121) : BV:8
123 : ite(112, 60, 122) : BV:8
124 : ite(111, 57, 123) : BV:8
125 : ite(110, 54, 124) : BV:8
126 : ite(109, 51, 125) : BV:8
127 : ite(108, 48, 126) : BV:8
128 : bvadd(44, 5) : BV:32
129 : eq(128, 46) : BOOL
130 : eq(128, 49) : BOOL
131 : eq(128, 52) : BOOL
132 : eq(128, 55) : BOOL
133 : eq(128, 58) : BOOL
134 : eq(128, 61) : BOOL
135 : eq(128, 64) : BOOL
136 : eq(128, 66) : BOOL
137 : eq(128, 69) : BOOL
138 : eq(128, 72) : BOOL
139 : ite(138, 74, 75) : BV:8
140 : ite(137, 71, 139) : BV:8
141 : ite(136, 68, 140) : BV:8
142 : ite(135, 60, 141) : BV:8
143 : ite(134, 63, 142) : BV:8
144 : ite(133, 60, 143) : BV:8
145 : ite(132, 57, 144) : BV:8
146 : ite(131, 54, 145) : BV:8
147 : ite(130, 51, 146) : BV:8
148 : ite(129, 48, 147) : BV:8
149 : bvconcat(85, 106, 127, 148) : BV:32
150 : ite(41, 149, 149) : BV:32
151 : lambda(25, 150) : FUNCTION[BV:32 -> BV:32]
152 : map(24, 151) : MAP[BV:32 -> BV:32]
153 : sum(1, 2, 152) : SUM[UNIT,MAP[BV:32 -> BV:32]]
154 : sym_const(153) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 417055842 { 0x18dbc462 +1.71693062e178 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26713 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda26714 : BV:32
25 : bvule(3, 24) : BOOL
26 : bvule(24, 3) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(7, 24) : BOOL
29 : bvule(24, 7) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(11, 24) : BOOL
32 : bvule(24, 13) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 11, 11) : BV:32
35 : ite(30, 7, 34) : BV:32
36 : ite(27, 3, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : and(2, 37) : BOOL
39 : ite(38, 2, 21) : BOOL
40 : and(2, 39) : BOOL
41 : 3 { 0x3 +1.35e129 } : BV:32
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 24) : BV:32
44 : bvadd(41, 43, 3) : BV:32
45 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
46 : eq(44, 45) : BOOL
47 : 164 { 0xa4 -92 } : BV:8
48 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
49 : eq(44, 48) : BOOL
50 : 16 { 0x10 } : BV:8
51 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
52 : eq(44, 51) : BOOL
53 : 207 { 0xcf -49 } : BV:8
54 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
55 : eq(44, 54) : BOOL
56 : 33 { 0x21 } : BV:8
57 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
58 : eq(44, 57) : BOOL
59 : 1 { 0x1 } : BV:8
60 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
61 : eq(44, 60) : BOOL
62 : 160 { 0xa0 -96 } : BV:8
63 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
64 : eq(44, 63) : BOOL
65 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
66 : eq(44, 65) : BOOL
67 : 32 { 0x20 } : BV:8
68 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
69 : eq(44, 68) : BOOL
70 : 248 { 0xf8 -8 } : BV:8
71 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
72 : eq(44, 71) : BOOL
73 : 8 { 0x8 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(64, 59, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : ite(58, 59, 79) : BV:8
81 : ite(55, 56, 80) : BV:8
82 : ite(52, 53, 81) : BV:8
83 : ite(49, 50, 82) : BV:8
84 : ite(46, 47, 83) : BV:8
85 : bvadd(11, 43, 3) : BV:32
86 : eq(85, 45) : BOOL
87 : eq(85, 48) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 54) : BOOL
90 : eq(85, 57) : BOOL
91 : eq(85, 60) : BOOL
92 : eq(85, 63) : BOOL
93 : eq(85, 65) : BOOL
94 : eq(85, 68) : BOOL
95 : eq(85, 71) : BOOL
96 : ite(95, 73, 74) : BV:8
97 : ite(94, 70, 96) : BV:8
98 : ite(93, 67, 97) : BV:8
99 : ite(92, 59, 98) : BV:8
100 : ite(91, 62, 99) : BV:8
101 : ite(90, 59, 100) : BV:8
102 : ite(89, 56, 101) : BV:8
103 : ite(88, 53, 102) : BV:8
104 : ite(87, 50, 103) : BV:8
105 : ite(86, 47, 104) : BV:8
106 : bvadd(7, 43, 3) : BV:32
107 : eq(106, 45) : BOOL
108 : eq(106, 48) : BOOL
109 : eq(106, 51) : BOOL
110 : eq(106, 54) : BOOL
111 : eq(106, 57) : BOOL
112 : eq(106, 60) : BOOL
113 : eq(106, 63) : BOOL
114 : eq(106, 65) : BOOL
115 : eq(106, 68) : BOOL
116 : eq(106, 71) : BOOL
117 : ite(116, 73, 74) : BV:8
118 : ite(115, 70, 117) : BV:8
119 : ite(114, 67, 118) : BV:8
120 : ite(113, 59, 119) : BV:8
121 : ite(112, 62, 120) : BV:8
122 : ite(111, 59, 121) : BV:8
123 : ite(110, 56, 122) : BV:8
124 : ite(109, 53, 123) : BV:8
125 : ite(108, 50, 124) : BV:8
126 : ite(107, 47, 125) : BV:8
127 : bvadd(43, 3) : BV:32
128 : eq(127, 45) : BOOL
129 : eq(127, 48) : BOOL
130 : eq(127, 51) : BOOL
131 : eq(127, 54) : BOOL
132 : eq(127, 57) : BOOL
133 : eq(127, 60) : BOOL
134 : eq(127, 63) : BOOL
135 : eq(127, 65) : BOOL
136 : eq(127, 68) : BOOL
137 : eq(127, 71) : BOOL
138 : ite(137, 73, 74) : BV:8
139 : ite(136, 70, 138) : BV:8
140 : ite(135, 67, 139) : BV:8
141 : ite(134, 59, 140) : BV:8
142 : ite(133, 62, 141) : BV:8
143 : ite(132, 59, 142) : BV:8
144 : ite(131, 56, 143) : BV:8
145 : ite(130, 53, 144) : BV:8
146 : ite(129, 50, 145) : BV:8
147 : ite(128, 47, 146) : BV:8
148 : bvconcat(84, 105, 126, 147) : BV:32
149 : ite(40, 148, 148) : BV:32
150 : lambda(24, 149) : FUNCTION[BV:32 -> BV:32]
151 : map(23, 150) : MAP[BV:32 -> BV:32]
152 : sym_const(151) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 3489660928 { 0xd0000000 -805306368 -1.0e33 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda26715 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda26716 : BV:32
25 : bvule(3, 24) : BOOL
26 : bvule(24, 3) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(7, 24) : BOOL
29 : bvule(24, 7) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(11, 24) : BOOL
32 : bvule(24, 13) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 11, 11) : BV:32
35 : ite(30, 7, 34) : BV:32
36 : ite(27, 3, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : and(2, 37) : BOOL
39 : ite(38, 2, 21) : BOOL
40 : and(2, 39) : BOOL
41 : 3 { 0x3 +1.35e129 } : BV:32
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 24) : BV:32
44 : bvadd(41, 43, 3) : BV:32
45 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
46 : eq(44, 45) : BOOL
47 : 164 { 0xa4 -92 } : BV:8
48 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
49 : eq(44, 48) : BOOL
50 : 16 { 0x10 } : BV:8
51 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
52 : eq(44, 51) : BOOL
53 : 207 { 0xcf -49 } : BV:8
54 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
55 : eq(44, 54) : BOOL
56 : 33 { 0x21 } : BV:8
57 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
58 : eq(44, 57) : BOOL
59 : 1 { 0x1 } : BV:8
60 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
61 : eq(44, 60) : BOOL
62 : 160 { 0xa0 -96 } : BV:8
63 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
64 : eq(44, 63) : BOOL
65 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
66 : eq(44, 65) : BOOL
67 : 32 { 0x20 } : BV:8
68 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
69 : eq(44, 68) : BOOL
70 : 248 { 0xf8 -8 } : BV:8
71 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
72 : eq(44, 71) : BOOL
73 : 8 { 0x8 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(64, 59, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : ite(58, 59, 79) : BV:8
81 : ite(55, 56, 80) : BV:8
82 : ite(52, 53, 81) : BV:8
83 : ite(49, 50, 82) : BV:8
84 : ite(46, 47, 83) : BV:8
85 : bvadd(11, 43, 3) : BV:32
86 : eq(85, 45) : BOOL
87 : eq(85, 48) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 54) : BOOL
90 : eq(85, 57) : BOOL
91 : eq(85, 60) : BOOL
92 : eq(85, 63) : BOOL
93 : eq(85, 65) : BOOL
94 : eq(85, 68) : BOOL
95 : eq(85, 71) : BOOL
96 : ite(95, 73, 74) : BV:8
97 : ite(94, 70, 96) : BV:8
98 : ite(93, 67, 97) : BV:8
99 : ite(92, 59, 98) : BV:8
100 : ite(91, 62, 99) : BV:8
101 : ite(90, 59, 100) : BV:8
102 : ite(89, 56, 101) : BV:8
103 : ite(88, 53, 102) : BV:8
104 : ite(87, 50, 103) : BV:8
105 : ite(86, 47, 104) : BV:8
106 : bvadd(7, 43, 3) : BV:32
107 : eq(106, 45) : BOOL
108 : eq(106, 48) : BOOL
109 : eq(106, 51) : BOOL
110 : eq(106, 54) : BOOL
111 : eq(106, 57) : BOOL
112 : eq(106, 60) : BOOL
113 : eq(106, 63) : BOOL
114 : eq(106, 65) : BOOL
115 : eq(106, 68) : BOOL
116 : eq(106, 71) : BOOL
117 : ite(116, 73, 74) : BV:8
118 : ite(115, 70, 117) : BV:8
119 : ite(114, 67, 118) : BV:8
120 : ite(113, 59, 119) : BV:8
121 : ite(112, 62, 120) : BV:8
122 : ite(111, 59, 121) : BV:8
123 : ite(110, 56, 122) : BV:8
124 : ite(109, 53, 123) : BV:8
125 : ite(108, 50, 124) : BV:8
126 : ite(107, 47, 125) : BV:8
127 : bvadd(43, 3) : BV:32
128 : eq(127, 45) : BOOL
129 : eq(127, 48) : BOOL
130 : eq(127, 51) : BOOL
131 : eq(127, 54) : BOOL
132 : eq(127, 57) : BOOL
133 : eq(127, 60) : BOOL
134 : eq(127, 63) : BOOL
135 : eq(127, 65) : BOOL
136 : eq(127, 68) : BOOL
137 : eq(127, 71) : BOOL
138 : ite(137, 73, 74) : BV:8
139 : ite(136, 70, 138) : BV:8
140 : ite(135, 67, 139) : BV:8
141 : ite(134, 59, 140) : BV:8
142 : ite(133, 62, 141) : BV:8
143 : ite(132, 59, 142) : BV:8
144 : ite(131, 56, 143) : BV:8
145 : ite(130, 53, 144) : BV:8
146 : ite(129, 50, 145) : BV:8
147 : ite(128, 47, 146) : BV:8
148 : bvconcat(84, 105, 126, 147) : BV:32
149 : ite(40, 148, 148) : BV:32
150 : lambda(24, 149) : FUNCTION[BV:32 -> BV:32]
151 : map(23, 150) : MAP[BV:32 -> BV:32]
152 : sym_const(151) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 3779543915 ] -> true, [ 3779543916; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3779543915 ] -> true, [ 3779543916; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26612 : BV:32
2 : Lambda26613 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26617 : BV:32
2 : Lambda26618 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
54 : eq(52, 53) : BOOL
55 : 164 { 0xa4 -92 } : BV:8
56 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
57 : eq(52, 56) : BOOL
58 : 16 { 0x10 } : BV:8
59 : eq(52, 50) : BOOL
60 : 207 { 0xcf -49 } : BV:8
61 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
62 : eq(52, 61) : BOOL
63 : 33 { 0x21 } : BV:8
64 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
65 : eq(52, 64) : BOOL
66 : 1 { 0x1 } : BV:8
67 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
68 : eq(52, 67) : BOOL
69 : 160 { 0xa0 -96 } : BV:8
70 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
71 : eq(52, 70) : BOOL
72 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
73 : eq(52, 72) : BOOL
74 : 32 { 0x20 } : BV:8
75 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
76 : eq(52, 75) : BOOL
77 : 248 { 0xf8 -8 } : BV:8
78 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
79 : eq(52, 78) : BOOL
80 : 8 { 0x8 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(71, 66, 84) : BV:8
86 : ite(68, 69, 85) : BV:8
87 : ite(65, 66, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : ite(59, 60, 88) : BV:8
90 : ite(57, 58, 89) : BV:8
91 : ite(54, 55, 90) : BV:8
92 : bvadd(75, 51) : BV:32
93 : eq(92, 53) : BOOL
94 : eq(92, 56) : BOOL
95 : eq(92, 50) : BOOL
96 : eq(92, 61) : BOOL
97 : eq(92, 64) : BOOL
98 : eq(92, 67) : BOOL
99 : eq(92, 70) : BOOL
100 : eq(92, 72) : BOOL
101 : eq(92, 75) : BOOL
102 : eq(92, 78) : BOOL
103 : ite(102, 80, 81) : BV:8
104 : ite(101, 77, 103) : BV:8
105 : ite(100, 74, 104) : BV:8
106 : ite(99, 66, 105) : BV:8
107 : ite(98, 69, 106) : BV:8
108 : ite(97, 66, 107) : BV:8
109 : ite(96, 63, 108) : BV:8
110 : ite(95, 60, 109) : BV:8
111 : ite(94, 58, 110) : BV:8
112 : ite(93, 55, 111) : BV:8
113 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
114 : bvadd(113, 51) : BV:32
115 : eq(114, 53) : BOOL
116 : eq(114, 56) : BOOL
117 : eq(114, 50) : BOOL
118 : eq(114, 61) : BOOL
119 : eq(114, 64) : BOOL
120 : eq(114, 67) : BOOL
121 : eq(114, 70) : BOOL
122 : eq(114, 72) : BOOL
123 : eq(114, 75) : BOOL
124 : eq(114, 78) : BOOL
125 : ite(124, 80, 81) : BV:8
126 : ite(123, 77, 125) : BV:8
127 : ite(122, 74, 126) : BV:8
128 : ite(121, 66, 127) : BV:8
129 : ite(120, 69, 128) : BV:8
130 : ite(119, 66, 129) : BV:8
131 : ite(118, 63, 130) : BV:8
132 : ite(117, 60, 131) : BV:8
133 : ite(116, 58, 132) : BV:8
134 : ite(115, 55, 133) : BV:8
135 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
136 : bvadd(135, 51) : BV:32
137 : eq(136, 53) : BOOL
138 : eq(136, 56) : BOOL
139 : eq(136, 50) : BOOL
140 : eq(136, 61) : BOOL
141 : eq(136, 64) : BOOL
142 : eq(136, 67) : BOOL
143 : eq(136, 70) : BOOL
144 : eq(136, 72) : BOOL
145 : eq(136, 75) : BOOL
146 : eq(136, 78) : BOOL
147 : ite(146, 80, 81) : BV:8
148 : ite(145, 77, 147) : BV:8
149 : ite(144, 74, 148) : BV:8
150 : ite(143, 66, 149) : BV:8
151 : ite(142, 69, 150) : BV:8
152 : ite(141, 66, 151) : BV:8
153 : ite(140, 63, 152) : BV:8
154 : ite(139, 60, 153) : BV:8
155 : ite(138, 58, 154) : BV:8
156 : ite(137, 55, 155) : BV:8
157 : bvconcat(91, 112, 134, 156) : BV:32
158 : bvadd(47, 49, 157) : BV:32
159 : eq(158, 53) : BOOL
160 : eq(158, 56) : BOOL
161 : eq(158, 50) : BOOL
162 : eq(158, 61) : BOOL
163 : eq(158, 64) : BOOL
164 : eq(158, 67) : BOOL
165 : eq(158, 70) : BOOL
166 : eq(158, 72) : BOOL
167 : eq(158, 75) : BOOL
168 : eq(158, 78) : BOOL
169 : ite(168, 80, 81) : BV:8
170 : ite(167, 77, 169) : BV:8
171 : ite(166, 74, 170) : BV:8
172 : ite(165, 66, 171) : BV:8
173 : ite(164, 69, 172) : BV:8
174 : ite(163, 66, 173) : BV:8
175 : ite(162, 63, 174) : BV:8
176 : ite(161, 60, 175) : BV:8
177 : ite(160, 58, 176) : BV:8
178 : ite(159, 55, 177) : BV:8
179 : bvadd(36, 49, 157) : BV:32
180 : eq(179, 53) : BOOL
181 : eq(179, 56) : BOOL
182 : eq(179, 50) : BOOL
183 : eq(179, 61) : BOOL
184 : eq(179, 64) : BOOL
185 : eq(179, 67) : BOOL
186 : eq(179, 70) : BOOL
187 : eq(179, 72) : BOOL
188 : eq(179, 75) : BOOL
189 : eq(179, 78) : BOOL
190 : ite(189, 80, 81) : BV:8
191 : ite(188, 77, 190) : BV:8
192 : ite(187, 74, 191) : BV:8
193 : ite(186, 66, 192) : BV:8
194 : ite(185, 69, 193) : BV:8
195 : ite(184, 66, 194) : BV:8
196 : ite(183, 63, 195) : BV:8
197 : ite(182, 60, 196) : BV:8
198 : ite(181, 58, 197) : BV:8
199 : ite(180, 55, 198) : BV:8
200 : bvadd(32, 49, 157) : BV:32
201 : eq(200, 53) : BOOL
202 : eq(200, 56) : BOOL
203 : eq(200, 50) : BOOL
204 : eq(200, 61) : BOOL
205 : eq(200, 64) : BOOL
206 : eq(200, 67) : BOOL
207 : eq(200, 70) : BOOL
208 : eq(200, 72) : BOOL
209 : eq(200, 75) : BOOL
210 : eq(200, 78) : BOOL
211 : ite(210, 80, 81) : BV:8
212 : ite(209, 77, 211) : BV:8
213 : ite(208, 74, 212) : BV:8
214 : ite(207, 66, 213) : BV:8
215 : ite(206, 69, 214) : BV:8
216 : ite(205, 66, 215) : BV:8
217 : ite(204, 63, 216) : BV:8
218 : ite(203, 60, 217) : BV:8
219 : ite(202, 58, 218) : BV:8
220 : ite(201, 55, 219) : BV:8
221 : bvadd(49, 157) : BV:32
222 : eq(221, 53) : BOOL
223 : eq(221, 56) : BOOL
224 : eq(221, 50) : BOOL
225 : eq(221, 61) : BOOL
226 : eq(221, 64) : BOOL
227 : eq(221, 67) : BOOL
228 : eq(221, 70) : BOOL
229 : eq(221, 72) : BOOL
230 : eq(221, 75) : BOOL
231 : eq(221, 78) : BOOL
232 : ite(231, 80, 81) : BV:8
233 : ite(230, 77, 232) : BV:8
234 : ite(229, 74, 233) : BV:8
235 : ite(228, 66, 234) : BV:8
236 : ite(227, 69, 235) : BV:8
237 : ite(226, 66, 236) : BV:8
238 : ite(225, 63, 237) : BV:8
239 : ite(224, 60, 238) : BV:8
240 : ite(223, 58, 239) : BV:8
241 : ite(222, 55, 240) : BV:8
242 : bvconcat(178, 199, 220, 241) : BV:32
243 : ite(6, 3, 242) : BV:32
244 : ite(46, 243, 242) : BV:32
245 : ite(6, 3, 244) : BV:32
246 : lambda(1, 2, 245) : FUNCTION[BV:32,BV:32 -> BV:32]
247 : sym_const(246) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26619 : BV:32
2 : Lambda26620 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26623 : BV:32
2 : Lambda26624 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
14 : eq(12, 13) : BOOL
15 : 164 { 0xa4 -92 } : BV:8
16 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
17 : eq(12, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : eq(12, 10) : BOOL
20 : 207 { 0xcf -49 } : BV:8
21 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
22 : eq(12, 21) : BOOL
23 : 33 { 0x21 } : BV:8
24 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
28 : eq(12, 27) : BOOL
29 : 160 { 0xa0 -96 } : BV:8
30 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
33 : eq(12, 32) : BOOL
34 : 32 { 0x20 } : BV:8
35 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
36 : eq(12, 35) : BOOL
37 : 248 { 0xf8 -8 } : BV:8
38 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
39 : eq(12, 38) : BOOL
40 : 8 { 0x8 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(31, 26, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : ite(22, 23, 47) : BV:8
49 : ite(19, 20, 48) : BV:8
50 : ite(17, 18, 49) : BV:8
51 : ite(14, 15, 50) : BV:8
52 : bvadd(35, 11) : BV:32
53 : eq(52, 13) : BOOL
54 : eq(52, 16) : BOOL
55 : eq(52, 10) : BOOL
56 : eq(52, 21) : BOOL
57 : eq(52, 24) : BOOL
58 : eq(52, 27) : BOOL
59 : eq(52, 30) : BOOL
60 : eq(52, 32) : BOOL
61 : eq(52, 35) : BOOL
62 : eq(52, 38) : BOOL
63 : ite(62, 40, 41) : BV:8
64 : ite(61, 37, 63) : BV:8
65 : ite(60, 34, 64) : BV:8
66 : ite(59, 26, 65) : BV:8
67 : ite(58, 29, 66) : BV:8
68 : ite(57, 26, 67) : BV:8
69 : ite(56, 23, 68) : BV:8
70 : ite(55, 20, 69) : BV:8
71 : ite(54, 18, 70) : BV:8
72 : ite(53, 15, 71) : BV:8
73 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
74 : bvadd(73, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 10) : BOOL
78 : eq(74, 21) : BOOL
79 : eq(74, 24) : BOOL
80 : eq(74, 27) : BOOL
81 : eq(74, 30) : BOOL
82 : eq(74, 32) : BOOL
83 : eq(74, 35) : BOOL
84 : eq(74, 38) : BOOL
85 : ite(84, 40, 41) : BV:8
86 : ite(83, 37, 85) : BV:8
87 : ite(82, 34, 86) : BV:8
88 : ite(81, 26, 87) : BV:8
89 : ite(80, 29, 88) : BV:8
90 : ite(79, 26, 89) : BV:8
91 : ite(78, 23, 90) : BV:8
92 : ite(77, 20, 91) : BV:8
93 : ite(76, 18, 92) : BV:8
94 : ite(75, 15, 93) : BV:8
95 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
96 : bvadd(95, 11) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : eq(96, 35) : BOOL
106 : eq(96, 38) : BOOL
107 : ite(106, 40, 41) : BV:8
108 : ite(105, 37, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 26, 109) : BV:8
111 : ite(102, 29, 110) : BV:8
112 : ite(101, 26, 111) : BV:8
113 : ite(100, 23, 112) : BV:8
114 : ite(99, 20, 113) : BV:8
115 : ite(98, 18, 114) : BV:8
116 : ite(97, 15, 115) : BV:8
117 : bvconcat(51, 72, 94, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 10) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 30) : BOOL
126 : eq(118, 32) : BOOL
127 : eq(118, 35) : BOOL
128 : eq(118, 38) : BOOL
129 : ite(128, 40, 41) : BV:8
130 : ite(127, 37, 129) : BV:8
131 : ite(126, 34, 130) : BV:8
132 : ite(125, 26, 131) : BV:8
133 : ite(124, 29, 132) : BV:8
134 : ite(123, 26, 133) : BV:8
135 : ite(122, 23, 134) : BV:8
136 : ite(121, 20, 135) : BV:8
137 : ite(120, 18, 136) : BV:8
138 : ite(119, 15, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 9, 117) : BV:32
141 : eq(140, 13) : BOOL
142 : eq(140, 16) : BOOL
143 : eq(140, 10) : BOOL
144 : eq(140, 21) : BOOL
145 : eq(140, 24) : BOOL
146 : eq(140, 27) : BOOL
147 : eq(140, 30) : BOOL
148 : eq(140, 32) : BOOL
149 : eq(140, 35) : BOOL
150 : eq(140, 38) : BOOL
151 : ite(150, 40, 41) : BV:8
152 : ite(149, 37, 151) : BV:8
153 : ite(148, 34, 152) : BV:8
154 : ite(147, 26, 153) : BV:8
155 : ite(146, 29, 154) : BV:8
156 : ite(145, 26, 155) : BV:8
157 : ite(144, 23, 156) : BV:8
158 : ite(143, 20, 157) : BV:8
159 : ite(142, 18, 158) : BV:8
160 : ite(141, 15, 159) : BV:8
161 : 1 { 0x1 +1.11e129 } : BV:32
162 : bvadd(161, 9, 117) : BV:32
163 : eq(162, 13) : BOOL
164 : eq(162, 16) : BOOL
165 : eq(162, 10) : BOOL
166 : eq(162, 21) : BOOL
167 : eq(162, 24) : BOOL
168 : eq(162, 27) : BOOL
169 : eq(162, 30) : BOOL
170 : eq(162, 32) : BOOL
171 : eq(162, 35) : BOOL
172 : eq(162, 38) : BOOL
173 : ite(172, 40, 41) : BV:8
174 : ite(171, 37, 173) : BV:8
175 : ite(170, 34, 174) : BV:8
176 : ite(169, 26, 175) : BV:8
177 : ite(168, 29, 176) : BV:8
178 : ite(167, 26, 177) : BV:8
179 : ite(166, 23, 178) : BV:8
180 : ite(165, 20, 179) : BV:8
181 : ite(164, 18, 180) : BV:8
182 : ite(163, 15, 181) : BV:8
183 : bvadd(9, 117) : BV:32
184 : eq(183, 13) : BOOL
185 : eq(183, 16) : BOOL
186 : eq(183, 10) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 24) : BOOL
189 : eq(183, 27) : BOOL
190 : eq(183, 30) : BOOL
191 : eq(183, 32) : BOOL
192 : eq(183, 35) : BOOL
193 : eq(183, 38) : BOOL
194 : ite(193, 40, 41) : BV:8
195 : ite(192, 37, 194) : BV:8
196 : ite(191, 34, 195) : BV:8
197 : ite(190, 26, 196) : BV:8
198 : ite(189, 29, 197) : BV:8
199 : ite(188, 26, 198) : BV:8
200 : ite(187, 23, 199) : BV:8
201 : ite(186, 20, 200) : BV:8
202 : ite(185, 18, 201) : BV:8
203 : ite(184, 15, 202) : BV:8
204 : bvconcat(138, 160, 182, 203) : BV:32
205 : ite(6, 3, 204) : BV:32
206 : lambda(1, 2, 205) : FUNCTION[BV:32,BV:32 -> BV:32]
207 : sym_const(206) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda26628 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
11 : eq(9, 10) : BOOL
12 : 164 { 0xa4 -92 } : BV:8
13 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
17 : eq(9, 16) : BOOL
18 : 207 { 0xcf -49 } : BV:8
19 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
20 : eq(9, 19) : BOOL
21 : 33 { 0x21 } : BV:8
22 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
23 : eq(9, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
26 : eq(9, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : eq(9, 8) : BOOL
29 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
30 : eq(9, 29) : BOOL
31 : 32 { 0x20 } : BV:8
32 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
33 : eq(9, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
36 : eq(9, 35) : BOOL
37 : 8 { 0x8 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(28, 24, 41) : BV:8
43 : ite(26, 27, 42) : BV:8
44 : ite(23, 24, 43) : BV:8
45 : ite(20, 21, 44) : BV:8
46 : ite(17, 18, 45) : BV:8
47 : ite(14, 15, 46) : BV:8
48 : ite(11, 12, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 7, 8) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 13) : BOOL
53 : eq(50, 16) : BOOL
54 : eq(50, 19) : BOOL
55 : eq(50, 22) : BOOL
56 : eq(50, 25) : BOOL
57 : eq(50, 8) : BOOL
58 : eq(50, 29) : BOOL
59 : eq(50, 32) : BOOL
60 : eq(50, 35) : BOOL
61 : ite(60, 37, 38) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 24, 63) : BV:8
65 : ite(56, 27, 64) : BV:8
66 : ite(55, 24, 65) : BV:8
67 : ite(54, 21, 66) : BV:8
68 : ite(53, 18, 67) : BV:8
69 : ite(52, 15, 68) : BV:8
70 : ite(51, 12, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 7, 8) : BV:32
73 : eq(72, 10) : BOOL
74 : eq(72, 13) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : eq(72, 22) : BOOL
78 : eq(72, 25) : BOOL
79 : eq(72, 8) : BOOL
80 : eq(72, 29) : BOOL
81 : eq(72, 32) : BOOL
82 : eq(72, 35) : BOOL
83 : ite(82, 37, 38) : BV:8
84 : ite(81, 34, 83) : BV:8
85 : ite(80, 31, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 27, 86) : BV:8
88 : ite(77, 24, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 15, 90) : BV:8
92 : ite(73, 12, 91) : BV:8
93 : bvadd(7, 8) : BV:32
94 : eq(93, 10) : BOOL
95 : eq(93, 13) : BOOL
96 : eq(93, 16) : BOOL
97 : eq(93, 19) : BOOL
98 : eq(93, 22) : BOOL
99 : eq(93, 25) : BOOL
100 : eq(93, 8) : BOOL
101 : eq(93, 29) : BOOL
102 : eq(93, 32) : BOOL
103 : eq(93, 35) : BOOL
104 : ite(103, 37, 38) : BV:8
105 : ite(102, 34, 104) : BV:8
106 : ite(101, 31, 105) : BV:8
107 : ite(100, 24, 106) : BV:8
108 : ite(99, 27, 107) : BV:8
109 : ite(98, 24, 108) : BV:8
110 : ite(97, 21, 109) : BV:8
111 : ite(96, 18, 110) : BV:8
112 : ite(95, 15, 111) : BV:8
113 : ite(94, 12, 112) : BV:8
114 : bvconcat(48, 70, 92, 113) : BV:32
115 : ite(3, 4, 114) : BV:32
116 : lambda(1, 115) : FUNCTION[BV:32 -> BV:32]
117 : sym_const(116) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3489660928 { 0xd0000000 -805306368 -1.0e33 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1625653414 { 0x60e580a6 +1.79298853e66 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1996357672 { 0x76fe0028 +1.98437976e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1996357675 { 0x76fe002b +1.98438012e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4066516996 { 0xf2622004 -228450300 -1.76660203e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4066516999 { 0xf2622007 -228450297 -1.76660239e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2719025152 { 0xa2110800 -1575942144 -1.13305664e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2719025155 { 0xa2110803 -1575942141 -1.13305699e197 } : BV:32
=counter_example.random_seed
243962829
=counter_example_end
=global nodece 53 num_edges_traversed 3
=global nodece 53 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry -> L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3.ce11066.num_edges_traversed4
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(epsilon)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3.ce11066 abebfdb9686a27fa44794f261d3f877
=input.spec-%var-x-1
1 : Lambda26663 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26666 : BV:32
18 : Lambda26664 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda26665 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
62 : eq(60, 61) : BOOL
63 : 164 { 0xa4 -92 } : BV:8
64 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
65 : eq(60, 64) : BOOL
66 : 16 { 0x10 } : BV:8
67 : eq(60, 58) : BOOL
68 : 207 { 0xcf -49 } : BV:8
69 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
70 : eq(60, 69) : BOOL
71 : 33 { 0x21 } : BV:8
72 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
73 : eq(60, 72) : BOOL
74 : 1 { 0x1 } : BV:8
75 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
76 : eq(60, 75) : BOOL
77 : 160 { 0xa0 -96 } : BV:8
78 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
79 : eq(60, 78) : BOOL
80 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
81 : eq(60, 80) : BOOL
82 : 32 { 0x20 } : BV:8
83 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
84 : eq(60, 83) : BOOL
85 : 248 { 0xf8 -8 } : BV:8
86 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
87 : eq(60, 86) : BOOL
88 : 8 { 0x8 } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 74, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(73, 74, 94) : BV:8
96 : ite(70, 71, 95) : BV:8
97 : ite(67, 68, 96) : BV:8
98 : ite(65, 66, 97) : BV:8
99 : ite(62, 63, 98) : BV:8
100 : bvadd(83, 59) : BV:32
101 : eq(100, 61) : BOOL
102 : eq(100, 64) : BOOL
103 : eq(100, 58) : BOOL
104 : eq(100, 69) : BOOL
105 : eq(100, 72) : BOOL
106 : eq(100, 75) : BOOL
107 : eq(100, 78) : BOOL
108 : eq(100, 80) : BOOL
109 : eq(100, 83) : BOOL
110 : eq(100, 86) : BOOL
111 : ite(110, 88, 89) : BV:8
112 : ite(109, 85, 111) : BV:8
113 : ite(108, 82, 112) : BV:8
114 : ite(107, 74, 113) : BV:8
115 : ite(106, 77, 114) : BV:8
116 : ite(105, 74, 115) : BV:8
117 : ite(104, 71, 116) : BV:8
118 : ite(103, 68, 117) : BV:8
119 : ite(102, 66, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
122 : bvadd(121, 59) : BV:32
123 : eq(122, 61) : BOOL
124 : eq(122, 64) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 69) : BOOL
127 : eq(122, 72) : BOOL
128 : eq(122, 75) : BOOL
129 : eq(122, 78) : BOOL
130 : eq(122, 80) : BOOL
131 : eq(122, 83) : BOOL
132 : eq(122, 86) : BOOL
133 : ite(132, 88, 89) : BV:8
134 : ite(131, 85, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 74, 135) : BV:8
137 : ite(128, 77, 136) : BV:8
138 : ite(127, 74, 137) : BV:8
139 : ite(126, 71, 138) : BV:8
140 : ite(125, 68, 139) : BV:8
141 : ite(124, 66, 140) : BV:8
142 : ite(123, 63, 141) : BV:8
143 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
144 : bvadd(143, 59) : BV:32
145 : eq(144, 61) : BOOL
146 : eq(144, 64) : BOOL
147 : eq(144, 58) : BOOL
148 : eq(144, 69) : BOOL
149 : eq(144, 72) : BOOL
150 : eq(144, 75) : BOOL
151 : eq(144, 78) : BOOL
152 : eq(144, 80) : BOOL
153 : eq(144, 83) : BOOL
154 : eq(144, 86) : BOOL
155 : ite(154, 88, 89) : BV:8
156 : ite(153, 85, 155) : BV:8
157 : ite(152, 82, 156) : BV:8
158 : ite(151, 74, 157) : BV:8
159 : ite(150, 77, 158) : BV:8
160 : ite(149, 74, 159) : BV:8
161 : ite(148, 71, 160) : BV:8
162 : ite(147, 68, 161) : BV:8
163 : ite(146, 66, 162) : BV:8
164 : ite(145, 63, 163) : BV:8
165 : bvconcat(99, 120, 142, 164) : BV:32
166 : bvadd(55, 57, 165) : BV:32
167 : eq(166, 61) : BOOL
168 : eq(166, 64) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 69) : BOOL
171 : eq(166, 72) : BOOL
172 : eq(166, 75) : BOOL
173 : eq(166, 78) : BOOL
174 : eq(166, 80) : BOOL
175 : eq(166, 83) : BOOL
176 : eq(166, 86) : BOOL
177 : ite(176, 88, 89) : BV:8
178 : ite(175, 85, 177) : BV:8
179 : ite(174, 82, 178) : BV:8
180 : ite(173, 74, 179) : BV:8
181 : ite(172, 77, 180) : BV:8
182 : ite(171, 74, 181) : BV:8
183 : ite(170, 71, 182) : BV:8
184 : ite(169, 68, 183) : BV:8
185 : ite(168, 66, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : bvadd(40, 57, 165) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 58) : BOOL
191 : eq(187, 69) : BOOL
192 : eq(187, 72) : BOOL
193 : eq(187, 75) : BOOL
194 : eq(187, 78) : BOOL
195 : eq(187, 80) : BOOL
196 : eq(187, 83) : BOOL
197 : eq(187, 86) : BOOL
198 : ite(197, 88, 89) : BV:8
199 : ite(196, 85, 198) : BV:8
200 : ite(195, 82, 199) : BV:8
201 : ite(194, 74, 200) : BV:8
202 : ite(193, 77, 201) : BV:8
203 : ite(192, 74, 202) : BV:8
204 : ite(191, 71, 203) : BV:8
205 : ite(190, 68, 204) : BV:8
206 : ite(189, 66, 205) : BV:8
207 : ite(188, 63, 206) : BV:8
208 : bvadd(36, 57, 165) : BV:32
209 : eq(208, 61) : BOOL
210 : eq(208, 64) : BOOL
211 : eq(208, 58) : BOOL
212 : eq(208, 69) : BOOL
213 : eq(208, 72) : BOOL
214 : eq(208, 75) : BOOL
215 : eq(208, 78) : BOOL
216 : eq(208, 80) : BOOL
217 : eq(208, 83) : BOOL
218 : eq(208, 86) : BOOL
219 : ite(218, 88, 89) : BV:8
220 : ite(217, 85, 219) : BV:8
221 : ite(216, 82, 220) : BV:8
222 : ite(215, 74, 221) : BV:8
223 : ite(214, 77, 222) : BV:8
224 : ite(213, 74, 223) : BV:8
225 : ite(212, 71, 224) : BV:8
226 : ite(211, 68, 225) : BV:8
227 : ite(210, 66, 226) : BV:8
228 : ite(209, 63, 227) : BV:8
229 : bvadd(57, 165) : BV:32
230 : eq(229, 61) : BOOL
231 : eq(229, 64) : BOOL
232 : eq(229, 58) : BOOL
233 : eq(229, 69) : BOOL
234 : eq(229, 72) : BOOL
235 : eq(229, 75) : BOOL
236 : eq(229, 78) : BOOL
237 : eq(229, 80) : BOOL
238 : eq(229, 83) : BOOL
239 : eq(229, 86) : BOOL
240 : ite(239, 88, 89) : BV:8
241 : ite(238, 85, 240) : BV:8
242 : ite(237, 82, 241) : BV:8
243 : ite(236, 74, 242) : BV:8
244 : ite(235, 77, 243) : BV:8
245 : ite(234, 74, 244) : BV:8
246 : ite(233, 71, 245) : BV:8
247 : ite(232, 68, 246) : BV:8
248 : ite(231, 66, 247) : BV:8
249 : ite(230, 63, 248) : BV:8
250 : bvconcat(186, 207, 228, 249) : BV:32
251 : ite(54, 2, 250) : BV:32
252 : lambda(51, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(50, 252) : MAP[BV:32 -> BV:32]
254 : lambda(17, 253) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
255 : map(16, 254) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
256 : sym_const(255) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3489660928 { 0xd0000000 -805306368 -1.0e33 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 3489660929 { 0xd0000001 -805306367 -1.11e33 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%x
1 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
=input.dst.llvm-%n
1 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1585451141 ] -> 0, [ 1585451142; 1585451142 ] -> 248, [ 1585451143; 1585451143 ] -> 207, [ 1585451144; 2659192959 ] -> 0, [ 2659192960; 2659192960 ] -> 164, [ 2659192961; 2659192961 ] -> 8, [ 2659192962; 2659192962 ] -> 33, [ 2659192963; 2659192963 ] -> 160, [ 2659192964; 2686519459 ] -> 0, [ 2686519460; 2686519461 ] -> 1, [ 2686519462; 2686519462 ] -> 16, [ 2686519463; 2686519463 ] -> 32, [ 2686519464; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1996357671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1996357672; 1996357675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1996357676; 2719025151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2719025152; 2719025155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2719025156; 4066516995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4066516996; 4066516999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4066517000; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4066516996 { 0xf2622004 -228450300 -1.76660203e101 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2719025152 { 0xa2110800 -1575942144 -1.13305664e197 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1996357672 { 0x76fe0028 +1.98437976e110 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26670 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26673 : BV:32
18 : Lambda26671 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda26672 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
81 : eq(79, 80) : BOOL
82 : 164 { 0xa4 -92 } : BV:8
83 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
84 : eq(79, 83) : BOOL
85 : 16 { 0x10 } : BV:8
86 : eq(79, 77) : BOOL
87 : 207 { 0xcf -49 } : BV:8
88 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
89 : eq(79, 88) : BOOL
90 : 33 { 0x21 } : BV:8
91 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
92 : eq(79, 91) : BOOL
93 : 1 { 0x1 } : BV:8
94 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
95 : eq(79, 94) : BOOL
96 : 160 { 0xa0 -96 } : BV:8
97 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
98 : eq(79, 97) : BOOL
99 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
100 : eq(79, 99) : BOOL
101 : 32 { 0x20 } : BV:8
102 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
103 : eq(79, 102) : BOOL
104 : 248 { 0xf8 -8 } : BV:8
105 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
106 : eq(79, 105) : BOOL
107 : 8 { 0x8 } : BV:8
108 : 0 { 0x0 } : BV:8
109 : ite(106, 107, 108) : BV:8
110 : ite(103, 104, 109) : BV:8
111 : ite(100, 101, 110) : BV:8
112 : ite(98, 93, 111) : BV:8
113 : ite(95, 96, 112) : BV:8
114 : ite(92, 93, 113) : BV:8
115 : ite(89, 90, 114) : BV:8
116 : ite(86, 87, 115) : BV:8
117 : ite(84, 85, 116) : BV:8
118 : ite(81, 82, 117) : BV:8
119 : bvadd(102, 78) : BV:32
120 : eq(119, 80) : BOOL
121 : eq(119, 83) : BOOL
122 : eq(119, 77) : BOOL
123 : eq(119, 88) : BOOL
124 : eq(119, 91) : BOOL
125 : eq(119, 94) : BOOL
126 : eq(119, 97) : BOOL
127 : eq(119, 99) : BOOL
128 : eq(119, 102) : BOOL
129 : eq(119, 105) : BOOL
130 : ite(129, 107, 108) : BV:8
131 : ite(128, 104, 130) : BV:8
132 : ite(127, 101, 131) : BV:8
133 : ite(126, 93, 132) : BV:8
134 : ite(125, 96, 133) : BV:8
135 : ite(124, 93, 134) : BV:8
136 : ite(123, 90, 135) : BV:8
137 : ite(122, 87, 136) : BV:8
138 : ite(121, 85, 137) : BV:8
139 : ite(120, 82, 138) : BV:8
140 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
141 : bvadd(140, 78) : BV:32
142 : eq(141, 80) : BOOL
143 : eq(141, 83) : BOOL
144 : eq(141, 77) : BOOL
145 : eq(141, 88) : BOOL
146 : eq(141, 91) : BOOL
147 : eq(141, 94) : BOOL
148 : eq(141, 97) : BOOL
149 : eq(141, 99) : BOOL
150 : eq(141, 102) : BOOL
151 : eq(141, 105) : BOOL
152 : ite(151, 107, 108) : BV:8
153 : ite(150, 104, 152) : BV:8
154 : ite(149, 101, 153) : BV:8
155 : ite(148, 93, 154) : BV:8
156 : ite(147, 96, 155) : BV:8
157 : ite(146, 93, 156) : BV:8
158 : ite(145, 90, 157) : BV:8
159 : ite(144, 87, 158) : BV:8
160 : ite(143, 85, 159) : BV:8
161 : ite(142, 82, 160) : BV:8
162 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
163 : bvadd(162, 78) : BV:32
164 : eq(163, 80) : BOOL
165 : eq(163, 83) : BOOL
166 : eq(163, 77) : BOOL
167 : eq(163, 88) : BOOL
168 : eq(163, 91) : BOOL
169 : eq(163, 94) : BOOL
170 : eq(163, 97) : BOOL
171 : eq(163, 99) : BOOL
172 : eq(163, 102) : BOOL
173 : eq(163, 105) : BOOL
174 : ite(173, 107, 108) : BV:8
175 : ite(172, 104, 174) : BV:8
176 : ite(171, 101, 175) : BV:8
177 : ite(170, 93, 176) : BV:8
178 : ite(169, 96, 177) : BV:8
179 : ite(168, 93, 178) : BV:8
180 : ite(167, 90, 179) : BV:8
181 : ite(166, 87, 180) : BV:8
182 : ite(165, 85, 181) : BV:8
183 : ite(164, 82, 182) : BV:8
184 : bvconcat(118, 139, 161, 183) : BV:32
185 : bvadd(74, 76, 184) : BV:32
186 : eq(185, 80) : BOOL
187 : eq(185, 83) : BOOL
188 : eq(185, 77) : BOOL
189 : eq(185, 88) : BOOL
190 : eq(185, 91) : BOOL
191 : eq(185, 94) : BOOL
192 : eq(185, 97) : BOOL
193 : eq(185, 99) : BOOL
194 : eq(185, 102) : BOOL
195 : eq(185, 105) : BOOL
196 : ite(195, 107, 108) : BV:8
197 : ite(194, 104, 196) : BV:8
198 : ite(193, 101, 197) : BV:8
199 : ite(192, 93, 198) : BV:8
200 : ite(191, 96, 199) : BV:8
201 : ite(190, 93, 200) : BV:8
202 : ite(189, 90, 201) : BV:8
203 : ite(188, 87, 202) : BV:8
204 : ite(187, 85, 203) : BV:8
205 : ite(186, 82, 204) : BV:8
206 : bvadd(40, 76, 184) : BV:32
207 : eq(206, 80) : BOOL
208 : eq(206, 83) : BOOL
209 : eq(206, 77) : BOOL
210 : eq(206, 88) : BOOL
211 : eq(206, 91) : BOOL
212 : eq(206, 94) : BOOL
213 : eq(206, 97) : BOOL
214 : eq(206, 99) : BOOL
215 : eq(206, 102) : BOOL
216 : eq(206, 105) : BOOL
217 : ite(216, 107, 108) : BV:8
218 : ite(215, 104, 217) : BV:8
219 : ite(214, 101, 218) : BV:8
220 : ite(213, 93, 219) : BV:8
221 : ite(212, 96, 220) : BV:8
222 : ite(211, 93, 221) : BV:8
223 : ite(210, 90, 222) : BV:8
224 : ite(209, 87, 223) : BV:8
225 : ite(208, 85, 224) : BV:8
226 : ite(207, 82, 225) : BV:8
227 : bvadd(36, 76, 184) : BV:32
228 : eq(227, 80) : BOOL
229 : eq(227, 83) : BOOL
230 : eq(227, 77) : BOOL
231 : eq(227, 88) : BOOL
232 : eq(227, 91) : BOOL
233 : eq(227, 94) : BOOL
234 : eq(227, 97) : BOOL
235 : eq(227, 99) : BOOL
236 : eq(227, 102) : BOOL
237 : eq(227, 105) : BOOL
238 : ite(237, 107, 108) : BV:8
239 : ite(236, 104, 238) : BV:8
240 : ite(235, 101, 239) : BV:8
241 : ite(234, 93, 240) : BV:8
242 : ite(233, 96, 241) : BV:8
243 : ite(232, 93, 242) : BV:8
244 : ite(231, 90, 243) : BV:8
245 : ite(230, 87, 244) : BV:8
246 : ite(229, 85, 245) : BV:8
247 : ite(228, 82, 246) : BV:8
248 : bvadd(76, 184) : BV:32
249 : eq(248, 80) : BOOL
250 : eq(248, 83) : BOOL
251 : eq(248, 77) : BOOL
252 : eq(248, 88) : BOOL
253 : eq(248, 91) : BOOL
254 : eq(248, 94) : BOOL
255 : eq(248, 97) : BOOL
256 : eq(248, 99) : BOOL
257 : eq(248, 102) : BOOL
258 : eq(248, 105) : BOOL
259 : ite(258, 107, 108) : BV:8
260 : ite(257, 104, 259) : BV:8
261 : ite(256, 101, 260) : BV:8
262 : ite(255, 93, 261) : BV:8
263 : ite(254, 96, 262) : BV:8
264 : ite(253, 93, 263) : BV:8
265 : ite(252, 90, 264) : BV:8
266 : ite(251, 87, 265) : BV:8
267 : ite(250, 85, 266) : BV:8
268 : ite(249, 82, 267) : BV:8
269 : bvconcat(205, 226, 247, 268) : BV:32
270 : ite(54, 2, 269) : BV:32
271 : ite(73, 270, 269) : BV:32
272 : ite(54, 2, 271) : BV:32
273 : lambda(51, 272) : FUNCTION[BV:32 -> BV:32]
274 : map(50, 273) : MAP[BV:32 -> BV:32]
275 : lambda(17, 274) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
276 : map(16, 275) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
277 : sym_const(276) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26711 : BV:32
4 : 1 { 0x1 } : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvule(5, 3) : BOOL
7 : bvule(3, 5) : BOOL
8 : and(6, 7) : BOOL
9 : bvule(1, 3) : BOOL
10 : bvule(3, 1) : BOOL
11 : and(9, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 1, 17) : BV:32
19 : ite(8, 5, 18) : BV:32
20 : eq(19, 5) : BOOL
21 : and(4, 20) : BOOL
22 : 0 { 0x0 } : BOOL
23 : ite(21, 4, 22) : BOOL
24 : lambda(3, 23) : FUNCTION[BV:32 -> BOOL]
25 : Lambda26712 : BV:32
26 : bvule(5, 25) : BOOL
27 : bvule(25, 5) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(1, 25) : BOOL
30 : bvule(25, 1) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(12, 25) : BOOL
33 : bvule(25, 14) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 12, 12) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : ite(28, 5, 36) : BV:32
38 : eq(37, 5) : BOOL
39 : and(4, 38) : BOOL
40 : ite(39, 4, 22) : BOOL
41 : and(4, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 25) : BV:32
45 : bvadd(42, 44, 5) : BV:32
46 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
47 : eq(45, 46) : BOOL
48 : 164 { 0xa4 -92 } : BV:8
49 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
50 : eq(45, 49) : BOOL
51 : 16 { 0x10 } : BV:8
52 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
53 : eq(45, 52) : BOOL
54 : 207 { 0xcf -49 } : BV:8
55 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
56 : eq(45, 55) : BOOL
57 : 33 { 0x21 } : BV:8
58 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
59 : eq(45, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
62 : eq(45, 61) : BOOL
63 : 160 { 0xa0 -96 } : BV:8
64 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
65 : eq(45, 64) : BOOL
66 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
67 : eq(45, 66) : BOOL
68 : 32 { 0x20 } : BV:8
69 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
70 : eq(45, 69) : BOOL
71 : 248 { 0xf8 -8 } : BV:8
72 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
73 : eq(45, 72) : BOOL
74 : 8 { 0x8 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(65, 60, 78) : BV:8
80 : ite(62, 63, 79) : BV:8
81 : ite(59, 60, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : ite(50, 51, 83) : BV:8
85 : ite(47, 48, 84) : BV:8
86 : bvadd(12, 44, 5) : BV:32
87 : eq(86, 46) : BOOL
88 : eq(86, 49) : BOOL
89 : eq(86, 52) : BOOL
90 : eq(86, 55) : BOOL
91 : eq(86, 58) : BOOL
92 : eq(86, 61) : BOOL
93 : eq(86, 64) : BOOL
94 : eq(86, 66) : BOOL
95 : eq(86, 69) : BOOL
96 : eq(86, 72) : BOOL
97 : ite(96, 74, 75) : BV:8
98 : ite(95, 71, 97) : BV:8
99 : ite(94, 68, 98) : BV:8
100 : ite(93, 60, 99) : BV:8
101 : ite(92, 63, 100) : BV:8
102 : ite(91, 60, 101) : BV:8
103 : ite(90, 57, 102) : BV:8
104 : ite(89, 54, 103) : BV:8
105 : ite(88, 51, 104) : BV:8
106 : ite(87, 48, 105) : BV:8
107 : bvadd(1, 44, 5) : BV:32
108 : eq(107, 46) : BOOL
109 : eq(107, 49) : BOOL
110 : eq(107, 52) : BOOL
111 : eq(107, 55) : BOOL
112 : eq(107, 58) : BOOL
113 : eq(107, 61) : BOOL
114 : eq(107, 64) : BOOL
115 : eq(107, 66) : BOOL
116 : eq(107, 69) : BOOL
117 : eq(107, 72) : BOOL
118 : ite(117, 74, 75) : BV:8
119 : ite(116, 71, 118) : BV:8
120 : ite(115, 68, 119) : BV:8
121 : ite(114, 60, 120) : BV:8
122 : ite(113, 63, 121) : BV:8
123 : ite(112, 60, 122) : BV:8
124 : ite(111, 57, 123) : BV:8
125 : ite(110, 54, 124) : BV:8
126 : ite(109, 51, 125) : BV:8
127 : ite(108, 48, 126) : BV:8
128 : bvadd(44, 5) : BV:32
129 : eq(128, 46) : BOOL
130 : eq(128, 49) : BOOL
131 : eq(128, 52) : BOOL
132 : eq(128, 55) : BOOL
133 : eq(128, 58) : BOOL
134 : eq(128, 61) : BOOL
135 : eq(128, 64) : BOOL
136 : eq(128, 66) : BOOL
137 : eq(128, 69) : BOOL
138 : eq(128, 72) : BOOL
139 : ite(138, 74, 75) : BV:8
140 : ite(137, 71, 139) : BV:8
141 : ite(136, 68, 140) : BV:8
142 : ite(135, 60, 141) : BV:8
143 : ite(134, 63, 142) : BV:8
144 : ite(133, 60, 143) : BV:8
145 : ite(132, 57, 144) : BV:8
146 : ite(131, 54, 145) : BV:8
147 : ite(130, 51, 146) : BV:8
148 : ite(129, 48, 147) : BV:8
149 : bvconcat(85, 106, 127, 148) : BV:32
150 : ite(41, 149, 149) : BV:32
151 : lambda(25, 150) : FUNCTION[BV:32 -> BV:32]
152 : map(24, 151) : MAP[BV:32 -> BV:32]
153 : sum(1, 2, 152) : SUM[UNIT,MAP[BV:32 -> BV:32]]
154 : sym_const(153) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 417055842 { 0x18dbc462 +1.71693062e178 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26713 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda26714 : BV:32
25 : bvule(3, 24) : BOOL
26 : bvule(24, 3) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(7, 24) : BOOL
29 : bvule(24, 7) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(11, 24) : BOOL
32 : bvule(24, 13) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 11, 11) : BV:32
35 : ite(30, 7, 34) : BV:32
36 : ite(27, 3, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : and(2, 37) : BOOL
39 : ite(38, 2, 21) : BOOL
40 : and(2, 39) : BOOL
41 : 3 { 0x3 +1.35e129 } : BV:32
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 24) : BV:32
44 : bvadd(41, 43, 3) : BV:32
45 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
46 : eq(44, 45) : BOOL
47 : 164 { 0xa4 -92 } : BV:8
48 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
49 : eq(44, 48) : BOOL
50 : 16 { 0x10 } : BV:8
51 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
52 : eq(44, 51) : BOOL
53 : 207 { 0xcf -49 } : BV:8
54 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
55 : eq(44, 54) : BOOL
56 : 33 { 0x21 } : BV:8
57 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
58 : eq(44, 57) : BOOL
59 : 1 { 0x1 } : BV:8
60 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
61 : eq(44, 60) : BOOL
62 : 160 { 0xa0 -96 } : BV:8
63 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
64 : eq(44, 63) : BOOL
65 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
66 : eq(44, 65) : BOOL
67 : 32 { 0x20 } : BV:8
68 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
69 : eq(44, 68) : BOOL
70 : 248 { 0xf8 -8 } : BV:8
71 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
72 : eq(44, 71) : BOOL
73 : 8 { 0x8 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(64, 59, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : ite(58, 59, 79) : BV:8
81 : ite(55, 56, 80) : BV:8
82 : ite(52, 53, 81) : BV:8
83 : ite(49, 50, 82) : BV:8
84 : ite(46, 47, 83) : BV:8
85 : bvadd(11, 43, 3) : BV:32
86 : eq(85, 45) : BOOL
87 : eq(85, 48) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 54) : BOOL
90 : eq(85, 57) : BOOL
91 : eq(85, 60) : BOOL
92 : eq(85, 63) : BOOL
93 : eq(85, 65) : BOOL
94 : eq(85, 68) : BOOL
95 : eq(85, 71) : BOOL
96 : ite(95, 73, 74) : BV:8
97 : ite(94, 70, 96) : BV:8
98 : ite(93, 67, 97) : BV:8
99 : ite(92, 59, 98) : BV:8
100 : ite(91, 62, 99) : BV:8
101 : ite(90, 59, 100) : BV:8
102 : ite(89, 56, 101) : BV:8
103 : ite(88, 53, 102) : BV:8
104 : ite(87, 50, 103) : BV:8
105 : ite(86, 47, 104) : BV:8
106 : bvadd(7, 43, 3) : BV:32
107 : eq(106, 45) : BOOL
108 : eq(106, 48) : BOOL
109 : eq(106, 51) : BOOL
110 : eq(106, 54) : BOOL
111 : eq(106, 57) : BOOL
112 : eq(106, 60) : BOOL
113 : eq(106, 63) : BOOL
114 : eq(106, 65) : BOOL
115 : eq(106, 68) : BOOL
116 : eq(106, 71) : BOOL
117 : ite(116, 73, 74) : BV:8
118 : ite(115, 70, 117) : BV:8
119 : ite(114, 67, 118) : BV:8
120 : ite(113, 59, 119) : BV:8
121 : ite(112, 62, 120) : BV:8
122 : ite(111, 59, 121) : BV:8
123 : ite(110, 56, 122) : BV:8
124 : ite(109, 53, 123) : BV:8
125 : ite(108, 50, 124) : BV:8
126 : ite(107, 47, 125) : BV:8
127 : bvadd(43, 3) : BV:32
128 : eq(127, 45) : BOOL
129 : eq(127, 48) : BOOL
130 : eq(127, 51) : BOOL
131 : eq(127, 54) : BOOL
132 : eq(127, 57) : BOOL
133 : eq(127, 60) : BOOL
134 : eq(127, 63) : BOOL
135 : eq(127, 65) : BOOL
136 : eq(127, 68) : BOOL
137 : eq(127, 71) : BOOL
138 : ite(137, 73, 74) : BV:8
139 : ite(136, 70, 138) : BV:8
140 : ite(135, 67, 139) : BV:8
141 : ite(134, 59, 140) : BV:8
142 : ite(133, 62, 141) : BV:8
143 : ite(132, 59, 142) : BV:8
144 : ite(131, 56, 143) : BV:8
145 : ite(130, 53, 144) : BV:8
146 : ite(129, 50, 145) : BV:8
147 : ite(128, 47, 146) : BV:8
148 : bvconcat(84, 105, 126, 147) : BV:32
149 : ite(40, 148, 148) : BV:32
150 : lambda(24, 149) : FUNCTION[BV:32 -> BV:32]
151 : map(23, 150) : MAP[BV:32 -> BV:32]
152 : sym_const(151) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 3489660928 { 0xd0000000 -805306368 -1.0e33 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L4%18%bbentry
1 : Lambda26715 : BV:32
2 : 1 { 0x1 } : BOOL
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : and(2, 19) : BOOL
21 : 0 { 0x0 } : BOOL
22 : ite(20, 2, 21) : BOOL
23 : lambda(1, 22) : FUNCTION[BV:32 -> BOOL]
24 : Lambda26716 : BV:32
25 : bvule(3, 24) : BOOL
26 : bvule(24, 3) : BOOL
27 : and(25, 26) : BOOL
28 : bvule(7, 24) : BOOL
29 : bvule(24, 7) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(11, 24) : BOOL
32 : bvule(24, 13) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 11, 11) : BV:32
35 : ite(30, 7, 34) : BV:32
36 : ite(27, 3, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : and(2, 37) : BOOL
39 : ite(38, 2, 21) : BOOL
40 : and(2, 39) : BOOL
41 : 3 { 0x3 +1.35e129 } : BV:32
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 24) : BV:32
44 : bvadd(41, 43, 3) : BV:32
45 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
46 : eq(44, 45) : BOOL
47 : 164 { 0xa4 -92 } : BV:8
48 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
49 : eq(44, 48) : BOOL
50 : 16 { 0x10 } : BV:8
51 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
52 : eq(44, 51) : BOOL
53 : 207 { 0xcf -49 } : BV:8
54 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
55 : eq(44, 54) : BOOL
56 : 33 { 0x21 } : BV:8
57 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
58 : eq(44, 57) : BOOL
59 : 1 { 0x1 } : BV:8
60 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
61 : eq(44, 60) : BOOL
62 : 160 { 0xa0 -96 } : BV:8
63 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
64 : eq(44, 63) : BOOL
65 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
66 : eq(44, 65) : BOOL
67 : 32 { 0x20 } : BV:8
68 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
69 : eq(44, 68) : BOOL
70 : 248 { 0xf8 -8 } : BV:8
71 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
72 : eq(44, 71) : BOOL
73 : 8 { 0x8 } : BV:8
74 : 0 { 0x0 } : BV:8
75 : ite(72, 73, 74) : BV:8
76 : ite(69, 70, 75) : BV:8
77 : ite(66, 67, 76) : BV:8
78 : ite(64, 59, 77) : BV:8
79 : ite(61, 62, 78) : BV:8
80 : ite(58, 59, 79) : BV:8
81 : ite(55, 56, 80) : BV:8
82 : ite(52, 53, 81) : BV:8
83 : ite(49, 50, 82) : BV:8
84 : ite(46, 47, 83) : BV:8
85 : bvadd(11, 43, 3) : BV:32
86 : eq(85, 45) : BOOL
87 : eq(85, 48) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 54) : BOOL
90 : eq(85, 57) : BOOL
91 : eq(85, 60) : BOOL
92 : eq(85, 63) : BOOL
93 : eq(85, 65) : BOOL
94 : eq(85, 68) : BOOL
95 : eq(85, 71) : BOOL
96 : ite(95, 73, 74) : BV:8
97 : ite(94, 70, 96) : BV:8
98 : ite(93, 67, 97) : BV:8
99 : ite(92, 59, 98) : BV:8
100 : ite(91, 62, 99) : BV:8
101 : ite(90, 59, 100) : BV:8
102 : ite(89, 56, 101) : BV:8
103 : ite(88, 53, 102) : BV:8
104 : ite(87, 50, 103) : BV:8
105 : ite(86, 47, 104) : BV:8
106 : bvadd(7, 43, 3) : BV:32
107 : eq(106, 45) : BOOL
108 : eq(106, 48) : BOOL
109 : eq(106, 51) : BOOL
110 : eq(106, 54) : BOOL
111 : eq(106, 57) : BOOL
112 : eq(106, 60) : BOOL
113 : eq(106, 63) : BOOL
114 : eq(106, 65) : BOOL
115 : eq(106, 68) : BOOL
116 : eq(106, 71) : BOOL
117 : ite(116, 73, 74) : BV:8
118 : ite(115, 70, 117) : BV:8
119 : ite(114, 67, 118) : BV:8
120 : ite(113, 59, 119) : BV:8
121 : ite(112, 62, 120) : BV:8
122 : ite(111, 59, 121) : BV:8
123 : ite(110, 56, 122) : BV:8
124 : ite(109, 53, 123) : BV:8
125 : ite(108, 50, 124) : BV:8
126 : ite(107, 47, 125) : BV:8
127 : bvadd(43, 3) : BV:32
128 : eq(127, 45) : BOOL
129 : eq(127, 48) : BOOL
130 : eq(127, 51) : BOOL
131 : eq(127, 54) : BOOL
132 : eq(127, 57) : BOOL
133 : eq(127, 60) : BOOL
134 : eq(127, 63) : BOOL
135 : eq(127, 65) : BOOL
136 : eq(127, 68) : BOOL
137 : eq(127, 71) : BOOL
138 : ite(137, 73, 74) : BV:8
139 : ite(136, 70, 138) : BV:8
140 : ite(135, 67, 139) : BV:8
141 : ite(134, 59, 140) : BV:8
142 : ite(133, 62, 141) : BV:8
143 : ite(132, 59, 142) : BV:8
144 : ite(131, 56, 143) : BV:8
145 : ite(130, 53, 144) : BV:8
146 : ite(129, 50, 145) : BV:8
147 : ite(128, 47, 146) : BV:8
148 : bvconcat(84, 105, 126, 147) : BV:32
149 : ite(40, 148, 148) : BV:32
150 : lambda(24, 149) : FUNCTION[BV:32 -> BV:32]
151 : map(23, 150) : MAP[BV:32 -> BV:32]
152 : sym_const(151) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 3779543915 ] -> true, [ 3779543916; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3779543915 ] -> true, [ 3779543916; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26612 : BV:32
2 : Lambda26613 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26617 : BV:32
2 : Lambda26618 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
54 : eq(52, 53) : BOOL
55 : 164 { 0xa4 -92 } : BV:8
56 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
57 : eq(52, 56) : BOOL
58 : 16 { 0x10 } : BV:8
59 : eq(52, 50) : BOOL
60 : 207 { 0xcf -49 } : BV:8
61 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
62 : eq(52, 61) : BOOL
63 : 33 { 0x21 } : BV:8
64 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
65 : eq(52, 64) : BOOL
66 : 1 { 0x1 } : BV:8
67 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
68 : eq(52, 67) : BOOL
69 : 160 { 0xa0 -96 } : BV:8
70 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
71 : eq(52, 70) : BOOL
72 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
73 : eq(52, 72) : BOOL
74 : 32 { 0x20 } : BV:8
75 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
76 : eq(52, 75) : BOOL
77 : 248 { 0xf8 -8 } : BV:8
78 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
79 : eq(52, 78) : BOOL
80 : 8 { 0x8 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(71, 66, 84) : BV:8
86 : ite(68, 69, 85) : BV:8
87 : ite(65, 66, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : ite(59, 60, 88) : BV:8
90 : ite(57, 58, 89) : BV:8
91 : ite(54, 55, 90) : BV:8
92 : bvadd(75, 51) : BV:32
93 : eq(92, 53) : BOOL
94 : eq(92, 56) : BOOL
95 : eq(92, 50) : BOOL
96 : eq(92, 61) : BOOL
97 : eq(92, 64) : BOOL
98 : eq(92, 67) : BOOL
99 : eq(92, 70) : BOOL
100 : eq(92, 72) : BOOL
101 : eq(92, 75) : BOOL
102 : eq(92, 78) : BOOL
103 : ite(102, 80, 81) : BV:8
104 : ite(101, 77, 103) : BV:8
105 : ite(100, 74, 104) : BV:8
106 : ite(99, 66, 105) : BV:8
107 : ite(98, 69, 106) : BV:8
108 : ite(97, 66, 107) : BV:8
109 : ite(96, 63, 108) : BV:8
110 : ite(95, 60, 109) : BV:8
111 : ite(94, 58, 110) : BV:8
112 : ite(93, 55, 111) : BV:8
113 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
114 : bvadd(113, 51) : BV:32
115 : eq(114, 53) : BOOL
116 : eq(114, 56) : BOOL
117 : eq(114, 50) : BOOL
118 : eq(114, 61) : BOOL
119 : eq(114, 64) : BOOL
120 : eq(114, 67) : BOOL
121 : eq(114, 70) : BOOL
122 : eq(114, 72) : BOOL
123 : eq(114, 75) : BOOL
124 : eq(114, 78) : BOOL
125 : ite(124, 80, 81) : BV:8
126 : ite(123, 77, 125) : BV:8
127 : ite(122, 74, 126) : BV:8
128 : ite(121, 66, 127) : BV:8
129 : ite(120, 69, 128) : BV:8
130 : ite(119, 66, 129) : BV:8
131 : ite(118, 63, 130) : BV:8
132 : ite(117, 60, 131) : BV:8
133 : ite(116, 58, 132) : BV:8
134 : ite(115, 55, 133) : BV:8
135 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
136 : bvadd(135, 51) : BV:32
137 : eq(136, 53) : BOOL
138 : eq(136, 56) : BOOL
139 : eq(136, 50) : BOOL
140 : eq(136, 61) : BOOL
141 : eq(136, 64) : BOOL
142 : eq(136, 67) : BOOL
143 : eq(136, 70) : BOOL
144 : eq(136, 72) : BOOL
145 : eq(136, 75) : BOOL
146 : eq(136, 78) : BOOL
147 : ite(146, 80, 81) : BV:8
148 : ite(145, 77, 147) : BV:8
149 : ite(144, 74, 148) : BV:8
150 : ite(143, 66, 149) : BV:8
151 : ite(142, 69, 150) : BV:8
152 : ite(141, 66, 151) : BV:8
153 : ite(140, 63, 152) : BV:8
154 : ite(139, 60, 153) : BV:8
155 : ite(138, 58, 154) : BV:8
156 : ite(137, 55, 155) : BV:8
157 : bvconcat(91, 112, 134, 156) : BV:32
158 : bvadd(47, 49, 157) : BV:32
159 : eq(158, 53) : BOOL
160 : eq(158, 56) : BOOL
161 : eq(158, 50) : BOOL
162 : eq(158, 61) : BOOL
163 : eq(158, 64) : BOOL
164 : eq(158, 67) : BOOL
165 : eq(158, 70) : BOOL
166 : eq(158, 72) : BOOL
167 : eq(158, 75) : BOOL
168 : eq(158, 78) : BOOL
169 : ite(168, 80, 81) : BV:8
170 : ite(167, 77, 169) : BV:8
171 : ite(166, 74, 170) : BV:8
172 : ite(165, 66, 171) : BV:8
173 : ite(164, 69, 172) : BV:8
174 : ite(163, 66, 173) : BV:8
175 : ite(162, 63, 174) : BV:8
176 : ite(161, 60, 175) : BV:8
177 : ite(160, 58, 176) : BV:8
178 : ite(159, 55, 177) : BV:8
179 : bvadd(36, 49, 157) : BV:32
180 : eq(179, 53) : BOOL
181 : eq(179, 56) : BOOL
182 : eq(179, 50) : BOOL
183 : eq(179, 61) : BOOL
184 : eq(179, 64) : BOOL
185 : eq(179, 67) : BOOL
186 : eq(179, 70) : BOOL
187 : eq(179, 72) : BOOL
188 : eq(179, 75) : BOOL
189 : eq(179, 78) : BOOL
190 : ite(189, 80, 81) : BV:8
191 : ite(188, 77, 190) : BV:8
192 : ite(187, 74, 191) : BV:8
193 : ite(186, 66, 192) : BV:8
194 : ite(185, 69, 193) : BV:8
195 : ite(184, 66, 194) : BV:8
196 : ite(183, 63, 195) : BV:8
197 : ite(182, 60, 196) : BV:8
198 : ite(181, 58, 197) : BV:8
199 : ite(180, 55, 198) : BV:8
200 : bvadd(32, 49, 157) : BV:32
201 : eq(200, 53) : BOOL
202 : eq(200, 56) : BOOL
203 : eq(200, 50) : BOOL
204 : eq(200, 61) : BOOL
205 : eq(200, 64) : BOOL
206 : eq(200, 67) : BOOL
207 : eq(200, 70) : BOOL
208 : eq(200, 72) : BOOL
209 : eq(200, 75) : BOOL
210 : eq(200, 78) : BOOL
211 : ite(210, 80, 81) : BV:8
212 : ite(209, 77, 211) : BV:8
213 : ite(208, 74, 212) : BV:8
214 : ite(207, 66, 213) : BV:8
215 : ite(206, 69, 214) : BV:8
216 : ite(205, 66, 215) : BV:8
217 : ite(204, 63, 216) : BV:8
218 : ite(203, 60, 217) : BV:8
219 : ite(202, 58, 218) : BV:8
220 : ite(201, 55, 219) : BV:8
221 : bvadd(49, 157) : BV:32
222 : eq(221, 53) : BOOL
223 : eq(221, 56) : BOOL
224 : eq(221, 50) : BOOL
225 : eq(221, 61) : BOOL
226 : eq(221, 64) : BOOL
227 : eq(221, 67) : BOOL
228 : eq(221, 70) : BOOL
229 : eq(221, 72) : BOOL
230 : eq(221, 75) : BOOL
231 : eq(221, 78) : BOOL
232 : ite(231, 80, 81) : BV:8
233 : ite(230, 77, 232) : BV:8
234 : ite(229, 74, 233) : BV:8
235 : ite(228, 66, 234) : BV:8
236 : ite(227, 69, 235) : BV:8
237 : ite(226, 66, 236) : BV:8
238 : ite(225, 63, 237) : BV:8
239 : ite(224, 60, 238) : BV:8
240 : ite(223, 58, 239) : BV:8
241 : ite(222, 55, 240) : BV:8
242 : bvconcat(178, 199, 220, 241) : BV:32
243 : ite(6, 3, 242) : BV:32
244 : ite(46, 243, 242) : BV:32
245 : ite(6, 3, 244) : BV:32
246 : lambda(1, 2, 245) : FUNCTION[BV:32,BV:32 -> BV:32]
247 : sym_const(246) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26619 : BV:32
2 : Lambda26620 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26623 : BV:32
2 : Lambda26624 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
14 : eq(12, 13) : BOOL
15 : 164 { 0xa4 -92 } : BV:8
16 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
17 : eq(12, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : eq(12, 10) : BOOL
20 : 207 { 0xcf -49 } : BV:8
21 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
22 : eq(12, 21) : BOOL
23 : 33 { 0x21 } : BV:8
24 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
28 : eq(12, 27) : BOOL
29 : 160 { 0xa0 -96 } : BV:8
30 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
33 : eq(12, 32) : BOOL
34 : 32 { 0x20 } : BV:8
35 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
36 : eq(12, 35) : BOOL
37 : 248 { 0xf8 -8 } : BV:8
38 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
39 : eq(12, 38) : BOOL
40 : 8 { 0x8 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(31, 26, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : ite(22, 23, 47) : BV:8
49 : ite(19, 20, 48) : BV:8
50 : ite(17, 18, 49) : BV:8
51 : ite(14, 15, 50) : BV:8
52 : bvadd(35, 11) : BV:32
53 : eq(52, 13) : BOOL
54 : eq(52, 16) : BOOL
55 : eq(52, 10) : BOOL
56 : eq(52, 21) : BOOL
57 : eq(52, 24) : BOOL
58 : eq(52, 27) : BOOL
59 : eq(52, 30) : BOOL
60 : eq(52, 32) : BOOL
61 : eq(52, 35) : BOOL
62 : eq(52, 38) : BOOL
63 : ite(62, 40, 41) : BV:8
64 : ite(61, 37, 63) : BV:8
65 : ite(60, 34, 64) : BV:8
66 : ite(59, 26, 65) : BV:8
67 : ite(58, 29, 66) : BV:8
68 : ite(57, 26, 67) : BV:8
69 : ite(56, 23, 68) : BV:8
70 : ite(55, 20, 69) : BV:8
71 : ite(54, 18, 70) : BV:8
72 : ite(53, 15, 71) : BV:8
73 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
74 : bvadd(73, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 10) : BOOL
78 : eq(74, 21) : BOOL
79 : eq(74, 24) : BOOL
80 : eq(74, 27) : BOOL
81 : eq(74, 30) : BOOL
82 : eq(74, 32) : BOOL
83 : eq(74, 35) : BOOL
84 : eq(74, 38) : BOOL
85 : ite(84, 40, 41) : BV:8
86 : ite(83, 37, 85) : BV:8
87 : ite(82, 34, 86) : BV:8
88 : ite(81, 26, 87) : BV:8
89 : ite(80, 29, 88) : BV:8
90 : ite(79, 26, 89) : BV:8
91 : ite(78, 23, 90) : BV:8
92 : ite(77, 20, 91) : BV:8
93 : ite(76, 18, 92) : BV:8
94 : ite(75, 15, 93) : BV:8
95 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
96 : bvadd(95, 11) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : eq(96, 35) : BOOL
106 : eq(96, 38) : BOOL
107 : ite(106, 40, 41) : BV:8
108 : ite(105, 37, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 26, 109) : BV:8
111 : ite(102, 29, 110) : BV:8
112 : ite(101, 26, 111) : BV:8
113 : ite(100, 23, 112) : BV:8
114 : ite(99, 20, 113) : BV:8
115 : ite(98, 18, 114) : BV:8
116 : ite(97, 15, 115) : BV:8
117 : bvconcat(51, 72, 94, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 10) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 30) : BOOL
126 : eq(118, 32) : BOOL
127 : eq(118, 35) : BOOL
128 : eq(118, 38) : BOOL
129 : ite(128, 40, 41) : BV:8
130 : ite(127, 37, 129) : BV:8
131 : ite(126, 34, 130) : BV:8
132 : ite(125, 26, 131) : BV:8
133 : ite(124, 29, 132) : BV:8
134 : ite(123, 26, 133) : BV:8
135 : ite(122, 23, 134) : BV:8
136 : ite(121, 20, 135) : BV:8
137 : ite(120, 18, 136) : BV:8
138 : ite(119, 15, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 9, 117) : BV:32
141 : eq(140, 13) : BOOL
142 : eq(140, 16) : BOOL
143 : eq(140, 10) : BOOL
144 : eq(140, 21) : BOOL
145 : eq(140, 24) : BOOL
146 : eq(140, 27) : BOOL
147 : eq(140, 30) : BOOL
148 : eq(140, 32) : BOOL
149 : eq(140, 35) : BOOL
150 : eq(140, 38) : BOOL
151 : ite(150, 40, 41) : BV:8
152 : ite(149, 37, 151) : BV:8
153 : ite(148, 34, 152) : BV:8
154 : ite(147, 26, 153) : BV:8
155 : ite(146, 29, 154) : BV:8
156 : ite(145, 26, 155) : BV:8
157 : ite(144, 23, 156) : BV:8
158 : ite(143, 20, 157) : BV:8
159 : ite(142, 18, 158) : BV:8
160 : ite(141, 15, 159) : BV:8
161 : 1 { 0x1 +1.11e129 } : BV:32
162 : bvadd(161, 9, 117) : BV:32
163 : eq(162, 13) : BOOL
164 : eq(162, 16) : BOOL
165 : eq(162, 10) : BOOL
166 : eq(162, 21) : BOOL
167 : eq(162, 24) : BOOL
168 : eq(162, 27) : BOOL
169 : eq(162, 30) : BOOL
170 : eq(162, 32) : BOOL
171 : eq(162, 35) : BOOL
172 : eq(162, 38) : BOOL
173 : ite(172, 40, 41) : BV:8
174 : ite(171, 37, 173) : BV:8
175 : ite(170, 34, 174) : BV:8
176 : ite(169, 26, 175) : BV:8
177 : ite(168, 29, 176) : BV:8
178 : ite(167, 26, 177) : BV:8
179 : ite(166, 23, 178) : BV:8
180 : ite(165, 20, 179) : BV:8
181 : ite(164, 18, 180) : BV:8
182 : ite(163, 15, 181) : BV:8
183 : bvadd(9, 117) : BV:32
184 : eq(183, 13) : BOOL
185 : eq(183, 16) : BOOL
186 : eq(183, 10) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 24) : BOOL
189 : eq(183, 27) : BOOL
190 : eq(183, 30) : BOOL
191 : eq(183, 32) : BOOL
192 : eq(183, 35) : BOOL
193 : eq(183, 38) : BOOL
194 : ite(193, 40, 41) : BV:8
195 : ite(192, 37, 194) : BV:8
196 : ite(191, 34, 195) : BV:8
197 : ite(190, 26, 196) : BV:8
198 : ite(189, 29, 197) : BV:8
199 : ite(188, 26, 198) : BV:8
200 : ite(187, 23, 199) : BV:8
201 : ite(186, 20, 200) : BV:8
202 : ite(185, 18, 201) : BV:8
203 : ite(184, 15, 202) : BV:8
204 : bvconcat(138, 160, 182, 203) : BV:32
205 : ite(6, 3, 204) : BV:32
206 : lambda(1, 2, 205) : FUNCTION[BV:32,BV:32 -> BV:32]
207 : sym_const(206) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda26628 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
11 : eq(9, 10) : BOOL
12 : 164 { 0xa4 -92 } : BV:8
13 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
17 : eq(9, 16) : BOOL
18 : 207 { 0xcf -49 } : BV:8
19 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
20 : eq(9, 19) : BOOL
21 : 33 { 0x21 } : BV:8
22 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
23 : eq(9, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
26 : eq(9, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : eq(9, 8) : BOOL
29 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
30 : eq(9, 29) : BOOL
31 : 32 { 0x20 } : BV:8
32 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
33 : eq(9, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
36 : eq(9, 35) : BOOL
37 : 8 { 0x8 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(28, 24, 41) : BV:8
43 : ite(26, 27, 42) : BV:8
44 : ite(23, 24, 43) : BV:8
45 : ite(20, 21, 44) : BV:8
46 : ite(17, 18, 45) : BV:8
47 : ite(14, 15, 46) : BV:8
48 : ite(11, 12, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 7, 8) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 13) : BOOL
53 : eq(50, 16) : BOOL
54 : eq(50, 19) : BOOL
55 : eq(50, 22) : BOOL
56 : eq(50, 25) : BOOL
57 : eq(50, 8) : BOOL
58 : eq(50, 29) : BOOL
59 : eq(50, 32) : BOOL
60 : eq(50, 35) : BOOL
61 : ite(60, 37, 38) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 24, 63) : BV:8
65 : ite(56, 27, 64) : BV:8
66 : ite(55, 24, 65) : BV:8
67 : ite(54, 21, 66) : BV:8
68 : ite(53, 18, 67) : BV:8
69 : ite(52, 15, 68) : BV:8
70 : ite(51, 12, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 7, 8) : BV:32
73 : eq(72, 10) : BOOL
74 : eq(72, 13) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : eq(72, 22) : BOOL
78 : eq(72, 25) : BOOL
79 : eq(72, 8) : BOOL
80 : eq(72, 29) : BOOL
81 : eq(72, 32) : BOOL
82 : eq(72, 35) : BOOL
83 : ite(82, 37, 38) : BV:8
84 : ite(81, 34, 83) : BV:8
85 : ite(80, 31, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 27, 86) : BV:8
88 : ite(77, 24, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 15, 90) : BV:8
92 : ite(73, 12, 91) : BV:8
93 : bvadd(7, 8) : BV:32
94 : eq(93, 10) : BOOL
95 : eq(93, 13) : BOOL
96 : eq(93, 16) : BOOL
97 : eq(93, 19) : BOOL
98 : eq(93, 22) : BOOL
99 : eq(93, 25) : BOOL
100 : eq(93, 8) : BOOL
101 : eq(93, 29) : BOOL
102 : eq(93, 32) : BOOL
103 : eq(93, 35) : BOOL
104 : ite(103, 37, 38) : BV:8
105 : ite(102, 34, 104) : BV:8
106 : ite(101, 31, 105) : BV:8
107 : ite(100, 24, 106) : BV:8
108 : ite(99, 27, 107) : BV:8
109 : ite(98, 24, 108) : BV:8
110 : ite(97, 21, 109) : BV:8
111 : ite(96, 18, 110) : BV:8
112 : ite(95, 15, 111) : BV:8
113 : ite(94, 12, 112) : BV:8
114 : bvconcat(48, 70, 92, 113) : BV:32
115 : ite(3, 4, 114) : BV:32
116 : lambda(1, 115) : FUNCTION[BV:32 -> BV:32]
117 : sym_const(116) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3489660928 { 0xd0000000 -805306368 -1.0e33 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1625653414 { 0x60e580a6 +1.79298853e66 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1996357672 { 0x76fe0028 +1.98437976e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1996357675 { 0x76fe002b +1.98438012e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4066516996 { 0xf2622004 -228450300 -1.76660203e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4066516999 { 0xf2622007 -228450297 -1.76660239e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2719025152 { 0xa2110800 -1575942144 -1.13305664e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2719025155 { 0xa2110803 -1575942141 -1.13305699e197 } : BV:32
=counter_example.random_seed
243962829
=counter_example_end
=global nodece 54 num_edges_traversed 4
=global nodece 54 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 55
=global nodece 55 nodece z3.ce11082.num_edges_traversed5
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce11082 c1a88fd701626e5a79f64331071cfaa
=input.spec-%var-x-1
1 : Lambda26663 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26666 : BV:32
18 : Lambda26664 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda26665 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
59 : bvmul(56, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
62 : eq(60, 61) : BOOL
63 : 164 { 0xa4 -92 } : BV:8
64 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
65 : eq(60, 64) : BOOL
66 : 16 { 0x10 } : BV:8
67 : eq(60, 58) : BOOL
68 : 207 { 0xcf -49 } : BV:8
69 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
70 : eq(60, 69) : BOOL
71 : 33 { 0x21 } : BV:8
72 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
73 : eq(60, 72) : BOOL
74 : 1 { 0x1 } : BV:8
75 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
76 : eq(60, 75) : BOOL
77 : 160 { 0xa0 -96 } : BV:8
78 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
79 : eq(60, 78) : BOOL
80 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
81 : eq(60, 80) : BOOL
82 : 32 { 0x20 } : BV:8
83 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
84 : eq(60, 83) : BOOL
85 : 248 { 0xf8 -8 } : BV:8
86 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
87 : eq(60, 86) : BOOL
88 : 8 { 0x8 } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 74, 92) : BV:8
94 : ite(76, 77, 93) : BV:8
95 : ite(73, 74, 94) : BV:8
96 : ite(70, 71, 95) : BV:8
97 : ite(67, 68, 96) : BV:8
98 : ite(65, 66, 97) : BV:8
99 : ite(62, 63, 98) : BV:8
100 : bvadd(83, 59) : BV:32
101 : eq(100, 61) : BOOL
102 : eq(100, 64) : BOOL
103 : eq(100, 58) : BOOL
104 : eq(100, 69) : BOOL
105 : eq(100, 72) : BOOL
106 : eq(100, 75) : BOOL
107 : eq(100, 78) : BOOL
108 : eq(100, 80) : BOOL
109 : eq(100, 83) : BOOL
110 : eq(100, 86) : BOOL
111 : ite(110, 88, 89) : BV:8
112 : ite(109, 85, 111) : BV:8
113 : ite(108, 82, 112) : BV:8
114 : ite(107, 74, 113) : BV:8
115 : ite(106, 77, 114) : BV:8
116 : ite(105, 74, 115) : BV:8
117 : ite(104, 71, 116) : BV:8
118 : ite(103, 68, 117) : BV:8
119 : ite(102, 66, 118) : BV:8
120 : ite(101, 63, 119) : BV:8
121 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
122 : bvadd(121, 59) : BV:32
123 : eq(122, 61) : BOOL
124 : eq(122, 64) : BOOL
125 : eq(122, 58) : BOOL
126 : eq(122, 69) : BOOL
127 : eq(122, 72) : BOOL
128 : eq(122, 75) : BOOL
129 : eq(122, 78) : BOOL
130 : eq(122, 80) : BOOL
131 : eq(122, 83) : BOOL
132 : eq(122, 86) : BOOL
133 : ite(132, 88, 89) : BV:8
134 : ite(131, 85, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 74, 135) : BV:8
137 : ite(128, 77, 136) : BV:8
138 : ite(127, 74, 137) : BV:8
139 : ite(126, 71, 138) : BV:8
140 : ite(125, 68, 139) : BV:8
141 : ite(124, 66, 140) : BV:8
142 : ite(123, 63, 141) : BV:8
143 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
144 : bvadd(143, 59) : BV:32
145 : eq(144, 61) : BOOL
146 : eq(144, 64) : BOOL
147 : eq(144, 58) : BOOL
148 : eq(144, 69) : BOOL
149 : eq(144, 72) : BOOL
150 : eq(144, 75) : BOOL
151 : eq(144, 78) : BOOL
152 : eq(144, 80) : BOOL
153 : eq(144, 83) : BOOL
154 : eq(144, 86) : BOOL
155 : ite(154, 88, 89) : BV:8
156 : ite(153, 85, 155) : BV:8
157 : ite(152, 82, 156) : BV:8
158 : ite(151, 74, 157) : BV:8
159 : ite(150, 77, 158) : BV:8
160 : ite(149, 74, 159) : BV:8
161 : ite(148, 71, 160) : BV:8
162 : ite(147, 68, 161) : BV:8
163 : ite(146, 66, 162) : BV:8
164 : ite(145, 63, 163) : BV:8
165 : bvconcat(99, 120, 142, 164) : BV:32
166 : bvadd(55, 57, 165) : BV:32
167 : eq(166, 61) : BOOL
168 : eq(166, 64) : BOOL
169 : eq(166, 58) : BOOL
170 : eq(166, 69) : BOOL
171 : eq(166, 72) : BOOL
172 : eq(166, 75) : BOOL
173 : eq(166, 78) : BOOL
174 : eq(166, 80) : BOOL
175 : eq(166, 83) : BOOL
176 : eq(166, 86) : BOOL
177 : ite(176, 88, 89) : BV:8
178 : ite(175, 85, 177) : BV:8
179 : ite(174, 82, 178) : BV:8
180 : ite(173, 74, 179) : BV:8
181 : ite(172, 77, 180) : BV:8
182 : ite(171, 74, 181) : BV:8
183 : ite(170, 71, 182) : BV:8
184 : ite(169, 68, 183) : BV:8
185 : ite(168, 66, 184) : BV:8
186 : ite(167, 63, 185) : BV:8
187 : bvadd(40, 57, 165) : BV:32
188 : eq(187, 61) : BOOL
189 : eq(187, 64) : BOOL
190 : eq(187, 58) : BOOL
191 : eq(187, 69) : BOOL
192 : eq(187, 72) : BOOL
193 : eq(187, 75) : BOOL
194 : eq(187, 78) : BOOL
195 : eq(187, 80) : BOOL
196 : eq(187, 83) : BOOL
197 : eq(187, 86) : BOOL
198 : ite(197, 88, 89) : BV:8
199 : ite(196, 85, 198) : BV:8
200 : ite(195, 82, 199) : BV:8
201 : ite(194, 74, 200) : BV:8
202 : ite(193, 77, 201) : BV:8
203 : ite(192, 74, 202) : BV:8
204 : ite(191, 71, 203) : BV:8
205 : ite(190, 68, 204) : BV:8
206 : ite(189, 66, 205) : BV:8
207 : ite(188, 63, 206) : BV:8
208 : bvadd(36, 57, 165) : BV:32
209 : eq(208, 61) : BOOL
210 : eq(208, 64) : BOOL
211 : eq(208, 58) : BOOL
212 : eq(208, 69) : BOOL
213 : eq(208, 72) : BOOL
214 : eq(208, 75) : BOOL
215 : eq(208, 78) : BOOL
216 : eq(208, 80) : BOOL
217 : eq(208, 83) : BOOL
218 : eq(208, 86) : BOOL
219 : ite(218, 88, 89) : BV:8
220 : ite(217, 85, 219) : BV:8
221 : ite(216, 82, 220) : BV:8
222 : ite(215, 74, 221) : BV:8
223 : ite(214, 77, 222) : BV:8
224 : ite(213, 74, 223) : BV:8
225 : ite(212, 71, 224) : BV:8
226 : ite(211, 68, 225) : BV:8
227 : ite(210, 66, 226) : BV:8
228 : ite(209, 63, 227) : BV:8
229 : bvadd(57, 165) : BV:32
230 : eq(229, 61) : BOOL
231 : eq(229, 64) : BOOL
232 : eq(229, 58) : BOOL
233 : eq(229, 69) : BOOL
234 : eq(229, 72) : BOOL
235 : eq(229, 75) : BOOL
236 : eq(229, 78) : BOOL
237 : eq(229, 80) : BOOL
238 : eq(229, 83) : BOOL
239 : eq(229, 86) : BOOL
240 : ite(239, 88, 89) : BV:8
241 : ite(238, 85, 240) : BV:8
242 : ite(237, 82, 241) : BV:8
243 : ite(236, 74, 242) : BV:8
244 : ite(235, 77, 243) : BV:8
245 : ite(234, 74, 244) : BV:8
246 : ite(233, 71, 245) : BV:8
247 : ite(232, 68, 246) : BV:8
248 : ite(231, 66, 247) : BV:8
249 : ite(230, 63, 248) : BV:8
250 : bvconcat(186, 207, 228, 249) : BV:32
251 : ite(54, 2, 250) : BV:32
252 : lambda(51, 251) : FUNCTION[BV:32 -> BV:32]
253 : map(50, 252) : MAP[BV:32 -> BV:32]
254 : lambda(17, 253) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
255 : map(16, 254) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
256 : sym_const(255) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 3489660929 { 0xd0000001 -805306367 -1.11e33 } : BV:32
=input.dst.llvm-%x
1 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
=input.dst.llvm-%n
1 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1585451141 ] -> 0, [ 1585451142; 1585451142 ] -> 248, [ 1585451143; 1585451143 ] -> 207, [ 1585451144; 2659192959 ] -> 0, [ 2659192960; 2659192960 ] -> 164, [ 2659192961; 2659192961 ] -> 8, [ 2659192962; 2659192962 ] -> 33, [ 2659192963; 2659192963 ] -> 160, [ 2659192964; 2686519459 ] -> 0, [ 2686519460; 2686519461 ] -> 1, [ 2686519462; 2686519462 ] -> 16, [ 2686519463; 2686519463 ] -> 32, [ 2686519464; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1996357671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1996357672; 1996357675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1996357676; 2719025151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2719025152; 2719025155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2719025156; 4066516995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4066516996; 4066516999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4066517000; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4066516996 { 0xf2622004 -228450300 -1.76660203e101 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2719025152 { 0xa2110800 -1575942144 -1.13305664e197 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1996357672 { 0x76fe0028 +1.98437976e110 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26670 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26673 : BV:32
18 : Lambda26671 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda26672 : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(22, 27) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
78 : bvmul(75, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
81 : eq(79, 80) : BOOL
82 : 164 { 0xa4 -92 } : BV:8
83 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
84 : eq(79, 83) : BOOL
85 : 16 { 0x10 } : BV:8
86 : eq(79, 77) : BOOL
87 : 207 { 0xcf -49 } : BV:8
88 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
89 : eq(79, 88) : BOOL
90 : 33 { 0x21 } : BV:8
91 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
92 : eq(79, 91) : BOOL
93 : 1 { 0x1 } : BV:8
94 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
95 : eq(79, 94) : BOOL
96 : 160 { 0xa0 -96 } : BV:8
97 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
98 : eq(79, 97) : BOOL
99 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
100 : eq(79, 99) : BOOL
101 : 32 { 0x20 } : BV:8
102 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
103 : eq(79, 102) : BOOL
104 : 248 { 0xf8 -8 } : BV:8
105 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
106 : eq(79, 105) : BOOL
107 : 8 { 0x8 } : BV:8
108 : 0 { 0x0 } : BV:8
109 : ite(106, 107, 108) : BV:8
110 : ite(103, 104, 109) : BV:8
111 : ite(100, 101, 110) : BV:8
112 : ite(98, 93, 111) : BV:8
113 : ite(95, 96, 112) : BV:8
114 : ite(92, 93, 113) : BV:8
115 : ite(89, 90, 114) : BV:8
116 : ite(86, 87, 115) : BV:8
117 : ite(84, 85, 116) : BV:8
118 : ite(81, 82, 117) : BV:8
119 : bvadd(102, 78) : BV:32
120 : eq(119, 80) : BOOL
121 : eq(119, 83) : BOOL
122 : eq(119, 77) : BOOL
123 : eq(119, 88) : BOOL
124 : eq(119, 91) : BOOL
125 : eq(119, 94) : BOOL
126 : eq(119, 97) : BOOL
127 : eq(119, 99) : BOOL
128 : eq(119, 102) : BOOL
129 : eq(119, 105) : BOOL
130 : ite(129, 107, 108) : BV:8
131 : ite(128, 104, 130) : BV:8
132 : ite(127, 101, 131) : BV:8
133 : ite(126, 93, 132) : BV:8
134 : ite(125, 96, 133) : BV:8
135 : ite(124, 93, 134) : BV:8
136 : ite(123, 90, 135) : BV:8
137 : ite(122, 87, 136) : BV:8
138 : ite(121, 85, 137) : BV:8
139 : ite(120, 82, 138) : BV:8
140 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
141 : bvadd(140, 78) : BV:32
142 : eq(141, 80) : BOOL
143 : eq(141, 83) : BOOL
144 : eq(141, 77) : BOOL
145 : eq(141, 88) : BOOL
146 : eq(141, 91) : BOOL
147 : eq(141, 94) : BOOL
148 : eq(141, 97) : BOOL
149 : eq(141, 99) : BOOL
150 : eq(141, 102) : BOOL
151 : eq(141, 105) : BOOL
152 : ite(151, 107, 108) : BV:8
153 : ite(150, 104, 152) : BV:8
154 : ite(149, 101, 153) : BV:8
155 : ite(148, 93, 154) : BV:8
156 : ite(147, 96, 155) : BV:8
157 : ite(146, 93, 156) : BV:8
158 : ite(145, 90, 157) : BV:8
159 : ite(144, 87, 158) : BV:8
160 : ite(143, 85, 159) : BV:8
161 : ite(142, 82, 160) : BV:8
162 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
163 : bvadd(162, 78) : BV:32
164 : eq(163, 80) : BOOL
165 : eq(163, 83) : BOOL
166 : eq(163, 77) : BOOL
167 : eq(163, 88) : BOOL
168 : eq(163, 91) : BOOL
169 : eq(163, 94) : BOOL
170 : eq(163, 97) : BOOL
171 : eq(163, 99) : BOOL
172 : eq(163, 102) : BOOL
173 : eq(163, 105) : BOOL
174 : ite(173, 107, 108) : BV:8
175 : ite(172, 104, 174) : BV:8
176 : ite(171, 101, 175) : BV:8
177 : ite(170, 93, 176) : BV:8
178 : ite(169, 96, 177) : BV:8
179 : ite(168, 93, 178) : BV:8
180 : ite(167, 90, 179) : BV:8
181 : ite(166, 87, 180) : BV:8
182 : ite(165, 85, 181) : BV:8
183 : ite(164, 82, 182) : BV:8
184 : bvconcat(118, 139, 161, 183) : BV:32
185 : bvadd(74, 76, 184) : BV:32
186 : eq(185, 80) : BOOL
187 : eq(185, 83) : BOOL
188 : eq(185, 77) : BOOL
189 : eq(185, 88) : BOOL
190 : eq(185, 91) : BOOL
191 : eq(185, 94) : BOOL
192 : eq(185, 97) : BOOL
193 : eq(185, 99) : BOOL
194 : eq(185, 102) : BOOL
195 : eq(185, 105) : BOOL
196 : ite(195, 107, 108) : BV:8
197 : ite(194, 104, 196) : BV:8
198 : ite(193, 101, 197) : BV:8
199 : ite(192, 93, 198) : BV:8
200 : ite(191, 96, 199) : BV:8
201 : ite(190, 93, 200) : BV:8
202 : ite(189, 90, 201) : BV:8
203 : ite(188, 87, 202) : BV:8
204 : ite(187, 85, 203) : BV:8
205 : ite(186, 82, 204) : BV:8
206 : bvadd(40, 76, 184) : BV:32
207 : eq(206, 80) : BOOL
208 : eq(206, 83) : BOOL
209 : eq(206, 77) : BOOL
210 : eq(206, 88) : BOOL
211 : eq(206, 91) : BOOL
212 : eq(206, 94) : BOOL
213 : eq(206, 97) : BOOL
214 : eq(206, 99) : BOOL
215 : eq(206, 102) : BOOL
216 : eq(206, 105) : BOOL
217 : ite(216, 107, 108) : BV:8
218 : ite(215, 104, 217) : BV:8
219 : ite(214, 101, 218) : BV:8
220 : ite(213, 93, 219) : BV:8
221 : ite(212, 96, 220) : BV:8
222 : ite(211, 93, 221) : BV:8
223 : ite(210, 90, 222) : BV:8
224 : ite(209, 87, 223) : BV:8
225 : ite(208, 85, 224) : BV:8
226 : ite(207, 82, 225) : BV:8
227 : bvadd(36, 76, 184) : BV:32
228 : eq(227, 80) : BOOL
229 : eq(227, 83) : BOOL
230 : eq(227, 77) : BOOL
231 : eq(227, 88) : BOOL
232 : eq(227, 91) : BOOL
233 : eq(227, 94) : BOOL
234 : eq(227, 97) : BOOL
235 : eq(227, 99) : BOOL
236 : eq(227, 102) : BOOL
237 : eq(227, 105) : BOOL
238 : ite(237, 107, 108) : BV:8
239 : ite(236, 104, 238) : BV:8
240 : ite(235, 101, 239) : BV:8
241 : ite(234, 93, 240) : BV:8
242 : ite(233, 96, 241) : BV:8
243 : ite(232, 93, 242) : BV:8
244 : ite(231, 90, 243) : BV:8
245 : ite(230, 87, 244) : BV:8
246 : ite(229, 85, 245) : BV:8
247 : ite(228, 82, 246) : BV:8
248 : bvadd(76, 184) : BV:32
249 : eq(248, 80) : BOOL
250 : eq(248, 83) : BOOL
251 : eq(248, 77) : BOOL
252 : eq(248, 88) : BOOL
253 : eq(248, 91) : BOOL
254 : eq(248, 94) : BOOL
255 : eq(248, 97) : BOOL
256 : eq(248, 99) : BOOL
257 : eq(248, 102) : BOOL
258 : eq(248, 105) : BOOL
259 : ite(258, 107, 108) : BV:8
260 : ite(257, 104, 259) : BV:8
261 : ite(256, 101, 260) : BV:8
262 : ite(255, 93, 261) : BV:8
263 : ite(254, 96, 262) : BV:8
264 : ite(253, 93, 263) : BV:8
265 : ite(252, 90, 264) : BV:8
266 : ite(251, 87, 265) : BV:8
267 : ite(250, 85, 266) : BV:8
268 : ite(249, 82, 267) : BV:8
269 : bvconcat(205, 226, 247, 268) : BV:32
270 : ite(54, 2, 269) : BV:32
271 : ite(73, 270, 269) : BV:32
272 : ite(54, 2, 271) : BV:32
273 : lambda(51, 272) : FUNCTION[BV:32 -> BV:32]
274 : map(50, 273) : MAP[BV:32 -> BV:32]
275 : lambda(17, 274) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
276 : map(16, 275) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
277 : sym_const(276) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 417055843 { 0x18dbc463 +1.71693074e178 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 3779543915 ] -> true, [ 3779543916; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3779543915 ] -> true, [ 3779543916; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26612 : BV:32
2 : Lambda26613 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26617 : BV:32
2 : Lambda26618 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
51 : bvmul(48, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
54 : eq(52, 53) : BOOL
55 : 164 { 0xa4 -92 } : BV:8
56 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
57 : eq(52, 56) : BOOL
58 : 16 { 0x10 } : BV:8
59 : eq(52, 50) : BOOL
60 : 207 { 0xcf -49 } : BV:8
61 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
62 : eq(52, 61) : BOOL
63 : 33 { 0x21 } : BV:8
64 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
65 : eq(52, 64) : BOOL
66 : 1 { 0x1 } : BV:8
67 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
68 : eq(52, 67) : BOOL
69 : 160 { 0xa0 -96 } : BV:8
70 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
71 : eq(52, 70) : BOOL
72 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
73 : eq(52, 72) : BOOL
74 : 32 { 0x20 } : BV:8
75 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
76 : eq(52, 75) : BOOL
77 : 248 { 0xf8 -8 } : BV:8
78 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
79 : eq(52, 78) : BOOL
80 : 8 { 0x8 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(71, 66, 84) : BV:8
86 : ite(68, 69, 85) : BV:8
87 : ite(65, 66, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : ite(59, 60, 88) : BV:8
90 : ite(57, 58, 89) : BV:8
91 : ite(54, 55, 90) : BV:8
92 : bvadd(75, 51) : BV:32
93 : eq(92, 53) : BOOL
94 : eq(92, 56) : BOOL
95 : eq(92, 50) : BOOL
96 : eq(92, 61) : BOOL
97 : eq(92, 64) : BOOL
98 : eq(92, 67) : BOOL
99 : eq(92, 70) : BOOL
100 : eq(92, 72) : BOOL
101 : eq(92, 75) : BOOL
102 : eq(92, 78) : BOOL
103 : ite(102, 80, 81) : BV:8
104 : ite(101, 77, 103) : BV:8
105 : ite(100, 74, 104) : BV:8
106 : ite(99, 66, 105) : BV:8
107 : ite(98, 69, 106) : BV:8
108 : ite(97, 66, 107) : BV:8
109 : ite(96, 63, 108) : BV:8
110 : ite(95, 60, 109) : BV:8
111 : ite(94, 58, 110) : BV:8
112 : ite(93, 55, 111) : BV:8
113 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
114 : bvadd(113, 51) : BV:32
115 : eq(114, 53) : BOOL
116 : eq(114, 56) : BOOL
117 : eq(114, 50) : BOOL
118 : eq(114, 61) : BOOL
119 : eq(114, 64) : BOOL
120 : eq(114, 67) : BOOL
121 : eq(114, 70) : BOOL
122 : eq(114, 72) : BOOL
123 : eq(114, 75) : BOOL
124 : eq(114, 78) : BOOL
125 : ite(124, 80, 81) : BV:8
126 : ite(123, 77, 125) : BV:8
127 : ite(122, 74, 126) : BV:8
128 : ite(121, 66, 127) : BV:8
129 : ite(120, 69, 128) : BV:8
130 : ite(119, 66, 129) : BV:8
131 : ite(118, 63, 130) : BV:8
132 : ite(117, 60, 131) : BV:8
133 : ite(116, 58, 132) : BV:8
134 : ite(115, 55, 133) : BV:8
135 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
136 : bvadd(135, 51) : BV:32
137 : eq(136, 53) : BOOL
138 : eq(136, 56) : BOOL
139 : eq(136, 50) : BOOL
140 : eq(136, 61) : BOOL
141 : eq(136, 64) : BOOL
142 : eq(136, 67) : BOOL
143 : eq(136, 70) : BOOL
144 : eq(136, 72) : BOOL
145 : eq(136, 75) : BOOL
146 : eq(136, 78) : BOOL
147 : ite(146, 80, 81) : BV:8
148 : ite(145, 77, 147) : BV:8
149 : ite(144, 74, 148) : BV:8
150 : ite(143, 66, 149) : BV:8
151 : ite(142, 69, 150) : BV:8
152 : ite(141, 66, 151) : BV:8
153 : ite(140, 63, 152) : BV:8
154 : ite(139, 60, 153) : BV:8
155 : ite(138, 58, 154) : BV:8
156 : ite(137, 55, 155) : BV:8
157 : bvconcat(91, 112, 134, 156) : BV:32
158 : bvadd(47, 49, 157) : BV:32
159 : eq(158, 53) : BOOL
160 : eq(158, 56) : BOOL
161 : eq(158, 50) : BOOL
162 : eq(158, 61) : BOOL
163 : eq(158, 64) : BOOL
164 : eq(158, 67) : BOOL
165 : eq(158, 70) : BOOL
166 : eq(158, 72) : BOOL
167 : eq(158, 75) : BOOL
168 : eq(158, 78) : BOOL
169 : ite(168, 80, 81) : BV:8
170 : ite(167, 77, 169) : BV:8
171 : ite(166, 74, 170) : BV:8
172 : ite(165, 66, 171) : BV:8
173 : ite(164, 69, 172) : BV:8
174 : ite(163, 66, 173) : BV:8
175 : ite(162, 63, 174) : BV:8
176 : ite(161, 60, 175) : BV:8
177 : ite(160, 58, 176) : BV:8
178 : ite(159, 55, 177) : BV:8
179 : bvadd(36, 49, 157) : BV:32
180 : eq(179, 53) : BOOL
181 : eq(179, 56) : BOOL
182 : eq(179, 50) : BOOL
183 : eq(179, 61) : BOOL
184 : eq(179, 64) : BOOL
185 : eq(179, 67) : BOOL
186 : eq(179, 70) : BOOL
187 : eq(179, 72) : BOOL
188 : eq(179, 75) : BOOL
189 : eq(179, 78) : BOOL
190 : ite(189, 80, 81) : BV:8
191 : ite(188, 77, 190) : BV:8
192 : ite(187, 74, 191) : BV:8
193 : ite(186, 66, 192) : BV:8
194 : ite(185, 69, 193) : BV:8
195 : ite(184, 66, 194) : BV:8
196 : ite(183, 63, 195) : BV:8
197 : ite(182, 60, 196) : BV:8
198 : ite(181, 58, 197) : BV:8
199 : ite(180, 55, 198) : BV:8
200 : bvadd(32, 49, 157) : BV:32
201 : eq(200, 53) : BOOL
202 : eq(200, 56) : BOOL
203 : eq(200, 50) : BOOL
204 : eq(200, 61) : BOOL
205 : eq(200, 64) : BOOL
206 : eq(200, 67) : BOOL
207 : eq(200, 70) : BOOL
208 : eq(200, 72) : BOOL
209 : eq(200, 75) : BOOL
210 : eq(200, 78) : BOOL
211 : ite(210, 80, 81) : BV:8
212 : ite(209, 77, 211) : BV:8
213 : ite(208, 74, 212) : BV:8
214 : ite(207, 66, 213) : BV:8
215 : ite(206, 69, 214) : BV:8
216 : ite(205, 66, 215) : BV:8
217 : ite(204, 63, 216) : BV:8
218 : ite(203, 60, 217) : BV:8
219 : ite(202, 58, 218) : BV:8
220 : ite(201, 55, 219) : BV:8
221 : bvadd(49, 157) : BV:32
222 : eq(221, 53) : BOOL
223 : eq(221, 56) : BOOL
224 : eq(221, 50) : BOOL
225 : eq(221, 61) : BOOL
226 : eq(221, 64) : BOOL
227 : eq(221, 67) : BOOL
228 : eq(221, 70) : BOOL
229 : eq(221, 72) : BOOL
230 : eq(221, 75) : BOOL
231 : eq(221, 78) : BOOL
232 : ite(231, 80, 81) : BV:8
233 : ite(230, 77, 232) : BV:8
234 : ite(229, 74, 233) : BV:8
235 : ite(228, 66, 234) : BV:8
236 : ite(227, 69, 235) : BV:8
237 : ite(226, 66, 236) : BV:8
238 : ite(225, 63, 237) : BV:8
239 : ite(224, 60, 238) : BV:8
240 : ite(223, 58, 239) : BV:8
241 : ite(222, 55, 240) : BV:8
242 : bvconcat(178, 199, 220, 241) : BV:32
243 : ite(6, 3, 242) : BV:32
244 : ite(46, 243, 242) : BV:32
245 : ite(6, 3, 244) : BV:32
246 : lambda(1, 2, 245) : FUNCTION[BV:32,BV:32 -> BV:32]
247 : sym_const(246) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26619 : BV:32
2 : Lambda26620 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3779543915 { 0xe147436b -515423381 -1.55674493e67 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3779543916 { 0xe147436c -515423380 -1.55674505e67 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3779543917 { 0xe147436d -515423379 -1.55674517e67 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26623 : BV:32
2 : Lambda26624 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
14 : eq(12, 13) : BOOL
15 : 164 { 0xa4 -92 } : BV:8
16 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
17 : eq(12, 16) : BOOL
18 : 16 { 0x10 } : BV:8
19 : eq(12, 10) : BOOL
20 : 207 { 0xcf -49 } : BV:8
21 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
22 : eq(12, 21) : BOOL
23 : 33 { 0x21 } : BV:8
24 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
25 : eq(12, 24) : BOOL
26 : 1 { 0x1 } : BV:8
27 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
28 : eq(12, 27) : BOOL
29 : 160 { 0xa0 -96 } : BV:8
30 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
31 : eq(12, 30) : BOOL
32 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
33 : eq(12, 32) : BOOL
34 : 32 { 0x20 } : BV:8
35 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
36 : eq(12, 35) : BOOL
37 : 248 { 0xf8 -8 } : BV:8
38 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
39 : eq(12, 38) : BOOL
40 : 8 { 0x8 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(33, 34, 43) : BV:8
45 : ite(31, 26, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : ite(22, 23, 47) : BV:8
49 : ite(19, 20, 48) : BV:8
50 : ite(17, 18, 49) : BV:8
51 : ite(14, 15, 50) : BV:8
52 : bvadd(35, 11) : BV:32
53 : eq(52, 13) : BOOL
54 : eq(52, 16) : BOOL
55 : eq(52, 10) : BOOL
56 : eq(52, 21) : BOOL
57 : eq(52, 24) : BOOL
58 : eq(52, 27) : BOOL
59 : eq(52, 30) : BOOL
60 : eq(52, 32) : BOOL
61 : eq(52, 35) : BOOL
62 : eq(52, 38) : BOOL
63 : ite(62, 40, 41) : BV:8
64 : ite(61, 37, 63) : BV:8
65 : ite(60, 34, 64) : BV:8
66 : ite(59, 26, 65) : BV:8
67 : ite(58, 29, 66) : BV:8
68 : ite(57, 26, 67) : BV:8
69 : ite(56, 23, 68) : BV:8
70 : ite(55, 20, 69) : BV:8
71 : ite(54, 18, 70) : BV:8
72 : ite(53, 15, 71) : BV:8
73 : 1585451141 { 0x5e801085 +1.50413e62 } : BV:32
74 : bvadd(73, 11) : BV:32
75 : eq(74, 13) : BOOL
76 : eq(74, 16) : BOOL
77 : eq(74, 10) : BOOL
78 : eq(74, 21) : BOOL
79 : eq(74, 24) : BOOL
80 : eq(74, 27) : BOOL
81 : eq(74, 30) : BOOL
82 : eq(74, 32) : BOOL
83 : eq(74, 35) : BOOL
84 : eq(74, 38) : BOOL
85 : ite(84, 40, 41) : BV:8
86 : ite(83, 37, 85) : BV:8
87 : ite(82, 34, 86) : BV:8
88 : ite(81, 26, 87) : BV:8
89 : ite(80, 29, 88) : BV:8
90 : ite(79, 26, 89) : BV:8
91 : ite(78, 23, 90) : BV:8
92 : ite(77, 20, 91) : BV:8
93 : ite(76, 18, 92) : BV:8
94 : ite(75, 15, 93) : BV:8
95 : 1585451140 { 0x5e801084 +1.50401e62 } : BV:32
96 : bvadd(95, 11) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : eq(96, 35) : BOOL
106 : eq(96, 38) : BOOL
107 : ite(106, 40, 41) : BV:8
108 : ite(105, 37, 107) : BV:8
109 : ite(104, 34, 108) : BV:8
110 : ite(103, 26, 109) : BV:8
111 : ite(102, 29, 110) : BV:8
112 : ite(101, 26, 111) : BV:8
113 : ite(100, 23, 112) : BV:8
114 : ite(99, 20, 113) : BV:8
115 : ite(98, 18, 114) : BV:8
116 : ite(97, 15, 115) : BV:8
117 : bvconcat(51, 72, 94, 116) : BV:32
118 : bvadd(7, 9, 117) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 10) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : eq(118, 30) : BOOL
126 : eq(118, 32) : BOOL
127 : eq(118, 35) : BOOL
128 : eq(118, 38) : BOOL
129 : ite(128, 40, 41) : BV:8
130 : ite(127, 37, 129) : BV:8
131 : ite(126, 34, 130) : BV:8
132 : ite(125, 26, 131) : BV:8
133 : ite(124, 29, 132) : BV:8
134 : ite(123, 26, 133) : BV:8
135 : ite(122, 23, 134) : BV:8
136 : ite(121, 20, 135) : BV:8
137 : ite(120, 18, 136) : BV:8
138 : ite(119, 15, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 9, 117) : BV:32
141 : eq(140, 13) : BOOL
142 : eq(140, 16) : BOOL
143 : eq(140, 10) : BOOL
144 : eq(140, 21) : BOOL
145 : eq(140, 24) : BOOL
146 : eq(140, 27) : BOOL
147 : eq(140, 30) : BOOL
148 : eq(140, 32) : BOOL
149 : eq(140, 35) : BOOL
150 : eq(140, 38) : BOOL
151 : ite(150, 40, 41) : BV:8
152 : ite(149, 37, 151) : BV:8
153 : ite(148, 34, 152) : BV:8
154 : ite(147, 26, 153) : BV:8
155 : ite(146, 29, 154) : BV:8
156 : ite(145, 26, 155) : BV:8
157 : ite(144, 23, 156) : BV:8
158 : ite(143, 20, 157) : BV:8
159 : ite(142, 18, 158) : BV:8
160 : ite(141, 15, 159) : BV:8
161 : 1 { 0x1 +1.11e129 } : BV:32
162 : bvadd(161, 9, 117) : BV:32
163 : eq(162, 13) : BOOL
164 : eq(162, 16) : BOOL
165 : eq(162, 10) : BOOL
166 : eq(162, 21) : BOOL
167 : eq(162, 24) : BOOL
168 : eq(162, 27) : BOOL
169 : eq(162, 30) : BOOL
170 : eq(162, 32) : BOOL
171 : eq(162, 35) : BOOL
172 : eq(162, 38) : BOOL
173 : ite(172, 40, 41) : BV:8
174 : ite(171, 37, 173) : BV:8
175 : ite(170, 34, 174) : BV:8
176 : ite(169, 26, 175) : BV:8
177 : ite(168, 29, 176) : BV:8
178 : ite(167, 26, 177) : BV:8
179 : ite(166, 23, 178) : BV:8
180 : ite(165, 20, 179) : BV:8
181 : ite(164, 18, 180) : BV:8
182 : ite(163, 15, 181) : BV:8
183 : bvadd(9, 117) : BV:32
184 : eq(183, 13) : BOOL
185 : eq(183, 16) : BOOL
186 : eq(183, 10) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 24) : BOOL
189 : eq(183, 27) : BOOL
190 : eq(183, 30) : BOOL
191 : eq(183, 32) : BOOL
192 : eq(183, 35) : BOOL
193 : eq(183, 38) : BOOL
194 : ite(193, 40, 41) : BV:8
195 : ite(192, 37, 194) : BV:8
196 : ite(191, 34, 195) : BV:8
197 : ite(190, 26, 196) : BV:8
198 : ite(189, 29, 197) : BV:8
199 : ite(188, 26, 198) : BV:8
200 : ite(187, 23, 199) : BV:8
201 : ite(186, 20, 200) : BV:8
202 : ite(185, 18, 201) : BV:8
203 : ite(184, 15, 202) : BV:8
204 : bvconcat(138, 160, 182, 203) : BV:32
205 : ite(6, 3, 204) : BV:32
206 : lambda(1, 2, 205) : FUNCTION[BV:32,BV:32 -> BV:32]
207 : sym_const(206) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda26628 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2686519460 { 0xa02108a4 -1608447836 -1.25807619e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 2659192960 { 0x9e801080 -1635774336 -1.50354e190 } : BV:32
11 : eq(9, 10) : BOOL
12 : 164 { 0xa4 -92 } : BV:8
13 : 2686519462 { 0xa02108a6 -1608447834 -1.25807642e193 } : BV:32
14 : eq(9, 13) : BOOL
15 : 16 { 0x10 } : BV:8
16 : 1585451143 { 0x5e801087 +1.50437e62 } : BV:32
17 : eq(9, 16) : BOOL
18 : 207 { 0xcf -49 } : BV:8
19 : 2659192962 { 0x9e801082 -1635774334 -1.50377e190 } : BV:32
20 : eq(9, 19) : BOOL
21 : 33 { 0x21 } : BV:8
22 : 2686519461 { 0xa02108a5 -1608447835 -1.25807631e193 } : BV:32
23 : eq(9, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 2659192963 { 0x9e801083 -1635774333 -1.50389e190 } : BV:32
26 : eq(9, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : eq(9, 8) : BOOL
29 : 2686519463 { 0xa02108a7 -1608447833 -1.25807654e193 } : BV:32
30 : eq(9, 29) : BOOL
31 : 32 { 0x20 } : BV:8
32 : 1585451142 { 0x5e801086 +1.50425e62 } : BV:32
33 : eq(9, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : 2659192961 { 0x9e801081 -1635774335 -1.50365e190 } : BV:32
36 : eq(9, 35) : BOOL
37 : 8 { 0x8 } : BV:8
38 : 0 { 0x0 } : BV:8
39 : ite(36, 37, 38) : BV:8
40 : ite(33, 34, 39) : BV:8
41 : ite(30, 31, 40) : BV:8
42 : ite(28, 24, 41) : BV:8
43 : ite(26, 27, 42) : BV:8
44 : ite(23, 24, 43) : BV:8
45 : ite(20, 21, 44) : BV:8
46 : ite(17, 18, 45) : BV:8
47 : ite(14, 15, 46) : BV:8
48 : ite(11, 12, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 7, 8) : BV:32
51 : eq(50, 10) : BOOL
52 : eq(50, 13) : BOOL
53 : eq(50, 16) : BOOL
54 : eq(50, 19) : BOOL
55 : eq(50, 22) : BOOL
56 : eq(50, 25) : BOOL
57 : eq(50, 8) : BOOL
58 : eq(50, 29) : BOOL
59 : eq(50, 32) : BOOL
60 : eq(50, 35) : BOOL
61 : ite(60, 37, 38) : BV:8
62 : ite(59, 34, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 24, 63) : BV:8
65 : ite(56, 27, 64) : BV:8
66 : ite(55, 24, 65) : BV:8
67 : ite(54, 21, 66) : BV:8
68 : ite(53, 18, 67) : BV:8
69 : ite(52, 15, 68) : BV:8
70 : ite(51, 12, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 7, 8) : BV:32
73 : eq(72, 10) : BOOL
74 : eq(72, 13) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : eq(72, 22) : BOOL
78 : eq(72, 25) : BOOL
79 : eq(72, 8) : BOOL
80 : eq(72, 29) : BOOL
81 : eq(72, 32) : BOOL
82 : eq(72, 35) : BOOL
83 : ite(82, 37, 38) : BV:8
84 : ite(81, 34, 83) : BV:8
85 : ite(80, 31, 84) : BV:8
86 : ite(79, 24, 85) : BV:8
87 : ite(78, 27, 86) : BV:8
88 : ite(77, 24, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 18, 89) : BV:8
91 : ite(74, 15, 90) : BV:8
92 : ite(73, 12, 91) : BV:8
93 : bvadd(7, 8) : BV:32
94 : eq(93, 10) : BOOL
95 : eq(93, 13) : BOOL
96 : eq(93, 16) : BOOL
97 : eq(93, 19) : BOOL
98 : eq(93, 22) : BOOL
99 : eq(93, 25) : BOOL
100 : eq(93, 8) : BOOL
101 : eq(93, 29) : BOOL
102 : eq(93, 32) : BOOL
103 : eq(93, 35) : BOOL
104 : ite(103, 37, 38) : BV:8
105 : ite(102, 34, 104) : BV:8
106 : ite(101, 31, 105) : BV:8
107 : ite(100, 24, 106) : BV:8
108 : ite(99, 27, 107) : BV:8
109 : ite(98, 24, 108) : BV:8
110 : ite(97, 21, 109) : BV:8
111 : ite(96, 18, 110) : BV:8
112 : ite(95, 15, 111) : BV:8
113 : ite(94, 12, 112) : BV:8
114 : bvconcat(48, 70, 92, 113) : BV:32
115 : ite(3, 4, 114) : BV:32
116 : lambda(1, 115) : FUNCTION[BV:32 -> BV:32]
117 : sym_const(116) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3489660929 { 0xd0000001 -805306367 -1.11e33 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 537919745 { 0x20100101 +1.12503063e193 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1625653415 { 0x60e580a7 +1.79298865e66 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1996357672 { 0x76fe0028 +1.98437976e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1996357675 { 0x76fe002b +1.98438012e110 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4066516996 { 0xf2622004 -228450300 -1.76660203e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4066516999 { 0xf2622007 -228450297 -1.76660239e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2719025152 { 0xa2110800 -1575942144 -1.13305664e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2719025155 { 0xa2110803 -1575942141 -1.13305699e197 } : BV:32
=counter_example.random_seed
243962829
=counter_example_end
=global nodece 55 num_edges_traversed 5
=global nodece 55 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 56
=global nodece 56 nodece z3.ce11150.num_edges_traversed1
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce11150 12222ed1cd66249ee6bbcccfe2d2f260
=input.spec-%var-x-1
1 : Lambda26940 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26943 : BV:32
18 : Lambda26941 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26942 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
63 : eq(61, 62) : BOOL
64 : 156 { 0x9c -100 } : BV:8
65 : eq(61, 59) : BOOL
66 : 253 { 0xfd -3 } : BV:8
67 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
68 : eq(61, 67) : BOOL
69 : 252 { 0xfc -4 } : BV:8
70 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
71 : eq(61, 70) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
74 : eq(61, 73) : BOOL
75 : 167 { 0xa7 -89 } : BV:8
76 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
77 : eq(61, 76) : BOOL
78 : 125 { 0x7d } : BV:8
79 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
80 : eq(61, 79) : BOOL
81 : 246 { 0xf6 -10 } : BV:8
82 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
83 : eq(61, 82) : BOOL
84 : 232 { 0xe8 -24 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(76, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(79, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(67, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L4%6%bbentry
1 : 862978047 { 0x336fffff +1.87499988e231 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 862978048 { 0x33700000 +1.87500000e231 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 775848258 { 0x2e3e8142 +1.48831963e221 } : BV:32
=input.dst.llvm-%x
1 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
=input.dst.llvm-%n
1 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
=input.dst.llvm-%m
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1350565883 ] -> 0, [ 1350565884; 1350565884 ] -> 156, [ 1350565885; 1350565885 ] -> 232, [ 1350565886; 1350565886 ] -> 104, [ 1350565887; 1350565887 ] -> 167, [ 1350565888; 2193620991 ] -> 0, [ 2193620992; 2193620992 ] -> 252, [ 2193620993; 2193620993 ] -> 246, [ 2193620994; 2193620994 ] -> 125, [ 2193620995; 2193620995 ] -> 253, [ 2193620996; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1795612659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1795612660; 1795612663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1795612664; 2965505471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2965505472; 2965505475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2965505476; 3446335531 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3446335532; 3446335535 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3446335536; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2965505472 { 0xb0c205c0 -1329461824 -1.51580047e226 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1795612660 { 0x6b06dff4 +1.5370950e87 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3446335532 { 0xcd6ae82c -848631764 -1.83521032e27 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26947 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26950 : BV:32
18 : Lambda26948 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26949 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
82 : eq(80, 81) : BOOL
83 : 156 { 0x9c -100 } : BV:8
84 : eq(80, 78) : BOOL
85 : 253 { 0xfd -3 } : BV:8
86 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
87 : eq(80, 86) : BOOL
88 : 252 { 0xfc -4 } : BV:8
89 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
90 : eq(80, 89) : BOOL
91 : 104 { 0x68 } : BV:8
92 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
93 : eq(80, 92) : BOOL
94 : 167 { 0xa7 -89 } : BV:8
95 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
96 : eq(80, 95) : BOOL
97 : 125 { 0x7d } : BV:8
98 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
99 : eq(80, 98) : BOOL
100 : 246 { 0xf6 -10 } : BV:8
101 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
102 : eq(80, 101) : BOOL
103 : 232 { 0xe8 -24 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(95, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(98, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(86, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 236, 235) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26944 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26945 : BV:32
7 : 2034458542 { 0x79435fae +1.52635741e115 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26952 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26953 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2808670364 { 0xa768e89c -1486296932 -1.81959867e207 } : BV:32
23 : bvadd(18, 21, 22) : BV:32
24 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
25 : eq(23, 24) : BOOL
26 : 156 { 0x9c -100 } : BV:8
27 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
31 : eq(23, 30) : BOOL
32 : 252 { 0xfc -4 } : BV:8
33 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
34 : eq(23, 33) : BOOL
35 : 104 { 0x68 } : BV:8
36 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
37 : eq(23, 36) : BOOL
38 : 167 { 0xa7 -89 } : BV:8
39 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
40 : eq(23, 39) : BOOL
41 : 125 { 0x7d } : BV:8
42 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
43 : eq(23, 42) : BOOL
44 : 246 { 0xf6 -10 } : BV:8
45 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
46 : eq(23, 45) : BOOL
47 : 232 { 0xe8 -24 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 862978047 { 0x336fffff +1.87499988e231 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2749146359 ] -> true, [ 2749146360; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2749146359 ] -> true, [ 2749146360; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26889 : BV:32
2 : Lambda26890 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26894 : BV:32
2 : Lambda26895 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 5 { 0x5 +1.59e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 7 { 0x7 +1.83e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
55 : eq(53, 54) : BOOL
56 : 156 { 0x9c -100 } : BV:8
57 : eq(53, 51) : BOOL
58 : 253 { 0xfd -3 } : BV:8
59 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
60 : eq(53, 59) : BOOL
61 : 252 { 0xfc -4 } : BV:8
62 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
63 : eq(53, 62) : BOOL
64 : 104 { 0x68 } : BV:8
65 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
66 : eq(53, 65) : BOOL
67 : 167 { 0xa7 -89 } : BV:8
68 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
69 : eq(53, 68) : BOOL
70 : 125 { 0x7d } : BV:8
71 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
72 : eq(53, 71) : BOOL
73 : 246 { 0xf6 -10 } : BV:8
74 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
75 : eq(53, 74) : BOOL
76 : 232 { 0xe8 -24 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(68, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(71, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(59, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 209, 208) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26896 : BV:32
2 : Lambda26897 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26900 : BV:32
2 : Lambda26901 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
14 : eq(12, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(12, 10) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
19 : eq(12, 18) : BOOL
20 : 252 { 0xfc -4 } : BV:8
21 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
22 : eq(12, 21) : BOOL
23 : 104 { 0x68 } : BV:8
24 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
25 : eq(12, 24) : BOOL
26 : 167 { 0xa7 -89 } : BV:8
27 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
28 : eq(12, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
31 : eq(12, 30) : BOOL
32 : 246 { 0xf6 -10 } : BV:8
33 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
34 : eq(12, 33) : BOOL
35 : 232 { 0xe8 -24 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(27, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(30, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(18, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda26905 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2808670364 { 0xa768e89c -1486296932 -1.81959867e207 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
10 : eq(8, 9) : BOOL
11 : 156 { 0x9c -100 } : BV:8
12 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
16 : eq(8, 15) : BOOL
17 : 252 { 0xfc -4 } : BV:8
18 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
19 : eq(8, 18) : BOOL
20 : 104 { 0x68 } : BV:8
21 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
22 : eq(8, 21) : BOOL
23 : 167 { 0xa7 -89 } : BV:8
24 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
25 : eq(8, 24) : BOOL
26 : 125 { 0x7d } : BV:8
27 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
28 : eq(8, 27) : BOOL
29 : 246 { 0xf6 -10 } : BV:8
30 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
31 : eq(8, 30) : BOOL
32 : 232 { 0xe8 -24 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 862978047 { 0x336fffff +1.87499988e231 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1637194344 { 0x61959a68 +1.16877460e68 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 2808670364 { 0xa768e89c -1486296932 -1.81959867e207 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 3451912188 { 0xcdbffffc -843055108 -1.49999952e28 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 3451912188 { 0xcdbffffc -843055108 -1.49999952e28 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2808670376 { 0xa768e8a8 -1486296920 -1.81960010e207 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 2808670376 { 0xa768e8a8 -1486296920 -1.81960010e207 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3446335532 { 0xcd6ae82c -848631764 -1.83521032e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3446335535 { 0xcd6ae82f -848631761 -1.83521068e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2965505472 { 0xb0c205c0 -1329461824 -1.51580047e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2965505475 { 0xb0c205c3 -1329461821 -1.51580083e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1795612660 { 0x6b06dff4 +1.5370950e87 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1795612663 { 0x6b06dff7 +1.5370986e87 } : BV:32
=counter_example.random_seed
2907568119
=counter_example_end
=global nodece 56 num_edges_traversed 1
=global nodece 56 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce11202.num_edges_traversed2
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(epsilon)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce11202 247b7f2b5f7192313041789cacca8192
=input.spec-%var-x-1
1 : Lambda26940 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26943 : BV:32
18 : Lambda26941 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26942 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
63 : eq(61, 62) : BOOL
64 : 156 { 0x9c -100 } : BV:8
65 : eq(61, 59) : BOOL
66 : 253 { 0xfd -3 } : BV:8
67 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
68 : eq(61, 67) : BOOL
69 : 252 { 0xfc -4 } : BV:8
70 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
71 : eq(61, 70) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
74 : eq(61, 73) : BOOL
75 : 167 { 0xa7 -89 } : BV:8
76 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
77 : eq(61, 76) : BOOL
78 : 125 { 0x7d } : BV:8
79 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
80 : eq(61, 79) : BOOL
81 : 246 { 0xf6 -10 } : BV:8
82 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
83 : eq(61, 82) : BOOL
84 : 232 { 0xe8 -24 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(65, 66, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(76, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 59) : BOOL
97 : eq(94, 67) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 66, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(79, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 59) : BOOL
114 : eq(111, 67) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 66, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(67, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 59) : BOOL
131 : eq(128, 67) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 66, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 59) : BOOL
149 : eq(146, 67) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 66, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 59) : BOOL
167 : eq(164, 67) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 66, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 59) : BOOL
185 : eq(182, 67) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 66, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 59) : BOOL
202 : eq(199, 67) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 66, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 862978047 { 0x336fffff +1.87499988e231 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 862978048 { 0x33700000 +1.87500000e231 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 775848259 { 0x2e3e8143 +1.48831975e221 } : BV:32
=input.dst.llvm-%x
1 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
=input.dst.llvm-%n
1 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
=input.dst.llvm-%m
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1350565883 ] -> 0, [ 1350565884; 1350565884 ] -> 156, [ 1350565885; 1350565885 ] -> 232, [ 1350565886; 1350565886 ] -> 104, [ 1350565887; 1350565887 ] -> 167, [ 1350565888; 2193620991 ] -> 0, [ 2193620992; 2193620992 ] -> 252, [ 2193620993; 2193620993 ] -> 246, [ 2193620994; 2193620994 ] -> 125, [ 2193620995; 2193620995 ] -> 253, [ 2193620996; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1795612659 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1795612660; 1795612663 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1795612664; 2965505471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2965505472; 2965505475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2965505476; 3446335531 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3446335532; 3446335535 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3446335536; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2965505472 { 0xb0c205c0 -1329461824 -1.51580047e226 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1795612660 { 0x6b06dff4 +1.5370950e87 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3446335532 { 0xcd6ae82c -848631764 -1.83521032e27 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26947 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26950 : BV:32
18 : Lambda26948 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 5 { 0x5 +1.59e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 7 { 0x7 +1.83e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda26949 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
82 : eq(80, 81) : BOOL
83 : 156 { 0x9c -100 } : BV:8
84 : eq(80, 78) : BOOL
85 : 253 { 0xfd -3 } : BV:8
86 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
87 : eq(80, 86) : BOOL
88 : 252 { 0xfc -4 } : BV:8
89 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
90 : eq(80, 89) : BOOL
91 : 104 { 0x68 } : BV:8
92 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
93 : eq(80, 92) : BOOL
94 : 167 { 0xa7 -89 } : BV:8
95 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
96 : eq(80, 95) : BOOL
97 : 125 { 0x7d } : BV:8
98 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
99 : eq(80, 98) : BOOL
100 : 246 { 0xf6 -10 } : BV:8
101 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
102 : eq(80, 101) : BOOL
103 : 232 { 0xe8 -24 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(84, 85, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(95, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 78) : BOOL
116 : eq(113, 86) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 85, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(98, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 78) : BOOL
133 : eq(130, 86) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 85, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(86, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 78) : BOOL
150 : eq(147, 86) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 85, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 78) : BOOL
168 : eq(165, 86) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 85, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 78) : BOOL
186 : eq(183, 86) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 85, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 78) : BOOL
204 : eq(201, 86) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 85, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 78) : BOOL
221 : eq(218, 86) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 85, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 236, 235) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda26944 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda26945 : BV:32
7 : 2034458542 { 0x79435fae +1.52635741e115 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda26952 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26953 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2808670364 { 0xa768e89c -1486296932 -1.81959867e207 } : BV:32
23 : bvadd(18, 21, 22) : BV:32
24 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
25 : eq(23, 24) : BOOL
26 : 156 { 0x9c -100 } : BV:8
27 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
28 : eq(23, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
31 : eq(23, 30) : BOOL
32 : 252 { 0xfc -4 } : BV:8
33 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
34 : eq(23, 33) : BOOL
35 : 104 { 0x68 } : BV:8
36 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
37 : eq(23, 36) : BOOL
38 : 167 { 0xa7 -89 } : BV:8
39 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
40 : eq(23, 39) : BOOL
41 : 125 { 0x7d } : BV:8
42 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
43 : eq(23, 42) : BOOL
44 : 246 { 0xf6 -10 } : BV:8
45 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
46 : eq(23, 45) : BOOL
47 : 232 { 0xe8 -24 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 862978047 { 0x336fffff +1.87499988e231 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2749146359 ] -> true, [ 2749146360; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2749146359 ] -> true, [ 2749146360; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda26889 : BV:32
2 : Lambda26890 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda26894 : BV:32
2 : Lambda26895 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 5 { 0x5 +1.59e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 7 { 0x7 +1.83e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
55 : eq(53, 54) : BOOL
56 : 156 { 0x9c -100 } : BV:8
57 : eq(53, 51) : BOOL
58 : 253 { 0xfd -3 } : BV:8
59 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
60 : eq(53, 59) : BOOL
61 : 252 { 0xfc -4 } : BV:8
62 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
63 : eq(53, 62) : BOOL
64 : 104 { 0x68 } : BV:8
65 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
66 : eq(53, 65) : BOOL
67 : 167 { 0xa7 -89 } : BV:8
68 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
69 : eq(53, 68) : BOOL
70 : 125 { 0x7d } : BV:8
71 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
72 : eq(53, 71) : BOOL
73 : 246 { 0xf6 -10 } : BV:8
74 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
75 : eq(53, 74) : BOOL
76 : 232 { 0xe8 -24 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(57, 58, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(68, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 51) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 58, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(71, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 51) : BOOL
106 : eq(103, 59) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 58, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(59, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 51) : BOOL
123 : eq(120, 59) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 58, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 51) : BOOL
141 : eq(138, 59) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 58, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 51) : BOOL
159 : eq(156, 59) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 58, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 51) : BOOL
177 : eq(174, 59) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 58, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 51) : BOOL
194 : eq(191, 59) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 58, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 209, 208) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda26896 : BV:32
2 : Lambda26897 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2749146359 { 0xa3dca4f7 -1545820937 -1.72378432e200 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2749146361 { 0xa3dca4f9 -1545820935 -1.72378456e200 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2749146360 { 0xa3dca4f8 -1545820936 -1.72378444e200 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 5 { 0x5 +1.59e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 7 { 0x7 +1.83e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda26900 : BV:32
2 : Lambda26901 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
14 : eq(12, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(12, 10) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
19 : eq(12, 18) : BOOL
20 : 252 { 0xfc -4 } : BV:8
21 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
22 : eq(12, 21) : BOOL
23 : 104 { 0x68 } : BV:8
24 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
25 : eq(12, 24) : BOOL
26 : 167 { 0xa7 -89 } : BV:8
27 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
28 : eq(12, 27) : BOOL
29 : 125 { 0x7d } : BV:8
30 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
31 : eq(12, 30) : BOOL
32 : 246 { 0xf6 -10 } : BV:8
33 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
34 : eq(12, 33) : BOOL
35 : 232 { 0xe8 -24 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(27, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(30, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(18, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda26905 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2808670364 { 0xa768e89c -1486296932 -1.81959867e207 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 1350565884 { 0x507ffffc +1.99999952e33 } : BV:32
10 : eq(8, 9) : BOOL
11 : 156 { 0x9c -100 } : BV:8
12 : 2193620995 { 0x82c00003 -2101346301 -1.50000035e134 } : BV:32
13 : eq(8, 12) : BOOL
14 : 253 { 0xfd -3 } : BV:8
15 : 2193620992 { 0x82c00000 -2101346304 -1.50000000e134 } : BV:32
16 : eq(8, 15) : BOOL
17 : 252 { 0xfc -4 } : BV:8
18 : 1350565886 { 0x507ffffe +1.99999976e33 } : BV:32
19 : eq(8, 18) : BOOL
20 : 104 { 0x68 } : BV:8
21 : 1350565887 { 0x507fffff +1.99999988e33 } : BV:32
22 : eq(8, 21) : BOOL
23 : 167 { 0xa7 -89 } : BV:8
24 : 2193620994 { 0x82c00002 -2101346302 -1.50000023e134 } : BV:32
25 : eq(8, 24) : BOOL
26 : 125 { 0x7d } : BV:8
27 : 2193620993 { 0x82c00001 -2101346303 -1.50000011e134 } : BV:32
28 : eq(8, 27) : BOOL
29 : 246 { 0xf6 -10 } : BV:8
30 : 1350565885 { 0x507ffffd +1.99999964e33 } : BV:32
31 : eq(8, 30) : BOOL
32 : 232 { 0xe8 -24 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 862978047 { 0x336fffff +1.87499988e231 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1637194345 { 0x61959a69 +1.16877472e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3446335532 { 0xcd6ae82c -848631764 -1.83521032e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3446335535 { 0xcd6ae82f -848631761 -1.83521068e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2965505472 { 0xb0c205c0 -1329461824 -1.51580047e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2965505475 { 0xb0c205c3 -1329461821 -1.51580083e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1795612660 { 0x6b06dff4 +1.5370950e87 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1795612663 { 0x6b06dff7 +1.5370986e87 } : BV:32
=counter_example.random_seed
2907568119
=counter_example_end
=global nodece 57 num_edges_traversed 2
=global nodece 57 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 58
=global nodece 58 nodece z3.ce11244.num_edges_traversed1
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce11244 cba567758ec2e27fea9f32b663f9aaf1
=input.spec-%var-x-1
1 : Lambda27061 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27064 : BV:32
18 : Lambda27062 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27063 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : bvmul(34, 52) : BV:32
58 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
59 : bvmul(34, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
62 : eq(60, 61) : BOOL
63 : 116 { 0x74 } : BV:8
64 : eq(60, 58) : BOOL
65 : 30 { 0x1e } : BV:8
66 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
67 : eq(60, 66) : BOOL
68 : 243 { 0xf3 -13 } : BV:8
69 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
70 : eq(60, 69) : BOOL
71 : 142 { 0x8e -114 } : BV:8
72 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
73 : eq(60, 72) : BOOL
74 : 107 { 0x6b } : BV:8
75 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
76 : eq(60, 75) : BOOL
77 : 118 { 0x76 } : BV:8
78 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
79 : eq(60, 78) : BOOL
80 : 124 { 0x7c } : BV:8
81 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
82 : eq(60, 81) : BOOL
83 : 212 { 0xd4 -44 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(73, 74, 87) : BV:8
89 : ite(70, 71, 88) : BV:8
90 : ite(67, 68, 89) : BV:8
91 : ite(64, 65, 90) : BV:8
92 : ite(62, 63, 91) : BV:8
93 : bvadd(75, 59) : BV:32
94 : eq(93, 61) : BOOL
95 : eq(93, 58) : BOOL
96 : eq(93, 66) : BOOL
97 : eq(93, 69) : BOOL
98 : eq(93, 72) : BOOL
99 : eq(93, 75) : BOOL
100 : eq(93, 78) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 77, 103) : BV:8
105 : ite(98, 74, 104) : BV:8
106 : ite(97, 71, 105) : BV:8
107 : ite(96, 68, 106) : BV:8
108 : ite(95, 65, 107) : BV:8
109 : ite(94, 63, 108) : BV:8
110 : bvadd(78, 59) : BV:32
111 : eq(110, 61) : BOOL
112 : eq(110, 58) : BOOL
113 : eq(110, 66) : BOOL
114 : eq(110, 69) : BOOL
115 : eq(110, 72) : BOOL
116 : eq(110, 75) : BOOL
117 : eq(110, 78) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 77, 120) : BV:8
122 : ite(115, 74, 121) : BV:8
123 : ite(114, 71, 122) : BV:8
124 : ite(113, 68, 123) : BV:8
125 : ite(112, 65, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : bvadd(66, 59) : BV:32
128 : eq(127, 61) : BOOL
129 : eq(127, 58) : BOOL
130 : eq(127, 66) : BOOL
131 : eq(127, 69) : BOOL
132 : eq(127, 72) : BOOL
133 : eq(127, 75) : BOOL
134 : eq(127, 78) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 80, 136) : BV:8
138 : ite(133, 77, 137) : BV:8
139 : ite(132, 74, 138) : BV:8
140 : ite(131, 71, 139) : BV:8
141 : ite(130, 68, 140) : BV:8
142 : ite(129, 65, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 57, 144) : BV:32
146 : eq(145, 61) : BOOL
147 : eq(145, 58) : BOOL
148 : eq(145, 66) : BOOL
149 : eq(145, 69) : BOOL
150 : eq(145, 72) : BOOL
151 : eq(145, 75) : BOOL
152 : eq(145, 78) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 80, 154) : BV:8
156 : ite(151, 77, 155) : BV:8
157 : ite(150, 74, 156) : BV:8
158 : ite(149, 71, 157) : BV:8
159 : ite(148, 68, 158) : BV:8
160 : ite(147, 65, 159) : BV:8
161 : ite(146, 63, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 57, 144) : BV:32
164 : eq(163, 61) : BOOL
165 : eq(163, 58) : BOOL
166 : eq(163, 66) : BOOL
167 : eq(163, 69) : BOOL
168 : eq(163, 72) : BOOL
169 : eq(163, 75) : BOOL
170 : eq(163, 78) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 80, 172) : BV:8
174 : ite(169, 77, 173) : BV:8
175 : ite(168, 74, 174) : BV:8
176 : ite(167, 71, 175) : BV:8
177 : ite(166, 68, 176) : BV:8
178 : ite(165, 65, 177) : BV:8
179 : ite(164, 63, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 57, 144) : BV:32
182 : eq(181, 61) : BOOL
183 : eq(181, 58) : BOOL
184 : eq(181, 66) : BOOL
185 : eq(181, 69) : BOOL
186 : eq(181, 72) : BOOL
187 : eq(181, 75) : BOOL
188 : eq(181, 78) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 80, 190) : BV:8
192 : ite(187, 77, 191) : BV:8
193 : ite(186, 74, 192) : BV:8
194 : ite(185, 71, 193) : BV:8
195 : ite(184, 68, 194) : BV:8
196 : ite(183, 65, 195) : BV:8
197 : ite(182, 63, 196) : BV:8
198 : bvadd(57, 144) : BV:32
199 : eq(198, 61) : BOOL
200 : eq(198, 58) : BOOL
201 : eq(198, 66) : BOOL
202 : eq(198, 69) : BOOL
203 : eq(198, 72) : BOOL
204 : eq(198, 75) : BOOL
205 : eq(198, 78) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 80, 207) : BV:8
209 : ite(204, 77, 208) : BV:8
210 : ite(203, 74, 209) : BV:8
211 : ite(202, 71, 210) : BV:8
212 : ite(201, 68, 211) : BV:8
213 : ite(200, 65, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 1 { 0x1 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 543961439 { 0x206c315f +1.84525668e193 } : BV:32
=input.dst.llvm-%x
1 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1140850683 ] -> 0, [ 1140850684; 1140850684 ] -> 116, [ 1140850685; 1140850685 ] -> 212, [ 1140850686; 1140850686 ] -> 142, [ 1140850687; 1140850687 ] -> 107, [ 1140850688; 1140850688 ] -> 243, [ 1140850689; 1140850689 ] -> 124, [ 1140850690; 1140850690 ] -> 118, [ 1140850691; 1140850691 ] -> 30, [ 1140850692; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1582751735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1582751736; 1582751739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1582751740; 2304270203 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2304270204; 2304270207 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2304270208; 2475481471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2475481472; 2475481475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2475481476; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1582751736 { 0x5e56dff8 +1.67870998e61 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2304270204 { 0x89585f7c -1990697092 -1.69041395e147 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2475481472 { 0x938cd980 -1819485824 -1.10038757e168 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27071 : BV:32
18 : Lambda27069 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27070 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : bvmul(34, 52) : BV:32
77 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
78 : bvmul(34, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
81 : eq(79, 80) : BOOL
82 : 116 { 0x74 } : BV:8
83 : eq(79, 77) : BOOL
84 : 30 { 0x1e } : BV:8
85 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
86 : eq(79, 85) : BOOL
87 : 243 { 0xf3 -13 } : BV:8
88 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
89 : eq(79, 88) : BOOL
90 : 142 { 0x8e -114 } : BV:8
91 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
92 : eq(79, 91) : BOOL
93 : 107 { 0x6b } : BV:8
94 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
95 : eq(79, 94) : BOOL
96 : 118 { 0x76 } : BV:8
97 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
98 : eq(79, 97) : BOOL
99 : 124 { 0x7c } : BV:8
100 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
101 : eq(79, 100) : BOOL
102 : 212 { 0xd4 -44 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(95, 96, 105) : BV:8
107 : ite(92, 93, 106) : BV:8
108 : ite(89, 90, 107) : BV:8
109 : ite(86, 87, 108) : BV:8
110 : ite(83, 84, 109) : BV:8
111 : ite(81, 82, 110) : BV:8
112 : bvadd(94, 78) : BV:32
113 : eq(112, 80) : BOOL
114 : eq(112, 77) : BOOL
115 : eq(112, 85) : BOOL
116 : eq(112, 88) : BOOL
117 : eq(112, 91) : BOOL
118 : eq(112, 94) : BOOL
119 : eq(112, 97) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 99, 121) : BV:8
123 : ite(118, 96, 122) : BV:8
124 : ite(117, 93, 123) : BV:8
125 : ite(116, 90, 124) : BV:8
126 : ite(115, 87, 125) : BV:8
127 : ite(114, 84, 126) : BV:8
128 : ite(113, 82, 127) : BV:8
129 : bvadd(97, 78) : BV:32
130 : eq(129, 80) : BOOL
131 : eq(129, 77) : BOOL
132 : eq(129, 85) : BOOL
133 : eq(129, 88) : BOOL
134 : eq(129, 91) : BOOL
135 : eq(129, 94) : BOOL
136 : eq(129, 97) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 99, 138) : BV:8
140 : ite(135, 96, 139) : BV:8
141 : ite(134, 93, 140) : BV:8
142 : ite(133, 90, 141) : BV:8
143 : ite(132, 87, 142) : BV:8
144 : ite(131, 84, 143) : BV:8
145 : ite(130, 82, 144) : BV:8
146 : bvadd(85, 78) : BV:32
147 : eq(146, 80) : BOOL
148 : eq(146, 77) : BOOL
149 : eq(146, 85) : BOOL
150 : eq(146, 88) : BOOL
151 : eq(146, 91) : BOOL
152 : eq(146, 94) : BOOL
153 : eq(146, 97) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 99, 155) : BV:8
157 : ite(152, 96, 156) : BV:8
158 : ite(151, 93, 157) : BV:8
159 : ite(150, 90, 158) : BV:8
160 : ite(149, 87, 159) : BV:8
161 : ite(148, 84, 160) : BV:8
162 : ite(147, 82, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 76, 163) : BV:32
165 : eq(164, 80) : BOOL
166 : eq(164, 77) : BOOL
167 : eq(164, 85) : BOOL
168 : eq(164, 88) : BOOL
169 : eq(164, 91) : BOOL
170 : eq(164, 94) : BOOL
171 : eq(164, 97) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 99, 173) : BV:8
175 : ite(170, 96, 174) : BV:8
176 : ite(169, 93, 175) : BV:8
177 : ite(168, 90, 176) : BV:8
178 : ite(167, 87, 177) : BV:8
179 : ite(166, 84, 178) : BV:8
180 : ite(165, 82, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 76, 163) : BV:32
183 : eq(182, 80) : BOOL
184 : eq(182, 77) : BOOL
185 : eq(182, 85) : BOOL
186 : eq(182, 88) : BOOL
187 : eq(182, 91) : BOOL
188 : eq(182, 94) : BOOL
189 : eq(182, 97) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 99, 191) : BV:8
193 : ite(188, 96, 192) : BV:8
194 : ite(187, 93, 193) : BV:8
195 : ite(186, 90, 194) : BV:8
196 : ite(185, 87, 195) : BV:8
197 : ite(184, 84, 196) : BV:8
198 : ite(183, 82, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 76, 163) : BV:32
201 : eq(200, 80) : BOOL
202 : eq(200, 77) : BOOL
203 : eq(200, 85) : BOOL
204 : eq(200, 88) : BOOL
205 : eq(200, 91) : BOOL
206 : eq(200, 94) : BOOL
207 : eq(200, 97) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 99, 209) : BV:8
211 : ite(206, 96, 210) : BV:8
212 : ite(205, 93, 211) : BV:8
213 : ite(204, 90, 212) : BV:8
214 : ite(203, 87, 213) : BV:8
215 : ite(202, 84, 214) : BV:8
216 : ite(201, 82, 215) : BV:8
217 : bvadd(76, 163) : BV:32
218 : eq(217, 80) : BOOL
219 : eq(217, 77) : BOOL
220 : eq(217, 85) : BOOL
221 : eq(217, 88) : BOOL
222 : eq(217, 91) : BOOL
223 : eq(217, 94) : BOOL
224 : eq(217, 97) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 99, 226) : BV:8
228 : ite(223, 96, 227) : BV:8
229 : ite(222, 93, 228) : BV:8
230 : ite(221, 90, 229) : BV:8
231 : ite(220, 87, 230) : BV:8
232 : ite(219, 84, 231) : BV:8
233 : ite(218, 82, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 235, 234) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27065 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27066 : BV:32
7 : 190384533 { 0xb590995 +1.69560492e151 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27073 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27074 : BV:32
18 : eq(17, 4) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : bvmul(4, 17) : BV:32
21 : 1804522612 { 0x6b8ed474 +1.11585855e88 } : BV:32
22 : bvadd(19, 20, 21) : BV:32
23 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
24 : eq(22, 23) : BOOL
25 : 116 { 0x74 } : BV:8
26 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
27 : eq(22, 26) : BOOL
28 : 30 { 0x1e } : BV:8
29 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
30 : eq(22, 29) : BOOL
31 : 243 { 0xf3 -13 } : BV:8
32 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
33 : eq(22, 32) : BOOL
34 : 142 { 0x8e -114 } : BV:8
35 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
36 : eq(22, 35) : BOOL
37 : 107 { 0x6b } : BV:8
38 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
39 : eq(22, 38) : BOOL
40 : 118 { 0x76 } : BV:8
41 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
42 : eq(22, 41) : BOOL
43 : 124 { 0x7c } : BV:8
44 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
45 : eq(22, 44) : BOOL
46 : 212 { 0xd4 -44 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(39, 40, 49) : BV:8
51 : ite(36, 37, 50) : BV:8
52 : ite(33, 34, 51) : BV:8
53 : ite(30, 31, 52) : BV:8
54 : ite(27, 28, 53) : BV:8
55 : ite(24, 25, 54) : BV:8
56 : 2 { 0x2 +1.23e129 } : BV:32
57 : bvadd(56, 20, 21) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 29) : BOOL
61 : eq(57, 32) : BOOL
62 : eq(57, 35) : BOOL
63 : eq(57, 38) : BOOL
64 : eq(57, 41) : BOOL
65 : eq(57, 44) : BOOL
66 : ite(65, 46, 47) : BV:8
67 : ite(64, 43, 66) : BV:8
68 : ite(63, 40, 67) : BV:8
69 : ite(62, 37, 68) : BV:8
70 : ite(61, 34, 69) : BV:8
71 : ite(60, 31, 70) : BV:8
72 : ite(59, 28, 71) : BV:8
73 : ite(58, 25, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 20, 21) : BV:32
76 : eq(75, 23) : BOOL
77 : eq(75, 26) : BOOL
78 : eq(75, 29) : BOOL
79 : eq(75, 32) : BOOL
80 : eq(75, 35) : BOOL
81 : eq(75, 38) : BOOL
82 : eq(75, 41) : BOOL
83 : eq(75, 44) : BOOL
84 : ite(83, 46, 47) : BV:8
85 : ite(82, 43, 84) : BV:8
86 : ite(81, 40, 85) : BV:8
87 : ite(80, 37, 86) : BV:8
88 : ite(79, 34, 87) : BV:8
89 : ite(78, 31, 88) : BV:8
90 : ite(77, 28, 89) : BV:8
91 : ite(76, 25, 90) : BV:8
92 : bvadd(20, 21) : BV:32
93 : eq(92, 23) : BOOL
94 : eq(92, 26) : BOOL
95 : eq(92, 29) : BOOL
96 : eq(92, 32) : BOOL
97 : eq(92, 35) : BOOL
98 : eq(92, 38) : BOOL
99 : eq(92, 41) : BOOL
100 : eq(92, 44) : BOOL
101 : ite(100, 46, 47) : BV:8
102 : ite(99, 43, 101) : BV:8
103 : ite(98, 40, 102) : BV:8
104 : ite(97, 37, 103) : BV:8
105 : ite(96, 34, 104) : BV:8
106 : ite(95, 31, 105) : BV:8
107 : ite(94, 28, 106) : BV:8
108 : ite(93, 25, 107) : BV:8
109 : bvconcat(55, 73, 91, 108) : BV:32
110 : ite(18, 2, 109) : BV:32
111 : lambda(17, 110) : FUNCTION[BV:32 -> BV:32]
112 : map(16, 111) : MAP[BV:32 -> BV:32]
113 : sym_const(112) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27010 : BV:32
2 : Lambda27011 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27015 : BV:32
2 : Lambda27016 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4 { 0x4 +1.47e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 5 { 0x5 +1.59e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : bvmul(30, 2) : BV:32
50 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
51 : bvmul(30, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
54 : eq(52, 53) : BOOL
55 : 116 { 0x74 } : BV:8
56 : eq(52, 50) : BOOL
57 : 30 { 0x1e } : BV:8
58 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
59 : eq(52, 58) : BOOL
60 : 243 { 0xf3 -13 } : BV:8
61 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
62 : eq(52, 61) : BOOL
63 : 142 { 0x8e -114 } : BV:8
64 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
65 : eq(52, 64) : BOOL
66 : 107 { 0x6b } : BV:8
67 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
68 : eq(52, 67) : BOOL
69 : 118 { 0x76 } : BV:8
70 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
71 : eq(52, 70) : BOOL
72 : 124 { 0x7c } : BV:8
73 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
74 : eq(52, 73) : BOOL
75 : 212 { 0xd4 -44 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(59, 60, 81) : BV:8
83 : ite(56, 57, 82) : BV:8
84 : ite(54, 55, 83) : BV:8
85 : bvadd(67, 51) : BV:32
86 : eq(85, 53) : BOOL
87 : eq(85, 50) : BOOL
88 : eq(85, 58) : BOOL
89 : eq(85, 61) : BOOL
90 : eq(85, 64) : BOOL
91 : eq(85, 67) : BOOL
92 : eq(85, 70) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 69, 95) : BV:8
97 : ite(90, 66, 96) : BV:8
98 : ite(89, 63, 97) : BV:8
99 : ite(88, 60, 98) : BV:8
100 : ite(87, 57, 99) : BV:8
101 : ite(86, 55, 100) : BV:8
102 : bvadd(70, 51) : BV:32
103 : eq(102, 53) : BOOL
104 : eq(102, 50) : BOOL
105 : eq(102, 58) : BOOL
106 : eq(102, 61) : BOOL
107 : eq(102, 64) : BOOL
108 : eq(102, 67) : BOOL
109 : eq(102, 70) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 69, 112) : BV:8
114 : ite(107, 66, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 60, 115) : BV:8
117 : ite(104, 57, 116) : BV:8
118 : ite(103, 55, 117) : BV:8
119 : bvadd(58, 51) : BV:32
120 : eq(119, 53) : BOOL
121 : eq(119, 50) : BOOL
122 : eq(119, 58) : BOOL
123 : eq(119, 61) : BOOL
124 : eq(119, 64) : BOOL
125 : eq(119, 67) : BOOL
126 : eq(119, 70) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 72, 128) : BV:8
130 : ite(125, 69, 129) : BV:8
131 : ite(124, 66, 130) : BV:8
132 : ite(123, 63, 131) : BV:8
133 : ite(122, 60, 132) : BV:8
134 : ite(121, 57, 133) : BV:8
135 : ite(120, 55, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 49, 136) : BV:32
138 : eq(137, 53) : BOOL
139 : eq(137, 50) : BOOL
140 : eq(137, 58) : BOOL
141 : eq(137, 61) : BOOL
142 : eq(137, 64) : BOOL
143 : eq(137, 67) : BOOL
144 : eq(137, 70) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 63, 149) : BV:8
151 : ite(140, 60, 150) : BV:8
152 : ite(139, 57, 151) : BV:8
153 : ite(138, 55, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 49, 136) : BV:32
156 : eq(155, 53) : BOOL
157 : eq(155, 50) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 61) : BOOL
160 : eq(155, 64) : BOOL
161 : eq(155, 67) : BOOL
162 : eq(155, 70) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 72, 164) : BV:8
166 : ite(161, 69, 165) : BV:8
167 : ite(160, 66, 166) : BV:8
168 : ite(159, 63, 167) : BV:8
169 : ite(158, 60, 168) : BV:8
170 : ite(157, 57, 169) : BV:8
171 : ite(156, 55, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 49, 136) : BV:32
174 : eq(173, 53) : BOOL
175 : eq(173, 50) : BOOL
176 : eq(173, 58) : BOOL
177 : eq(173, 61) : BOOL
178 : eq(173, 64) : BOOL
179 : eq(173, 67) : BOOL
180 : eq(173, 70) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 72, 182) : BV:8
184 : ite(179, 69, 183) : BV:8
185 : ite(178, 66, 184) : BV:8
186 : ite(177, 63, 185) : BV:8
187 : ite(176, 60, 186) : BV:8
188 : ite(175, 57, 187) : BV:8
189 : ite(174, 55, 188) : BV:8
190 : bvadd(49, 136) : BV:32
191 : eq(190, 53) : BOOL
192 : eq(190, 50) : BOOL
193 : eq(190, 58) : BOOL
194 : eq(190, 61) : BOOL
195 : eq(190, 64) : BOOL
196 : eq(190, 67) : BOOL
197 : eq(190, 70) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 72, 199) : BV:8
201 : ite(196, 69, 200) : BV:8
202 : ite(195, 66, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 60, 203) : BV:8
205 : ite(192, 57, 204) : BV:8
206 : ite(191, 55, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 208, 207) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27017 : BV:32
2 : Lambda27018 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27021 : BV:32
2 : Lambda27022 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
14 : eq(12, 13) : BOOL
15 : 116 { 0x74 } : BV:8
16 : eq(12, 10) : BOOL
17 : 30 { 0x1e } : BV:8
18 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
19 : eq(12, 18) : BOOL
20 : 243 { 0xf3 -13 } : BV:8
21 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
22 : eq(12, 21) : BOOL
23 : 142 { 0x8e -114 } : BV:8
24 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
25 : eq(12, 24) : BOOL
26 : 107 { 0x6b } : BV:8
27 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
28 : eq(12, 27) : BOOL
29 : 118 { 0x76 } : BV:8
30 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
31 : eq(12, 30) : BOOL
32 : 124 { 0x7c } : BV:8
33 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
34 : eq(12, 33) : BOOL
35 : 212 { 0xd4 -44 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(27, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(30, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(18, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27026 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 1804522612 { 0x6b8ed474 +1.11585855e88 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
10 : eq(8, 9) : BOOL
11 : 116 { 0x74 } : BV:8
12 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
13 : eq(8, 12) : BOOL
14 : 30 { 0x1e } : BV:8
15 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
16 : eq(8, 15) : BOOL
17 : 243 { 0xf3 -13 } : BV:8
18 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
19 : eq(8, 18) : BOOL
20 : 142 { 0x8e -114 } : BV:8
21 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
22 : eq(8, 21) : BOOL
23 : 107 { 0x6b } : BV:8
24 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
25 : eq(8, 24) : BOOL
26 : 118 { 0x76 } : BV:8
27 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
28 : eq(8, 27) : BOOL
29 : 124 { 0x7c } : BV:8
30 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
31 : eq(8, 30) : BOOL
32 : 212 { 0xd4 -44 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1341100866 { 0x4fef9342 +1.87168145e32 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 1804522612 { 0x6b8ed474 +1.11585855e88 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4294967292 { 0xfffffffc -4 -1.99999952e128 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1804522628 { 0x6b8ed484 +1.11586046e88 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 1804522628 { 0x6b8ed484 +1.11586046e88 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2475481472 { 0x938cd980 -1819485824 -1.10038757e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2475481475 { 0x938cd983 -1819485821 -1.10038793e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1582751736 { 0x5e56dff8 +1.67870998e61 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1582751739 { 0x5e56dffb +1.67871034e61 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2304270204 { 0x89585f7c -1990697092 -1.69041395e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2304270207 { 0x89585f7f -1990697089 -1.69041430e147 } : BV:32
=counter_example.random_seed
924367273
=counter_example_end
=global nodece 58 num_edges_traversed 1
=global nodece 58 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 59
=global nodece 59 nodece z3.ce11286.num_edges_traversed2
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(epsilon)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce11286 e7866dfd5040a7fae5683a7fb8485c43
=input.spec-%var-x-1
1 : Lambda27061 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27064 : BV:32
18 : Lambda27062 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27063 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : bvmul(34, 52) : BV:32
58 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
59 : bvmul(34, 17) : BV:32
60 : bvadd(58, 59) : BV:32
61 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
62 : eq(60, 61) : BOOL
63 : 116 { 0x74 } : BV:8
64 : eq(60, 58) : BOOL
65 : 30 { 0x1e } : BV:8
66 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
67 : eq(60, 66) : BOOL
68 : 243 { 0xf3 -13 } : BV:8
69 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
70 : eq(60, 69) : BOOL
71 : 142 { 0x8e -114 } : BV:8
72 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
73 : eq(60, 72) : BOOL
74 : 107 { 0x6b } : BV:8
75 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
76 : eq(60, 75) : BOOL
77 : 118 { 0x76 } : BV:8
78 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
79 : eq(60, 78) : BOOL
80 : 124 { 0x7c } : BV:8
81 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
82 : eq(60, 81) : BOOL
83 : 212 { 0xd4 -44 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(76, 77, 86) : BV:8
88 : ite(73, 74, 87) : BV:8
89 : ite(70, 71, 88) : BV:8
90 : ite(67, 68, 89) : BV:8
91 : ite(64, 65, 90) : BV:8
92 : ite(62, 63, 91) : BV:8
93 : bvadd(75, 59) : BV:32
94 : eq(93, 61) : BOOL
95 : eq(93, 58) : BOOL
96 : eq(93, 66) : BOOL
97 : eq(93, 69) : BOOL
98 : eq(93, 72) : BOOL
99 : eq(93, 75) : BOOL
100 : eq(93, 78) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 77, 103) : BV:8
105 : ite(98, 74, 104) : BV:8
106 : ite(97, 71, 105) : BV:8
107 : ite(96, 68, 106) : BV:8
108 : ite(95, 65, 107) : BV:8
109 : ite(94, 63, 108) : BV:8
110 : bvadd(78, 59) : BV:32
111 : eq(110, 61) : BOOL
112 : eq(110, 58) : BOOL
113 : eq(110, 66) : BOOL
114 : eq(110, 69) : BOOL
115 : eq(110, 72) : BOOL
116 : eq(110, 75) : BOOL
117 : eq(110, 78) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 77, 120) : BV:8
122 : ite(115, 74, 121) : BV:8
123 : ite(114, 71, 122) : BV:8
124 : ite(113, 68, 123) : BV:8
125 : ite(112, 65, 124) : BV:8
126 : ite(111, 63, 125) : BV:8
127 : bvadd(66, 59) : BV:32
128 : eq(127, 61) : BOOL
129 : eq(127, 58) : BOOL
130 : eq(127, 66) : BOOL
131 : eq(127, 69) : BOOL
132 : eq(127, 72) : BOOL
133 : eq(127, 75) : BOOL
134 : eq(127, 78) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 80, 136) : BV:8
138 : ite(133, 77, 137) : BV:8
139 : ite(132, 74, 138) : BV:8
140 : ite(131, 71, 139) : BV:8
141 : ite(130, 68, 140) : BV:8
142 : ite(129, 65, 141) : BV:8
143 : ite(128, 63, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 57, 144) : BV:32
146 : eq(145, 61) : BOOL
147 : eq(145, 58) : BOOL
148 : eq(145, 66) : BOOL
149 : eq(145, 69) : BOOL
150 : eq(145, 72) : BOOL
151 : eq(145, 75) : BOOL
152 : eq(145, 78) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 80, 154) : BV:8
156 : ite(151, 77, 155) : BV:8
157 : ite(150, 74, 156) : BV:8
158 : ite(149, 71, 157) : BV:8
159 : ite(148, 68, 158) : BV:8
160 : ite(147, 65, 159) : BV:8
161 : ite(146, 63, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 57, 144) : BV:32
164 : eq(163, 61) : BOOL
165 : eq(163, 58) : BOOL
166 : eq(163, 66) : BOOL
167 : eq(163, 69) : BOOL
168 : eq(163, 72) : BOOL
169 : eq(163, 75) : BOOL
170 : eq(163, 78) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 80, 172) : BV:8
174 : ite(169, 77, 173) : BV:8
175 : ite(168, 74, 174) : BV:8
176 : ite(167, 71, 175) : BV:8
177 : ite(166, 68, 176) : BV:8
178 : ite(165, 65, 177) : BV:8
179 : ite(164, 63, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 57, 144) : BV:32
182 : eq(181, 61) : BOOL
183 : eq(181, 58) : BOOL
184 : eq(181, 66) : BOOL
185 : eq(181, 69) : BOOL
186 : eq(181, 72) : BOOL
187 : eq(181, 75) : BOOL
188 : eq(181, 78) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 80, 190) : BV:8
192 : ite(187, 77, 191) : BV:8
193 : ite(186, 74, 192) : BV:8
194 : ite(185, 71, 193) : BV:8
195 : ite(184, 68, 194) : BV:8
196 : ite(183, 65, 195) : BV:8
197 : ite(182, 63, 196) : BV:8
198 : bvadd(57, 144) : BV:32
199 : eq(198, 61) : BOOL
200 : eq(198, 58) : BOOL
201 : eq(198, 66) : BOOL
202 : eq(198, 69) : BOOL
203 : eq(198, 72) : BOOL
204 : eq(198, 75) : BOOL
205 : eq(198, 78) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 80, 207) : BV:8
209 : ite(204, 77, 208) : BV:8
210 : ite(203, 74, 209) : BV:8
211 : ite(202, 71, 210) : BV:8
212 : ite(201, 68, 211) : BV:8
213 : ite(200, 65, 212) : BV:8
214 : ite(199, 63, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%x
1 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1140850683 ] -> 0, [ 1140850684; 1140850684 ] -> 116, [ 1140850685; 1140850685 ] -> 212, [ 1140850686; 1140850686 ] -> 142, [ 1140850687; 1140850687 ] -> 107, [ 1140850688; 1140850688 ] -> 243, [ 1140850689; 1140850689 ] -> 124, [ 1140850690; 1140850690 ] -> 118, [ 1140850691; 1140850691 ] -> 30, [ 1140850692; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1582751735 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1582751736; 1582751739 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1582751740; 2304270203 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2304270204; 2304270207 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2304270208; 2475481471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2475481472; 2475481475 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2475481476; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1582751736 { 0x5e56dff8 +1.67870998e61 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2304270204 { 0x89585f7c -1990697092 -1.69041395e147 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2475481472 { 0x938cd980 -1819485824 -1.10038757e168 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27068 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27071 : BV:32
18 : Lambda27069 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4 { 0x4 +1.47e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 6 { 0x6 +1.71e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27070 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : bvmul(34, 52) : BV:32
77 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
78 : bvmul(34, 17) : BV:32
79 : bvadd(77, 78) : BV:32
80 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
81 : eq(79, 80) : BOOL
82 : 116 { 0x74 } : BV:8
83 : eq(79, 77) : BOOL
84 : 30 { 0x1e } : BV:8
85 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
86 : eq(79, 85) : BOOL
87 : 243 { 0xf3 -13 } : BV:8
88 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
89 : eq(79, 88) : BOOL
90 : 142 { 0x8e -114 } : BV:8
91 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
92 : eq(79, 91) : BOOL
93 : 107 { 0x6b } : BV:8
94 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
95 : eq(79, 94) : BOOL
96 : 118 { 0x76 } : BV:8
97 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
98 : eq(79, 97) : BOOL
99 : 124 { 0x7c } : BV:8
100 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
101 : eq(79, 100) : BOOL
102 : 212 { 0xd4 -44 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(98, 99, 104) : BV:8
106 : ite(95, 96, 105) : BV:8
107 : ite(92, 93, 106) : BV:8
108 : ite(89, 90, 107) : BV:8
109 : ite(86, 87, 108) : BV:8
110 : ite(83, 84, 109) : BV:8
111 : ite(81, 82, 110) : BV:8
112 : bvadd(94, 78) : BV:32
113 : eq(112, 80) : BOOL
114 : eq(112, 77) : BOOL
115 : eq(112, 85) : BOOL
116 : eq(112, 88) : BOOL
117 : eq(112, 91) : BOOL
118 : eq(112, 94) : BOOL
119 : eq(112, 97) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 99, 121) : BV:8
123 : ite(118, 96, 122) : BV:8
124 : ite(117, 93, 123) : BV:8
125 : ite(116, 90, 124) : BV:8
126 : ite(115, 87, 125) : BV:8
127 : ite(114, 84, 126) : BV:8
128 : ite(113, 82, 127) : BV:8
129 : bvadd(97, 78) : BV:32
130 : eq(129, 80) : BOOL
131 : eq(129, 77) : BOOL
132 : eq(129, 85) : BOOL
133 : eq(129, 88) : BOOL
134 : eq(129, 91) : BOOL
135 : eq(129, 94) : BOOL
136 : eq(129, 97) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 99, 138) : BV:8
140 : ite(135, 96, 139) : BV:8
141 : ite(134, 93, 140) : BV:8
142 : ite(133, 90, 141) : BV:8
143 : ite(132, 87, 142) : BV:8
144 : ite(131, 84, 143) : BV:8
145 : ite(130, 82, 144) : BV:8
146 : bvadd(85, 78) : BV:32
147 : eq(146, 80) : BOOL
148 : eq(146, 77) : BOOL
149 : eq(146, 85) : BOOL
150 : eq(146, 88) : BOOL
151 : eq(146, 91) : BOOL
152 : eq(146, 94) : BOOL
153 : eq(146, 97) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 99, 155) : BV:8
157 : ite(152, 96, 156) : BV:8
158 : ite(151, 93, 157) : BV:8
159 : ite(150, 90, 158) : BV:8
160 : ite(149, 87, 159) : BV:8
161 : ite(148, 84, 160) : BV:8
162 : ite(147, 82, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 76, 163) : BV:32
165 : eq(164, 80) : BOOL
166 : eq(164, 77) : BOOL
167 : eq(164, 85) : BOOL
168 : eq(164, 88) : BOOL
169 : eq(164, 91) : BOOL
170 : eq(164, 94) : BOOL
171 : eq(164, 97) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 99, 173) : BV:8
175 : ite(170, 96, 174) : BV:8
176 : ite(169, 93, 175) : BV:8
177 : ite(168, 90, 176) : BV:8
178 : ite(167, 87, 177) : BV:8
179 : ite(166, 84, 178) : BV:8
180 : ite(165, 82, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 76, 163) : BV:32
183 : eq(182, 80) : BOOL
184 : eq(182, 77) : BOOL
185 : eq(182, 85) : BOOL
186 : eq(182, 88) : BOOL
187 : eq(182, 91) : BOOL
188 : eq(182, 94) : BOOL
189 : eq(182, 97) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 99, 191) : BV:8
193 : ite(188, 96, 192) : BV:8
194 : ite(187, 93, 193) : BV:8
195 : ite(186, 90, 194) : BV:8
196 : ite(185, 87, 195) : BV:8
197 : ite(184, 84, 196) : BV:8
198 : ite(183, 82, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 76, 163) : BV:32
201 : eq(200, 80) : BOOL
202 : eq(200, 77) : BOOL
203 : eq(200, 85) : BOOL
204 : eq(200, 88) : BOOL
205 : eq(200, 91) : BOOL
206 : eq(200, 94) : BOOL
207 : eq(200, 97) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 99, 209) : BV:8
211 : ite(206, 96, 210) : BV:8
212 : ite(205, 93, 211) : BV:8
213 : ite(204, 90, 212) : BV:8
214 : ite(203, 87, 213) : BV:8
215 : ite(202, 84, 214) : BV:8
216 : ite(201, 82, 215) : BV:8
217 : bvadd(76, 163) : BV:32
218 : eq(217, 80) : BOOL
219 : eq(217, 77) : BOOL
220 : eq(217, 85) : BOOL
221 : eq(217, 88) : BOOL
222 : eq(217, 91) : BOOL
223 : eq(217, 94) : BOOL
224 : eq(217, 97) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 99, 226) : BV:8
228 : ite(223, 96, 227) : BV:8
229 : ite(222, 93, 228) : BV:8
230 : ite(221, 90, 229) : BV:8
231 : ite(220, 87, 230) : BV:8
232 : ite(219, 84, 231) : BV:8
233 : ite(218, 82, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 235, 234) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 1478014537 { 0x5818b649 +1.19306290e49 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27010 : BV:32
2 : Lambda27011 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27015 : BV:32
2 : Lambda27016 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4 { 0x4 +1.47e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 5 { 0x5 +1.59e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 6 { 0x6 +1.71e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : bvmul(30, 2) : BV:32
50 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
51 : bvmul(30, 1) : BV:32
52 : bvadd(50, 51) : BV:32
53 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
54 : eq(52, 53) : BOOL
55 : 116 { 0x74 } : BV:8
56 : eq(52, 50) : BOOL
57 : 30 { 0x1e } : BV:8
58 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
59 : eq(52, 58) : BOOL
60 : 243 { 0xf3 -13 } : BV:8
61 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
62 : eq(52, 61) : BOOL
63 : 142 { 0x8e -114 } : BV:8
64 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
65 : eq(52, 64) : BOOL
66 : 107 { 0x6b } : BV:8
67 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
68 : eq(52, 67) : BOOL
69 : 118 { 0x76 } : BV:8
70 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
71 : eq(52, 70) : BOOL
72 : 124 { 0x7c } : BV:8
73 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
74 : eq(52, 73) : BOOL
75 : 212 { 0xd4 -44 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(68, 69, 78) : BV:8
80 : ite(65, 66, 79) : BV:8
81 : ite(62, 63, 80) : BV:8
82 : ite(59, 60, 81) : BV:8
83 : ite(56, 57, 82) : BV:8
84 : ite(54, 55, 83) : BV:8
85 : bvadd(67, 51) : BV:32
86 : eq(85, 53) : BOOL
87 : eq(85, 50) : BOOL
88 : eq(85, 58) : BOOL
89 : eq(85, 61) : BOOL
90 : eq(85, 64) : BOOL
91 : eq(85, 67) : BOOL
92 : eq(85, 70) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 69, 95) : BV:8
97 : ite(90, 66, 96) : BV:8
98 : ite(89, 63, 97) : BV:8
99 : ite(88, 60, 98) : BV:8
100 : ite(87, 57, 99) : BV:8
101 : ite(86, 55, 100) : BV:8
102 : bvadd(70, 51) : BV:32
103 : eq(102, 53) : BOOL
104 : eq(102, 50) : BOOL
105 : eq(102, 58) : BOOL
106 : eq(102, 61) : BOOL
107 : eq(102, 64) : BOOL
108 : eq(102, 67) : BOOL
109 : eq(102, 70) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 69, 112) : BV:8
114 : ite(107, 66, 113) : BV:8
115 : ite(106, 63, 114) : BV:8
116 : ite(105, 60, 115) : BV:8
117 : ite(104, 57, 116) : BV:8
118 : ite(103, 55, 117) : BV:8
119 : bvadd(58, 51) : BV:32
120 : eq(119, 53) : BOOL
121 : eq(119, 50) : BOOL
122 : eq(119, 58) : BOOL
123 : eq(119, 61) : BOOL
124 : eq(119, 64) : BOOL
125 : eq(119, 67) : BOOL
126 : eq(119, 70) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 72, 128) : BV:8
130 : ite(125, 69, 129) : BV:8
131 : ite(124, 66, 130) : BV:8
132 : ite(123, 63, 131) : BV:8
133 : ite(122, 60, 132) : BV:8
134 : ite(121, 57, 133) : BV:8
135 : ite(120, 55, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 49, 136) : BV:32
138 : eq(137, 53) : BOOL
139 : eq(137, 50) : BOOL
140 : eq(137, 58) : BOOL
141 : eq(137, 61) : BOOL
142 : eq(137, 64) : BOOL
143 : eq(137, 67) : BOOL
144 : eq(137, 70) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 72, 146) : BV:8
148 : ite(143, 69, 147) : BV:8
149 : ite(142, 66, 148) : BV:8
150 : ite(141, 63, 149) : BV:8
151 : ite(140, 60, 150) : BV:8
152 : ite(139, 57, 151) : BV:8
153 : ite(138, 55, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 49, 136) : BV:32
156 : eq(155, 53) : BOOL
157 : eq(155, 50) : BOOL
158 : eq(155, 58) : BOOL
159 : eq(155, 61) : BOOL
160 : eq(155, 64) : BOOL
161 : eq(155, 67) : BOOL
162 : eq(155, 70) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 72, 164) : BV:8
166 : ite(161, 69, 165) : BV:8
167 : ite(160, 66, 166) : BV:8
168 : ite(159, 63, 167) : BV:8
169 : ite(158, 60, 168) : BV:8
170 : ite(157, 57, 169) : BV:8
171 : ite(156, 55, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 49, 136) : BV:32
174 : eq(173, 53) : BOOL
175 : eq(173, 50) : BOOL
176 : eq(173, 58) : BOOL
177 : eq(173, 61) : BOOL
178 : eq(173, 64) : BOOL
179 : eq(173, 67) : BOOL
180 : eq(173, 70) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 72, 182) : BV:8
184 : ite(179, 69, 183) : BV:8
185 : ite(178, 66, 184) : BV:8
186 : ite(177, 63, 185) : BV:8
187 : ite(176, 60, 186) : BV:8
188 : ite(175, 57, 187) : BV:8
189 : ite(174, 55, 188) : BV:8
190 : bvadd(49, 136) : BV:32
191 : eq(190, 53) : BOOL
192 : eq(190, 50) : BOOL
193 : eq(190, 58) : BOOL
194 : eq(190, 61) : BOOL
195 : eq(190, 64) : BOOL
196 : eq(190, 67) : BOOL
197 : eq(190, 70) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 72, 199) : BV:8
201 : ite(196, 69, 200) : BV:8
202 : ite(195, 66, 201) : BV:8
203 : ite(194, 63, 202) : BV:8
204 : ite(193, 60, 203) : BV:8
205 : ite(192, 57, 204) : BV:8
206 : ite(191, 55, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 208, 207) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27017 : BV:32
2 : Lambda27018 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 5 { 0x5 +1.59e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 6 { 0x6 +1.71e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27021 : BV:32
2 : Lambda27022 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
14 : eq(12, 13) : BOOL
15 : 116 { 0x74 } : BV:8
16 : eq(12, 10) : BOOL
17 : 30 { 0x1e } : BV:8
18 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
19 : eq(12, 18) : BOOL
20 : 243 { 0xf3 -13 } : BV:8
21 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
22 : eq(12, 21) : BOOL
23 : 142 { 0x8e -114 } : BV:8
24 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
25 : eq(12, 24) : BOOL
26 : 107 { 0x6b } : BV:8
27 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
28 : eq(12, 27) : BOOL
29 : 118 { 0x76 } : BV:8
30 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
31 : eq(12, 30) : BOOL
32 : 124 { 0x7c } : BV:8
33 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
34 : eq(12, 33) : BOOL
35 : 212 { 0xd4 -44 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(27, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 10) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(30, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 10) : BOOL
65 : eq(62, 18) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 17, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(18, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 10) : BOOL
82 : eq(79, 18) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 17, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 10) : BOOL
100 : eq(97, 18) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 17, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 10) : BOOL
118 : eq(115, 18) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 17, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 10) : BOOL
136 : eq(133, 18) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 17, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 10) : BOOL
153 : eq(150, 18) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 17, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27026 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 1804522612 { 0x6b8ed474 +1.11585855e88 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 1140850684 { 0x43fffffc +1.99999952e8 } : BV:32
10 : eq(8, 9) : BOOL
11 : 116 { 0x74 } : BV:8
12 : 1140850691 { 0x44000003 +1.35e9 } : BV:32
13 : eq(8, 12) : BOOL
14 : 30 { 0x1e } : BV:8
15 : 1140850688 { 0x44000000 +1.0e9 } : BV:32
16 : eq(8, 15) : BOOL
17 : 243 { 0xf3 -13 } : BV:8
18 : 1140850686 { 0x43fffffe +1.99999976e8 } : BV:32
19 : eq(8, 18) : BOOL
20 : 142 { 0x8e -114 } : BV:8
21 : 1140850687 { 0x43ffffff +1.99999988e8 } : BV:32
22 : eq(8, 21) : BOOL
23 : 107 { 0x6b } : BV:8
24 : 1140850690 { 0x44000002 +1.23e9 } : BV:32
25 : eq(8, 24) : BOOL
26 : 118 { 0x76 } : BV:8
27 : 1140850689 { 0x44000001 +1.11e9 } : BV:32
28 : eq(8, 27) : BOOL
29 : 124 { 0x7c } : BV:8
30 : 1140850685 { 0x43fffffd +1.99999964e8 } : BV:32
31 : eq(8, 30) : BOOL
32 : 212 { 0xd4 -44 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2096007005 { 0x7cee875d +1.86350595e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2475481472 { 0x938cd980 -1819485824 -1.10038757e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2475481475 { 0x938cd983 -1819485821 -1.10038793e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1582751736 { 0x5e56dff8 +1.67870998e61 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1582751739 { 0x5e56dffb +1.67871034e61 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2304270204 { 0x89585f7c -1990697092 -1.69041395e147 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2304270207 { 0x89585f7f -1990697089 -1.69041430e147 } : BV:32
=counter_example.random_seed
1217124433
=counter_example_end
=global nodece 59 num_edges_traversed 2
=global nodece 59 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 60
=global nodece 60 nodece z3.ce11346.num_edges_traversed1
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce11346 95305fd6bac9f725f94190c45c82e221
=input.spec-%var-x-1
1 : Lambda27286 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27289 : BV:32
18 : Lambda27287 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27288 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 8 { 0x8 } : BV:8
65 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
66 : eq(61, 65) : BOOL
67 : 56 { 0x38 } : BV:8
68 : eq(61, 59) : BOOL
69 : 187 { 0xbb -69 } : BV:8
70 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
71 : eq(61, 70) : BOOL
72 : 188 { 0xbc -68 } : BV:8
73 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 110 { 0x6e } : BV:8
76 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
77 : eq(61, 76) : BOOL
78 : 235 { 0xeb -21 } : BV:8
79 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
80 : eq(61, 79) : BOOL
81 : 89 { 0x59 } : BV:8
82 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
83 : eq(61, 82) : BOOL
84 : 91 { 0x5b } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 10813440 { 0xa50000 +1.28906250e130 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 10813441 { 0xa50001 +1.28906261e130 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 786370985 { 0x2edf11a9 +1.74272644e222 } : BV:32
=input.dst.llvm-%x
1 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
=input.dst.llvm-%n
1 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
=input.dst.llvm-%m
1 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2104229883 ] -> 0, [ 2104229884; 2104229884 ] -> 188, [ 2104229885; 2104229885 ] -> 91, [ 2104229886; 2104229886 ] -> 89, [ 2104229887; 2104229887 ] -> 187, [ 2104229888; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 8, [ 2147483645; 2147483645 ] -> 56, [ 2147483646; 2147483646 ] -> 110, [ 2147483647; 2147483647 ] -> 235, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 472186911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 472186912; 472186915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 472186916; 1144588927 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1144588928; 1144588931 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1144588932; 1549599363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1549599364; 1549599367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1549599368; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 472186912 { 0x1c250020 +1.28906631e185 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1549599364 { 0x5c5d0284 +1.72663927e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1144588928 { 0x44390a80 +1.44563293e9 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27293 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27296 : BV:32
18 : Lambda27294 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27295 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 8 { 0x8 } : BV:8
84 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
85 : eq(80, 84) : BOOL
86 : 56 { 0x38 } : BV:8
87 : eq(80, 78) : BOOL
88 : 187 { 0xbb -69 } : BV:8
89 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
90 : eq(80, 89) : BOOL
91 : 188 { 0xbc -68 } : BV:8
92 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 110 { 0x6e } : BV:8
95 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
96 : eq(80, 95) : BOOL
97 : 235 { 0xeb -21 } : BV:8
98 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
99 : eq(80, 98) : BOOL
100 : 89 { 0x59 } : BV:8
101 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
102 : eq(80, 101) : BOOL
103 : 91 { 0x5b } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 236, 235) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27290 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27291 : BV:32
7 : 497684613 { 0x1daa1085 +1.32862913e188 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27298 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27299 : BV:32
18 : 10813441 { 0xa50001 +1.28906261e130 } : BV:32
19 : eq(17, 18) : BOOL
20 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3949869064 { 0xeb6e3808 -345098232 -1.86108493e87 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 56 { 0x38 } : BV:8
33 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
34 : eq(26, 33) : BOOL
35 : 187 { 0xbb -69 } : BV:8
36 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
37 : eq(26, 36) : BOOL
38 : 188 { 0xbc -68 } : BV:8
39 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
40 : eq(26, 39) : BOOL
41 : 110 { 0x6e } : BV:8
42 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
43 : eq(26, 42) : BOOL
44 : 235 { 0xeb -21 } : BV:8
45 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
46 : eq(26, 45) : BOOL
47 : 89 { 0x59 } : BV:8
48 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
49 : eq(26, 48) : BOOL
50 : 91 { 0x5b } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 10813440 { 0xa50000 +1.28906250e130 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 541851648 ] -> true, [ 541851649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 541851648 ] -> true, [ 541851649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27235 : BV:32
2 : Lambda27236 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27240 : BV:32
2 : Lambda27241 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 8 { 0x8 } : BV:8
57 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
58 : eq(53, 57) : BOOL
59 : 56 { 0x38 } : BV:8
60 : eq(53, 51) : BOOL
61 : 187 { 0xbb -69 } : BV:8
62 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
63 : eq(53, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 110 { 0x6e } : BV:8
68 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
69 : eq(53, 68) : BOOL
70 : 235 { 0xeb -21 } : BV:8
71 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
72 : eq(53, 71) : BOOL
73 : 89 { 0x59 } : BV:8
74 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
75 : eq(53, 74) : BOOL
76 : 91 { 0x5b } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 209, 208) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27242 : BV:32
2 : Lambda27243 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27246 : BV:32
2 : Lambda27247 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 8 { 0x8 } : BV:8
16 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
17 : eq(12, 16) : BOOL
18 : 56 { 0x38 } : BV:8
19 : eq(12, 10) : BOOL
20 : 187 { 0xbb -69 } : BV:8
21 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
22 : eq(12, 21) : BOOL
23 : 188 { 0xbc -68 } : BV:8
24 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 110 { 0x6e } : BV:8
27 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
28 : eq(12, 27) : BOOL
29 : 235 { 0xeb -21 } : BV:8
30 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
31 : eq(12, 30) : BOOL
32 : 89 { 0x59 } : BV:8
33 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
34 : eq(12, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1610612736 ] -> true, [ 1610612737; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27251 : BV:32
2 : 10813441 { 0xa50001 +1.28906261e130 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3949869064 { 0xeb6e3808 -345098232 -1.86108493e87 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 8 { 0x8 } : BV:8
15 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 56 { 0x38 } : BV:8
18 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
19 : eq(11, 18) : BOOL
20 : 187 { 0xbb -69 } : BV:8
21 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
22 : eq(11, 21) : BOOL
23 : 188 { 0xbc -68 } : BV:8
24 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 110 { 0x6e } : BV:8
27 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
28 : eq(11, 27) : BOOL
29 : 235 { 0xeb -21 } : BV:8
30 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
31 : eq(11, 30) : BOOL
32 : 89 { 0x59 } : BV:8
33 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
34 : eq(11, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 10813440 { 0xa50000 +1.28906250e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1927644638 { 0x72e585de +1.79314780e102 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 3949869064 { 0xeb6e3808 -345098232 -1.86108493e87 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 2167406592 { 0x81300000 -2127560704 -1.37500000e131 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1822308360 { 0x6c9e3808 +1.23608493e90 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 2167406592 { 0x81300000 -2127560704 -1.37500000e131 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 1822308360 { 0x6c9e3808 +1.23608493e90 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 43253760 { 0x2940000 +1.15625000e134 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 43253760 { 0x2940000 +1.15625000e134 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1144588928 { 0x44390a80 +1.44563293e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1144588931 { 0x44390a83 +1.44563329e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 472186912 { 0x1c250020 +1.28906631e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 472186915 { 0x1c250023 +1.28906667e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1549599364 { 0x5c5d0284 +1.72663927e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1549599367 { 0x5c5d0287 +1.72663962e57 } : BV:32
=counter_example.random_seed
1389182309
=counter_example_end
=global nodece 60 num_edges_traversed 1
=global nodece 60 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce11398.num_edges_traversed2
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(epsilon)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce11398 117bb531d2fd24fc2980508840c28b4f
=input.spec-%var-x-1
1 : Lambda27286 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27289 : BV:32
18 : Lambda27287 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27288 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 8 { 0x8 } : BV:8
65 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
66 : eq(61, 65) : BOOL
67 : 56 { 0x38 } : BV:8
68 : eq(61, 59) : BOOL
69 : 187 { 0xbb -69 } : BV:8
70 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
71 : eq(61, 70) : BOOL
72 : 188 { 0xbc -68 } : BV:8
73 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 110 { 0x6e } : BV:8
76 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
77 : eq(61, 76) : BOOL
78 : 235 { 0xeb -21 } : BV:8
79 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
80 : eq(61, 79) : BOOL
81 : 89 { 0x59 } : BV:8
82 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
83 : eq(61, 82) : BOOL
84 : 91 { 0x5b } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(70, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 10813440 { 0xa50000 +1.28906250e130 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 10813441 { 0xa50001 +1.28906261e130 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 786370986 { 0x2edf11aa +1.74272656e222 } : BV:32
=input.dst.llvm-%x
1 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
=input.dst.llvm-%n
1 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
=input.dst.llvm-%m
1 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2104229883 ] -> 0, [ 2104229884; 2104229884 ] -> 188, [ 2104229885; 2104229885 ] -> 91, [ 2104229886; 2104229886 ] -> 89, [ 2104229887; 2104229887 ] -> 187, [ 2104229888; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 8, [ 2147483645; 2147483645 ] -> 56, [ 2147483646; 2147483646 ] -> 110, [ 2147483647; 2147483647 ] -> 235, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 472186911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 472186912; 472186915 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 472186916; 1144588927 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1144588928; 1144588931 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1144588932; 1549599363 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1549599364; 1549599367 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1549599368; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 472186912 { 0x1c250020 +1.28906631e185 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1549599364 { 0x5c5d0284 +1.72663927e57 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1144588928 { 0x44390a80 +1.44563293e9 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27293 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27296 : BV:32
18 : Lambda27294 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27295 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 8 { 0x8 } : BV:8
84 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
85 : eq(80, 84) : BOOL
86 : 56 { 0x38 } : BV:8
87 : eq(80, 78) : BOOL
88 : 187 { 0xbb -69 } : BV:8
89 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
90 : eq(80, 89) : BOOL
91 : 188 { 0xbc -68 } : BV:8
92 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 110 { 0x6e } : BV:8
95 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
96 : eq(80, 95) : BOOL
97 : 235 { 0xeb -21 } : BV:8
98 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
99 : eq(80, 98) : BOOL
100 : 89 { 0x59 } : BV:8
101 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
102 : eq(80, 101) : BOOL
103 : 91 { 0x5b } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(89, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 236, 235) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27290 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27291 : BV:32
7 : 497684613 { 0x1daa1085 +1.32862913e188 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27298 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27299 : BV:32
18 : 10813441 { 0xa50001 +1.28906261e130 } : BV:32
19 : eq(17, 18) : BOOL
20 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3949869064 { 0xeb6e3808 -345098232 -1.86108493e87 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
28 : eq(26, 27) : BOOL
29 : 8 { 0x8 } : BV:8
30 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
31 : eq(26, 30) : BOOL
32 : 56 { 0x38 } : BV:8
33 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
34 : eq(26, 33) : BOOL
35 : 187 { 0xbb -69 } : BV:8
36 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
37 : eq(26, 36) : BOOL
38 : 188 { 0xbc -68 } : BV:8
39 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
40 : eq(26, 39) : BOOL
41 : 110 { 0x6e } : BV:8
42 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
43 : eq(26, 42) : BOOL
44 : 235 { 0xeb -21 } : BV:8
45 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
46 : eq(26, 45) : BOOL
47 : 89 { 0x59 } : BV:8
48 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
49 : eq(26, 48) : BOOL
50 : 91 { 0x5b } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 10813440 { 0xa50000 +1.28906250e130 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 541851648 ] -> true, [ 541851649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 541851648 ] -> true, [ 541851649; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27235 : BV:32
2 : Lambda27236 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27240 : BV:32
2 : Lambda27241 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 8 { 0x8 } : BV:8
57 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
58 : eq(53, 57) : BOOL
59 : 56 { 0x38 } : BV:8
60 : eq(53, 51) : BOOL
61 : 187 { 0xbb -69 } : BV:8
62 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
63 : eq(53, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 110 { 0x6e } : BV:8
68 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
69 : eq(53, 68) : BOOL
70 : 235 { 0xeb -21 } : BV:8
71 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
72 : eq(53, 71) : BOOL
73 : 89 { 0x59 } : BV:8
74 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
75 : eq(53, 74) : BOOL
76 : 91 { 0x5b } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(62, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 209, 208) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27242 : BV:32
2 : Lambda27243 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 541851649 { 0x204c0001 +1.59375011e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1610612736 { 0x60000000 +1.0e65 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 1610612737 { 0x60000001 +1.11e65 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 1610612738 { 0x60000002 +1.23e65 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27246 : BV:32
2 : Lambda27247 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 8 { 0x8 } : BV:8
16 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
17 : eq(12, 16) : BOOL
18 : 56 { 0x38 } : BV:8
19 : eq(12, 10) : BOOL
20 : 187 { 0xbb -69 } : BV:8
21 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
22 : eq(12, 21) : BOOL
23 : 188 { 0xbc -68 } : BV:8
24 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 110 { 0x6e } : BV:8
27 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
28 : eq(12, 27) : BOOL
29 : 235 { 0xeb -21 } : BV:8
30 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
31 : eq(12, 30) : BOOL
32 : 89 { 0x59 } : BV:8
33 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
34 : eq(12, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(21, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 1610612736 ] -> true, [ 1610612737; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27251 : BV:32
2 : 10813441 { 0xa50001 +1.28906261e130 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 541851648 { 0x204c0000 +1.59375000e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3949869064 { 0xeb6e3808 -345098232 -1.86108493e87 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
13 : eq(11, 12) : BOOL
14 : 8 { 0x8 } : BV:8
15 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
16 : eq(11, 15) : BOOL
17 : 56 { 0x38 } : BV:8
18 : 2104229887 { 0x7d6bffff +1.84374988e123 } : BV:32
19 : eq(11, 18) : BOOL
20 : 187 { 0xbb -69 } : BV:8
21 : 2104229884 { 0x7d6bfffc +1.84374952e123 } : BV:32
22 : eq(11, 21) : BOOL
23 : 188 { 0xbc -68 } : BV:8
24 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
25 : eq(11, 24) : BOOL
26 : 110 { 0x6e } : BV:8
27 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
28 : eq(11, 27) : BOOL
29 : 235 { 0xeb -21 } : BV:8
30 : 2104229886 { 0x7d6bfffe +1.84374976e123 } : BV:32
31 : eq(11, 30) : BOOL
32 : 89 { 0x59 } : BV:8
33 : 2104229885 { 0x7d6bfffd +1.84374964e123 } : BV:32
34 : eq(11, 33) : BOOL
35 : 91 { 0x5b } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 10813440 { 0xa50000 +1.28906250e130 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 541851650 { 0x204c0002 +1.59375023e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1927644639 { 0x72e585df +1.79314792e102 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1144588928 { 0x44390a80 +1.44563293e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1144588931 { 0x44390a83 +1.44563329e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 472186912 { 0x1c250020 +1.28906631e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 472186915 { 0x1c250023 +1.28906667e185 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1549599364 { 0x5c5d0284 +1.72663927e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1549599367 { 0x5c5d0287 +1.72663962e57 } : BV:32
=counter_example.random_seed
1389182309
=counter_example_end
=global nodece 61 num_edges_traversed 2
=global nodece 61 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 62
=global nodece 62 nodece z3.ce11440.num_edges_traversed1
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce11440 9b473bc2a13f5d3e6b423fdc7ddc69b9
=input.spec-%var-x-1
1 : Lambda27635 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27638 : BV:32
18 : Lambda27636 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27637 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
63 : eq(61, 62) : BOOL
64 : 160 { 0xa0 -96 } : BV:8
65 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
66 : eq(61, 65) : BOOL
67 : 6 { 0x6 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
71 : eq(61, 70) : BOOL
72 : 224 { 0xe0 -32 } : BV:8
73 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 30 { 0x1e } : BV:8
76 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 59 { 0x3b } : BV:8
79 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
80 : eq(61, 79) : BOOL
81 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
82 : eq(61, 81) : BOOL
83 : 193 { 0xc1 -63 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(80, 69, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(66, 67, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(79, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 65) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 79) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 69, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 67, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(81, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 65) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 79) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 67, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(70, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 65) : BOOL
130 : eq(127, 59) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 79) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 69, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 67, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 65) : BOOL
148 : eq(145, 59) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 69, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 67, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 65) : BOOL
166 : eq(163, 59) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 79) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 69, 172) : BV:8
174 : ite(169, 78, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 67, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 65) : BOOL
184 : eq(181, 59) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 79) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 69, 190) : BV:8
192 : ite(187, 78, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 67, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 65) : BOOL
201 : eq(198, 59) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 79) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 69, 207) : BV:8
209 : ite(204, 78, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 67, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%var-x_ij-0.L4%26%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L4%26%d
1 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-0.L4%19%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-3.L4%26%d
1 : 0 { 0x0 } : BOOL
=input.spec-%var-j-0.L4%18%bbentry
1 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 196784335 { 0xbbab0cf +1.45852077e152 } : BV:32
=input.dst.llvm-%x
1 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
=input.dst.llvm-%n
1 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
=input.dst.llvm-%m
1 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1081606147 ] -> 0, [ 1081606148; 1081606148 ] -> 224, [ 1081606149; 1081606149 ] -> 193, [ 1081606150; 1081606151 ] -> 255, [ 1081606152; 2155347967 ] -> 0, [ 2155347968; 2155347968 ] -> 160, [ 2155347969; 2155347969 ] -> 6, [ 2155347970; 2155347970 ] -> 30, [ 2155347971; 2155347971 ] -> 59, [ 2155347972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 572012003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 572012004; 572012007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 572012008; 740329839 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 740329840; 740329843 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 740329844; 2703108611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2703108612; 2703108615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2703108616; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 740329840 { 0x2c208970 +1.25419425e217 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2703108612 { 0xa11e2a04 -1591858684 -1.23565721e195 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 572012004 { 0x221835e4 +1.18914461e197 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27642 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27645 : BV:32
18 : Lambda27643 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27644 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : 160 { 0xa0 -96 } : BV:8
84 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
85 : eq(80, 84) : BOOL
86 : 6 { 0x6 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
90 : eq(80, 89) : BOOL
91 : 224 { 0xe0 -32 } : BV:8
92 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 30 { 0x1e } : BV:8
95 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 59 { 0x3b } : BV:8
98 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
99 : eq(80, 98) : BOOL
100 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
101 : eq(80, 100) : BOOL
102 : 193 { 0xc1 -63 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(99, 88, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(85, 86, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(98, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 84) : BOOL
115 : eq(112, 78) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 98) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 88, 121) : BV:8
123 : ite(118, 97, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 86, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(100, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 78) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 98) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 88, 138) : BV:8
140 : ite(135, 97, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 86, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(89, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 84) : BOOL
149 : eq(146, 78) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 98) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 88, 155) : BV:8
157 : ite(152, 97, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 86, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 84) : BOOL
167 : eq(164, 78) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 98) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 88, 173) : BV:8
175 : ite(170, 97, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 86, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 84) : BOOL
185 : eq(182, 78) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 98) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 88, 191) : BV:8
193 : ite(188, 97, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 86, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 84) : BOOL
203 : eq(200, 78) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 98) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 88, 209) : BV:8
211 : ite(206, 97, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 86, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 84) : BOOL
220 : eq(217, 78) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 98) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 88, 226) : BV:8
228 : ite(223, 97, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 86, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 235, 234) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27639 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27640 : BV:32
7 : 1554258996 { 0x5ca41c34 +1.28211069e58 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-6.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27647 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27648 : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 991823520 { 0x3b1e06a0 +1.23457717e247 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 160 { 0xa0 -96 } : BV:8
30 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 6 { 0x6 } : BV:8
33 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
37 : eq(26, 36) : BOOL
38 : 224 { 0xe0 -32 } : BV:8
39 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
40 : eq(26, 39) : BOOL
41 : 30 { 0x1e } : BV:8
42 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
43 : eq(26, 42) : BOOL
44 : 59 { 0x3b } : BV:8
45 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
46 : eq(26, 45) : BOOL
47 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
48 : eq(26, 47) : BOOL
49 : 193 { 0xc1 -63 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(46, 35, 51) : BV:8
53 : ite(43, 44, 52) : BV:8
54 : ite(40, 41, 53) : BV:8
55 : ite(37, 38, 54) : BV:8
56 : ite(34, 35, 55) : BV:8
57 : ite(31, 32, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 24, 25) : BV:32
61 : eq(60, 27) : BOOL
62 : eq(60, 30) : BOOL
63 : eq(60, 33) : BOOL
64 : eq(60, 36) : BOOL
65 : eq(60, 39) : BOOL
66 : eq(60, 42) : BOOL
67 : eq(60, 45) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 35, 69) : BV:8
71 : ite(66, 44, 70) : BV:8
72 : ite(65, 41, 71) : BV:8
73 : ite(64, 38, 72) : BV:8
74 : ite(63, 35, 73) : BV:8
75 : ite(62, 32, 74) : BV:8
76 : ite(61, 29, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 24, 25) : BV:32
79 : eq(78, 27) : BOOL
80 : eq(78, 30) : BOOL
81 : eq(78, 33) : BOOL
82 : eq(78, 36) : BOOL
83 : eq(78, 39) : BOOL
84 : eq(78, 42) : BOOL
85 : eq(78, 45) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 35, 87) : BV:8
89 : ite(84, 44, 88) : BV:8
90 : ite(83, 41, 89) : BV:8
91 : ite(82, 38, 90) : BV:8
92 : ite(81, 35, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : bvadd(24, 25) : BV:32
96 : eq(95, 27) : BOOL
97 : eq(95, 30) : BOOL
98 : eq(95, 33) : BOOL
99 : eq(95, 36) : BOOL
100 : eq(95, 39) : BOOL
101 : eq(95, 42) : BOOL
102 : eq(95, 45) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 35, 104) : BV:8
106 : ite(101, 44, 105) : BV:8
107 : ite(100, 41, 106) : BV:8
108 : ite(99, 38, 107) : BV:8
109 : ite(98, 35, 108) : BV:8
110 : ite(97, 32, 109) : BV:8
111 : ite(96, 29, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(21, 2, 112) : BV:32
114 : ite(19, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L4%31%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 293604887 ] -> true, [ 293604888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 293604887 ] -> true, [ 293604888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27584 : BV:32
2 : Lambda27585 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27589 : BV:32
2 : Lambda27590 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
55 : eq(53, 54) : BOOL
56 : 160 { 0xa0 -96 } : BV:8
57 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
58 : eq(53, 57) : BOOL
59 : 6 { 0x6 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
63 : eq(53, 62) : BOOL
64 : 224 { 0xe0 -32 } : BV:8
65 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 30 { 0x1e } : BV:8
68 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 59 { 0x3b } : BV:8
71 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
72 : eq(53, 71) : BOOL
73 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
74 : eq(53, 73) : BOOL
75 : 193 { 0xc1 -63 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(72, 61, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(58, 59, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(71, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 57) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 71) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 61, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 59, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(73, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 71) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 59, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(62, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 57) : BOOL
122 : eq(119, 51) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 71) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 61, 128) : BV:8
130 : ite(125, 70, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 59, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 57) : BOOL
140 : eq(137, 51) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 71) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 61, 146) : BV:8
148 : ite(143, 70, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 59, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 57) : BOOL
158 : eq(155, 51) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 71) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 61, 164) : BV:8
166 : ite(161, 70, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 59, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 57) : BOOL
176 : eq(173, 51) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 71) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 61, 182) : BV:8
184 : ite(179, 70, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 59, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 57) : BOOL
193 : eq(190, 51) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 71) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 61, 199) : BV:8
201 : ite(196, 70, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 59, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 208, 207) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27591 : BV:32
2 : Lambda27592 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27595 : BV:32
2 : Lambda27596 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 160 { 0xa0 -96 } : BV:8
16 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 6 { 0x6 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
22 : eq(12, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 30 { 0x1e } : BV:8
27 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 59 { 0x3b } : BV:8
30 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
31 : eq(12, 30) : BOOL
32 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
33 : eq(12, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 20, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(30, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 16) : BOOL
47 : eq(44, 10) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 30) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 20, 53) : BV:8
55 : ite(50, 29, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 18, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(32, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 16) : BOOL
64 : eq(61, 10) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 30) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 20, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 18, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(21, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 16) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 30) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 20, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 18, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 20, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 18, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 16) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 30) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 20, 123) : BV:8
125 : ite(120, 29, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 18, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 16) : BOOL
135 : eq(132, 10) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 30) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 20, 141) : BV:8
143 : ite(138, 29, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 18, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 16) : BOOL
152 : eq(149, 10) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 30) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 20, 158) : BV:8
160 : ite(155, 29, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 18, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 562047000 ] -> true, [ 562047001; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27600 : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 991823520 { 0x3b1e06a0 +1.23457717e247 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 160 { 0xa0 -96 } : BV:8
15 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 6 { 0x6 } : BV:8
18 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
19 : eq(11, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
22 : eq(11, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : 30 { 0x1e } : BV:8
27 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 59 { 0x3b } : BV:8
30 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
33 : eq(11, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 20, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(13, 14, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 9, 10) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 20, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 9, 10) : BV:32
64 : eq(63, 12) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : eq(63, 30) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 20, 72) : BV:8
74 : ite(69, 29, 73) : BV:8
75 : ite(68, 26, 74) : BV:8
76 : ite(67, 23, 75) : BV:8
77 : ite(66, 20, 76) : BV:8
78 : ite(65, 17, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : bvadd(9, 10) : BV:32
81 : eq(80, 12) : BOOL
82 : eq(80, 15) : BOOL
83 : eq(80, 18) : BOOL
84 : eq(80, 21) : BOOL
85 : eq(80, 24) : BOOL
86 : eq(80, 27) : BOOL
87 : eq(80, 30) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 20, 89) : BV:8
91 : ite(86, 29, 90) : BV:8
92 : ite(85, 26, 91) : BV:8
93 : ite(84, 23, 92) : BV:8
94 : ite(83, 20, 93) : BV:8
95 : ite(82, 17, 94) : BV:8
96 : ite(81, 14, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(6, 4, 97) : BV:32
99 : ite(3, 4, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1375482000 { 0x51fc3090 +1.97023200e36 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 991823520 { 0x3b1e06a0 +1.23457717e247 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 1174419552 { 0x46003860 +1.172042e13 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2166243072 { 0x811e3f00 -2128724224 -1.23629760e131 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 1174419552 { 0x46003860 +1.172042e13 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 2166243072 { 0x811e3f00 -2128724224 -1.23629760e131 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 572012004 { 0x221835e4 +1.18914461e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 572012007 { 0x221835e7 +1.18914496e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 740329840 { 0x2c208970 +1.25419425e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 740329843 { 0x2c208973 +1.25419461e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2703108612 { 0xa11e2a04 -1591858684 -1.23565721e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2703108615 { 0xa11e2a07 -1591858681 -1.23565757e195 } : BV:32
=counter_example.random_seed
4240641033
=counter_example_end
=global nodece 62 num_edges_traversed 1
=global nodece 62 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 63
=global nodece 63 nodece z3.ce11492.num_edges_traversed2
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(epsilon)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce11492 3470d15927bfe9811231d1491eb5
=input.spec-%var-x-1
1 : Lambda27635 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27638 : BV:32
18 : Lambda27636 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27637 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
63 : eq(61, 62) : BOOL
64 : 160 { 0xa0 -96 } : BV:8
65 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
66 : eq(61, 65) : BOOL
67 : 6 { 0x6 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
71 : eq(61, 70) : BOOL
72 : 224 { 0xe0 -32 } : BV:8
73 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
74 : eq(61, 73) : BOOL
75 : 30 { 0x1e } : BV:8
76 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
77 : eq(61, 76) : BOOL
78 : 59 { 0x3b } : BV:8
79 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
80 : eq(61, 79) : BOOL
81 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
82 : eq(61, 81) : BOOL
83 : 193 { 0xc1 -63 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(80, 69, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(68, 69, 89) : BV:8
91 : ite(66, 67, 90) : BV:8
92 : ite(63, 64, 91) : BV:8
93 : bvadd(79, 60) : BV:32
94 : eq(93, 62) : BOOL
95 : eq(93, 65) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 70) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 79) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 69, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 69, 106) : BV:8
108 : ite(95, 67, 107) : BV:8
109 : ite(94, 64, 108) : BV:8
110 : bvadd(81, 60) : BV:32
111 : eq(110, 62) : BOOL
112 : eq(110, 65) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 70) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 79) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 69, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 69, 123) : BV:8
125 : ite(112, 67, 124) : BV:8
126 : ite(111, 64, 125) : BV:8
127 : bvadd(70, 60) : BV:32
128 : eq(127, 62) : BOOL
129 : eq(127, 65) : BOOL
130 : eq(127, 59) : BOOL
131 : eq(127, 70) : BOOL
132 : eq(127, 73) : BOOL
133 : eq(127, 76) : BOOL
134 : eq(127, 79) : BOOL
135 : eq(127, 81) : BOOL
136 : ite(135, 83, 84) : BV:8
137 : ite(134, 69, 136) : BV:8
138 : ite(133, 78, 137) : BV:8
139 : ite(132, 75, 138) : BV:8
140 : ite(131, 72, 139) : BV:8
141 : ite(130, 69, 140) : BV:8
142 : ite(129, 67, 141) : BV:8
143 : ite(128, 64, 142) : BV:8
144 : bvconcat(92, 109, 126, 143) : BV:32
145 : bvadd(56, 58, 144) : BV:32
146 : eq(145, 62) : BOOL
147 : eq(145, 65) : BOOL
148 : eq(145, 59) : BOOL
149 : eq(145, 70) : BOOL
150 : eq(145, 73) : BOOL
151 : eq(145, 76) : BOOL
152 : eq(145, 79) : BOOL
153 : eq(145, 81) : BOOL
154 : ite(153, 83, 84) : BV:8
155 : ite(152, 69, 154) : BV:8
156 : ite(151, 78, 155) : BV:8
157 : ite(150, 75, 156) : BV:8
158 : ite(149, 72, 157) : BV:8
159 : ite(148, 69, 158) : BV:8
160 : ite(147, 67, 159) : BV:8
161 : ite(146, 64, 160) : BV:8
162 : 2 { 0x2 +1.23e129 } : BV:32
163 : bvadd(162, 58, 144) : BV:32
164 : eq(163, 62) : BOOL
165 : eq(163, 65) : BOOL
166 : eq(163, 59) : BOOL
167 : eq(163, 70) : BOOL
168 : eq(163, 73) : BOOL
169 : eq(163, 76) : BOOL
170 : eq(163, 79) : BOOL
171 : eq(163, 81) : BOOL
172 : ite(171, 83, 84) : BV:8
173 : ite(170, 69, 172) : BV:8
174 : ite(169, 78, 173) : BV:8
175 : ite(168, 75, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 69, 176) : BV:8
178 : ite(165, 67, 177) : BV:8
179 : ite(164, 64, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 58, 144) : BV:32
182 : eq(181, 62) : BOOL
183 : eq(181, 65) : BOOL
184 : eq(181, 59) : BOOL
185 : eq(181, 70) : BOOL
186 : eq(181, 73) : BOOL
187 : eq(181, 76) : BOOL
188 : eq(181, 79) : BOOL
189 : eq(181, 81) : BOOL
190 : ite(189, 83, 84) : BV:8
191 : ite(188, 69, 190) : BV:8
192 : ite(187, 78, 191) : BV:8
193 : ite(186, 75, 192) : BV:8
194 : ite(185, 72, 193) : BV:8
195 : ite(184, 69, 194) : BV:8
196 : ite(183, 67, 195) : BV:8
197 : ite(182, 64, 196) : BV:8
198 : bvadd(58, 144) : BV:32
199 : eq(198, 62) : BOOL
200 : eq(198, 65) : BOOL
201 : eq(198, 59) : BOOL
202 : eq(198, 70) : BOOL
203 : eq(198, 73) : BOOL
204 : eq(198, 76) : BOOL
205 : eq(198, 79) : BOOL
206 : eq(198, 81) : BOOL
207 : ite(206, 83, 84) : BV:8
208 : ite(205, 69, 207) : BV:8
209 : ite(204, 78, 208) : BV:8
210 : ite(203, 75, 209) : BV:8
211 : ite(202, 72, 210) : BV:8
212 : ite(201, 69, 211) : BV:8
213 : ite(200, 67, 212) : BV:8
214 : ite(199, 64, 213) : BV:8
215 : bvconcat(161, 179, 197, 214) : BV:32
216 : ite(55, 2, 215) : BV:32
217 : lambda(52, 216) : FUNCTION[BV:32 -> BV:32]
218 : map(51, 217) : MAP[BV:32 -> BV:32]
219 : lambda(17, 218) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
220 : map(16, 219) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
221 : sym_const(220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%tmpvar-12.L4%18%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-j-0.L4%18%bbentry
1 : 293604890 { 0x11800e1a +1.43034e164 } : BV:32
=input.src.spec-ghostvar.itervar.2.L4%18%bbentry
1 : 196784336 { 0xbbab0d0 +1.45852088e152 } : BV:32
=input.dst.llvm-%x
1 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
=input.dst.llvm-%n
1 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
=input.dst.llvm-%m
1 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1081606147 ] -> 0, [ 1081606148; 1081606148 ] -> 224, [ 1081606149; 1081606149 ] -> 193, [ 1081606150; 1081606151 ] -> 255, [ 1081606152; 2155347967 ] -> 0, [ 2155347968; 2155347968 ] -> 160, [ 2155347969; 2155347969 ] -> 6, [ 2155347970; 2155347970 ] -> 30, [ 2155347971; 2155347971 ] -> 59, [ 2155347972; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 572012003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 572012004; 572012007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 572012008; 740329839 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 740329840; 740329843 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 740329844; 2703108611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2703108612; 2703108615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2703108616; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 740329840 { 0x2c208970 +1.25419425e217 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2703108612 { 0xa11e2a04 -1591858684 -1.23565721e195 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 572012004 { 0x221835e4 +1.18914461e197 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda27642 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27645 : BV:32
18 : Lambda27643 : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda27644 : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : 160 { 0xa0 -96 } : BV:8
84 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
85 : eq(80, 84) : BOOL
86 : 6 { 0x6 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
90 : eq(80, 89) : BOOL
91 : 224 { 0xe0 -32 } : BV:8
92 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
93 : eq(80, 92) : BOOL
94 : 30 { 0x1e } : BV:8
95 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
96 : eq(80, 95) : BOOL
97 : 59 { 0x3b } : BV:8
98 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
99 : eq(80, 98) : BOOL
100 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
101 : eq(80, 100) : BOOL
102 : 193 { 0xc1 -63 } : BV:8
103 : 0 { 0x0 } : BV:8
104 : ite(101, 102, 103) : BV:8
105 : ite(99, 88, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(90, 91, 107) : BV:8
109 : ite(87, 88, 108) : BV:8
110 : ite(85, 86, 109) : BV:8
111 : ite(82, 83, 110) : BV:8
112 : bvadd(98, 79) : BV:32
113 : eq(112, 81) : BOOL
114 : eq(112, 84) : BOOL
115 : eq(112, 78) : BOOL
116 : eq(112, 89) : BOOL
117 : eq(112, 92) : BOOL
118 : eq(112, 95) : BOOL
119 : eq(112, 98) : BOOL
120 : eq(112, 100) : BOOL
121 : ite(120, 102, 103) : BV:8
122 : ite(119, 88, 121) : BV:8
123 : ite(118, 97, 122) : BV:8
124 : ite(117, 94, 123) : BV:8
125 : ite(116, 91, 124) : BV:8
126 : ite(115, 88, 125) : BV:8
127 : ite(114, 86, 126) : BV:8
128 : ite(113, 83, 127) : BV:8
129 : bvadd(100, 79) : BV:32
130 : eq(129, 81) : BOOL
131 : eq(129, 84) : BOOL
132 : eq(129, 78) : BOOL
133 : eq(129, 89) : BOOL
134 : eq(129, 92) : BOOL
135 : eq(129, 95) : BOOL
136 : eq(129, 98) : BOOL
137 : eq(129, 100) : BOOL
138 : ite(137, 102, 103) : BV:8
139 : ite(136, 88, 138) : BV:8
140 : ite(135, 97, 139) : BV:8
141 : ite(134, 94, 140) : BV:8
142 : ite(133, 91, 141) : BV:8
143 : ite(132, 88, 142) : BV:8
144 : ite(131, 86, 143) : BV:8
145 : ite(130, 83, 144) : BV:8
146 : bvadd(89, 79) : BV:32
147 : eq(146, 81) : BOOL
148 : eq(146, 84) : BOOL
149 : eq(146, 78) : BOOL
150 : eq(146, 89) : BOOL
151 : eq(146, 92) : BOOL
152 : eq(146, 95) : BOOL
153 : eq(146, 98) : BOOL
154 : eq(146, 100) : BOOL
155 : ite(154, 102, 103) : BV:8
156 : ite(153, 88, 155) : BV:8
157 : ite(152, 97, 156) : BV:8
158 : ite(151, 94, 157) : BV:8
159 : ite(150, 91, 158) : BV:8
160 : ite(149, 88, 159) : BV:8
161 : ite(148, 86, 160) : BV:8
162 : ite(147, 83, 161) : BV:8
163 : bvconcat(111, 128, 145, 162) : BV:32
164 : bvadd(75, 77, 163) : BV:32
165 : eq(164, 81) : BOOL
166 : eq(164, 84) : BOOL
167 : eq(164, 78) : BOOL
168 : eq(164, 89) : BOOL
169 : eq(164, 92) : BOOL
170 : eq(164, 95) : BOOL
171 : eq(164, 98) : BOOL
172 : eq(164, 100) : BOOL
173 : ite(172, 102, 103) : BV:8
174 : ite(171, 88, 173) : BV:8
175 : ite(170, 97, 174) : BV:8
176 : ite(169, 94, 175) : BV:8
177 : ite(168, 91, 176) : BV:8
178 : ite(167, 88, 177) : BV:8
179 : ite(166, 86, 178) : BV:8
180 : ite(165, 83, 179) : BV:8
181 : 2 { 0x2 +1.23e129 } : BV:32
182 : bvadd(181, 77, 163) : BV:32
183 : eq(182, 81) : BOOL
184 : eq(182, 84) : BOOL
185 : eq(182, 78) : BOOL
186 : eq(182, 89) : BOOL
187 : eq(182, 92) : BOOL
188 : eq(182, 95) : BOOL
189 : eq(182, 98) : BOOL
190 : eq(182, 100) : BOOL
191 : ite(190, 102, 103) : BV:8
192 : ite(189, 88, 191) : BV:8
193 : ite(188, 97, 192) : BV:8
194 : ite(187, 94, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 88, 195) : BV:8
197 : ite(184, 86, 196) : BV:8
198 : ite(183, 83, 197) : BV:8
199 : 1 { 0x1 +1.11e129 } : BV:32
200 : bvadd(199, 77, 163) : BV:32
201 : eq(200, 81) : BOOL
202 : eq(200, 84) : BOOL
203 : eq(200, 78) : BOOL
204 : eq(200, 89) : BOOL
205 : eq(200, 92) : BOOL
206 : eq(200, 95) : BOOL
207 : eq(200, 98) : BOOL
208 : eq(200, 100) : BOOL
209 : ite(208, 102, 103) : BV:8
210 : ite(207, 88, 209) : BV:8
211 : ite(206, 97, 210) : BV:8
212 : ite(205, 94, 211) : BV:8
213 : ite(204, 91, 212) : BV:8
214 : ite(203, 88, 213) : BV:8
215 : ite(202, 86, 214) : BV:8
216 : ite(201, 83, 215) : BV:8
217 : bvadd(77, 163) : BV:32
218 : eq(217, 81) : BOOL
219 : eq(217, 84) : BOOL
220 : eq(217, 78) : BOOL
221 : eq(217, 89) : BOOL
222 : eq(217, 92) : BOOL
223 : eq(217, 95) : BOOL
224 : eq(217, 98) : BOOL
225 : eq(217, 100) : BOOL
226 : ite(225, 102, 103) : BV:8
227 : ite(224, 88, 226) : BV:8
228 : ite(223, 97, 227) : BV:8
229 : ite(222, 94, 228) : BV:8
230 : ite(221, 91, 229) : BV:8
231 : ite(220, 88, 230) : BV:8
232 : ite(219, 86, 231) : BV:8
233 : ite(218, 83, 232) : BV:8
234 : bvconcat(180, 198, 216, 233) : BV:32
235 : ite(55, 2, 234) : BV:32
236 : ite(74, 235, 234) : BV:32
237 : ite(55, 2, 236) : BV:32
238 : lambda(52, 237) : FUNCTION[BV:32 -> BV:32]
239 : map(51, 238) : MAP[BV:32 -> BV:32]
240 : lambda(17, 239) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
241 : map(16, 240) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
242 : sym_const(241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : Lambda27639 : BV:32
4 : 1 { 0x1 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda27640 : BV:32
7 : 1554258996 { 0x5ca41c34 +1.28211069e58 } : BV:32
8 : lambda(6, 7) : FUNCTION[BV:32 -> BV:32]
9 : map(5, 8) : MAP[BV:32 -> BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
11 : sym_const(10) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-x_i-0.L4%18%bbentry
1 : Lambda27647 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda27648 : BV:32
18 : 268435456 { 0x10000000 +1.0e161 } : BV:32
19 : eq(17, 18) : BOOL
20 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 991823520 { 0x3b1e06a0 +1.23457717e247 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
28 : eq(26, 27) : BOOL
29 : 160 { 0xa0 -96 } : BV:8
30 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
31 : eq(26, 30) : BOOL
32 : 6 { 0x6 } : BV:8
33 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
34 : eq(26, 33) : BOOL
35 : 255 { 0xff -1 } : BV:8
36 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
37 : eq(26, 36) : BOOL
38 : 224 { 0xe0 -32 } : BV:8
39 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
40 : eq(26, 39) : BOOL
41 : 30 { 0x1e } : BV:8
42 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
43 : eq(26, 42) : BOOL
44 : 59 { 0x3b } : BV:8
45 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
46 : eq(26, 45) : BOOL
47 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
48 : eq(26, 47) : BOOL
49 : 193 { 0xc1 -63 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(46, 35, 51) : BV:8
53 : ite(43, 44, 52) : BV:8
54 : ite(40, 41, 53) : BV:8
55 : ite(37, 38, 54) : BV:8
56 : ite(34, 35, 55) : BV:8
57 : ite(31, 32, 56) : BV:8
58 : ite(28, 29, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 24, 25) : BV:32
61 : eq(60, 27) : BOOL
62 : eq(60, 30) : BOOL
63 : eq(60, 33) : BOOL
64 : eq(60, 36) : BOOL
65 : eq(60, 39) : BOOL
66 : eq(60, 42) : BOOL
67 : eq(60, 45) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 35, 69) : BV:8
71 : ite(66, 44, 70) : BV:8
72 : ite(65, 41, 71) : BV:8
73 : ite(64, 38, 72) : BV:8
74 : ite(63, 35, 73) : BV:8
75 : ite(62, 32, 74) : BV:8
76 : ite(61, 29, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 24, 25) : BV:32
79 : eq(78, 27) : BOOL
80 : eq(78, 30) : BOOL
81 : eq(78, 33) : BOOL
82 : eq(78, 36) : BOOL
83 : eq(78, 39) : BOOL
84 : eq(78, 42) : BOOL
85 : eq(78, 45) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 35, 87) : BV:8
89 : ite(84, 44, 88) : BV:8
90 : ite(83, 41, 89) : BV:8
91 : ite(82, 38, 90) : BV:8
92 : ite(81, 35, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : bvadd(24, 25) : BV:32
96 : eq(95, 27) : BOOL
97 : eq(95, 30) : BOOL
98 : eq(95, 33) : BOOL
99 : eq(95, 36) : BOOL
100 : eq(95, 39) : BOOL
101 : eq(95, 42) : BOOL
102 : eq(95, 45) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 35, 104) : BV:8
106 : ite(101, 44, 105) : BV:8
107 : ite(100, 41, 106) : BV:8
108 : ite(99, 38, 107) : BV:8
109 : ite(98, 35, 108) : BV:8
110 : ite(97, 32, 109) : BV:8
111 : ite(96, 29, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(21, 2, 112) : BV:32
114 : ite(19, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.spec-%var-ret-0.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L4%18%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 293604887 ] -> true, [ 293604888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 293604887 ] -> true, [ 293604888; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : Lambda27584 : BV:32
2 : Lambda27585 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda27589 : BV:32
2 : Lambda27590 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
55 : eq(53, 54) : BOOL
56 : 160 { 0xa0 -96 } : BV:8
57 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
58 : eq(53, 57) : BOOL
59 : 6 { 0x6 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
63 : eq(53, 62) : BOOL
64 : 224 { 0xe0 -32 } : BV:8
65 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
66 : eq(53, 65) : BOOL
67 : 30 { 0x1e } : BV:8
68 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
69 : eq(53, 68) : BOOL
70 : 59 { 0x3b } : BV:8
71 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
72 : eq(53, 71) : BOOL
73 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
74 : eq(53, 73) : BOOL
75 : 193 { 0xc1 -63 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(72, 61, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(60, 61, 81) : BV:8
83 : ite(58, 59, 82) : BV:8
84 : ite(55, 56, 83) : BV:8
85 : bvadd(71, 52) : BV:32
86 : eq(85, 54) : BOOL
87 : eq(85, 57) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 62) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 71) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 61, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 61, 98) : BV:8
100 : ite(87, 59, 99) : BV:8
101 : ite(86, 56, 100) : BV:8
102 : bvadd(73, 52) : BV:32
103 : eq(102, 54) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 62) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 71) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 61, 115) : BV:8
117 : ite(104, 59, 116) : BV:8
118 : ite(103, 56, 117) : BV:8
119 : bvadd(62, 52) : BV:32
120 : eq(119, 54) : BOOL
121 : eq(119, 57) : BOOL
122 : eq(119, 51) : BOOL
123 : eq(119, 62) : BOOL
124 : eq(119, 65) : BOOL
125 : eq(119, 68) : BOOL
126 : eq(119, 71) : BOOL
127 : eq(119, 73) : BOOL
128 : ite(127, 75, 76) : BV:8
129 : ite(126, 61, 128) : BV:8
130 : ite(125, 70, 129) : BV:8
131 : ite(124, 67, 130) : BV:8
132 : ite(123, 64, 131) : BV:8
133 : ite(122, 61, 132) : BV:8
134 : ite(121, 59, 133) : BV:8
135 : ite(120, 56, 134) : BV:8
136 : bvconcat(84, 101, 118, 135) : BV:32
137 : bvadd(48, 50, 136) : BV:32
138 : eq(137, 54) : BOOL
139 : eq(137, 57) : BOOL
140 : eq(137, 51) : BOOL
141 : eq(137, 62) : BOOL
142 : eq(137, 65) : BOOL
143 : eq(137, 68) : BOOL
144 : eq(137, 71) : BOOL
145 : eq(137, 73) : BOOL
146 : ite(145, 75, 76) : BV:8
147 : ite(144, 61, 146) : BV:8
148 : ite(143, 70, 147) : BV:8
149 : ite(142, 67, 148) : BV:8
150 : ite(141, 64, 149) : BV:8
151 : ite(140, 61, 150) : BV:8
152 : ite(139, 59, 151) : BV:8
153 : ite(138, 56, 152) : BV:8
154 : 2 { 0x2 +1.23e129 } : BV:32
155 : bvadd(154, 50, 136) : BV:32
156 : eq(155, 54) : BOOL
157 : eq(155, 57) : BOOL
158 : eq(155, 51) : BOOL
159 : eq(155, 62) : BOOL
160 : eq(155, 65) : BOOL
161 : eq(155, 68) : BOOL
162 : eq(155, 71) : BOOL
163 : eq(155, 73) : BOOL
164 : ite(163, 75, 76) : BV:8
165 : ite(162, 61, 164) : BV:8
166 : ite(161, 70, 165) : BV:8
167 : ite(160, 67, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 61, 168) : BV:8
170 : ite(157, 59, 169) : BV:8
171 : ite(156, 56, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 50, 136) : BV:32
174 : eq(173, 54) : BOOL
175 : eq(173, 57) : BOOL
176 : eq(173, 51) : BOOL
177 : eq(173, 62) : BOOL
178 : eq(173, 65) : BOOL
179 : eq(173, 68) : BOOL
180 : eq(173, 71) : BOOL
181 : eq(173, 73) : BOOL
182 : ite(181, 75, 76) : BV:8
183 : ite(180, 61, 182) : BV:8
184 : ite(179, 70, 183) : BV:8
185 : ite(178, 67, 184) : BV:8
186 : ite(177, 64, 185) : BV:8
187 : ite(176, 61, 186) : BV:8
188 : ite(175, 59, 187) : BV:8
189 : ite(174, 56, 188) : BV:8
190 : bvadd(50, 136) : BV:32
191 : eq(190, 54) : BOOL
192 : eq(190, 57) : BOOL
193 : eq(190, 51) : BOOL
194 : eq(190, 62) : BOOL
195 : eq(190, 65) : BOOL
196 : eq(190, 68) : BOOL
197 : eq(190, 71) : BOOL
198 : eq(190, 73) : BOOL
199 : ite(198, 75, 76) : BV:8
200 : ite(197, 61, 199) : BV:8
201 : ite(196, 70, 200) : BV:8
202 : ite(195, 67, 201) : BV:8
203 : ite(194, 64, 202) : BV:8
204 : ite(193, 61, 203) : BV:8
205 : ite(192, 59, 204) : BV:8
206 : ite(191, 56, 205) : BV:8
207 : bvconcat(153, 171, 189, 206) : BV:32
208 : ite(6, 3, 207) : BV:32
209 : ite(47, 208, 207) : BV:32
210 : ite(6, 3, 209) : BV:32
211 : lambda(1, 2, 210) : FUNCTION[BV:32,BV:32 -> BV:32]
212 : sym_const(211) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : Lambda27591 : BV:32
2 : Lambda27592 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 293604887 { 0x11800e17 +1.42998e164 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 293604889 { 0x11800e19 +1.43022e164 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 562047000 { 0x21802818 +1.122356e196 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 562047001 { 0x21802819 +1.122368e196 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 562047002 { 0x2180281a +1.122380e196 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda27595 : BV:32
2 : Lambda27596 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : 160 { 0xa0 -96 } : BV:8
16 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
17 : eq(12, 16) : BOOL
18 : 6 { 0x6 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
22 : eq(12, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
25 : eq(12, 24) : BOOL
26 : 30 { 0x1e } : BV:8
27 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
28 : eq(12, 27) : BOOL
29 : 59 { 0x3b } : BV:8
30 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
31 : eq(12, 30) : BOOL
32 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
33 : eq(12, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 20, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(17, 18, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : bvadd(30, 11) : BV:32
45 : eq(44, 13) : BOOL
46 : eq(44, 16) : BOOL
47 : eq(44, 10) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 24) : BOOL
50 : eq(44, 27) : BOOL
51 : eq(44, 30) : BOOL
52 : eq(44, 32) : BOOL
53 : ite(52, 34, 35) : BV:8
54 : ite(51, 20, 53) : BV:8
55 : ite(50, 29, 54) : BV:8
56 : ite(49, 26, 55) : BV:8
57 : ite(48, 23, 56) : BV:8
58 : ite(47, 20, 57) : BV:8
59 : ite(46, 18, 58) : BV:8
60 : ite(45, 15, 59) : BV:8
61 : bvadd(32, 11) : BV:32
62 : eq(61, 13) : BOOL
63 : eq(61, 16) : BOOL
64 : eq(61, 10) : BOOL
65 : eq(61, 21) : BOOL
66 : eq(61, 24) : BOOL
67 : eq(61, 27) : BOOL
68 : eq(61, 30) : BOOL
69 : eq(61, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 20, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : ite(64, 20, 74) : BV:8
76 : ite(63, 18, 75) : BV:8
77 : ite(62, 15, 76) : BV:8
78 : bvadd(21, 11) : BV:32
79 : eq(78, 13) : BOOL
80 : eq(78, 16) : BOOL
81 : eq(78, 10) : BOOL
82 : eq(78, 21) : BOOL
83 : eq(78, 24) : BOOL
84 : eq(78, 27) : BOOL
85 : eq(78, 30) : BOOL
86 : eq(78, 32) : BOOL
87 : ite(86, 34, 35) : BV:8
88 : ite(85, 20, 87) : BV:8
89 : ite(84, 29, 88) : BV:8
90 : ite(83, 26, 89) : BV:8
91 : ite(82, 23, 90) : BV:8
92 : ite(81, 20, 91) : BV:8
93 : ite(80, 18, 92) : BV:8
94 : ite(79, 15, 93) : BV:8
95 : bvconcat(43, 60, 77, 94) : BV:32
96 : bvadd(7, 9, 95) : BV:32
97 : eq(96, 13) : BOOL
98 : eq(96, 16) : BOOL
99 : eq(96, 10) : BOOL
100 : eq(96, 21) : BOOL
101 : eq(96, 24) : BOOL
102 : eq(96, 27) : BOOL
103 : eq(96, 30) : BOOL
104 : eq(96, 32) : BOOL
105 : ite(104, 34, 35) : BV:8
106 : ite(103, 20, 105) : BV:8
107 : ite(102, 29, 106) : BV:8
108 : ite(101, 26, 107) : BV:8
109 : ite(100, 23, 108) : BV:8
110 : ite(99, 20, 109) : BV:8
111 : ite(98, 18, 110) : BV:8
112 : ite(97, 15, 111) : BV:8
113 : 2 { 0x2 +1.23e129 } : BV:32
114 : bvadd(113, 9, 95) : BV:32
115 : eq(114, 13) : BOOL
116 : eq(114, 16) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 21) : BOOL
119 : eq(114, 24) : BOOL
120 : eq(114, 27) : BOOL
121 : eq(114, 30) : BOOL
122 : eq(114, 32) : BOOL
123 : ite(122, 34, 35) : BV:8
124 : ite(121, 20, 123) : BV:8
125 : ite(120, 29, 124) : BV:8
126 : ite(119, 26, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 20, 127) : BV:8
129 : ite(116, 18, 128) : BV:8
130 : ite(115, 15, 129) : BV:8
131 : 1 { 0x1 +1.11e129 } : BV:32
132 : bvadd(131, 9, 95) : BV:32
133 : eq(132, 13) : BOOL
134 : eq(132, 16) : BOOL
135 : eq(132, 10) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 24) : BOOL
138 : eq(132, 27) : BOOL
139 : eq(132, 30) : BOOL
140 : eq(132, 32) : BOOL
141 : ite(140, 34, 35) : BV:8
142 : ite(139, 20, 141) : BV:8
143 : ite(138, 29, 142) : BV:8
144 : ite(137, 26, 143) : BV:8
145 : ite(136, 23, 144) : BV:8
146 : ite(135, 20, 145) : BV:8
147 : ite(134, 18, 146) : BV:8
148 : ite(133, 15, 147) : BV:8
149 : bvadd(9, 95) : BV:32
150 : eq(149, 13) : BOOL
151 : eq(149, 16) : BOOL
152 : eq(149, 10) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 24) : BOOL
155 : eq(149, 27) : BOOL
156 : eq(149, 30) : BOOL
157 : eq(149, 32) : BOOL
158 : ite(157, 34, 35) : BV:8
159 : ite(156, 20, 158) : BV:8
160 : ite(155, 29, 159) : BV:8
161 : ite(154, 26, 160) : BV:8
162 : ite(153, 23, 161) : BV:8
163 : ite(152, 20, 162) : BV:8
164 : ite(151, 18, 163) : BV:8
165 : ite(150, 15, 164) : BV:8
166 : bvconcat(112, 130, 148, 165) : BV:32
167 : ite(6, 3, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 562047000 ] -> true, [ 562047001; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : Lambda27600 : BV:32
2 : 268435456 { 0x10000000 +1.0e161 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 293604888 { 0x11800e18 +1.43010e164 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 991823520 { 0x3b1e06a0 +1.23457717e247 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 2155347968 { 0x80780000 -2139619328 -1.93750000e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 160 { 0xa0 -96 } : BV:8
15 : 2155347969 { 0x80780001 -2139619327 -1.93750011e129 } : BV:32
16 : eq(11, 15) : BOOL
17 : 6 { 0x6 } : BV:8
18 : 1081606151 { 0x40780007 +1.93750083e1 } : BV:32
19 : eq(11, 18) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 1081606148 { 0x40780004 +1.93750047e1 } : BV:32
22 : eq(11, 21) : BOOL
23 : 224 { 0xe0 -32 } : BV:8
24 : 2155347970 { 0x80780002 -2139619326 -1.93750023e129 } : BV:32
25 : eq(11, 24) : BOOL
26 : 30 { 0x1e } : BV:8
27 : 2155347971 { 0x80780003 -2139619325 -1.93750035e129 } : BV:32
28 : eq(11, 27) : BOOL
29 : 59 { 0x3b } : BV:8
30 : 1081606150 { 0x40780006 +1.93750071e1 } : BV:32
31 : eq(11, 30) : BOOL
32 : 1081606149 { 0x40780005 +1.93750059e1 } : BV:32
33 : eq(11, 32) : BOOL
34 : 193 { 0xc1 -63 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(31, 20, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : ite(19, 20, 40) : BV:8
42 : ite(16, 17, 41) : BV:8
43 : ite(13, 14, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 9, 10) : BV:32
46 : eq(45, 12) : BOOL
47 : eq(45, 15) : BOOL
48 : eq(45, 18) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 20, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 9, 10) : BV:32
64 : eq(63, 12) : BOOL
65 : eq(63, 15) : BOOL
66 : eq(63, 18) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : eq(63, 30) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 20, 72) : BV:8
74 : ite(69, 29, 73) : BV:8
75 : ite(68, 26, 74) : BV:8
76 : ite(67, 23, 75) : BV:8
77 : ite(66, 20, 76) : BV:8
78 : ite(65, 17, 77) : BV:8
79 : ite(64, 14, 78) : BV:8
80 : bvadd(9, 10) : BV:32
81 : eq(80, 12) : BOOL
82 : eq(80, 15) : BOOL
83 : eq(80, 18) : BOOL
84 : eq(80, 21) : BOOL
85 : eq(80, 24) : BOOL
86 : eq(80, 27) : BOOL
87 : eq(80, 30) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 20, 89) : BV:8
91 : ite(86, 29, 90) : BV:8
92 : ite(85, 26, 91) : BV:8
93 : ite(84, 23, 92) : BV:8
94 : ite(83, 20, 93) : BV:8
95 : ite(82, 17, 94) : BV:8
96 : ite(81, 14, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(6, 4, 97) : BV:32
99 : ite(3, 4, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 293604890 { 0x11800e1a +1.43034e164 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1375482001 { 0x51fc3091 +1.97023212e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 572012004 { 0x221835e4 +1.18914461e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 572012007 { 0x221835e7 +1.18914496e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 740329840 { 0x2c208970 +1.25419425e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 740329843 { 0x2c208973 +1.25419461e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2703108612 { 0xa11e2a04 -1591858684 -1.23565721e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2703108615 { 0xa11e2a07 -1591858681 -1.23565757e195 } : BV:32
=counter_example.random_seed
4240641033
=counter_example_end
=global nodece 63 num_edges_traversed 2
=global nodece 63 nodece_visted_pcs: 
L4%18%bbentry_Lfor.cond1%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce11534.num_edges_traversed0
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(epsilon)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce11534 bf8df779bec1957588da8fbc57cb33
=input.spec-%var-x-1
1 : Lambda28388 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 352353471 { 0x15007cbf +1.380694e171 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 352353472 { 0x15007cc0 +1.380706e171 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28391 : BV:32
18 : Lambda28389 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28390 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 165 { 0xa5 -91 } : BV:8
28 : eq(25, 21) : BOOL
29 : 153 { 0x99 -103 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 251 { 0xfb -5 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 352353472 { 0x15007cc0 +1.380706e171 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 352353472 { 0x15007cc0 +1.380706e171 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 165, [ 1; 1 ] -> 255, [ 2; 2 ] -> 251, [ 3; 3 ] -> 153, [ 4; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1348898443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1348898444; 1348898447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1348898448; 2009383975 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2009383976; 2009383979 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2009383980; 3345038407 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3345038408; 3345038411 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3345038412; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3345038408 { 0xc7613c48 -949928888 -1.75965213e15 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2009383976 { 0x77c4c428 +1.53723621e112 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1348898444 { 0x50668e8c +1.80122518e33 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda28395 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 352353471 { 0x15007cbf +1.380694e171 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 352353472 { 0x15007cc0 +1.380706e171 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28398 : BV:32
18 : Lambda28396 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28397 : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24) : BV:32
26 : eq(25, 2) : BOOL
27 : 165 { 0xa5 -91 } : BV:8
28 : eq(25, 21) : BOOL
29 : 153 { 0x99 -103 } : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : eq(25, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 251 { 0xfb -5 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(26, 27, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 24) : BV:32
39 : eq(38, 2) : BOOL
40 : eq(38, 21) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 27, 43) : BV:8
45 : bvadd(30, 24) : BV:32
46 : eq(45, 2) : BOOL
47 : eq(45, 21) : BOOL
48 : eq(45, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : ite(46, 27, 50) : BV:8
52 : eq(24, 2) : BOOL
53 : eq(24, 21) : BOOL
54 : eq(24, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : bvconcat(36, 44, 51, 57) : BV:32
59 : bvadd(21, 23, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 21) : BOOL
62 : eq(59, 30) : BOOL
63 : ite(62, 32, 33) : BV:8
64 : ite(61, 29, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : bvadd(37, 23, 58) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 21) : BOOL
69 : eq(66, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 27, 71) : BV:8
73 : bvadd(30, 23, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 21) : BOOL
76 : eq(73, 30) : BOOL
77 : ite(76, 32, 33) : BV:8
78 : ite(75, 29, 77) : BV:8
79 : ite(74, 27, 78) : BV:8
80 : bvadd(23, 58) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 21) : BOOL
83 : eq(80, 30) : BOOL
84 : ite(83, 32, 33) : BV:8
85 : ite(82, 29, 84) : BV:8
86 : ite(81, 27, 85) : BV:8
87 : bvconcat(65, 72, 79, 86) : BV:32
88 : lambda(20, 87) : FUNCTION[BV:32 -> BV:32]
89 : map(19, 88) : MAP[BV:32 -> BV:32]
90 : lambda(17, 89) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
91 : map(16, 90) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
92 : sym_const(91) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 352353471 ] -> true, [ 352353472; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 352353471 ] -> true, [ 352353472; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda28357 : BV:32
2 : Lambda28358 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 165 { 0xa5 -91 } : BV:8
11 : eq(7, 3) : BOOL
12 : 153 { 0x99 -103 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 251 { 0xfb -5 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda28361 : BV:32
2 : Lambda28362 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 165 { 0xa5 -91 } : BV:8
11 : eq(7, 3) : BOOL
12 : 153 { 0x99 -103 } : BV:8
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : eq(7, 13) : BOOL
15 : 255 { 0xff -1 } : BV:8
16 : 251 { 0xfb -5 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : ite(11, 12, 17) : BV:8
19 : ite(9, 10, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 3) : BOOL
24 : eq(21, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : ite(23, 12, 25) : BV:8
27 : ite(22, 10, 26) : BV:8
28 : bvadd(13, 6) : BV:32
29 : eq(28, 8) : BOOL
30 : eq(28, 3) : BOOL
31 : eq(28, 13) : BOOL
32 : ite(31, 15, 16) : BV:8
33 : ite(30, 12, 32) : BV:8
34 : ite(29, 10, 33) : BV:8
35 : eq(6, 8) : BOOL
36 : eq(6, 3) : BOOL
37 : eq(6, 13) : BOOL
38 : ite(37, 15, 16) : BV:8
39 : ite(36, 12, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : bvconcat(19, 27, 34, 40) : BV:32
42 : bvadd(3, 5, 41) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 3) : BOOL
45 : eq(42, 13) : BOOL
46 : ite(45, 15, 16) : BV:8
47 : ite(44, 12, 46) : BV:8
48 : ite(43, 10, 47) : BV:8
49 : bvadd(20, 5, 41) : BV:32
50 : eq(49, 8) : BOOL
51 : eq(49, 3) : BOOL
52 : eq(49, 13) : BOOL
53 : ite(52, 15, 16) : BV:8
54 : ite(51, 12, 53) : BV:8
55 : ite(50, 10, 54) : BV:8
56 : bvadd(13, 5, 41) : BV:32
57 : eq(56, 8) : BOOL
58 : eq(56, 3) : BOOL
59 : eq(56, 13) : BOOL
60 : ite(59, 15, 16) : BV:8
61 : ite(58, 12, 60) : BV:8
62 : ite(57, 10, 61) : BV:8
63 : bvadd(5, 41) : BV:32
64 : eq(63, 8) : BOOL
65 : eq(63, 3) : BOOL
66 : eq(63, 13) : BOOL
67 : ite(66, 15, 16) : BV:8
68 : ite(65, 12, 67) : BV:8
69 : ite(64, 10, 68) : BV:8
70 : bvconcat(48, 55, 62, 69) : BV:32
71 : lambda(1, 2, 70) : FUNCTION[BV:32,BV:32 -> BV:32]
72 : sym_const(71) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 352353472 { 0x15007cc0 +1.380706e171 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1348898444 { 0x50668e8c +1.80122518e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1348898447 { 0x50668e8f +1.80122554e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3345038408 { 0xc7613c48 -949928888 -1.75965213e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3345038411 { 0xc7613c4b -949928885 -1.75965249e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2009383976 { 0x77c4c428 +1.53723621e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2009383979 { 0x77c4c42b +1.53723657e112 } : BV:32
=counter_example.random_seed
4041172461
=counter_example_end
=global nodece 64 num_edges_traversed 0
=global nodece 64 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 65
=global nodece 65 nodece z3v487.ce11535.num_edges_traversed0
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(epsilon)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3v487.ce11535 bda6626191e7d5e897df9a2d3d16a4f
=input.spec-%var-x-1
1 : Lambda28412 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1586266835 { 0x5e8c82d3 +1.9774243e62 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1586266836 { 0x5e8c82d4 +1.9774255e62 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28415 : BV:32
18 : Lambda28413 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28414 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 1586266836 { 0x5e8c82d4 +1.9774255e62 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1586266836 { 0x5e8c82d4 +1.9774255e62 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 268435455 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435456; 268435459 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 268435460; 1610612739 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1610612740; 1610612743 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1610612744; 2155872255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2155872256; 2155872259 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2155872260; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1610612740 { 0x60000004 +1.47e65 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2155872256 { 0x80800000 -2139095040 -1.0e130 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda28421 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1586266835 { 0x5e8c82d3 +1.9774243e62 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1586266836 { 0x5e8c82d4 +1.9774255e62 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda28424 : BV:32
18 : Lambda28422 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda28423 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L4%26%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L4%18%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L4%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 1586266835 ] -> true, [ 1586266836; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1586266835 ] -> true, [ 1586266836; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1586266836 { 0x5e8c82d4 +1.9774255e62 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2155872256 { 0x80800000 -2139095040 -1.0e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2155872259 { 0x80800003 -2139095037 -1.35e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 268435459 { 0x10000003 +1.35e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1610612740 { 0x60000004 +1.47e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1610612743 { 0x60000007 +1.83e65 } : BV:32
=counter_example.random_seed
1370620763
=counter_example_end
=global nodece 65 num_edges_traversed 0
=global nodece 65 nodece_visted_pcs: 
L4%6%bbentry_Lfor.cond%1%bbentry
=global nodece 66
=global nodece 66 nodece z3.ce11849.num_edges_traversed2
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(epsilon)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3.ce11849 23eefeb825ae20ea8c3e1f2736d750
=retaddr_const
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.spec-%var-x-1
1 : Lambda45 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda48 : BV:32
11 : Lambda46 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda47 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1104073823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1104073824; 1104073827 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1104073828; 3820985019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3820985020; 3820985023 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3820985024; 4223643811 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4223643812; 4223643815 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4223643816; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1104073824 { 0x41ced460 +1.61585617e4 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3820985020 { 0xe3bf9abc -473982276 -1.49690961e72 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4223643812 { 0xfbbfb0a4 -71323484 -1.49757814e120 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda45 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda48 : BV:32
11 : Lambda46 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda47 : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28531 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28532 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4223643812 { 0xfbbfb0a4 -71323484 -1.49757814e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4223643815 { 0xfbbfb0a7 -71323481 -1.49757850e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1104073824 { 0x41ced460 +1.61585617e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1104073827 { 0x41ced463 +1.61585652e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3820985020 { 0xe3bf9abc -473982276 -1.49690961e72 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3820985023 { 0xe3bf9abf -473982273 -1.49690997e72 } : BV:32
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 66 num_edges_traversed 2
=global nodece 66 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 67
=global nodece 67 nodece z3.ce11831.num_edges_traversed2
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3.ce11831 5011914374f94c38dc9eaa52575b3
=retaddr_const
1 : 1119626379 { 0x42bc248b +1.46986520e6 } : BV:32
=input.spec-%var-x-1
1 : Lambda342 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda345 : BV:32
11 : Lambda343 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda344 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4103723283 ] -> 0, [ 4103723284; 4103723284 ] -> 16, [ 4103723285; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1959502879 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1959502880; 1959502883 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1959502884; 3236277211 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3236277212; 3236277215 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3236277216; 4103723283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4103723284; 4103723287 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4103723288; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1959502880 { 0x74cba420 +1.59094619e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3236277212 { 0xc0e5abdc -1058690084 -1.79430723e2 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda342 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda345 : BV:32
11 : Lambda343 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda344 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 16 { 0x10 +1.190e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
21 : eq(19, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28525 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28526 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
12 : eq(10, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda314 : BV:32
2 : Lambda315 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda316 : BV:32
2 : Lambda317 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 16 { 0x10 +1.190e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 2127620560 { 0x7ed0e9d0 +1.63213539e126 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1119626379 { 0x42bc248b +1.46986520e6 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 465042699 { 0x1bb7fd0b +1.43740975e184 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3236277212 { 0xc0e5abdc -1058690084 -1.79430723e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3236277215 { 0xc0e5abdf -1058690081 -1.79430758e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4103723284 { 0xf499d914 -191244012 -1.20193719e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 4103723287 { 0xf499d917 -191244009 -1.20193755e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1959502880 { 0x74cba420 +1.59094619e106 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1959502883 { 0x74cba423 +1.59094655e106 } : BV:32
=counter_example.random_seed
1211690
=counter_example_end
=global nodece 67 num_edges_traversed 2
=global nodece 67 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 68
=global nodece 68 nodece z3v487.ce11813.num_edges_traversed2
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3v487.ce11813 9490fb1972c292357e46dcffe991cf7
=retaddr_const
1 : 1763323810 { 0x691a2fa2 +1.20457863e83 } : BV:32
=input.spec-%var-x-1
1 : Lambda364 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda367 : BV:32
11 : Lambda365 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda366 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 262148 { 0x40004 +1.3125047e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
24 : eq(19, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : ite(24, 22, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : eq(29, 23) : BOOL
32 : ite(31, 22, 25) : BV:8
33 : ite(30, 22, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : ite(37, 22, 25) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : bvadd(17, 18) : BV:32
41 : eq(40, 20) : BOOL
42 : eq(40, 23) : BOOL
43 : ite(42, 22, 25) : BV:8
44 : ite(41, 22, 43) : BV:8
45 : bvconcat(27, 33, 39, 44) : BV:32
46 : bvadd(14, 16, 45) : BV:32
47 : eq(46, 20) : BOOL
48 : eq(46, 23) : BOOL
49 : ite(48, 22, 25) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : bvadd(28, 16, 45) : BV:32
52 : eq(51, 20) : BOOL
53 : eq(51, 23) : BOOL
54 : ite(53, 22, 25) : BV:8
55 : ite(52, 22, 54) : BV:8
56 : bvadd(34, 16, 45) : BV:32
57 : eq(56, 20) : BOOL
58 : eq(56, 23) : BOOL
59 : ite(58, 22, 25) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : bvadd(16, 45) : BV:32
62 : eq(61, 20) : BOOL
63 : eq(61, 23) : BOOL
64 : ite(63, 22, 25) : BV:8
65 : ite(62, 22, 64) : BV:8
66 : bvconcat(50, 55, 60, 65) : BV:32
67 : lambda(13, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(12, 67) : MAP[BV:32 -> BV:32]
69 : lambda(10, 68) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
70 : map(9, 69) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
71 : sym_const(70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 262148 { 0x40004 +1.3125047e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1319591 ] -> 0, [ 1319592; 1319592 ] -> 4, [ 1319593; 1319593 ] -> 0, [ 1319594; 1319594 ] -> 4, [ 1319595; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 534827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 534828; 534831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 534832; 1319591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1319592; 1319595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1319596; 4194315 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194316; 4194319 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194320; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194316 { 0x40000c +1.50000143e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 534828 { 0x8292c +1.6375646e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda364 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda367 : BV:32
11 : Lambda365 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda366 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 262148 { 0x40004 +1.3125047e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 4 { 0x4 } : BV:8
23 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
24 : eq(19, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : ite(24, 22, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : eq(29, 23) : BOOL
32 : ite(31, 22, 25) : BV:8
33 : ite(30, 22, 32) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : ite(37, 22, 25) : BV:8
39 : ite(36, 22, 38) : BV:8
40 : bvadd(17, 18) : BV:32
41 : eq(40, 20) : BOOL
42 : eq(40, 23) : BOOL
43 : ite(42, 22, 25) : BV:8
44 : ite(41, 22, 43) : BV:8
45 : bvconcat(27, 33, 39, 44) : BV:32
46 : bvadd(14, 16, 45) : BV:32
47 : eq(46, 20) : BOOL
48 : eq(46, 23) : BOOL
49 : ite(48, 22, 25) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : bvadd(28, 16, 45) : BV:32
52 : eq(51, 20) : BOOL
53 : eq(51, 23) : BOOL
54 : ite(53, 22, 25) : BV:8
55 : ite(52, 22, 54) : BV:8
56 : bvadd(34, 16, 45) : BV:32
57 : eq(56, 20) : BOOL
58 : eq(56, 23) : BOOL
59 : ite(58, 22, 25) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : bvadd(16, 45) : BV:32
62 : eq(61, 20) : BOOL
63 : eq(61, 23) : BOOL
64 : ite(63, 22, 25) : BV:8
65 : ite(62, 22, 64) : BV:8
66 : bvconcat(50, 55, 60, 65) : BV:32
67 : lambda(13, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(12, 67) : MAP[BV:32 -> BV:32]
69 : lambda(10, 68) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
70 : map(9, 69) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
71 : sym_const(70) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28519 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28520 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
15 : eq(10, 14) : BOOL
16 : 0 { 0x0 } : BV:8
17 : ite(15, 13, 16) : BV:8
18 : ite(12, 13, 17) : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvadd(19, 9, 1) : BV:32
21 : eq(20, 11) : BOOL
22 : eq(20, 14) : BOOL
23 : ite(22, 13, 16) : BV:8
24 : ite(21, 13, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 1) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 13, 16) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 1) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 13, 16) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(18, 24, 30, 35) : BV:32
37 : lambda(6, 36) : FUNCTION[BV:32 -> BV:32]
38 : map(5, 37) : MAP[BV:32 -> BV:32]
39 : sum(1, 2, 38) : SUM[UNIT,MAP[BV:32 -> BV:32]]
40 : sym_const(39) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda325 : BV:32
2 : Lambda326 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 262148 { 0x40004 +1.3125047e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 4 { 0x4 } : BV:8
12 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda327 : BV:32
2 : Lambda328 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 262148 { 0x40004 +1.3125047e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 4 { 0x4 } : BV:8
12 : 1319594 { 0x1422aa +1.15730786e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 0 { 0x0 } : BV:8
15 : ite(13, 11, 14) : BV:8
16 : ite(10, 11, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 7) : BV:32
19 : eq(18, 9) : BOOL
20 : eq(18, 12) : BOOL
21 : ite(20, 11, 14) : BV:8
22 : ite(19, 11, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : ite(26, 11, 14) : BV:8
28 : ite(25, 11, 27) : BV:8
29 : bvadd(6, 7) : BV:32
30 : eq(29, 9) : BOOL
31 : eq(29, 12) : BOOL
32 : ite(31, 11, 14) : BV:8
33 : ite(30, 11, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : ite(37, 11, 14) : BV:8
39 : ite(36, 11, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 9) : BOOL
42 : eq(40, 12) : BOOL
43 : ite(42, 11, 14) : BV:8
44 : ite(41, 11, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 9) : BOOL
47 : eq(45, 12) : BOOL
48 : ite(47, 11, 14) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 9) : BOOL
52 : eq(50, 12) : BOOL
53 : ite(52, 11, 14) : BV:8
54 : ite(51, 11, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 24769180 { 0x179f29c +1.95271635e131 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1763323810 { 0x691a2fa2 +1.20457863e83 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1165676134 { 0x457ace66 +1.95942378e11 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 534828 { 0x8292c +1.6375646e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 534831 { 0x8292f +1.6375682e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1319592 { 0x1422a8 +1.15730762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1319595 { 0x1422ab +1.15730798e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194316 { 0x40000c +1.50000143e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194319 { 0x40000f +1.50000178e129 } : BV:32
=counter_example.random_seed
3132862439
=counter_example_end
=global nodece 68 num_edges_traversed 2
=global nodece 68 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 69
=global nodece 69 nodece z3v487.ce11795.num_edges_traversed2
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(epsilon)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3v487.ce11795 918d43fa68b2e9b8fbaa3ef2627ac0e9
=retaddr_const
1 : 972487812 { 0x39f6fc84 +1.92958116e244 } : BV:32
=input.spec-%var-x-1
1 : Lambda417 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda420 : BV:32
11 : Lambda418 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda419 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435594 ] -> 0, [ 268435595; 268435595 ] -> 128, [ 268435596; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2096959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2096960; 2096963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2096964; 2097219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097220; 2097223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097224; 268435591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435592; 268435595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 268435596; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097220 { 0x200044 +1.25000810e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 268435592 { 0x10000088 +1.1621e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2096960 { 0x1fff40 +1.24997711e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda417 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda420 : BV:32
11 : Lambda418 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda419 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
20 : eq(18, 19) : BOOL
21 : 128 { 0x80 -128 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28513 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28514 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
12 : eq(10, 11) : BOOL
13 : 128 { 0x80 -128 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda400 : BV:32
2 : Lambda401 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda402 : BV:32
2 : Lambda403 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 914924238 { 0x3688a2ce +1.6746840e238 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 972487812 { 0x39f6fc84 +1.92958116e244 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 304110632 { 0x12205c28 +1.25281238e165 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2096960 { 0x1fff40 +1.24997711e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2096963 { 0x1fff43 +1.24997746e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097220 { 0x200044 +1.25000810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097223 { 0x200047 +1.25000846e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 268435592 { 0x10000088 +1.1621e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
=counter_example.random_seed
2127554817
=counter_example_end
=global nodece 69 num_edges_traversed 2
=global nodece 69 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 70
=global nodece 70 nodece z3v487.ce11777.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3v487.ce11777 161f24b046412d0669898dcdbdc7c68
=retaddr_const
1 : 1948452470 { 0x74230676 +1.27363467e105 } : BV:32
=input.spec-%var-x-1
1 : Lambda460 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda463 : BV:32
11 : Lambda461 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda462 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435594 ] -> 0, [ 268435595; 268435595 ] -> 1, [ 268435596; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2096959 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2096960; 2096963 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2096964; 2097219 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2097220; 2097223 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2097224; 268435591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268435592; 268435595 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 268435596; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2097220 { 0x200044 +1.25000810e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 268435592 { 0x10000088 +1.1621e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2096960 { 0x1fff40 +1.24997711e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda460 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda463 : BV:32
11 : Lambda461 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda462 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28507 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28508 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
12 : eq(10, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 1) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 1) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 1) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : lambda(6, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(5, 28) : MAP[BV:32 -> BV:32]
30 : sum(1, 2, 29) : SUM[UNIT,MAP[BV:32 -> BV:32]]
31 : sym_const(30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda443 : BV:32
2 : Lambda444 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda445 : BV:32
2 : Lambda446 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1973634932 { 0x75a34774 +1.27561807e108 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1948452470 { 0x74230676 +1.27363467e105 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1125791670 { 0x431a37b6 +1.20482516e7 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2096960 { 0x1fff40 +1.24997711e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2096963 { 0x1fff43 +1.24997746e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2097220 { 0x200044 +1.25000810e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2097223 { 0x200047 +1.25000846e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 268435592 { 0x10000088 +1.1621e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 268435595 { 0x1000008b +1.1657e161 } : BV:32
=counter_example.random_seed
3249262599
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 71
=global nodece 71 nodece z3v487.ce11759.num_edges_traversed2
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3v487.ce11759 a6b47e5bef889946677079db9ec093f9
=retaddr_const
1 : 1307175449 { 0x4de9ea19 +1.82745659e28 } : BV:32
=input.spec-%var-x-1
1 : Lambda753 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda756 : BV:32
11 : Lambda754 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda755 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 131079 { 0x20007 +1.1562583e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 131078 { 0x20006 +1.1562571e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 131077 { 0x20005 +1.1562559e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 131076 { 0x20004 +1.1562547e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 131075 ] -> 0, [ 131076; 131079 ] -> 255, [ 131080; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 1607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1608; 1611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1612; 131075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131076; 131079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 131080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1608 { 0x648 +1.19168e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 131076 { 0x20004 +1.1562547e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda753 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda756 : BV:32
11 : Lambda754 : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda755 : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 131079 { 0x20007 +1.1562583e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 131078 { 0x20006 +1.1562571e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 131077 { 0x20005 +1.1562559e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 131076 { 0x20004 +1.1562547e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28501 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28502 : BV:32
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 6) : BV:32
10 : bvadd(7, 9, 1) : BV:32
11 : 131079 { 0x20007 +1.1562583e129 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 131078 { 0x20006 +1.1562571e129 } : BV:32
15 : eq(10, 14) : BOOL
16 : 131077 { 0x20005 +1.1562559e129 } : BV:32
17 : eq(10, 16) : BOOL
18 : 131076 { 0x20004 +1.1562547e129 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 1) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 1) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 1) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : lambda(6, 54) : FUNCTION[BV:32 -> BV:32]
56 : map(5, 55) : MAP[BV:32 -> BV:32]
57 : sum(1, 2, 56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
58 : sym_const(57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : Lambda725 : BV:32
2 : Lambda726 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 131079 { 0x20007 +1.1562583e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 131078 { 0x20006 +1.1562571e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 131077 { 0x20005 +1.1562559e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 131076 { 0x20004 +1.1562547e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : Lambda727 : BV:32
2 : Lambda728 : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 131079 { 0x20007 +1.1562583e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 131078 { 0x20006 +1.1562571e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 131077 { 0x20005 +1.1562559e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 131076 { 0x20004 +1.1562547e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 552591655 { 0x20efe127 +1.87405860e194 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1307175449 { 0x4de9ea19 +1.82745659e28 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 879024595 { 0x3464d9d3 +1.78789746e233 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1608 { 0x648 +1.19168e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1611 { 0x64b +1.19204e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 131076 { 0x20004 +1.1562547e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 131079 { 0x20007 +1.1562583e129 } : BV:32
=counter_example.random_seed
3144953584
=counter_example_end
=global nodece 71 num_edges_traversed 2
=global nodece 71 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 72
=global nodece 72 nodece z3v487.ce11651.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(epsilon)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3v487.ce11651 82da9d478188621d39d8a8da31ba749a
=retaddr_const
1 : 889472562 { 0x35044632 +1.3339219e235 } : BV:32
=input.spec-%var-x-1
1 : Lambda25625 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25628 : BV:32
18 : Lambda25626 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25627 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2176639 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2176640; 2176643 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2176644; 269561891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 269561892; 269561895 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 269561896; 276824087 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 276824088; 276824091 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 276824092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 276824088 { 0x10800018 +1.286e162 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 269561892 { 0x10113024 +1.13428163e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2176640 { 0x213680 +1.25947570e129 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda25636 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda25639 : BV:32
18 : Lambda25637 : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda25638 : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28465 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28466 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 491287551 { 0x1d4873ff +1.56603991e187 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 546793050 { 0x2097665a +1.18281102e194 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1706005561 { 0x65af9439 +1.37171089e76 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 889472562 { 0x35044632 +1.3339219e235 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2176640 { 0x213680 +1.25947570e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2176643 { 0x213683 +1.25947606e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 276824088 { 0x10800018 +1.286e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 276824091 { 0x1080001b +1.321e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 269561892 { 0x10113024 +1.13428163e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 269561895 { 0x10113027 +1.13428199e161 } : BV:32
=counter_example.random_seed
2261831612
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 73
=global nodece 73 nodece z3v487.ce11615.num_edges_traversed2
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3v487.ce11615 5c8596d5bbedd99b80c6a219f560ebf4
=retaddr_const
1 : 391236421 { 0x1751cb45 +1.63901579e175 } : BV:32
=input.spec-%var-x-1
1 : Lambda26147 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26150 : BV:32
17 : Lambda26148 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26149 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L4%6%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 262143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 262144; 262147 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 262148; 134217727 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134217728; 134217731 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 134217732; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-ret-1.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry
1 : Lambda26158 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda26161 : BV:32
17 : Lambda26159 : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda26160 : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L4%7%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda28453 : BV:32
4 : 0 { 0x0 } : BOOL
5 : lambda(3, 4) : FUNCTION[BV:32 -> BOOL]
6 : Lambda28454 : BV:32
7 : lambda(6, 1) : FUNCTION[BV:32 -> BV:32]
8 : map(5, 7) : MAP[BV:32 -> BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,MAP[BV:32 -> BV:32]]
10 : sym_const(9) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L4%6%bbentry
1 : 2048011525 { 0x7a122d05 +1.14199888e117 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-18.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L4%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L4%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L4%6%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%tmpvar-10.L4%7%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-0.L4%18%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L4%18%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1446680437 { 0x563a9775 +1.45774710e45 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 241531804 { 0xe657b9c +1.79283475e157 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 391236421 { 0x1751cb45 +1.63901579e175 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 134217731 { 0x8000003 +1.35e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 262147 { 0x40003 +1.3125035e129 } : BV:32
=counter_example.random_seed
586768670
=counter_example_end
=global nodece 73 num_edges_traversed 2
=global nodece 73 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%m : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 41
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 42
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 43
1 : spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 44
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=inductive-invariants point_set point_expr 45
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=inductive-invariants point_set point_expr 46
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=inductive-invariants point_set point_expr 47
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 77
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 78
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 79
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 80
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 81
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 82
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : bvult(8, 4) : BOOL
11 : and(9, 10) : BOOL
12 : lambda(8, 11) : FUNCTION[BV:32 -> BOOL]
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(8, 16) : BV:32
18 : bvmul(1, 16) : BV:32
19 : input.dst.llvm-%x : BV:32
20 : bvadd(18, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(13, 14, 15, 20, 21, 22) : BV:32
24 : bvadd(17, 23) : BV:32
25 : select(13, 14, 15, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(12, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=inductive-invariants point_set point_expr 83
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%x : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : bvadd(19, 10) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : bvadd(18, 23) : BV:32
25 : select(14, 15, 16, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(13, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=inductive-invariants point_set point_expr 84
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 85
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%m : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : bvult(8, 4) : BOOL
11 : and(9, 10) : BOOL
12 : lambda(8, 11) : FUNCTION[BV:32 -> BOOL]
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(8, 16) : BV:32
18 : bvmul(1, 16) : BV:32
19 : input.dst.llvm-%x : BV:32
20 : bvadd(18, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(13, 14, 15, 20, 21, 22) : BV:32
24 : bvadd(17, 23) : BV:32
25 : select(13, 14, 15, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(12, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=inductive-invariants point_set point_expr 86
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 87
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%x : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : bvadd(19, 4) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : bvadd(18, 23) : BV:32
25 : select(14, 15, 16, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(13, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=inductive-invariants point_set point_expr 88
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 89
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 90
1 : spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L4%6%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set point_expr 91
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set point_expr 92
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : spec-%var-x_i-1.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3v487.ce147
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 done
=inductive-invariants point_set point z3.ce146
=inductive-invariants point_set point z3.ce146 expr point z3.ce146
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce146 expr point z3.ce146 done
=inductive-invariants point_set point z3v487.ce25
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce25 expr point z3v487.ce25 done
=inductive-invariants point_set point z3v487.ce37
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce37 expr point z3v487.ce37 done
=inductive-invariants point_set point z3.ce36
=inductive-invariants point_set point z3.ce36 expr point z3.ce36
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce36 expr point z3.ce36 done
=inductive-invariants point_set point z3v487.ce102
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 6 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce102 expr point z3v487.ce102 done
=inductive-invariants point_set point z3v487.ce113
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 6 for input.dst.llvm-%m
16777216
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce113 expr point z3v487.ce113 done
=inductive-invariants point_set point z3v487.ce59
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce59 expr point z3v487.ce59 done
=inductive-invariants point_set point z3.ce58
=inductive-invariants point_set point z3.ce58 expr point z3.ce58
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 5 for input.dst.llvm-%n
257
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce58 expr point z3.ce58 done
=inductive-invariants point_set point z3.ce80
=inductive-invariants point_set point z3.ce80 expr point z3.ce80
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 4 for input.dst.llvm-%x
16
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce80 expr point z3.ce80 done
=inductive-invariants point_set point z3v487.ce81
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 4 for input.dst.llvm-%x
262148
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce81 expr point z3v487.ce81 done
=inductive-invariants point_set point z3v487.ce190
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce190 expr point z3v487.ce190 done
=inductive-invariants point_set point z3.ce191
=inductive-invariants point_set point z3.ce191 expr point z3.ce191
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 done
=inductive-invariants point_set point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 5 for input.dst.llvm-%n
269488144
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 6 for input.dst.llvm-%m
269488129
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce124 expr point z3v487.ce124 done
=inductive-invariants point_set point z3.ce125
=inductive-invariants point_set point z3.ce125 expr point z3.ce125
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 6 for input.dst.llvm-%m
16
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce125 expr point z3.ce125 done
=inductive-invariants point_set point z3v487.ce168
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce168 expr point z3v487.ce168 done
=inductive-invariants point_set point z3.ce169
=inductive-invariants point_set point z3.ce169 expr point z3.ce169
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce169 expr point z3.ce169 done
=inductive-invariants point_set point z3.ce212
=inductive-invariants point_set point z3.ce212 expr point z3.ce212
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 4 for input.dst.llvm-%x
554303536
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce212 expr point z3.ce212 done
=inductive-invariants point_set point z3v487.ce213
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce213 expr point z3v487.ce213 done
=inductive-invariants point_set point z3.ce234
=inductive-invariants point_set point z3.ce234 expr point z3.ce234
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 4 for input.dst.llvm-%x
2952889320
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce234 expr point z3.ce234 done
=inductive-invariants point_set point z3v487.ce235
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 4 for input.dst.llvm-%x
26624
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce235 expr point z3v487.ce235 done
=inductive-invariants point_set point z3v487.ce256
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 4 for input.dst.llvm-%x
822116352
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce256 expr point z3v487.ce256 done
=inductive-invariants point_set point z3v487.ce267
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 4 for input.dst.llvm-%x
192
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce267 expr point z3v487.ce267 done
=inductive-invariants point_set point z3.ce278
=inductive-invariants point_set point z3.ce278 expr point z3.ce278
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 4 for input.dst.llvm-%x
2251580592
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce278 expr point z3.ce278 done
=inductive-invariants point_set point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 4 for input.dst.llvm-%x
2051033368
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 6 for input.dst.llvm-%m
1229539657
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce279 expr point z3v487.ce279 done
=inductive-invariants point_set point z3v487.ce300
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 4 for input.dst.llvm-%x
1077936516
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 5 for input.dst.llvm-%n
75563058
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce300 expr point z3v487.ce300 done
=inductive-invariants point_set point z3.ce301
=inductive-invariants point_set point z3.ce301 expr point z3.ce301
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 4 for input.dst.llvm-%x
1519167000
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 5 for input.dst.llvm-%n
4456482
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 6 for input.dst.llvm-%m
60397977
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce301 expr point z3.ce301 done
=inductive-invariants point_set point z3v487.ce322
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 4 for input.dst.llvm-%x
536895496
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce322 expr point z3v487.ce322 done
=inductive-invariants point_set point z3v487.ce333
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 4 for input.dst.llvm-%x
2147490260
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce333 expr point z3v487.ce333 done
=inductive-invariants point_set point z3v487.ce344
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 4 for input.dst.llvm-%x
822116352
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce344 expr point z3v487.ce344 done
=inductive-invariants point_set point z3v487.ce355
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce355 expr point z3v487.ce355 done
=inductive-invariants point_set point z3.ce356
=inductive-invariants point_set point z3.ce356 expr point z3.ce356
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce356 expr point z3.ce356 done
=inductive-invariants point_set point z3v487.ce1783
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1783 expr point z3v487.ce1783 done
=inductive-invariants point_set point z3.ce1782
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1782 expr point z3.ce1782 done
=inductive-invariants point_set point z3.ce6452
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 4 for input.dst.llvm-%x
4096
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 6 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6452 expr point z3.ce6452 done
=inductive-invariants point_set point z3.ce10883
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 4 for input.dst.llvm-%x
4096
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 6 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 44 for input.spec-%var-j-0.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10883 expr point z3.ce10883 done
=inductive-invariants point_set point z3v487.ce10752
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 4 for input.dst.llvm-%x
169869312
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 5 for input.dst.llvm-%n
2281701376
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 6 for input.dst.llvm-%m
134217728
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 44 for input.spec-%var-j-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10752 expr point z3v487.ce10752 done
=inductive-invariants point_set point z3.ce6412
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6412 expr point z3.ce6412 done
=inductive-invariants point_set point z3v487.ce6413
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 6 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6413 expr point z3v487.ce6413 done
=inductive-invariants point_set point z3.ce6373
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6373 expr point z3.ce6373 done
=inductive-invariants point_set point z3v487.ce6372
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 4 for input.dst.llvm-%x
536870912
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 5 for input.dst.llvm-%n
128
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6372 expr point z3v487.ce6372 done
=inductive-invariants point_set point z3v487.ce6453
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 5 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 6 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6453 expr point z3v487.ce6453 done
=inductive-invariants point_set point z3.ce6533
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 4 for input.dst.llvm-%x
1158744584
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6533 expr point z3.ce6533 done
=inductive-invariants point_set point z3.ce6492
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 4 for input.dst.llvm-%x
4016044976
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 5 for input.dst.llvm-%n
512
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6492 expr point z3.ce6492 done
=inductive-invariants point_set point z3v487.ce6493
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 4 for input.dst.llvm-%x
2162688
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6493 expr point z3v487.ce6493 done
=inductive-invariants point_set point z3v487.ce6532
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 4 for input.dst.llvm-%x
443883904
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6532 expr point z3v487.ce6532 done
=inductive-invariants point_set point z3v487.ce6572
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 6 for input.dst.llvm-%m
35652129
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6572 expr point z3v487.ce6572 done
=inductive-invariants point_set point z3.ce6573
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 4 for input.dst.llvm-%x
4294899704
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6573 expr point z3.ce6573 done
=inductive-invariants point_set point z3v487.ce6612
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 5 for input.dst.llvm-%n
8388608
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6612 expr point z3v487.ce6612 done
=inductive-invariants point_set point z3.ce6613
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 4 for input.dst.llvm-%x
3449025392
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6613 expr point z3.ce6613 done
=inductive-invariants point_set point z3.ce6652
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 4 for input.dst.llvm-%x
3623927360
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6652 expr point z3.ce6652 done
=inductive-invariants point_set point z3v487.ce6653
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 4 for input.dst.llvm-%x
411050080
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6653 expr point z3v487.ce6653 done
=inductive-invariants point_set point z3.ce6712
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 5 for input.dst.llvm-%n
134217728
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 6 for input.dst.llvm-%m
32
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6712 expr point z3.ce6712 done
=inductive-invariants point_set point z3v487.ce6713
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6713 expr point z3v487.ce6713 done
=inductive-invariants point_set point z3v487.ce6692
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 4 for input.dst.llvm-%x
134224132
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6692 expr point z3v487.ce6692 done
=inductive-invariants point_set point z3v487.ce6753
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 4 for input.dst.llvm-%x
18568
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6753 expr point z3v487.ce6753 done
=inductive-invariants point_set point z3.ce6752
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 4 for input.dst.llvm-%x
4026531832
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6752 expr point z3.ce6752 done
=inductive-invariants point_set point z3.ce6792
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 5 for input.dst.llvm-%n
131072
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6792 expr point z3.ce6792 done
=inductive-invariants point_set point z3v487.ce6793
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 5 for input.dst.llvm-%n
8388608
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 6 for input.dst.llvm-%m
32768
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6793 expr point z3v487.ce6793 done
=inductive-invariants point_set point z3.ce6832
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 4 for input.dst.llvm-%x
203694552
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6832 expr point z3.ce6832 done
=inductive-invariants point_set point z3v487.ce6833
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 4 for input.dst.llvm-%x
10260
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6833 expr point z3v487.ce6833 done
=inductive-invariants point_set point z3.ce6872
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6872 expr point z3.ce6872 done
=inductive-invariants point_set point z3v487.ce6873
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6873 expr point z3v487.ce6873 done
=inductive-invariants point_set point z3v487.ce6912
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 5 for input.dst.llvm-%n
8388608
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6912 expr point z3v487.ce6912 done
=inductive-invariants point_set point z3.ce6913
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 4 for input.dst.llvm-%x
4021813188
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 5 for input.dst.llvm-%n
262144
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6913 expr point z3.ce6913 done
=inductive-invariants point_set point z3.ce11082
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 2 for input.spec-%var-i-1.L4%6%bbentry
3489660929
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 3 for input.spec-%var-ret-1.L4%6%bbentry
537919745
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 4 for input.dst.llvm-%x
1585451140
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 5 for input.dst.llvm-%n
3779543916
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3489660929
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
537919745
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11082 expr point z3.ce11082 done
=inductive-invariants point_set point z3v487.ce7032
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 5 for input.dst.llvm-%n
8388608
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 6 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7032 expr point z3v487.ce7032 done
=inductive-invariants point_set point z3.ce7033
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 4 for input.dst.llvm-%x
4021813188
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 5 for input.dst.llvm-%n
262144
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7033 expr point z3.ce7033 done
=inductive-invariants point_set point z3v487.ce6952
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 6 for input.dst.llvm-%m
35652129
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6952 expr point z3v487.ce6952 done
=inductive-invariants point_set point z3.ce6953
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 4 for input.dst.llvm-%x
4294899704
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6953 expr point z3.ce6953 done
=inductive-invariants point_set point z3v487.ce6992
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 5 for input.dst.llvm-%n
16777216
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce6992 expr point z3v487.ce6992 done
=inductive-invariants point_set point z3.ce6993
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 4 for input.dst.llvm-%x
3858622320
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce6993 expr point z3.ce6993 done
=inductive-invariants point_set point z3v487.ce7072
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 5 for input.dst.llvm-%n
8388608
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 6 for input.dst.llvm-%m
8388608
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7072 expr point z3v487.ce7072 done
=inductive-invariants point_set point z3.ce7073
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 5 for input.dst.llvm-%n
2097152
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7073 expr point z3.ce7073 done
=inductive-invariants point_set point z3.ce7112
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 4 for input.dst.llvm-%x
2145250796
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7112 expr point z3.ce7112 done
=inductive-invariants point_set point z3.ce11286
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741824
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 4 for input.dst.llvm-%x
1140850688
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 6 for input.dst.llvm-%m
5
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741825
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11286 expr point z3.ce11286 done
=inductive-invariants point_set point z3.ce7132
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 5 for input.dst.llvm-%n
131072
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7132 expr point z3.ce7132 done
=inductive-invariants point_set point z3v487.ce7133
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 5 for input.dst.llvm-%n
8388608
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 6 for input.dst.llvm-%m
32768
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7133 expr point z3v487.ce7133 done
=inductive-invariants point_set point z3.ce11244
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741823
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 3 for input.spec-%var-ret-1.L4%6%bbentry
2096007004
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 4 for input.dst.llvm-%x
1140850688
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 6 for input.dst.llvm-%m
5
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 44 for input.spec-%var-j-0.L4%18%bbentry
5
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741823
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11244 expr point z3.ce11244 done
=inductive-invariants point_set point z3.ce7172
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 4 for input.dst.llvm-%x
3624042516
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7172 expr point z3.ce7172 done
=inductive-invariants point_set point z3v487.ce7173
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 4 for input.dst.llvm-%x
2164326532
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7173 expr point z3v487.ce7173 done
=inductive-invariants point_set point z3.ce7212
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 4 for input.dst.llvm-%x
4294899704
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7212 expr point z3.ce7212 done
=inductive-invariants point_set point z3v487.ce7213
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 6 for input.dst.llvm-%m
35652129
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7213 expr point z3v487.ce7213 done
=inductive-invariants point_set point z3.ce7252
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 4 for input.dst.llvm-%x
671109176
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7252 expr point z3.ce7252 done
=inductive-invariants point_set point z3v487.ce7253
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 4 for input.dst.llvm-%x
84149064
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7253 expr point z3v487.ce7253 done
=inductive-invariants point_set point z3v487.ce7292
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 4 for input.dst.llvm-%x
4051726720
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 5 for input.dst.llvm-%n
32768
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 6 for input.dst.llvm-%m
131074
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7292 expr point z3v487.ce7292 done
=inductive-invariants point_set point z3.ce7312
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 4 for input.dst.llvm-%x
3212115708
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7312 expr point z3.ce7312 done
=inductive-invariants point_set point z3v487.ce7313
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7313 expr point z3v487.ce7313 done
=inductive-invariants point_set point z3.ce7352
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 4 for input.dst.llvm-%x
4016044976
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 5 for input.dst.llvm-%n
512
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce7352 expr point z3.ce7352 done
=inductive-invariants point_set point z3v487.ce7353
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 2 for input.spec-%var-i-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 4 for input.dst.llvm-%x
2162688
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 6 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 45 for input.spec-%var-i-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce7353 expr point z3v487.ce7353 done
=inductive-invariants point_set point z3v487.ce9858
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9858 expr point z3v487.ce9858 done
=inductive-invariants point_set point z3v487.ce9950
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9950 expr point z3v487.ce9950 done
=inductive-invariants point_set point z3.ce9868
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9868 expr point z3.ce9868 done
=inductive-invariants point_set point z3.ce9886
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 4 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9886 expr point z3.ce9886 done
=inductive-invariants point_set point z3v487.ce9896
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 4 for input.dst.llvm-%x
536870912
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 5 for input.dst.llvm-%n
128
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9896 expr point z3v487.ce9896 done
=inductive-invariants point_set point z3v487.ce9906
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9906 expr point z3v487.ce9906 done
=inductive-invariants point_set point z3.ce9916
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9916 expr point z3.ce9916 done
=inductive-invariants point_set point z3.ce9940
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9940 expr point z3.ce9940 done
=inductive-invariants point_set point z3.ce9930
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 5 for input.dst.llvm-%n
257
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce9930 expr point z3.ce9930 done
=inductive-invariants point_set point z3v487.ce9985
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 2 for input.spec-%var-i-1.L4%6%bbentry
2
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 45 for input.spec-%var-i-0.L4%18%bbentry
2
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
3
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce9985 expr point z3v487.ce9985 done
=inductive-invariants point_set point z3.ce10193
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 2 for input.spec-%var-i-1.L4%6%bbentry
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 45 for input.spec-%var-i-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10193 expr point z3.ce10193 done
=inductive-invariants point_set point z3v487.ce10247
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 2 for input.spec-%var-i-1.L4%6%bbentry
3
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 5 for input.dst.llvm-%n
257
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 45 for input.spec-%var-i-0.L4%18%bbentry
3
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
4
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10247 expr point z3v487.ce10247 done
=inductive-invariants point_set point z3v487.ce10217
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 2 for input.spec-%var-i-1.L4%6%bbentry
3
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 5 for input.dst.llvm-%n
257
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10217 expr point z3v487.ce10217 done
=inductive-invariants point_set point z3.ce10218
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 2 for input.spec-%var-i-1.L4%6%bbentry
2
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10218 expr point z3.ce10218 done
=inductive-invariants point_set point z3v487.ce10270
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 2 for input.spec-%var-i-1.L4%6%bbentry
4
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 5 for input.dst.llvm-%n
257
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 45 for input.spec-%var-i-0.L4%18%bbentry
4
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
5
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10270 expr point z3v487.ce10270 done
=inductive-invariants point_set point z3.ce10345
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 2 for input.spec-%var-i-1.L4%6%bbentry
4
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 45 for input.spec-%var-i-0.L4%18%bbentry
4
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
5
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10345 expr point z3.ce10345 done
=inductive-invariants point_set point z3.ce10315
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 2 for input.spec-%var-i-1.L4%6%bbentry
4
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10315 expr point z3.ce10315 done
=inductive-invariants point_set point z3v487.ce10316
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 2 for input.spec-%var-i-1.L4%6%bbentry
4
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 5 for input.dst.llvm-%n
10
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10316 expr point z3v487.ce10316 done
=inductive-invariants point_set point z3v487.ce10408
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 2 for input.spec-%var-i-1.L4%6%bbentry
5
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 5 for input.dst.llvm-%n
9
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 45 for input.spec-%var-i-0.L4%18%bbentry
5
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
6
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10408 expr point z3v487.ce10408 done
=inductive-invariants point_set point z3v487.ce10378
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 2 for input.spec-%var-i-1.L4%6%bbentry
5
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 5 for input.dst.llvm-%n
9
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10378 expr point z3v487.ce10378 done
=inductive-invariants point_set point z3.ce10379
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 2 for input.spec-%var-i-1.L4%6%bbentry
5
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 5 for input.dst.llvm-%n
1073741825
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10379 expr point z3.ce10379 done
=inductive-invariants point_set point z3v487.ce10431
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 2 for input.spec-%var-i-1.L4%6%bbentry
6
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 5 for input.dst.llvm-%n
9
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 45 for input.spec-%var-i-0.L4%18%bbentry
6
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
7
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10431 expr point z3v487.ce10431 done
=inductive-invariants point_set point z3.ce10509
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 2 for input.spec-%var-i-1.L4%6%bbentry
2147483648
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 5 for input.dst.llvm-%n
2833760120
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 45 for input.spec-%var-i-0.L4%18%bbentry
2147483648
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2147483649
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10509 expr point z3.ce10509 done
=inductive-invariants point_set point z3.ce10476
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 2 for input.spec-%var-i-1.L4%6%bbentry
2147483647
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 5 for input.dst.llvm-%n
2833760120
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 45 for input.spec-%var-i-0.L4%18%bbentry
2147483647
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2147483648
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10476 expr point z3.ce10476 done
=inductive-invariants point_set point z3v487.ce10477
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 2 for input.spec-%var-i-1.L4%6%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 5 for input.dst.llvm-%n
3803297620
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 45 for input.spec-%var-i-0.L4%18%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10477 expr point z3v487.ce10477 done
=inductive-invariants point_set point z3v487.ce10570
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 2 for input.spec-%var-i-1.L4%6%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10570 expr point z3v487.ce10570 done
=inductive-invariants point_set point z3.ce10571
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 2 for input.spec-%var-i-1.L4%6%bbentry
2359637330
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 5 for input.dst.llvm-%n
3327302056
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2359637330
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10571 expr point z3.ce10571 done
=inductive-invariants point_set point z3.ce10614
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 2 for input.spec-%var-i-1.L4%6%bbentry
4294967294
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 45 for input.spec-%var-i-0.L4%18%bbentry
4294967294
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
4294967295
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10614 expr point z3.ce10614 done
=inductive-invariants point_set point z3v487.ce10615
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 2 for input.spec-%var-i-1.L4%6%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 45 for input.spec-%var-i-0.L4%18%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10615 expr point z3v487.ce10615 done
=inductive-invariants point_set point z3v487.ce10677
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 2 for input.spec-%var-i-1.L4%6%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10677 expr point z3v487.ce10677 done
=inductive-invariants point_set point z3.ce10678
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 2 for input.spec-%var-i-1.L4%6%bbentry
4294967295
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 6 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10678 expr point z3.ce10678 done
=inductive-invariants point_set point z3.ce11102
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 2 for input.spec-%var-i-1.L4%6%bbentry
3489660929
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 3 for input.spec-%var-ret-1.L4%6%bbentry
537919745
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 4 for input.dst.llvm-%x
1585451140
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 5 for input.dst.llvm-%n
3779543916
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3489660929
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 45 for input.spec-%var-i-0.L4%18%bbentry
3489660929
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 46 for input.spec-%var-ret-0.L4%18%bbentry
537919745
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
3489660930
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
537919745
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11102 expr point z3.ce11102 done
=inductive-invariants point_set point z3.ce11018
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 2 for input.spec-%var-i-1.L4%6%bbentry
3489660928
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 3 for input.spec-%var-ret-1.L4%6%bbentry
537919745
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 4 for input.dst.llvm-%x
1585451140
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 5 for input.dst.llvm-%n
3779543916
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3489660928
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 44 for input.spec-%var-j-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 45 for input.spec-%var-i-0.L4%18%bbentry
3489660928
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 46 for input.spec-%var-ret-0.L4%18%bbentry
537919745
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
3489660929
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
537919745
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11018 expr point z3.ce11018 done
=inductive-invariants point_set point z3.ce10976
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 2 for input.spec-%var-i-1.L4%6%bbentry
3489660927
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 4 for input.dst.llvm-%x
1585451140
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 5 for input.dst.llvm-%n
3779543916
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3489660927
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 44 for input.spec-%var-j-0.L4%18%bbentry
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 45 for input.spec-%var-i-0.L4%18%bbentry
3489660927
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 46 for input.spec-%var-ret-0.L4%18%bbentry
537919745
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
3489660928
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
537919745
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce10976 expr point z3.ce10976 done
=inductive-invariants point_set point z3v487.ce10977
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 2 for input.spec-%var-i-1.L4%6%bbentry
536870911
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 3 for input.spec-%var-ret-1.L4%6%bbentry
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 4 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 5 for input.dst.llvm-%n
671121717
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 6 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 44 for input.spec-%var-j-0.L4%18%bbentry
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 45 for input.spec-%var-i-0.L4%18%bbentry
536870911
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 46 for input.spec-%var-ret-0.L4%18%bbentry
2151678992
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
536870912
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
2151678992
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce10977 expr point z3v487.ce10977 done
=inductive-invariants point_set point z3.ce11150
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 2 for input.spec-%var-i-1.L4%6%bbentry
862978047
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1017199832
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 4 for input.dst.llvm-%x
2193620992
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 5 for input.dst.llvm-%n
2749146360
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 6 for input.dst.llvm-%m
6
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
862978047
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 44 for input.spec-%var-j-0.L4%18%bbentry
4
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 45 for input.spec-%var-i-0.L4%18%bbentry
862978047
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
862978048
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce11150 expr point z3.ce11150 done
=inductive-invariants point_set point z3v487.ce11151
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1727668934
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 4 for input.dst.llvm-%x
2147483648
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 6 for input.dst.llvm-%m
6
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 44 for input.spec-%var-j-0.L4%18%bbentry
4
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11151 expr point z3v487.ce11151 done
=inductive-invariants point_set point z3v487.ce11245
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 2 for input.spec-%var-i-1.L4%6%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 3 for input.spec-%var-ret-1.L4%6%bbentry
480243072
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 4 for input.dst.llvm-%x
136
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 5 for input.dst.llvm-%n
1075838985
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 6 for input.dst.llvm-%m
33
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 44 for input.spec-%var-j-0.L4%18%bbentry
5
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 45 for input.spec-%var-i-0.L4%18%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11245 expr point z3v487.ce11245 done
=inductive-invariants point_set point z3.ce11346
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 2 for input.spec-%var-i-1.L4%6%bbentry
10813440
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 3 for input.spec-%var-ret-1.L4%6%bbentry
862162311
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 4 for input.dst.llvm-%x
2104229884
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 5 for input.dst.llvm-%n
541851649
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 6 for input.dst.llvm-%m
1610612737
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
10813440
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 44 for input.spec-%var-j-0.L4%18%bbentry
541851649
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 45 for input.spec-%var-i-0.L4%18%bbentry
10813440
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
10813441
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
541851649
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11346 expr point z3.ce11346 done
=inductive-invariants point_set point z3v487.ce11347
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 2 for input.spec-%var-i-1.L4%6%bbentry
268435455
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1144440174
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 4 for input.dst.llvm-%x
2113929216
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 5 for input.dst.llvm-%n
268966281
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 6 for input.dst.llvm-%m
2164785153
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435455
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 44 for input.spec-%var-j-0.L4%18%bbentry
268966281
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 45 for input.spec-%var-i-0.L4%18%bbentry
268435455
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
268435456
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
268966281
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11347 expr point z3v487.ce11347 done
=inductive-invariants point_set point z3.ce11440
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 2 for input.spec-%var-i-1.L4%6%bbentry
268435455
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1255353895
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 4 for input.dst.llvm-%x
1081606148
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 5 for input.dst.llvm-%n
293604888
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 6 for input.dst.llvm-%m
562047001
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268435455
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 44 for input.spec-%var-j-0.L4%18%bbentry
293604889
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 45 for input.spec-%var-i-0.L4%18%bbentry
268435455
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
268435456
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
293604889
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce11440 expr point z3.ce11440 done
=inductive-invariants point_set point z3v487.ce11441
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 1 for and(and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 2 for input.spec-%var-i-1.L4%6%bbentry
402653183
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 3 for input.spec-%var-ret-1.L4%6%bbentry
1556366462
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 4 for input.dst.llvm-%x
536870912
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 5 for input.dst.llvm-%n
814710784
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 6 for input.dst.llvm-%m
839286785
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
402653183
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 9 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 10 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 11 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 12 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 13 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 14 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 15 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 16 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 17 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 18 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 21 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 22 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 25 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 26 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 29 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 30 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 44 for input.spec-%var-j-0.L4%18%bbentry
814710785
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 45 for input.spec-%var-i-0.L4%18%bbentry
402653183
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 46 for input.spec-%var-ret-0.L4%18%bbentry
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 47 for input.spec-%tmpvar-12.L4%18%bbentry
402653184
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 48 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
814710785
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 49 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 50 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 51 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 52 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 53 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 54 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 55 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 56 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 57 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 58 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 59 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 60 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 61 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 62 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 63 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 64 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 65 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 66 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 67 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 68 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 69 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 70 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 71 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 72 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 73 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 val 74 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11441 expr point z3v487.ce11441 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L4%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L4%18%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L4%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce25
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce36
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce102
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce113
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce58
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce80
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce81
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce124
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce11082
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce9868
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=11; number of preds=3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 8->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce9868
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce10217
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce10315
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce10378
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce10570
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce10677
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce146
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce25
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce168
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce102
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce113
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce190
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce9868
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce10217
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce10315
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3v487.ce10378
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce10570
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 6: z3v487.ce10677
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3.ce146
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3v487.ce25
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3v487.ce102
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce113
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3.ce9868
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 11 exprs
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%m : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 39
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 40
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 41
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 42
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 43
1 : spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce3
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=11; number of visited CEs=1; number of preds=2
=pc L4%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L4%18%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
98 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
99 : 1 { 0x1 +1.11e129 } : BV:32
100 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
101 : region_agrees_with_memlabel(98, 81, 99, 100) : BOOL
102 : and(97, 101) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 13 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%x : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 45
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 46
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 47
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 49
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 50
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-32-free_var_idx.49
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.48
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L4%18%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.50
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.45
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.47
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-1.L4%6%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L4%6%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 6
=Comment
expr-group-bvs.linear1-2-free_var_idx.4
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce36
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce58
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce124
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce10883
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce10752
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce6373
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce6372
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce9950
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce11018
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce10976
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=13; number of visited CEs=11; number of preds=7
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
4
-2147483648->0; 2->0; 3->0; 4->1073741824; 5->0; 6->0; 7->0; 44->0; 45->0; 46->0; 47->0; 48->0; 49->0; 50->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 44->0; 45->0; 46->0; 47->0; 48->0; 49->0; 50->0; 
45
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 44->0; 45->1; 46->0; 47->0; 48->0; 49->0; 50->0; 
47
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 44->0; 45->0; 46->0; 47->1; 48->0; 49->0; 50->0; 
48
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 44->4294967295; 45->0; 46->0; 47->0; 48->1; 49->0; 50->0; 
49
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 44->0; 45->0; 46->0; 47->0; 48->0; 49->1; 50->0; 
50
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 44->0; 45->0; 46->4294967295; 47->0; 48->0; 49->0; 50->1; 
matrix done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 44
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce10883
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce11244
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce11150
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 45
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce9950
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce9985
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce10270
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce10408
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3.ce10509
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name src-branches-const-ineq
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 47
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce9950
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce10247
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce10270
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce10476
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 5: z3.ce10614
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce146
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3.ce36
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce168
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 6
1 : input.dst.llvm-%m : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3v487.ce124
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3.ce6452
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce6412
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3v487.ce9950
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3v487.ce9985
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3v487.ce10270
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 4: z3v487.ce10408
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 5: z3.ce10509
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 1: z3.ce10883
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 2: z3.ce11244
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 3: z3.ce11150
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_exprs done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini name dst-ineq
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini expr_group_type HOUDINI with 48 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 9
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 10
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 11
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 12
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 13
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 14
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 15
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 16
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 17
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 18
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 21
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 22
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 25
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 26
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 29
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 30
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 51
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 52
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 54
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 55
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 56
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 58
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 59
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 60
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 62
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 63
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 64
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 66
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 68
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 69
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 70
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 71
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 72
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 73
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 74
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 0: z3.ce146
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 1: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 2: z3v487.ce124
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 3: z3.ce10883
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 4: z3.ce6412
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 5: z3v487.ce9950
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 6: z3.ce10509
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 7: z3.ce11346
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 8: z3.ce11440
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based name spec-coupling-invariants
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 26 exprs
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%x : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 5) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%m : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 39
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 40
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 41
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 75
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 77
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 78
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 79
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 80
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 81
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 82
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : bvult(8, 4) : BOOL
11 : and(9, 10) : BOOL
12 : lambda(8, 11) : FUNCTION[BV:32 -> BOOL]
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(8, 16) : BV:32
18 : bvmul(1, 16) : BV:32
19 : input.dst.llvm-%x : BV:32
20 : bvadd(18, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(13, 14, 15, 20, 21, 22) : BV:32
24 : bvadd(17, 23) : BV:32
25 : select(13, 14, 15, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(12, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 83
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%x : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : bvadd(19, 10) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : bvadd(18, 23) : BV:32
25 : select(14, 15, 16, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(13, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 84
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 85
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%m : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : bvult(8, 4) : BOOL
11 : and(9, 10) : BOOL
12 : lambda(8, 11) : FUNCTION[BV:32 -> BOOL]
13 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
14 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
15 : memlabel-top : MEMLABEL
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(8, 16) : BV:32
18 : bvmul(1, 16) : BV:32
19 : input.dst.llvm-%x : BV:32
20 : bvadd(18, 19) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(13, 14, 15, 20, 21, 22) : BV:32
24 : bvadd(17, 23) : BV:32
25 : select(13, 14, 15, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(12, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 86
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 87
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%x : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : bvadd(19, 4) : BV:32
21 : 4 { 0x4 +1.0e1025 } : INT
22 : 0 { 0x0 } : BOOL
23 : select(14, 15, 16, 20, 21, 22) : BV:32
24 : bvadd(18, 23) : BV:32
25 : select(14, 15, 16, 24, 21, 22) : BV:32
26 : lambda(8, 25) : FUNCTION[BV:32 -> BV:32]
27 : map(13, 26) : MAP[BV:32 -> BV:32]
28 : lambda(1, 27) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
29 : map(7, 28) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
30 : input.spec-%var-i-1.L4%6%bbentry : BV:32
31 : map_get(29, 30) : SUM[UNIT,MAP[BV:32 -> BV:32]]
32 : 1 { 0x1 +1.0e1025 } : INT
33 : sum_is(31, 32) : BOOL
34 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
35 : sum_get(31, 32) : MAP[BV:32 -> BV:32]
36 : eq(34, 35) : BOOL
37 : and(33, 36) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 88
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 89
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 90
1 : spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L4%6%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 91
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 92
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : spec-%var-x_i-1.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : bvule(2, 8) : BOOL
10 : input.dst.llvm-%m : BV:32
11 : bvult(8, 10) : BOOL
12 : and(9, 11) : BOOL
13 : lambda(8, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-top : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(8, 17) : BV:32
19 : bvmul(1, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(8, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(1, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(7, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : input.spec-%var-i-1.L4%6%bbentry : BV:32
32 : map_get(30, 31) : SUM[UNIT,MAP[BV:32 -> BV:32]]
33 : 1 { 0x1 +1.0e1025 } : INT
34 : sum_is(32, 33) : BOOL
35 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
36 : sum_get(32, 33) : MAP[BV:32 -> BV:32]
37 : eq(35, 36) : BOOL
38 : and(34, 37) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based predicate_set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based is assumed eqclass : 0
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ce 0: z3v487.ce25
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ces set done
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based summary: number of exprs=26; number of visited CEs=1; number of preds=3
=pc L4%18%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL4%6%bbentry_Lfor.cond%1%bbentry.to_pcL4%18%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-1.L4%6%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL4%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-1.L4%6%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL4%18%bbentry_Lfor.cond1%1%bbentry.to_pcL4%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L4%18%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL4%18%bbentry_Lfor.cond1%1%bbentry.to_pcL4%18%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvugt(4, 1) : BOOL
6 : not(5) : BOOL
7 : or(5, 6) : BOOL
8 : and(3, 7) : BOOL
9 : not(8) : BOOL
10 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
11 : input.spec-%var-j-0.L4%18%bbentry : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : 1 { 0x1 +1.0e1025 } : INT
14 : sum_is(12, 13) : BOOL
15 : input.spec-%var-i-0.L4%18%bbentry : BV:32
16 : bvugt(15, 11) : BOOL
17 : not(16) : BOOL
18 : or(16, 17) : BOOL
19 : and(14, 18) : BOOL
20 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
21 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,MAP[BV:32 -> BV:32]]
23 : sum_is(22, 13) : BOOL
24 : 0 { 0x0 +1.0e1025 } : INT
25 : sum_is(12, 24) : BOOL
26 : and(23, 25) : BOOL
27 : or(19, 26) : BOOL
28 : or(9, 27) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L4%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L4%18%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-j-0.L4%18%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-i-0.L4%18%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%var-ret-0.L4%18%bbentry : BV:32
=SRC Ranking expr 3
1 : input.spec-%tmpvar-12.L4%18%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-i-1.L4%6%bbentry : BV:32
=SRC Tie Breaking expr 2
1 : input.spec-%tmpvar-10.L4%7%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 3
1 : input.spec-%var-x-0.L4%6%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 4
1 : input.spec-%var-x_i-1.L4%18%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 5
1 : input.spec-%var-x_i-0.L4%18%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 6
1 : input.spec-%var-ret-1.L4%6%bbentry : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140539 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140432 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140540 : select(140429, 140430, 140539, 140432, 140412, 140413) : BV:32
=RhsExpr
140428 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140541 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140433 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140542 : select(140429, 140430, 140541, 140433, 140412, 140413) : BV:32
=RhsExpr
140427 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140431 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
140544 : select(140429, 140430, 140543, 140431, 140412, 140413) : BV:32
=RhsExpr
140426 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140426 : input.dst.llvm-%x : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140439 : islangaligned(140426, 140412) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
141177 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
141179 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
141180 : bvule(141177, 141179) : BOOL
140409 : 4 { 0x4 +1.47e129 } : BV:32
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141181 : bvadd(140409, 140337) : BV:32
141182 : bvadd(141177, 141181) : BV:32
141183 : eq(141179, 141182) : BOOL
141184 : and(141180, 141183) : BOOL
141185 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
141186 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
141187 : bvule(141185, 141186) : BOOL
141188 : and(141184, 141187) : BOOL
141189 : bvadd(141185, 141181) : BV:32
141190 : eq(141186, 141189) : BOOL
141191 : and(141188, 141190) : BOOL
141192 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
141193 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
141194 : bvule(141192, 141193) : BOOL
141195 : and(141191, 141194) : BOOL
141196 : bvadd(141192, 141181) : BV:32
141197 : eq(141193, 141196) : BOOL
141198 : and(141195, 141197) : BOOL
141199 : bvuge(141177, 141185) : BOOL
141200 : bvule(141177, 141186) : BOOL
141201 : and(141199, 141200) : BOOL
141203 : bvuge(141179, 141185) : BOOL
141204 : bvule(141179, 141186) : BOOL
141205 : and(141203, 141204) : BOOL
141206 : not(141205) : BOOL
141207 : andnot1(141201, 141206) : BOOL
141202 : bvuge(141185, 141177) : BOOL
141208 : bvule(141185, 141179) : BOOL
141209 : and(141202, 141208) : BOOL
141211 : bvuge(141186, 141177) : BOOL
141212 : bvule(141186, 141179) : BOOL
141213 : and(141211, 141212) : BOOL
141214 : not(141213) : BOOL
141215 : andnot1(141209, 141214) : BOOL
141210 : and(141207, 141215) : BOOL
141216 : bvuge(141177, 141192) : BOOL
141217 : bvule(141177, 141193) : BOOL
141218 : and(141216, 141217) : BOOL
141220 : bvuge(141179, 141192) : BOOL
141221 : bvule(141179, 141193) : BOOL
141222 : and(141220, 141221) : BOOL
141223 : not(141222) : BOOL
141224 : andnot1(141218, 141223) : BOOL
141227 : and(141210, 141224) : BOOL
141219 : bvuge(141192, 141177) : BOOL
141225 : bvule(141192, 141179) : BOOL
141226 : and(141219, 141225) : BOOL
141228 : bvuge(141193, 141177) : BOOL
141229 : bvule(141193, 141179) : BOOL
141230 : and(141228, 141229) : BOOL
141231 : not(141230) : BOOL
141232 : andnot1(141226, 141231) : BOOL
141233 : and(141227, 141232) : BOOL
141234 : bvuge(141185, 141192) : BOOL
141235 : bvule(141185, 141193) : BOOL
141236 : and(141234, 141235) : BOOL
141238 : bvuge(141186, 141192) : BOOL
141239 : bvule(141186, 141193) : BOOL
141240 : and(141238, 141239) : BOOL
141241 : not(141240) : BOOL
141242 : andnot1(141236, 141241) : BOOL
141245 : and(141233, 141242) : BOOL
141237 : bvuge(141192, 141185) : BOOL
141243 : bvule(141192, 141186) : BOOL
141244 : and(141237, 141243) : BOOL
141246 : bvuge(141193, 141185) : BOOL
141247 : bvule(141193, 141186) : BOOL
141248 : and(141246, 141247) : BOOL
141249 : not(141248) : BOOL
141250 : andnot1(141244, 141249) : BOOL
141251 : and(141245, 141250) : BOOL
141252 : and(141198, 141251) : BOOL
140433 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
141253 : 3 { 0x3 +1.35e129 } : BV:32
141254 : bvand(140433, 141253) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141255 : eq(141254, 140276) : BOOL
140431 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
141256 : bvand(140431, 141253) : BV:32
141257 : eq(141256, 140276) : BOOL
141258 : and(141255, 141257) : BOOL
140432 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
141259 : bvand(140432, 141253) : BV:32
141260 : eq(141259, 140276) : BOOL
141261 : and(141258, 141260) : BOOL
141262 : and(141252, 141261) : BOOL
141263 : eq(140433, 141177) : BOOL
141264 : eq(140431, 141185) : BOOL
141265 : and(141263, 141264) : BOOL
141266 : eq(140432, 141192) : BOOL
141267 : and(141265, 141266) : BOOL
141268 : and(141262, 141267) : BOOL
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140288 : 1 { 0x1 +1.11e129 } : BV:32
140434 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141269 : region_agrees_with_memlabel(140430, 140276, 140288, 140434) : BOOL
141270 : and(141268, 141269) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140393 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140397 : bvule(140276, 140393) : BOOL
140427 : input.dst.llvm-%n : BV:32
141271 : bvult(140393, 140427) : BOOL
141272 : and(140397, 141271) : BOOL
141273 : lambda(140393, 141272) : FUNCTION[BV:32 -> BOOL]
140394 : Lambda1 : BV:32
140401 : bvule(140276, 140394) : BOOL
140428 : input.dst.llvm-%m : BV:32
141274 : bvult(140394, 140428) : BOOL
141275 : and(140401, 141274) : BOOL
141293 : lambda(140394, 141275) : FUNCTION[BV:32 -> BOOL]
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140407 : memlabel-top : MEMLABEL
140409 : 4 { 0x4 +1.47e129 } : BV:32
140415 : bvmul(140394, 140409) : BV:32
140410 : bvmul(140393, 140409) : BV:32
140426 : input.dst.llvm-%x : BV:32
141313 : bvadd(140410, 140426) : BV:32
140412 : 4 { 0x4 +1.0e1025 } : INT
140413 : 0 { 0x0 } : BOOL
141314 : select(140429, 140430, 140407, 141313, 140412, 140413) : BV:32
141317 : bvadd(140415, 141314) : BV:32
141319 : select(140429, 140430, 140407, 141317, 140412, 140413) : BV:32
141321 : lambda(140394, 141319) : FUNCTION[BV:32 -> BV:32]
141322 : map(141293, 141321) : MAP[BV:32 -> BV:32]
141326 : lambda(140393, 141322) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141327 : map(141273, 141326) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141339 : eq(140273, 141327) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L4%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L4%6%bbentry_Lfor.cond%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L4%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
fold-conjunct
=LhsExpr
140800 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140428 : input.dst.llvm-%m : BV:32
140810 : bvult(140800, 140428) : BOOL
140799 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140801 : bvugt(140799, 140800) : BOOL
309058 : not(140801) : BOOL
309059 : or(140801, 309058) : BOOL
309198 : and(140810, 309059) : BOOL
140589 : 4 { 0x4 +1.0e1025 } : BV:64
140460 : 32 { 0x20 +1.0e1025 } : INT
140829 : bvsign_ext(140799, 140460) : BV:64
140980 : bvmul(140589, 140829) : BV:64
140464 : 63 { 0x3f +1.0e1025 } : INT
140981 : bvextract(140980, 140464, 140460) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140828 : bvslt(140799, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140994 : ite(140828, 140337, 140276) : BV:32
140996 : eq(140981, 140994) : BOOL
140412 : 4 { 0x4 +1.0e1025 } : INT
140998 : isindexforsize(140996, 140412) : BOOL
140426 : input.dst.llvm-%x : BV:32
140409 : 4 { 0x4 +1.47e129 } : BV:32
140921 : bvmul(140409, 140799) : BV:32
140924 : bvadd(140426, 140921) : BV:32
141000 : isgepoffset(140924, 140921) : BOOL
141004 : islangaligned(140924, 140412) : BOOL
140429 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140430 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140577 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140413 : 0 { 0x0 } : BOOL
140930 : select(140429, 140430, 140577, 140924, 140412, 140413) : BV:32
141006 : islangaligned(140930, 140412) : BOOL
141009 : and(141004, 141006) : BOOL
140844 : bvsign_ext(140800, 140460) : BV:64
141022 : bvmul(140589, 140844) : BV:64
141023 : bvextract(141022, 140464, 140460) : BV:32
140843 : bvslt(140800, 140276) : BOOL
141036 : ite(140843, 140337, 140276) : BV:32
141038 : eq(141023, 141036) : BOOL
141040 : isindexforsize(141038, 140412) : BOOL
140933 : bvmul(140409, 140800) : BV:32
140935 : bvadd(140930, 140933) : BV:32
141042 : isgepoffset(140935, 140933) : BOOL
141047 : and(140998, 141000, 141004, 141009, 141040, 141042) : BOOL
140962 : islangaligned(140935, 140412) : BOOL
516567 : and(141047, 140962) : BOOL
140275 : 1 { 0x1 } : BOOL
516568 : eq(516567, 140275) : BOOL
516572 : implies(309058, 516568) : BOOL
516573 : implies(140801, 516568) : BOOL
516574 : and(516572, 516573) : BOOL
516569 : eq(516574, 140275) : BOOL
516570 : implies(309198, 516569) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L4%18%bbentry_Lfor.cond1%1%bbentry=>L4%18%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L4%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 10
=bv_rank at L4%18%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 24
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
