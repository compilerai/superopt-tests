=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1.B4.C1.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L3%7%bbentry L3%8%d L3%9%bbentry L3%11%bbentry L3%19%bbentry L3%20%d L3%21%bbentry L3%23%bbentry L3%27%d L3%28%bbentry L3%29%bbentry L3%32%bbentry E0%0%d
=Edges:
L0%0%d => L3%7%bbentry
L3%7%bbentry => L3%8%d
L3%8%d => L3%11%bbentry
L3%8%d => L3%9%bbentry
L3%9%bbentry => E0%0%d
L3%11%bbentry => L3%19%bbentry
L3%19%bbentry => L3%20%d
L3%20%d => L3%23%bbentry
L3%20%d => L3%21%bbentry
L3%21%bbentry => L3%7%bbentry (backedge) 
L3%23%bbentry => L3%27%d
L3%27%d => L3%29%bbentry
L3%27%d => L3%28%bbentry
L3%28%bbentry => L3%32%bbentry
L3%29%bbentry => L3%32%bbentry
L3%32%bbentry => L3%19%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%7%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%8%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%9%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%11%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%19%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%20%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%21%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%23%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%27%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%28%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%29%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at L3%32%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%7%bbentry => L3%8%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-10.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%8%d => L3%11%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%8%d => L3%9%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%9%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%11%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_bv)*(((intrinsic_app_bvadd*ctor_bv)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%19%bbentry => L3%20%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%20%d => L3%23%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%20%d => L3%21%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%21%bbentry => L3%7%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-1.L3%7%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*((inline_exit*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=Edge: L3%23%bbentry => L3%27%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%27%d
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%27%d
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L3%27%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_1)*ctor_bv)*intrinsic_app_bvadd)*intrinsic_app_bvugt)
tfg_edge_comment end

=Edge: L3%27%d => L3%29%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_false_split
tfg_edge_comment end

=Edge: L3%27%d => L3%28%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:12:ite_true_split
tfg_edge_comment end

=Edge: L3%28%bbentry => L3%32%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvadd)*ite_true_merge)
tfg_edge_comment end

=Edge: L3%29%bbentry => L3%32%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvsub(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*intrinsic_app_bvsub)*ite_false_merge)
tfg_edge_comment end

=Edge: L3%32%bbentry => L3%19%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*tailrec_backedge)*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-x-1
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 35 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 36 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 37 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L3%8%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=Loc 38 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L3%20%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
=Loc 39 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L3%27%d
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=Loc 40 in src.spec.foo.
REGMEM
spec-%var-i-1.L3%7%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=Loc 41 in src.spec.foo.
REGMEM
spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=Loc 42 in src.spec.foo.
REGMEM
spec-%var-j-0.L3%19%bbentry
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=Loc 43 in src.spec.foo.
REGMEM
spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-16.E0%0%d
1 : input.spec-%tmpvar-16.E0%0%d : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%var-u-1.E0%0%d
1 : input.spec-%var-u-1.E0%0%d : UNIT
=Loc 50 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L3%27%d
1 : input.spec-%tmpvar-1.L3%27%d : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L3%27%d
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-x_ij-0.L3%27%d
1 : input.spec-%var-x_ij-0.L3%27%d : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-18.L3%7%bbentry
1 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-19.L3%7%bbentry
1 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=Loc 56 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L3%19%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%tmpvar-14.L3%7%bbentry : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%tmpvar-8.L3%7%bbentry : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%tmpvar-9.L3%7%bbentry : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%var-u-0.L3%7%bbentry
1 : input.spec-%var-u-0.L3%7%bbentry : UNIT
=Loc 63 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=Loc 64 in src.spec.foo.
REGMEM
src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L3%19%bbentry
1 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=Loc 66 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L3%19%bbentry
1 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=Loc 68 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%tmpvar-4.L3%32%bbentry : BV:32
=Loc 69 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%tmpvar-5.L3%32%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L3%7%bbentry
40, 41, 48, 
=live locs at L3%8%d
37, 40, 41, 48, 
=live locs at L3%9%bbentry
48, 
=live locs at L3%11%bbentry
37, 40, 41, 48, 
=live locs at L3%19%bbentry
41, 42, 43, 52, 57, 61, 
=live locs at L3%20%d
38, 41, 42, 43, 52, 57, 61, 
=live locs at L3%21%bbentry
41, 57, 61, 
=live locs at L3%23%bbentry
38, 41, 42, 43, 52, 57, 61, 
=live locs at L3%27%d
39, 41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%28%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%29%bbentry
41, 43, 51, 52, 53, 57, 61, 
=live locs at L3%32%bbentry
41, 43, 51, 52, 57, 63, 
=live locs at E0%0%d
47[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 35, 36
=loc definedness at L3%7%bbentry
1, 35, 36, 40, 41, 48, 54, 55, 56
=loc definedness at L3%8%d
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%9%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%11%bbentry
1, 35, 36, 37, 40, 41, 48, 54, 55, 56
=loc definedness at L3%19%bbentry
1, 35, 36, 37, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%20%d
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%21%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%23%bbentry
1, 35, 36, 37, 38, 40, 41, 42, 43, 48, 52, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%27%d
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%28%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%29%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67
=loc definedness at L3%32%bbentry
1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 50, 51, 52, 53, 54, 55, 56, 57, 61, 63, 64, 65, 66, 67
=loc definedness at E0%0%d
1, 35, 36, 37, 40, 41, 44, 45, 46, 47, 48, 49, 54, 55, 56

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%7%bbentry
40, 41
=branch affecting variable locs at L3%8%d
37, 40, 41
=branch affecting variable locs at L3%9%bbentry

=branch affecting variable locs at L3%11%bbentry
37, 40, 41
=branch affecting variable locs at L3%19%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L3%20%d
38, 41, 42, 43, 52, 57
=branch affecting variable locs at L3%21%bbentry
41, 57
=branch affecting variable locs at L3%23%bbentry
41, 42, 43, 52, 57
=branch affecting variable locs at L3%27%d
39, 41, 43, 51, 52, 57
=branch affecting variable locs at L3%28%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L3%29%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at L3%32%bbentry
41, 43, 51, 52, 57
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 40 {input.spec-%var-i-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 41 {input.spec-%var-x-0.L3%7%bbentry }
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 48 {input.spec-%var-ret-1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 54 {input.spec-%tmpvar-18.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 55 {input.spec-%tmpvar-19.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d for loc_id 37 {input.spec-%tmpvar-10.L3%8%d }
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=graph_with_edge_structures.loc_to_expr_map at L3%7%bbentry=>L3%8%d done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%8%d=>L3%11%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 44 {input.spec-%tmpvar-16.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 45 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 46 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 47 {input.spec-%tmpvar-21.E0%0%d }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d for loc_id 49 {input.spec-%var-u-1.E0%0%d }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%9%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 42 {input.spec-%var-j-0.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 43 {input.spec-%var-x_i-0.L3%19%bbentry }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 52 {input.spec-%var-i-0.L3%19%bbentry }
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 57 {input.spec-%tmpvar-12.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 65 {input.spec-%tmpvar-11.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 66 {input.spec-%tmpvar-13.L3%19%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry for loc_id 67 {input.spec-%var-x_i-1.L3%19%bbentry }
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%11%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d for loc_id 38 {input.spec-%tmpvar-0.L3%20%d }
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%19%bbentry=>L3%20%d done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%21%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%20%d=>L3%23%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 40 {input.spec-%var-i-1.L3%7%bbentry }
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 48 {input.spec-%var-ret-1.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 56 {input.src.spec-ghostvar.itervar.1.L3%7%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 58 {input.spec-%tmpvar-14.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 59 {input.spec-%tmpvar-8.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 60 {input.spec-%tmpvar-9.L3%7%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry for loc_id 62 {input.spec-%var-u-0.L3%7%bbentry }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%21%bbentry=>L3%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 39 {input.spec-%tmpvar-3.L3%27%d }
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 50 {input.spec-%tmpvar-1.L3%27%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 51 {input.spec-%tmpvar-2.L3%27%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d for loc_id 53 {input.spec-%var-x_ij-0.L3%27%d }
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%23%bbentry=>L3%27%d done
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%28%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%28%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%29%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%27%d=>L3%29%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry for loc_id 63 {input.spec-%tmpvar-6.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry for loc_id 68 {input.spec-%tmpvar-4.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%28%bbentry=>L3%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry for loc_id 63 {input.spec-%tmpvar-6.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry for loc_id 69 {input.spec-%tmpvar-5.L3%32%bbentry }
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%29%bbentry=>L3%32%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 42 {input.spec-%var-j-0.L3%19%bbentry }
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 61 {input.spec-%var-ret-0.L3%19%bbentry }
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry for loc_id 64 {input.src.spec-ghostvar.itervar.2.L3%19%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%32%bbentry=>L3%19%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%7%bbentry:
vacuous mls at L3%8%d:
vacuous mls at L3%9%bbentry:
vacuous mls at L3%11%bbentry:
vacuous mls at L3%19%bbentry:
vacuous mls at L3%20%d:
vacuous mls at L3%21%bbentry:
vacuous mls at L3%23%bbentry:
vacuous mls at L3%27%d:
vacuous mls at L3%28%bbentry:
vacuous mls at L3%29%bbentry:
vacuous mls at L3%32%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%7%bbentry:
non-vacuous mls at L3%8%d:
non-vacuous mls at L3%9%bbentry:
non-vacuous mls at L3%11%bbentry:
non-vacuous mls at L3%19%bbentry:
non-vacuous mls at L3%20%d:
non-vacuous mls at L3%21%bbentry:
non-vacuous mls at L3%23%bbentry:
non-vacuous mls at L3%27%d:
non-vacuous mls at L3%28%bbentry:
non-vacuous mls at L3%29%bbentry:
non-vacuous mls at L3%32%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 41
=loc_expr
140584 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=avail_exprs_val.end
=loc 50
=loc_expr
140617 : input.spec-%tmpvar-1.L3%27%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 54
=loc_expr
140618 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 55
=loc_expr
140619 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 65
=loc_expr
140624 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 66
=loc_expr
140627 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 50 expr
1 : input.spec-%tmpvar-1.L3%27%d : BV:32
=loc 50 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 54 expr
1 : input.spec-%tmpvar-18.L3%7%bbentry : BV:32
=loc 54 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 55 expr
1 : input.spec-%tmpvar-19.L3%7%bbentry : BV:32
=loc 55 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 65 expr
1 : input.spec-%tmpvar-11.L3%19%bbentry : BV:32
=loc 65 spreled-expr
140288 : 1 { 0x1 +1.11e129 } : BV:32
=loc 66 expr
1 : input.spec-%tmpvar-13.L3%19%bbentry : BV:32
=loc 66 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 35 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 36 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 37 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 50 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 54 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 55 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 66 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%bbentry=>L3%8%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%9%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%d=>L3%11%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%9%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%11%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%19%bbentry=>L3%20%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%21%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%20%d=>L3%23%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%21%bbentry=>L3%7%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%23%bbentry=>L3%27%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%27%d=>L3%28%bbentry
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%27%d=>L3%29%bbentry
1 : input.spec-%tmpvar-3.L3%27%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%28%bbentry=>L3%32%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%29%bbentry=>L3%32%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%32%bbentry=>L3%19%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%7%bbentry
=spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x-0.L3%7%bbentry
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%bbentry=>L3%8%d
=spec-%tmpvar-10.L3%8%d
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%9%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%d=>L3%11%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%9%bbentry=>E0%0%d
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-u-1.E0%0%d
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%11%bbentry=>L3%19%bbentry
=spec-%var-i-0.L3%19%bbentry
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=spec-%var-x_i-0.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-x_i-1.L3%19%bbentry
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%19%bbentry=>L3%20%d
=spec-%tmpvar-0.L3%20%d
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%21%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%20%d=>L3%23%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%21%bbentry=>L3%7%bbentry
=spec-%var-i-1.L3%7%bbentry
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=spec-%var-ret-1.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%7%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-14.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-8.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%tmpvar-9.L3%7%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=spec-%var-u-0.L3%7%bbentry
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%23%bbentry=>L3%27%d
=spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-2.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-3.L3%27%d
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=spec-%var-x_ij-0.L3%27%d
1 : input.spec-%tmpvar-0.L3%20%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%27%d=>L3%28%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%27%d=>L3%29%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%28%bbentry=>L3%32%bbentry
=spec-%tmpvar-4.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : input.spec-%var-x_ij-0.L3%27%d : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%29%bbentry=>L3%32%bbentry
=spec-%tmpvar-6.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-5.L3%32%bbentry
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-x_ij-0.L3%27%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%32%bbentry=>L3%19%bbentry
=spec-%var-j-0.L3%19%bbentry
1 : input.spec-%tmpvar-2.L3%27%d : BV:32
=spec-%var-ret-0.L3%19%bbentry
1 : input.spec-%tmpvar-6.L3%32%bbentry : BV:32
=src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.2.L3%19%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d
=graph_with_simplified_assets.simplified_assumes at L3%7%bbentry=>L3%8%d done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%8%d=>L3%11%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%9%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%11%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d
=graph_with_simplified_assets.simplified_assumes at L3%19%bbentry=>L3%20%d done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%21%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%20%d=>L3%23%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%21%bbentry=>L3%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%27%d
=graph_with_simplified_assets.simplified_assumes at L3%23%bbentry=>L3%27%d done
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%28%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%28%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%29%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%27%d=>L3%29%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%28%bbentry=>L3%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%28%bbentry=>L3%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%29%bbentry=>L3%32%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%29%bbentry=>L3%32%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%32%bbentry=>L3%19%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%32%bbentry=>L3%19%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%7%bbentry for src.spec.foo
=suffixpath_at_L3%7%bbentry.graph_edge_composition
(L0%0%d=>L3%7%bbentry)
=suffixpath_at_L3%8%d for src.spec.foo
=suffixpath_at_L3%8%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*(L3%7%bbentry=>L3%8%d))
=suffixpath_at_L3%9%bbentry for src.spec.foo
=suffixpath_at_L3%9%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%9%bbentry)))
=suffixpath_at_L3%11%bbentry for src.spec.foo
=suffixpath_at_L3%11%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*(L3%8%d=>L3%11%bbentry)))
=suffixpath_at_L3%19%bbentry for src.spec.foo
=suffixpath_at_L3%19%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*(L3%11%bbentry=>L3%19%bbentry))))
=suffixpath_at_L3%20%d for src.spec.foo
=suffixpath_at_L3%20%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*(L3%19%bbentry=>L3%20%d)))))
=suffixpath_at_L3%21%bbentry for src.spec.foo
=suffixpath_at_L3%21%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%21%bbentry))))))
=suffixpath_at_L3%23%bbentry for src.spec.foo
=suffixpath_at_L3%23%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*(L3%20%d=>L3%23%bbentry))))))
=suffixpath_at_L3%27%d for src.spec.foo
=suffixpath_at_L3%27%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*(L3%23%bbentry=>L3%27%d)))))))
=suffixpath_at_L3%28%bbentry for src.spec.foo
=suffixpath_at_L3%28%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*(L3%27%d=>L3%28%bbentry))))))))
=suffixpath_at_L3%29%bbentry for src.spec.foo
=suffixpath_at_L3%29%bbentry.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*(L3%27%d=>L3%29%bbentry))))))))
=suffixpath_at_L3%32%bbentry for src.spec.foo
=suffixpath_at_L3%32%bbentry.graph_edge_composition
(((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*((L3%27%d=>L3%28%bbentry)*(L3%28%bbentry=>L3%32%bbentry)))))))))+((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%11%bbentry)*((L3%11%bbentry=>L3%19%bbentry)*((L3%19%bbentry=>L3%20%d)*((L3%20%d=>L3%23%bbentry)*((L3%23%bbentry=>L3%27%d)*((L3%27%d=>L3%29%bbentry)*(L3%29%bbentry=>L3%32%bbentry))))))))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%7%bbentry)*((L3%7%bbentry=>L3%8%d)*((L3%8%d=>L3%9%bbentry)*(L3%9%bbentry=>E0%0%d))))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%7%bbentry done
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d
tfg.assumes_around_edge at L3%7%bbentry=>L3%8%d done
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%9%bbentry done
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry
tfg.assumes_around_edge at L3%8%d=>L3%11%bbentry done
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%9%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%11%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d
tfg.assumes_around_edge at L3%19%bbentry=>L3%20%d done
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%21%bbentry done
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry
tfg.assumes_around_edge at L3%20%d=>L3%23%bbentry done
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry
tfg.assumes_around_edge at L3%21%bbentry=>L3%7%bbentry done
tfg.assumes_around_edge at L3%23%bbentry=>L3%27%d
tfg.assumes_around_edge at L3%23%bbentry=>L3%27%d done
tfg.assumes_around_edge at L3%27%d=>L3%28%bbentry
tfg.assumes_around_edge at L3%27%d=>L3%28%bbentry done
tfg.assumes_around_edge at L3%27%d=>L3%29%bbentry
tfg.assumes_around_edge at L3%27%d=>L3%29%bbentry done
tfg.assumes_around_edge at L3%28%bbentry=>L3%32%bbentry
tfg.assumes_around_edge at L3%28%bbentry=>L3%32%bbentry done
tfg.assumes_around_edge at L3%29%bbentry=>L3%32%bbentry
tfg.assumes_around_edge at L3%29%bbentry=>L3%32%bbentry done
tfg.assumes_around_edge at L3%32%bbentry=>L3%19%bbentry
tfg.assumes_around_edge at L3%32%bbentry=>L3%19%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal0 Lfor.body3%1%d Lfor.body3%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.cond1%1%bbentry Lfor.cond1%2%d Lfor.end10%1%d Lfor.inc8%1%d Lif.else%1%d Lif.end%1%bbentry Lif.then%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%intermediateVal0
Lfor.cond%2%d => Lfor.end10%1%d
Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
Lfor.cond1%1%bbentry => Lfor.cond1%2%d
Lfor.cond1%2%d => Lfor.body3%1%d
Lfor.cond1%2%d => Lfor.inc8%1%d
Lfor.body3%1%d => Lfor.body3%2%d
Lfor.body3%2%d => Lif.then%1%d
Lfor.body3%2%d => Lif.else%1%d
Lif.then%1%d => Lif.end%1%bbentry
Lif.else%1%d => Lif.end%1%bbentry
Lif.end%1%bbentry => Lfor.cond1%1%bbentry (backedge) 
Lfor.inc8%1%d => Lfor.cond%1%bbentry (backedge) 
Lfor.end10%1%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal0
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body3%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond1%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end10%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.inc8%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.else%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.end%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lif.then%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-heap
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.2 : memlabel-mem-no-straddle-symbol.1-heap-arg.0
=memlabel_map.3 for call-context {*;foo}
mlvar.dst.llvm.foo.3 : memlabel-mem-no-straddle-symbol.1-heap
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !23)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !23))*  br label %for.cond, !dbg !23)*(  br label %for.cond, !dbg !23*  br label %for.cond, !dbg !23))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !25)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%intermediateVal0
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*(  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br label %for.cond1, !dbg !32))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end10%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end10, !dbg !27*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)*  br i1 %cmp, label %for.body, label %for.end10, !dbg !27)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal0 => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
1:1:((((  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !32))*  br label %for.cond1, !dbg !32)*(  br label %for.cond1, !dbg !32*  br label %for.cond1, !dbg !32))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond1%1%bbentry => Lfor.cond1%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp2 = icmp ult i32 %j.0, %m, !dbg !33)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.body3%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)
tfg_edge_comment end

=Edge: Lfor.cond1%2%d => Lfor.inc8%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br i1 %cmp2, label %for.body3, label %for.end, !dbg !35)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)*  br label %for.inc8, !dbg !51)
tfg_edge_comment end

=Edge: Lfor.body3%1%d => Lfor.body3%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  %cmp4 = icmp ugt i32 %i.0, %j.0, !dbg !36
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.then%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lfor.body3%2%d => Lif.else%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp4, label %if.then, label %if.else, !dbg !39*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)*  br i1 %cmp4, label %if.then, label %if.else, !dbg !39)
tfg_edge_comment end

=Edge: Lif.then%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : mlvar.dst.llvm.foo.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.1 : MEMLABEL
5 : mlvar.dst.llvm.foo.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvadd(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.0 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*(  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40*  %arrayidx = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !40))*(  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40*  %0 = load i32*, i32** %arrayidx, align 4, !dbg !40))*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*(  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40*  %arrayidx5 = getelementptr inbounds i32, i32* %0, i32 %j.0, !dbg !40)))*((  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40*  %1 = load i32, i32* %arrayidx5, align 4, !dbg !40)*(((  %add = add i32 %ret.1, %1, !dbg !41*  br label %if.end, !dbg !42)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end, !dbg !42))*(  br label %if.end, !dbg !42*  br label %if.end, !dbg !42))))
tfg_edge_comment end

=Edge: Lif.else%1%d => Lif.end%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.3 : MEMLABEL
4 : mlvar.dst.llvm.foo.2 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 0 { 0x0 +1.0e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : bvadd(5, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(1, 2, 4, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(15, 8) : BV:32
17 : bvadd(6, 16) : BV:32
18 : bvadd(14, 17) : BV:32
19 : select(1, 2, 3, 18, 12, 13) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : mlvar.dst.llvm.foo.3 : MEMLABEL
5 : mlvar.dst.llvm.foo.2 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : bvadd(6, 11) : BV:32
13 : 4 { 0x4 +1.0e1025 } : INT
14 : 0 { 0x0 } : BOOL
15 : select(2, 3, 5, 12, 13, 14) : BV:32
16 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
17 : bvmul(16, 9) : BV:32
18 : bvadd(7, 17) : BV:32
19 : bvadd(15, 18) : BV:32
20 : select(2, 3, 4, 19, 13, 14) : BV:32
21 : bvsub(1, 20) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(14, 7) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(13, 16) : BV:32
18 : islangaligned(17, 11) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%x : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
25 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
26 : mlvar.dst.llvm.foo.2 : MEMLABEL
27 : 0 { 0x0 } : BOOL
28 : select(24, 25, 26, 20, 15, 27) : BV:32
29 : islangaligned(28, 15) : BOOL
30 : and(29, 23) : BOOL
31 : and(23, 30) : BOOL
32 : and(22, 31) : BOOL
33 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
34 : bvslt(33, 2) : BOOL
35 : bvsign_ext(33, 4) : BV:64
36 : bvmul(35, 7) : BV:64
37 : bvextract(36, 9, 4) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 2) : BOOL
40 : ite(34, 38, 39) : BOOL
41 : isindexforsize(40, 15) : BOOL
42 : bvmul(33, 6) : BV:32
43 : bvadd(2, 42) : BV:32
44 : bvadd(28, 43) : BV:32
45 : isgepoffset(44, 42) : BOOL
46 : and(41, 45) : BOOL
47 : and(32, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:((((  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*(  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43*  %arrayidx6 = getelementptr inbounds i32*, i32** %x, i32 %i.0, !dbg !43))*(  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43*  %2 = load i32*, i32** %arrayidx6, align 4, !dbg !43))*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*(  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43*  %arrayidx7 = getelementptr inbounds i32, i32* %2, i32 %j.0, !dbg !43)))*((  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43*  %3 = load i32, i32* %arrayidx7, align 4, !dbg !43)*(((  %sub = sub i32 %ret.1, %3, !dbg !44*  br label %if.end)*(  %ret.2 = phi i32 [ %add, %if.then ], [ %sub, %if.else ], !dbg !45*  br label %if.end))*(  br label %if.end*  br label %if.end))))
tfg_edge_comment end

=Edge: Lif.end%1%bbentry => Lfor.cond1%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((((((bb_entry*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*  br label %for.inc, !dbg !46)*(  %inc = add i32 %j.0, 1, !dbg !47*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  %ret.1 = phi i32 [ %ret.0, %for.body ], [ %ret.2, %for.inc ], !dbg !16)*(  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !31*  br label %for.cond1, !dbg !48, !llvm.loop !49))*  br label %for.cond1, !dbg !48, !llvm.loop !49)*(  br label %for.cond1, !dbg !48, !llvm.loop !49*  br label %for.cond1, !dbg !48, !llvm.loop !49))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.inc8%1%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:((((((  %inc9 = add i32 %i.0, 1, !dbg !52*  br label %for.cond, !dbg !53, !llvm.loop !54)*  %ret.0 = phi i32 [ 0, %entry ], [ %ret.1, %for.inc8 ], !dbg !24)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc9, %for.inc8 ], !dbg !22*  br label %for.cond, !dbg !53, !llvm.loop !54))*  br label %for.cond, !dbg !53, !llvm.loop !54)*(  br label %for.cond, !dbg !53, !llvm.loop !54*  br label %for.cond, !dbg !53, !llvm.loop !54))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.end10%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret i32 %ret.0, !dbg !56
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100006 in dst.llvm.foo.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100012 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100016 in dst.llvm.foo.
REGMEM
dst.llvm-%x
1 : input.dst.llvm-%x : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100061 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100062 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
=Loc 100063 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100064 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
=Loc 100065 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100066 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100067 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.2
=Loc 100068 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=Loc 100069 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100070 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=Loc 100071 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100072 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100073 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100075 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100076 in dst.llvm.foo.
REGMEM
dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=Loc 100077 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100078 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100079 in dst.llvm.foo.
REGMEM
src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100080 in dst.llvm.foo.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100081 in dst.llvm.foo.
REGMEM
dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=Loc 100082 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=Loc 100083 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=Loc 100084 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100085 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=Loc 100086 in dst.llvm.foo.
REGMEM
src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=Loc 100087 in dst.llvm.foo.
REGMEM
dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100088 in dst.llvm.foo.
REGMEM
dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100089 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=Loc 100090 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=Loc 100091 in dst.llvm.foo.
REGMEM
dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=Loc 100092 in dst.llvm.foo.
REGMEM
dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=Loc 100093 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=Loc 100094 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=Loc 100095 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100096 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100097 in dst.llvm.foo.
REGMEM
dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100098 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100099 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100100 in dst.llvm.foo.
REGMEM
dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100101 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=Loc 100102 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=Loc 100103 in dst.llvm.foo.
REGMEM
dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=Loc 100104 in dst.llvm.foo.
REGMEM
dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=Loc 100105 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100106 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100107 in dst.llvm.foo.
REGMEM
dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100108 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100109 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=Loc 100110 in dst.llvm.foo.
REGMEM
dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=Loc 100111 in dst.llvm.foo.
REGMEM
dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=Loc 100112 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=Loc 100113 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=Loc 100114 in dst.llvm.foo.
REGMEM
dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=Loc 100115 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100116 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 
=live locs at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073, 
=live locs at Lfor.body3%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.body3%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100068, 100069, 100070, 100083, 
=live locs at Lfor.cond%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 
=live locs at Lfor.cond%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100073[f], 100075, 
=live locs at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lfor.cond1%2%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100076, 100083, 
=live locs at Lfor.end10%1%d
100065, 100073[f], 
=live locs at Lfor.inc8%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100083, 
=live locs at Lif.else%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at Lif.end%1%bbentry
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100090, 
=live locs at Lif.then%1%d
100006, 100012, 100016, 100062, 100063, 100064, 100065, 100069, 100070, 100083, 
=live locs at E0%0%d
100065, 100073[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067
=loc definedness at Lfor.body%1%intermediateVal0
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.body3%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.body3%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.cond1%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.cond1%2%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lfor.end10%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100073, 100075, 100077, 100078, 100079, 100115, 100116
=loc definedness at Lfor.inc8%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.else%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at Lif.end%1%bbentry
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100090, 100115, 100116
=loc definedness at Lif.then%1%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100068, 100069, 100070, 100073, 100075, 100076, 100077, 100078, 100079, 100083, 100084, 100085, 100086, 100115, 100116
=loc definedness at E0%0%d
100006, 100012, 100016, 100057, 100058, 100059, 100061, 100062, 100063, 100064, 100065, 100066, 100067, 100069, 100071, 100072, 100073, 100074, 100075, 100077, 100078, 100079, 100115, 100116

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d
100006, 100012
=branch affecting variable locs at Lfor.body%1%intermediateVal0
100006, 100012, 100069
=branch affecting variable locs at Lfor.body3%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.body3%2%d
100006, 100012, 100068, 100069, 100070
=branch affecting variable locs at Lfor.cond%1%bbentry
100006, 100012, 100069
=branch affecting variable locs at Lfor.cond%2%d
100006, 100012, 100069, 100075
=branch affecting variable locs at Lfor.cond1%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lfor.cond1%2%d
100006, 100012, 100069, 100070, 100076
=branch affecting variable locs at Lfor.end10%1%d

=branch affecting variable locs at Lfor.inc8%1%d
100006, 100012, 100069
=branch affecting variable locs at Lif.else%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.end%1%bbentry
100006, 100012, 100069, 100070
=branch affecting variable locs at Lif.then%1%d
100006, 100012, 100069, 100070
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100077 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100115 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100116 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100084 {input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100085 {input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry for loc_id 100086 {input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d for loc_id 100068 {input.dst.llvm-%cmp4.Lfor.body3%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100075 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d for loc_id 100076 {input.dst.llvm-%cmp2.Lfor.cond1%2%d }
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100071 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100072 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d for loc_id 100074 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end10%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100069 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%ret.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100080 {input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100081 {input.dst.llvm-%inc9.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry for loc_id 100082 {input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100091 {input.dst.llvm-%2.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100092 {input.dst.llvm-%3.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100093 {input.dst.llvm-%arrayidx6.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100094 {input.dst.llvm-%arrayidx7.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100095 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100096 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100097 {input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100098 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100099 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100100 {input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100101 {input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry for loc_id 100102 {input.dst.llvm-%sub.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100070 {input.dst.llvm-%j.0.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100083 {input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100086 {input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100087 {input.dst.llvm-%inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100088 {input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry for loc_id 100089 {input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry }
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100090 {input.dst.llvm-%ret.2.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100103 {input.dst.llvm-%0.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100104 {input.dst.llvm-%1.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100105 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100106 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100107 {input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100108 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100109 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100110 {input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100111 {input.dst.llvm-%add.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100112 {input.dst.llvm-%arrayidx.Lif.end%1%bbentry }
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100113 {input.dst.llvm-%arrayidx5.Lif.end%1%bbentry }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry for loc_id 100114 {input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry }
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal0:
vacuous mls at Lfor.body3%1%d:
vacuous mls at Lfor.body3%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.cond1%1%bbentry:
vacuous mls at Lfor.cond1%2%d:
vacuous mls at Lfor.end10%1%d:
vacuous mls at Lfor.inc8%1%d:
vacuous mls at Lif.else%1%d:
vacuous mls at Lif.end%1%bbentry:
vacuous mls at Lif.then%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal0:
non-vacuous mls at Lfor.body3%1%d:
non-vacuous mls at Lfor.body3%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.cond1%1%bbentry:
non-vacuous mls at Lfor.cond1%2%d:
non-vacuous mls at Lfor.end10%1%d:
non-vacuous mls at Lfor.inc8%1%d:
non-vacuous mls at Lif.else%1%d:
non-vacuous mls at Lif.end%1%bbentry:
non-vacuous mls at Lif.then%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100006
=loc_expr
140397 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140395 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140399 : input.dst.llvm-%x : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100046
=loc_expr
140496 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100048
=loc_expr
140497 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100049
=loc_expr
140499 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100050
=loc_expr
140501 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100051
=loc_expr
140503 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100056
=loc_expr
140404 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100057
=loc_expr
140394 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100058
=loc_expr
140396 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100059
=loc_expr
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100071
=loc_expr
140767 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140768 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140769 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140770 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100078
=loc_expr
140771 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100082
=loc_expr
140774 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100084
=loc_expr
140775 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100089
=loc_expr
140779 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100115
=loc_expr
140804 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100116
=loc_expr
140805 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100074 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100074 spreled-expr
140267 : retaddr_const : BV:32
=loc 100077 expr
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100077 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100078 expr
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=loc 100078 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100084 expr
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=loc 100084 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100115 expr
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=loc 100115 spreled-expr
140404 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100116 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100116 spreled-expr
140403 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100006 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100016 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100067 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100068 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100073 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100076 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=loc_id 100077 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100084 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100086 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100088 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100089 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100090 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100091 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100092 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100093 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100094 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100095 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100096 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100097 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100098 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100099 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100100 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100101 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100102 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100103 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100104 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100105 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100106 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100107 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100108 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100109 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100110 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100111 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100112 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100113 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100114 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100115 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100074 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100115 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100116 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%1%d=>Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.else%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body3%2%d=>Lif.then%1%d
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end10%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.body3%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond1%2%d=>Lfor.inc8%1%d
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end10%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.else%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lif.then%1%d=>Lif.end%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%1%d=>Lfor.body3%2%d
=dst.llvm-%cmp4.Lfor.body3%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvugt(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.else%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body3%2%d=>Lif.then%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end10%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=dst.llvm-%cmp2.Lfor.cond1%2%d
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.body3%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond1%2%d=>Lfor.inc8%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end10%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.else%1%d=>Lif.end%1%bbentry
=dst.llvm-%2.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%3.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=dst.llvm-%sub.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
6 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
7 : input.dst.llvm-%x : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
10 : bvmul(8, 9) : BV:32
11 : bvadd(7, 10) : BV:32
12 : 4 { 0x4 +1.0e1025 } : INT
13 : 0 { 0x0 } : BOOL
14 : select(3, 4, 6, 11, 12, 13) : BV:32
15 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
16 : bvmul(8, 15) : BV:32
17 : bvadd(14, 16) : BV:32
18 : select(3, 4, 5, 17, 12, 13) : BV:32
19 : bvmul(2, 18) : BV:32
20 : bvadd(1, 19) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lif.then%1%d=>Lif.end%1%bbentry
=dst.llvm-%ret.2.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%0.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%1.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
4 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
5 : input.dst.llvm-%x : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 4, 9, 10, 11) : BV:32
13 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
14 : bvmul(6, 13) : BV:32
15 : bvadd(12, 14) : BV:32
16 : select(1, 2, 3, 15, 10, 11) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
=dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
3 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
4 : memlabel-mem-no-straddle-symbol.1-heap : MEMLABEL
5 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%x : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(2, 3, 5, 10, 11, 12) : BV:32
14 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
15 : bvmul(7, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : select(2, 3, 4, 16, 11, 12) : BV:32
18 : bvadd(1, 17) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%x : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%1%d=>Lfor.body3%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.else%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body3%2%d=>Lif.then%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end10%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.body3%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond1%2%d=>Lfor.inc8%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end10%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.else%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 0
1 : 4 { 0x4 +1.0e1025 } : BV:64
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : 32 { 0x20 +1.0e1025 } : INT
4 : bvsign_ext(2, 3) : BV:64
5 : bvmul(1, 4) : BV:64
6 : 63 { 0x3f +1.0e1025 } : INT
7 : bvextract(5, 6, 3) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvslt(2, 8) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : ite(9, 10, 8) : BV:32
12 : eq(7, 11) : BOOL
13 : 4 { 0x4 +1.0e1025 } : INT
14 : isindexforsize(12, 13) : BOOL
15 : input.dst.llvm-%x : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 2) : BV:32
18 : bvadd(15, 17) : BV:32
19 : isgepoffset(18, 17) : BOOL
20 : islangaligned(18, 13) : BOOL
21 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
22 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
23 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
24 : 0 { 0x0 } : BOOL
25 : select(21, 22, 23, 18, 13, 24) : BV:32
26 : islangaligned(25, 13) : BOOL
27 : and(20, 26) : BOOL
28 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
29 : bvsign_ext(28, 3) : BV:64
30 : bvmul(1, 29) : BV:64
31 : bvextract(30, 6, 3) : BV:32
32 : bvslt(28, 8) : BOOL
33 : ite(32, 10, 8) : BV:32
34 : eq(31, 33) : BOOL
35 : isindexforsize(34, 13) : BOOL
36 : bvmul(16, 28) : BV:32
37 : bvadd(25, 36) : BV:32
38 : isgepoffset(37, 36) : BOOL
39 : and(14, 19, 20, 27, 35, 38) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry assume# 1
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%x : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
12 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
13 : bvmul(5, 12) : BV:32
14 : bvadd(11, 13) : BV:32
15 : islangaligned(14, 9) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lif.then%1%d=>Lif.end%1%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal0 for dst.llvm.foo
=suffixpath_at_Lfor.body%1%intermediateVal0.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)))
=suffixpath_at_Lfor.body3%1%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.body3%1%d))))))
=suffixpath_at_Lfor.body3%2%d for dst.llvm.foo
=suffixpath_at_Lfor.body3%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*(Lfor.body3%1%d=>Lfor.body3%2%d)))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.cond1%1%bbentry for dst.llvm.foo
=suffixpath_at_Lfor.cond1%1%bbentry.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*(Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry))))
=suffixpath_at_Lfor.cond1%2%d for dst.llvm.foo
=suffixpath_at_Lfor.cond1%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*(Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)))))
=suffixpath_at_Lfor.end10%1%d for dst.llvm.foo
=suffixpath_at_Lfor.end10%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end10%1%d)))
=suffixpath_at_Lfor.inc8%1%d for dst.llvm.foo
=suffixpath_at_Lfor.inc8%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*(Lfor.cond1%2%d=>Lfor.inc8%1%d))))))
=suffixpath_at_Lif.else%1%d for dst.llvm.foo
=suffixpath_at_Lif.else%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.else%1%d))))))))
=suffixpath_at_Lif.end%1%bbentry for dst.llvm.foo
=suffixpath_at_Lif.end%1%bbentry.graph_edge_composition
(((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.then%1%d)*(Lif.then%1%d=>Lif.end%1%bbentry)))))))))+((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*((Lfor.body3%2%d=>Lif.else%1%d)*(Lif.else%1%d=>Lif.end%1%bbentry))))))))))
=suffixpath_at_Lif.then%1%d for dst.llvm.foo
=suffixpath_at_Lif.then%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%intermediateVal0)*((Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry)*((Lfor.cond1%1%bbentry=>Lfor.cond1%2%d)*((Lfor.cond1%2%d=>Lfor.body3%1%d)*((Lfor.body3%1%d=>Lfor.body3%2%d)*(Lfor.body3%2%d=>Lif.then%1%d))))))))
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end10%1%d)*(Lfor.end10%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140399 : input.dst.llvm-%x : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140405 : islangaligned(140399, 140378) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d
tfg.assumes_around_edge at Lfor.body3%1%d=>Lfor.body3%2%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.else%1%d done
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d
tfg.assumes_around_edge at Lfor.body3%2%d=>Lif.then%1%d done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%intermediateVal0 done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end10%1%d done
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
tfg.assumes_around_edge at Lfor.cond1%1%bbentry=>Lfor.cond1%2%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.body3%1%d done
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d
tfg.assumes_around_edge at Lfor.cond1%2%d=>Lfor.inc8%1%d done
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end10%1%d=>E0%0%d done
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.inc8%1%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140555 : 4 { 0x4 +1.0e1025 } : BV:64
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140426 : 32 { 0x20 +1.0e1025 } : INT
140729 : bvsign_ext(140699, 140426) : BV:64
140880 : bvmul(140555, 140729) : BV:64
140430 : 63 { 0x3f +1.0e1025 } : INT
140881 : bvextract(140880, 140430, 140426) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140728 : bvslt(140699, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140894 : ite(140728, 140337, 140276) : BV:32
140896 : eq(140881, 140894) : BOOL
140378 : 4 { 0x4 +1.0e1025 } : INT
140898 : isindexforsize(140896, 140378) : BOOL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140900 : isgepoffset(140824, 140821) : BOOL
140904 : islangaligned(140824, 140378) : BOOL
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140906 : islangaligned(140830, 140378) : BOOL
140909 : and(140904, 140906) : BOOL
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140744 : bvsign_ext(140700, 140426) : BV:64
140922 : bvmul(140555, 140744) : BV:64
140923 : bvextract(140922, 140430, 140426) : BV:32
140743 : bvslt(140700, 140276) : BOOL
140936 : ite(140743, 140337, 140276) : BV:32
140938 : eq(140923, 140936) : BOOL
140940 : isindexforsize(140938, 140378) : BOOL
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140942 : isgepoffset(140835, 140833) : BOOL
140947 : and(140898, 140900, 140904, 140909, 140940, 140942) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.else%1%d=>Lif.end%1%bbentry
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140862 : islangaligned(140835, 140378) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.else%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
tfg.assumes_around_edge at Lif.end%1%bbentry=>Lfor.cond1%1%bbentry done
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140555 : 4 { 0x4 +1.0e1025 } : BV:64
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140426 : 32 { 0x20 +1.0e1025 } : INT
140729 : bvsign_ext(140699, 140426) : BV:64
140880 : bvmul(140555, 140729) : BV:64
140430 : 63 { 0x3f +1.0e1025 } : INT
140881 : bvextract(140880, 140430, 140426) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140728 : bvslt(140699, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140894 : ite(140728, 140337, 140276) : BV:32
140896 : eq(140881, 140894) : BOOL
140378 : 4 { 0x4 +1.0e1025 } : INT
140898 : isindexforsize(140896, 140378) : BOOL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140900 : isgepoffset(140824, 140821) : BOOL
140904 : islangaligned(140824, 140378) : BOOL
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140906 : islangaligned(140830, 140378) : BOOL
140909 : and(140904, 140906) : BOOL
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140744 : bvsign_ext(140700, 140426) : BV:64
140922 : bvmul(140555, 140744) : BV:64
140923 : bvextract(140922, 140430, 140426) : BV:32
140743 : bvslt(140700, 140276) : BOOL
140936 : ite(140743, 140337, 140276) : BV:32
140938 : eq(140923, 140936) : BOOL
140940 : isindexforsize(140938, 140378) : BOOL
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140942 : isgepoffset(140835, 140833) : BOOL
140947 : and(140898, 140900, 140904, 140909, 140940, 140942) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lif.then%1%d=>Lif.end%1%bbentry
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140862 : islangaligned(140835, 140378) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lif.then%1%d=>Lif.end%1%bbentry done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 3
=pc
Lfor.body%1%d
=linename
line 4
=pc
Lfor.body3%1%d
=linename
line 5
=pc
Lfor.body3%2%d
=linename
line 5
=pc
Lfor.cond%1%d
=linename
line 3
=pc
Lfor.cond%2%d
=linename
line 3
=pc
Lfor.cond1%1%d
=linename
line 4
=pc
Lfor.cond1%2%d
=linename
line 4
=pc
Lfor.end%1%d
=linename
line 10
=pc
Lfor.end10%1%d
=linename
line 11
=pc
Lfor.inc%1%d
=linename
line 4
=pc
Lfor.inc%2%d
=linename
line 4
=pc
Lfor.inc8%1%d
=linename
line 3
=pc
Lfor.inc8%2%d
=linename
line 3
=pc
Lif.else%1%d
=linename
line 8
=pc
Lif.else%2%d
=linename
line 8
=pc
Lif.else%3%d
=linename
line 8
=pc
Lif.else%4%d
=linename
line 8
=pc
Lif.else%5%d
=linename
line 8
=pc
Lif.end%1%d
=linename
line 9
=pc
Lif.then%1%d
=linename
line 6
=pc
Lif.then%2%d
=linename
line 6
=pc
Lif.then%3%d
=linename
line 6
=pc
Lif.then%4%d
=linename
line 6
=pc
Lif.then%5%d
=linename
line 6
=pc
Lif.then%6%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 10
=pc
Lfor.body3%1%d
=column_name
 at column 13
=pc
Lfor.body3%2%d
=column_name
 at column 11
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.cond1%1%d
=column_name
 at column 28
=pc
Lfor.cond1%2%d
=column_name
 at column 5
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.end10%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 33
=pc
Lfor.inc%2%d
=column_name
 at column 5
=pc
Lfor.inc8%1%d
=column_name
 at column 31
=pc
Lfor.inc8%2%d
=column_name
 at column 3
=pc
Lif.else%1%d
=column_name
 at column 16
=pc
Lif.else%2%d
=column_name
 at column 16
=pc
Lif.else%3%d
=column_name
 at column 16
=pc
Lif.else%4%d
=column_name
 at column 16
=pc
Lif.else%5%d
=column_name
 at column 13
=pc
Lif.end%1%d
=column_name
 at column 5
=pc
Lif.then%1%d
=column_name
 at column 16
=pc
Lif.then%2%d
=column_name
 at column 16
=pc
Lif.then%3%d
=column_name
 at column 16
=pc
Lif.then%4%d
=column_name
 at column 16
=pc
Lif.then%5%d
=column_name
 at column 13
=pc
Lif.then%6%d
=column_name
 at column 9
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 3 at column 8)
=pc
Lfor.body%1%d
=line_and_column
(line 4 at column 10)
=pc
Lfor.body3%1%d
=line_and_column
(line 5 at column 13)
=pc
Lfor.body3%2%d
=line_and_column
(line 5 at column 11)
=pc
Lfor.cond%1%d
=line_and_column
(line 3 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 3 at column 3)
=pc
Lfor.cond1%1%d
=line_and_column
(line 4 at column 28)
=pc
Lfor.cond1%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.end%1%d
=line_and_column
line 10
=pc
Lfor.end10%1%d
=line_and_column
line 11
=pc
Lfor.inc%1%d
=line_and_column
(line 4 at column 33)
=pc
Lfor.inc%2%d
=line_and_column
(line 4 at column 5)
=pc
Lfor.inc8%1%d
=line_and_column
(line 3 at column 31)
=pc
Lfor.inc8%2%d
=line_and_column
(line 3 at column 3)
=pc
Lif.else%1%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%2%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%3%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%4%d
=line_and_column
(line 8 at column 16)
=pc
Lif.else%5%d
=line_and_column
(line 8 at column 13)
=pc
Lif.end%1%d
=line_and_column
line 9
=pc
Lif.then%1%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%2%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%3%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%4%d
=line_and_column
(line 6 at column 16)
=pc
Lif.then%5%d
=line_and_column
(line 6 at column 13)
=pc
Lif.then%6%d
=line_and_column
(line 6 at column 9)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum2=/
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum1=/
input.dst.llvm-%n : L0%0%d : n'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%x : L0%0%d : x'
input.dst.llvm-%ret.0 : Lfor.cond%1%bbentry : ret'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry : L0%0%d : 0
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%j.0.phi.tmpvar.for.body : L0%0%d : 0
input.dst.llvm-%j.0 : Lfor.cond1%1%bbentry : j'
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset : L0%0%d : (input.dst.llvm-%0 + input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset)
input.dst.llvm-%ret.1 : Lfor.cond1%1%bbentry : ret'
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx5]_4
input.dst.llvm-%add : Lif.then%6%bbentry : ret'
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset : L0%0%d : (x' + input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset)
input.dst.llvm-%2 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx6]_4
input.dst.llvm-%3 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx7]_4
input.dst.llvm-%sub : Lif.else%6%bbentry : ret'
input.dst.llvm-%ret.2 : Lif.end%1%bbentry : ret'
input.dst.llvm-%inc : Lfor.inc%2%bbentry : j'
input.dst.llvm-%ret.1.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%ret.2
input.dst.llvm-%inc9 : Lfor.inc8%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset
input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%j.0, 4)
input.dst.llvm-%arrayidx5 : L0%0%d : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.then : L0%0%d : input.dst.llvm-%add
input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx6 : L0%0%d : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset
input.dst.llvm-%arrayidx7 : L0%0%d : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset
input.dst.llvm-%ret.2.phi.tmpvar.if.else : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%ret.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : L0%0%d : input.dst.llvm-%ret.2.Lif.end%1%bbentry
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : L0%0%d : 0
input.dst.local_alloc_count.Lfor.cond%1%bbentry : L0%0%d : input.dst.local_alloc_count.=L0%0%d={L0%0%d}
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%ret.0
=dst.llvm-%ret.0 loop pc: Lfor.cond%1%d
=dst.llvm-%ret.0 val_scevb
=dst.llvm-%ret.0 val_scevb scev
=dst.llvm-%ret.0 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 val_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 val_scevb scev scev_expr done
=dst.llvm-%ret.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb
=dst.llvm-%ret.0 atuse_scevb scev
=dst.llvm-%ret.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atuse_scevb scev scev_expr done
=dst.llvm-%ret.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.0 atexit_scev
=dst.llvm-%ret.0 atexit_scev loop: L0%0%d
=dst.llvm-%ret.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.0 atexit_scev scev_expr
5 : input.dst.llvm-%ret.0 : BV32
=dst.llvm-%ret.0 atexit_scev scev_expr done
=dst.llvm-%j.0
=dst.llvm-%j.0 loop pc: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb
=dst.llvm-%j.0 val_scevb scev
=dst.llvm-%j.0 val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 val_scevb scev scev_expr done
=dst.llvm-%j.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb
=dst.llvm-%j.0 atuse_scevb scev
=dst.llvm-%j.0 atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%j.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%j.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
6 : scev_op_addrec(1, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%j.0 atuse_scevb scev scev_expr done
=dst.llvm-%j.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%j.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%j.0 atexit_scev
=dst.llvm-%j.0 atexit_scev loop: L0%0%d
=dst.llvm-%j.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%j.0 atexit_scev scev_expr
7 : input.dst.llvm-%m : BV32
=dst.llvm-%j.0 atexit_scev scev_expr done
=dst.llvm-%ret.1
=dst.llvm-%ret.1 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.1 val_scevb
=dst.llvm-%ret.1 val_scevb scev
=dst.llvm-%ret.1 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 val_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 val_scevb scev scev_expr done
=dst.llvm-%ret.1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb
=dst.llvm-%ret.1 atuse_scevb scev
=dst.llvm-%ret.1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.1 atuse_scevb scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atuse_scevb scev scev_expr done
=dst.llvm-%ret.1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.1 atexit_scev
=dst.llvm-%ret.1 atexit_scev loop: L0%0%d
=dst.llvm-%ret.1 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.1 atexit_scev scev_expr
8 : input.dst.llvm-%ret.1 : BV32
=dst.llvm-%ret.1 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond1%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
12 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx5
=dst.llvm-%arrayidx5 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx5 val_scevb
=dst.llvm-%arrayidx5 val_scevb scev
=dst.llvm-%arrayidx5 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 val_scevb scev scev_expr done
=dst.llvm-%arrayidx5 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb
=dst.llvm-%arrayidx5 atuse_scevb scev
=dst.llvm-%arrayidx5 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx5 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
12 : input.dst.llvm-%0 : BV32
14 : scev_op_add(13, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx5 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx5 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx5 atexit_scev
=dst.llvm-%arrayidx5 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx5 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
12 : input.dst.llvm-%0 : BV32
16 : scev_op_add(15, 12) : loop L0%0%d : nsw
=dst.llvm-%arrayidx5 atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond1%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%add
=dst.llvm-%add loop pc: Lfor.cond1%1%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev
=dst.llvm-%add atexit_scev loop: L0%0%d
=dst.llvm-%add atexit_scev scev_overflow_flag: 
=dst.llvm-%add atexit_scev scev_expr
17 : input.dst.llvm-%1 : BV32
8 : input.dst.llvm-%ret.1 : BV32
18 : scev_op_add(17, 8) : loop L0%0%d : 
=dst.llvm-%add atexit_scev scev_expr done
=dst.llvm-%ret.2
=dst.llvm-%ret.2 loop pc: Lfor.cond1%1%d
=dst.llvm-%ret.2 val_scevb
=dst.llvm-%ret.2 val_scevb scev
=dst.llvm-%ret.2 val_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 val_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 val_scevb scev scev_expr done
=dst.llvm-%ret.2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb
=dst.llvm-%ret.2 atuse_scevb scev
=dst.llvm-%ret.2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%ret.2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%ret.2 atuse_scevb scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atuse_scevb scev scev_expr done
=dst.llvm-%ret.2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%ret.2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%ret.2 atexit_scev
=dst.llvm-%ret.2 atexit_scev loop: L0%0%d
=dst.llvm-%ret.2 atexit_scev scev_overflow_flag: 
=dst.llvm-%ret.2 atexit_scev scev_expr
19 : input.dst.llvm-%ret.2 : BV32
=dst.llvm-%ret.2 atexit_scev scev_expr done
=dst.llvm-%arrayidx6
=dst.llvm-%arrayidx6 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx6 val_scevb
=dst.llvm-%arrayidx6 val_scevb scev
=dst.llvm-%arrayidx6 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 val_scevb scev scev_expr done
=dst.llvm-%arrayidx6 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb
=dst.llvm-%arrayidx6 atuse_scevb scev
=dst.llvm-%arrayidx6 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx6 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx6 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx6 atexit_scev
=dst.llvm-%arrayidx6 atexit_scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx6 atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx6 atexit_scev scev_expr
9 : input.dst.llvm-%x : BV32
10 : 00000000000000000000000000000100b
11 : scev_op_addrec(9, 10) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx6 atexit_scev scev_expr done
=dst.llvm-%2
=dst.llvm-%2 loop pc: Lfor.cond1%1%d
=dst.llvm-%2 val_scevb
=dst.llvm-%2 val_scevb scev
=dst.llvm-%2 val_scevb scev loop: L0%0%d
=dst.llvm-%2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%2 val_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 val_scevb scev scev_expr done
=dst.llvm-%2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb
=dst.llvm-%2 atuse_scevb scev
=dst.llvm-%2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%2 atuse_scevb scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atuse_scevb scev scev_expr done
=dst.llvm-%2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atexit_scev
=dst.llvm-%2 atexit_scev loop: L0%0%d
=dst.llvm-%2 atexit_scev scev_overflow_flag: 
=dst.llvm-%2 atexit_scev scev_expr
20 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atexit_scev scev_expr done
=dst.llvm-%arrayidx7
=dst.llvm-%arrayidx7 loop pc: Lfor.cond1%1%d
=dst.llvm-%arrayidx7 val_scevb
=dst.llvm-%arrayidx7 val_scevb scev
=dst.llvm-%arrayidx7 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 val_scevb scev scev_expr done
=dst.llvm-%arrayidx7 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb
=dst.llvm-%arrayidx7 atuse_scevb scev
=dst.llvm-%arrayidx7 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx7 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
10 : 00000000000000000000000000000100b
13 : scev_op_addrec(1, 10) : loop Lfor.cond1%1%d : 
20 : input.dst.llvm-%2 : BV32
21 : scev_op_add(13, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx7 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx7 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx7 atexit_scev
=dst.llvm-%arrayidx7 atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx7 atexit_scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr
10 : 00000000000000000000000000000100b
7 : input.dst.llvm-%m : BV32
15 : scev_op_mul(10, 7) : loop L0%0%d : 
20 : input.dst.llvm-%2 : BV32
22 : scev_op_add(15, 20) : loop L0%0%d : nsw
=dst.llvm-%arrayidx7 atexit_scev scev_expr done
=dst.llvm-%3
=dst.llvm-%3 loop pc: Lfor.cond1%1%d
=dst.llvm-%3 val_scevb
=dst.llvm-%3 val_scevb scev
=dst.llvm-%3 val_scevb scev loop: L0%0%d
=dst.llvm-%3 val_scevb scev scev_overflow_flag: 
=dst.llvm-%3 val_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 val_scevb scev scev_expr done
=dst.llvm-%3 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb
=dst.llvm-%3 atuse_scevb scev
=dst.llvm-%3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%3 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%3 atuse_scevb scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atuse_scevb scev scev_expr done
=dst.llvm-%3 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atexit_scev
=dst.llvm-%3 atexit_scev loop: L0%0%d
=dst.llvm-%3 atexit_scev scev_overflow_flag: 
=dst.llvm-%3 atexit_scev scev_expr
23 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atexit_scev scev_expr done
=dst.llvm-%sub
=dst.llvm-%sub loop pc: Lfor.cond1%1%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev
=dst.llvm-%sub atexit_scev loop: L0%0%d
=dst.llvm-%sub atexit_scev scev_overflow_flag: 
=dst.llvm-%sub atexit_scev scev_expr
24 : 11111111111111111111111111111111b
23 : input.dst.llvm-%3 : BV32
25 : scev_op_mul(24, 23) : loop L0%0%d : 
8 : input.dst.llvm-%ret.1 : BV32
26 : scev_op_add(25, 8) : loop L0%0%d : 
=dst.llvm-%sub atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond1%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
27 : scev_op_addrec(2, 2) : loop Lfor.cond1%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
7 : input.dst.llvm-%m : BV32
28 : scev_op_add(2, 7) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=dst.llvm-%inc9
=dst.llvm-%inc9 loop pc: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb
=dst.llvm-%inc9 val_scevb scev
=dst.llvm-%inc9 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 val_scevb scev scev_expr done
=dst.llvm-%inc9 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb
=dst.llvm-%inc9 atuse_scevb scev
=dst.llvm-%inc9 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc9 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc9 atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
29 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc9 atuse_scevb scev scev_expr done
=dst.llvm-%inc9 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc9 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc9 atexit_scev
=dst.llvm-%inc9 atexit_scev loop: L0%0%d
=dst.llvm-%inc9 atexit_scev scev_overflow_flag: 
=dst.llvm-%inc9 atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
30 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc9 atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal0
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.body3%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond1%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.end10%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lfor.inc8%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.else%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.end%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at Lif.then%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 22 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%x : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.2 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 11 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%cmp4.Lfor.body3%2%d : BOOL
=reaching defns for expr 13 edges
  Lfor.body3%1%d=>Lfor.body3%2%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 14 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%cmp2.Lfor.cond1%2%d : BOOL
=reaching defns for expr 15 edges
  Lfor.cond1%1%bbentry=>Lfor.cond1%2%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%ret.2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 18 edges
  Lif.else%1%d=>Lif.end%1%bbentry
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 20 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 21 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 22 edges
  Lfor.end10%1%d=>E0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 23 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 25 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%inc9.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 26 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.inc8%1%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%1%intermediateVal0=>Lfor.cond1%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lif.end%1%bbentry=>Lfor.cond1%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%2.Lif.end%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%3.Lif.end%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%arrayidx6.Lif.end%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%arrayidx7.Lif.end%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%sub.Lif.end%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lif.else%1%d=>Lif.end%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%0.Lif.end%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%1.Lif.end%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns for expr 51
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 51 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 51 edges done
=reaching defns for expr 52
1 : input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry : BV:32
=reaching defns for expr 52 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 52 edges done
=reaching defns for expr 53
1 : input.dst.llvm-%add.Lif.end%1%bbentry : BV:32
=reaching defns for expr 53 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 53 edges done
=reaching defns for expr 54
1 : input.dst.llvm-%arrayidx.Lif.end%1%bbentry : BV:32
=reaching defns for expr 54 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 54 edges done
=reaching defns for expr 55
1 : input.dst.llvm-%arrayidx5.Lif.end%1%bbentry : BV:32
=reaching defns for expr 55 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 55 edges done
=reaching defns for expr 56
1 : input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry : BV:32
=reaching defns for expr 56 edges
  Lif.then%1%d=>Lif.end%1%bbentry
=reaching defns for expr 56 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%add.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum2=/
lr_status_top
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.llvm-%n
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%x
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp2.Lfor.cond1%2%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.2, )
=LR status for var input.dst.llvm-%cmp4.Lfor.body3%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%2.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%3.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%inc9.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sub.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%arrayidx.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename couple6.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : $llvm-arg-2 : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : $llvm-md : ARRAY[BV:32 -> BV:8]
16 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-top : MEMLABEL
18 : $llvm-arg-0 : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(2, 19) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvmul(9, 19) : BV:32
26 : bvadd(24, 25) : BV:32
27 : select(15, 16, 17, 26, 22, 23) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-regs
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%7%bbentry_Lfor.cond%1%bbentry L3%19%bbentry_Lfor.cond1%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.2
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%x : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : foo : 47 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%x : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
C_LOCAL=L0%0%argnum2= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%7%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.body%1%intermediateVal0#{0,0})*(Lfor.body%1%intermediateVal0#{0,0}=>Lfor.cond1%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%7%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%7%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*(L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.inc8%1%d#{0,0})*(Lfor.inc8%1%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%19%bbentry_Lfor.cond1%1%bbentry => L3%19%bbentry_Lfor.cond1%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%19%bbentry to L3%19%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%19%bbentry#{0,0}=>L3%20%d#{0,0})*(((L3%20%d#{0,0}=>L3%21%bbentry#{0,0})*((L3%21%bbentry#{0,0}=>L3%7%bbentry#{0,0})*((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%11%bbentry#{0,0})*(L3%11%bbentry#{0,0}=>L3%19%bbentry#{1,0})))))+((L3%20%d#{0,0}=>L3%23%bbentry#{0,0})*((L3%23%bbentry#{0,0}=>L3%27%d#{0,0})*((((L3%27%d#{0,0}=>L3%28%bbentry#{0,0})*(L3%28%bbentry#{0,0}=>L3%32%bbentry#{0,0}))+((L3%27%d#{0,0}=>L3%29%bbentry#{0,0})*(L3%29%bbentry#{0,0}=>L3%32%bbentry#{0,0})))*(L3%32%bbentry#{0,0}=>L3%19%bbentry#{1,0}))))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond1%1%bbentry to Lfor.cond1%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond1%1%bbentry#{0,0}=>Lfor.cond1%2%d#{0,0})*((Lfor.cond1%2%d#{0,0}=>Lfor.body3%1%d#{0,0})*((Lfor.body3%1%d#{0,0}=>Lfor.body3%2%d#{0,0})*((((Lfor.body3%2%d#{0,0}=>Lif.else%1%d#{0,0})*(Lif.else%1%d#{0,0}=>Lif.end%1%bbentry#{0,0}))+((Lfor.body3%2%d#{0,0}=>Lif.then%1%d#{0,0})*(Lif.then%1%d#{0,0}=>Lif.end%1%bbentry#{0,0})))*(Lif.end%1%bbentry#{0,0}=>Lfor.cond1%1%bbentry#{1,0})))))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%7%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%7%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%7%bbentry#{0,0}=>L3%8%d#{0,0})*((L3%8%d#{0,0}=>L3%9%bbentry#{0,0})*(L3%9%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end10%1%d#{0,0})*(Lfor.end10%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%x : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1.B4.C1.D2.E1
=Locs end
=Liveness in foo.A1.B4.C1.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L3%7%bbentry_Lfor.cond%1%bbentry

=live locs at L3%19%bbentry_Lfor.cond1%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1.B4.C1.D2.E1

=Branch affecting variable locs in foo.A1.B4.C1.D2.E1

=Relevant Memlabels in foo.A1.B4.C1.D2.E1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--arg.1
memlabel-mem--arg.2
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1.B4.C1.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1.B4.C1.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed1
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 73527b8cee7a7474d0511443d77f72c7
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1235122207 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1235122208; 1235122211 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1235122212; 3382590495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3382590496; 3382590499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3382590500; 3892314115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3892314116; 3892314119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3892314120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1235122208 { 0x499e7820 +1.23804092e20 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3892314116 { 0xe8000004 -402653180 -1.47e81 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3382590496 { 0xc99e3c20 -912376800 -1.23620986e20 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3892314116 { 0xe8000004 -402653180 -1.47e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3892314119 { 0xe8000007 -402653177 -1.83e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3382590496 { 0xc99e3c20 -912376800 -1.23620986e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3382590499 { 0xc99e3c23 -912376797 -1.23621022e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1235122208 { 0x499e7820 +1.23804092e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1235122211 { 0x499e7823 +1.23804128e20 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1700232902
=counter_example_end
=global nodece 0 num_edges_traversed 1
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 365cdf7da18acec741d319e6265a7f3a
=input.spec-%var-x-1
1 : Lambda214Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda215Var : BV:32
11 : Lambda216Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda217Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 195 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 196; 199 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 200; 2287 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2288; 2291 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2292; 1140589075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1140589076; 1140589079 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1140589080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 196 { 0xc4 +1.2336e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2288 { 0x8f0 +1.27275e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1140589076 { 0x43fc0214 +1.96881341e8 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda231Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda232Var : BV:32
11 : Lambda233Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda234Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2288 { 0x8f0 +1.27275e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2291 { 0x8f3 +1.27310e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1140589076 { 0x43fc0214 +1.96881341e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1140589079 { 0x43fc0217 +1.96881377e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 196 { 0xc4 +1.2336e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 199 { 0xc7 +1.2372e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1368629833
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce27.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce27 56b9b89e2a9ea4154cad276a1b6d31b6
=input.spec-%var-x-1
1 : Lambda482Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda483Var : BV:32
11 : Lambda484Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda485Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 259 ] -> 0, [ 260; 260 ] -> 8, [ 261; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 260; 263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 264; 4223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4224; 4227 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4228; 4194307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194308; 4194311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194312; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4224 { 0x1080 +1.50354e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda482Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda483Var : BV:32
11 : Lambda484Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda485Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4224 { 0x1080 +1.50354e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4227 { 0x1083 +1.50389e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 263 { 0x107 +1.3135e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194311 { 0x400007 +1.50000083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 260 { 0x104 +1.3099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda434Var : BV:32
2 : Lambda435Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 260 { 0x104 +1.3099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3850877814
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce51.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce51 ad89ef668f5147f9b9971e60693cecb
=input.spec-%var-x-1
1 : Lambda709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda710Var : BV:32
11 : Lambda711Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda712Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3398718947 ] -> 4, [ 3398718948; 3398718951 ] -> 0, [ 3398718952; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3335065055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3335065056; 3335065059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3335065060; 3398718947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3398718948; 3398718951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3398718952; 3403367135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3403367136; 3403367139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3403367140; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3403367136 { 0xcadb42e0 -891600160 -1.71297836e22 } : BV:32
=input.dst.llvm-%m
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3335065056 { 0xc6c90de0 -959902240 -1.57073593e14 } : BV:32
=input.dst.llvm-%x
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda710Var : BV:32
11 : Lambda711Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda712Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3335065056 { 0xc6c90de0 -959902240 -1.57073593e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3335065059 { 0xc6c90de3 -959902237 -1.57073628e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3403367136 { 0xcadb42e0 -891600160 -1.71297836e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3403367139 { 0xcadb42e3 -891600157 -1.71297872e22 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda651Var : BV:32
2 : Lambda652Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda659Var : BV:32
2 : Lambda660Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3185644373
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3v487.ce52.num_edges_traversed2
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce52 7c32ea20e059a73d28402857bf557469
=input.spec-%var-x-1
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4379Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4380Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 6) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 6) : BV:32
28 : eq(27, 11) : BOOL
29 : eq(27, 14) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : bvadd(9, 6) : BV:32
33 : eq(32, 11) : BOOL
34 : eq(32, 14) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 13, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 11) : BOOL
40 : eq(38, 14) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 11) : BOOL
45 : eq(43, 14) : BOOL
46 : ite(45, 16, 17) : BV:8
47 : ite(44, 13, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : ite(50, 16, 17) : BV:8
52 : ite(49, 13, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 11) : BOOL
55 : eq(53, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 419430463 ] -> 0, [ 419430464; 419430464 ] -> 4, [ 419430465; 508821510 ] -> 0, [ 508821511; 508821511 ] -> 16, [ 508821512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65796; 65799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 65800; 419430463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 419430464; 419430467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 419430468; 508821507 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 508821508; 508821511 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 508821512; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4369Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4370Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : bvadd(15, 24, 22) : BV:32
42 : eq(41, 26) : BOOL
43 : eq(41, 29) : BOOL
44 : ite(43, 31, 32) : BV:8
45 : ite(42, 28, 44) : BV:8
46 : bvadd(24, 22) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : ite(48, 31, 32) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : ite(54, 31, 32) : BV:8
56 : ite(53, 28, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : ite(59, 31, 32) : BV:8
61 : ite(58, 28, 60) : BV:8
62 : bvadd(15, 23, 51) : BV:32
63 : eq(62, 26) : BOOL
64 : eq(62, 29) : BOOL
65 : ite(64, 31, 32) : BV:8
66 : ite(63, 28, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 26) : BOOL
69 : eq(67, 29) : BOOL
70 : ite(69, 31, 32) : BV:8
71 : ite(68, 28, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4385Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4386Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 6) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 9, 6) : BV:32
28 : eq(27, 11) : BOOL
29 : eq(27, 14) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 13, 30) : BV:8
32 : bvadd(9, 6) : BV:32
33 : eq(32, 11) : BOOL
34 : eq(32, 14) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 13, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(5, 7, 37) : BV:32
39 : eq(38, 11) : BOOL
40 : eq(38, 14) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : bvadd(20, 7, 37) : BV:32
44 : eq(43, 11) : BOOL
45 : eq(43, 14) : BOOL
46 : ite(45, 16, 17) : BV:8
47 : ite(44, 13, 46) : BV:8
48 : bvadd(26, 7, 37) : BV:32
49 : eq(48, 11) : BOOL
50 : eq(48, 14) : BOOL
51 : ite(50, 16, 17) : BV:8
52 : ite(49, 13, 51) : BV:8
53 : bvadd(7, 37) : BV:32
54 : eq(53, 11) : BOOL
55 : eq(53, 14) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 13, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : lambda(4, 58) : FUNCTION[BV:32 -> BV:32]
60 : map(3, 59) : MAP[BV:32 -> BV:32]
61 : sym_const(60) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 419430467 { 0x19000043 +1.798e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 65799 { 0x10107 +1.784385e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda662Var : BV:32
2 : Lambda663Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda672Var : BV:32
2 : Lambda673Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
475400718
=counter_example_end
=global nodece 4 num_edges_traversed 2
=global nodece 4 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce75.num_edges_traversed2
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce75 c76d9f53cc6604674f6b92c9178cc2
=input.spec-%var-x-1
1 : Lambda938Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda939Var : BV:32
18 : Lambda940Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda941Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4331Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4332Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
12 : eq(10, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 8) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 8) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 8) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : bvadd(5, 7, 27) : BV:32
29 : eq(28, 11) : BOOL
30 : ite(29, 13, 14) : BV:8
31 : bvadd(16, 7, 27) : BV:32
32 : eq(31, 11) : BOOL
33 : ite(32, 13, 14) : BV:8
34 : bvadd(20, 7, 27) : BV:32
35 : eq(34, 11) : BOOL
36 : ite(35, 13, 14) : BV:8
37 : bvadd(7, 27) : BV:32
38 : eq(37, 11) : BOOL
39 : ite(38, 13, 14) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : lambda(4, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(3, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3539702153 ] -> 0, [ 3539702154; 3539702154 ] -> 16, [ 3539702155; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1048203 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048204; 1048207 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048208; 2147484179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147484180; 2147484183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147484184; 3539702151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3539702152; 3539702155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3539702156; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048204 { 0xffe8c +1.12495565e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3539702152 { 0xd2fb9188 -755265144 -1.96537876e38 } : BV:32
=input.dst.llvm-%n
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147484180 { 0x80000214 -2147483116 -1.6341e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1185342811 { 0x46a6e55b +1.30387437e14 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda938Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda939Var : BV:32
18 : Lambda940Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda941Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4321Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4322Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : bvadd(21, 24, 1) : BV:32
26 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 1) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : bvadd(15, 24, 1) : BV:32
36 : eq(35, 26) : BOOL
37 : ite(36, 28, 29) : BV:8
38 : bvadd(24, 1) : BV:32
39 : eq(38, 26) : BOOL
40 : ite(39, 28, 29) : BV:8
41 : bvconcat(30, 34, 37, 40) : BV:32
42 : bvadd(21, 23, 41) : BV:32
43 : eq(42, 26) : BOOL
44 : ite(43, 28, 29) : BV:8
45 : bvadd(31, 23, 41) : BV:32
46 : eq(45, 26) : BOOL
47 : ite(46, 28, 29) : BV:8
48 : bvadd(15, 23, 41) : BV:32
49 : eq(48, 26) : BOOL
50 : ite(49, 28, 29) : BV:8
51 : bvadd(23, 41) : BV:32
52 : eq(51, 26) : BOOL
53 : ite(52, 28, 29) : BV:8
54 : bvconcat(44, 47, 50, 53) : BV:32
55 : lambda(20, 54) : FUNCTION[BV:32 -> BV:32]
56 : map(19, 55) : MAP[BV:32 -> BV:32]
57 : sum(16, 17, 56) : SUM[UNIT,MAP[BV:32 -> BV:32]]
58 : sym_const(57) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4337Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4338Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
12 : eq(10, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : bvadd(16, 9, 8) : BV:32
18 : eq(17, 11) : BOOL
19 : ite(18, 13, 14) : BV:8
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : bvadd(20, 9, 8) : BV:32
22 : eq(21, 11) : BOOL
23 : ite(22, 13, 14) : BV:8
24 : bvadd(9, 8) : BV:32
25 : eq(24, 11) : BOOL
26 : ite(25, 13, 14) : BV:8
27 : bvconcat(15, 19, 23, 26) : BV:32
28 : bvadd(5, 7, 27) : BV:32
29 : eq(28, 11) : BOOL
30 : ite(29, 13, 14) : BV:8
31 : bvadd(16, 7, 27) : BV:32
32 : eq(31, 11) : BOOL
33 : ite(32, 13, 14) : BV:8
34 : bvadd(20, 7, 27) : BV:32
35 : eq(34, 11) : BOOL
36 : ite(35, 13, 14) : BV:8
37 : bvadd(7, 27) : BV:32
38 : eq(37, 11) : BOOL
39 : ite(38, 13, 14) : BV:8
40 : bvconcat(30, 33, 36, 39) : BV:32
41 : lambda(4, 40) : FUNCTION[BV:32 -> BV:32]
42 : map(3, 41) : MAP[BV:32 -> BV:32]
43 : sym_const(42) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1185342811 { 0x46a6e55b +1.30387437e14 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3539702152 { 0xd2fb9188 -755265144 -1.96537876e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3539702155 { 0xd2fb918b -755265141 -1.96537911e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147484180 { 0x80000214 -2147483116 -1.6341e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147484183 { 0x80000217 -2147483113 -1.6377e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048204 { 0xffe8c +1.12495565e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048207 { 0xffe8f +1.12495601e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda878Var : BV:32
2 : Lambda879Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda888Var : BV:32
2 : Lambda889Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3445317818
=counter_example_end
=global nodece 5 num_edges_traversed 2
=global nodece 5 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce76.num_edges_traversed2
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce76 563951ef44b4ec3a44388aba2ae99456
=input.spec-%var-x-1
1 : Lambda992Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda993Var : BV:32
18 : Lambda994Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda995Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 2) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
41 : eq(25, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
44 : eq(25, 43) : BOOL
45 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
46 : eq(25, 45) : BOOL
47 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
48 : eq(25, 47) : BOOL
49 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
50 : eq(25, 49) : BOOL
51 : 251 { 0xfb -5 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(48, 28, 52) : BV:8
54 : ite(46, 28, 53) : BV:8
55 : ite(44, 28, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 28, 57) : BV:8
59 : ite(34, 28, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(30, 28, 60) : BV:8
62 : ite(27, 28, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 2) : BV:32
65 : eq(64, 26) : BOOL
66 : eq(64, 29) : BOOL
67 : eq(64, 2) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 35) : BOOL
70 : eq(64, 37) : BOOL
71 : eq(64, 40) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 45) : BOOL
74 : eq(64, 47) : BOOL
75 : eq(64, 49) : BOOL
76 : ite(75, 28, 51) : BV:8
77 : ite(74, 28, 76) : BV:8
78 : ite(73, 28, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 42, 79) : BV:8
81 : ite(70, 39, 80) : BV:8
82 : ite(69, 28, 81) : BV:8
83 : ite(68, 28, 82) : BV:8
84 : ite(67, 32, 83) : BV:8
85 : ite(66, 28, 84) : BV:8
86 : ite(65, 28, 85) : BV:8
87 : bvadd(37, 24, 2) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 2) : BOOL
91 : eq(87, 33) : BOOL
92 : eq(87, 35) : BOOL
93 : eq(87, 37) : BOOL
94 : eq(87, 40) : BOOL
95 : eq(87, 43) : BOOL
96 : eq(87, 45) : BOOL
97 : eq(87, 47) : BOOL
98 : eq(87, 49) : BOOL
99 : ite(98, 28, 51) : BV:8
100 : ite(97, 28, 99) : BV:8
101 : ite(96, 28, 100) : BV:8
102 : ite(95, 28, 101) : BV:8
103 : ite(94, 42, 102) : BV:8
104 : ite(93, 39, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 28, 105) : BV:8
107 : ite(90, 32, 106) : BV:8
108 : ite(89, 28, 107) : BV:8
109 : ite(88, 28, 108) : BV:8
110 : bvadd(24, 2) : BV:32
111 : eq(110, 26) : BOOL
112 : eq(110, 29) : BOOL
113 : eq(110, 2) : BOOL
114 : eq(110, 33) : BOOL
115 : eq(110, 35) : BOOL
116 : eq(110, 37) : BOOL
117 : eq(110, 40) : BOOL
118 : eq(110, 43) : BOOL
119 : eq(110, 45) : BOOL
120 : eq(110, 47) : BOOL
121 : eq(110, 49) : BOOL
122 : ite(121, 28, 51) : BV:8
123 : ite(120, 28, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 28, 124) : BV:8
126 : ite(117, 42, 125) : BV:8
127 : ite(116, 39, 126) : BV:8
128 : ite(115, 28, 127) : BV:8
129 : ite(114, 28, 128) : BV:8
130 : ite(113, 32, 129) : BV:8
131 : ite(112, 28, 130) : BV:8
132 : ite(111, 28, 131) : BV:8
133 : bvconcat(62, 86, 109, 132) : BV:32
134 : bvadd(21, 23, 133) : BV:32
135 : eq(134, 26) : BOOL
136 : eq(134, 29) : BOOL
137 : eq(134, 2) : BOOL
138 : eq(134, 33) : BOOL
139 : eq(134, 35) : BOOL
140 : eq(134, 37) : BOOL
141 : eq(134, 40) : BOOL
142 : eq(134, 43) : BOOL
143 : eq(134, 45) : BOOL
144 : eq(134, 47) : BOOL
145 : eq(134, 49) : BOOL
146 : ite(145, 28, 51) : BV:8
147 : ite(144, 28, 146) : BV:8
148 : ite(143, 28, 147) : BV:8
149 : ite(142, 28, 148) : BV:8
150 : ite(141, 42, 149) : BV:8
151 : ite(140, 39, 150) : BV:8
152 : ite(139, 28, 151) : BV:8
153 : ite(138, 28, 152) : BV:8
154 : ite(137, 32, 153) : BV:8
155 : ite(136, 28, 154) : BV:8
156 : ite(135, 28, 155) : BV:8
157 : bvadd(63, 23, 133) : BV:32
158 : eq(157, 26) : BOOL
159 : eq(157, 29) : BOOL
160 : eq(157, 2) : BOOL
161 : eq(157, 33) : BOOL
162 : eq(157, 35) : BOOL
163 : eq(157, 37) : BOOL
164 : eq(157, 40) : BOOL
165 : eq(157, 43) : BOOL
166 : eq(157, 45) : BOOL
167 : eq(157, 47) : BOOL
168 : eq(157, 49) : BOOL
169 : ite(168, 28, 51) : BV:8
170 : ite(167, 28, 169) : BV:8
171 : ite(166, 28, 170) : BV:8
172 : ite(165, 28, 171) : BV:8
173 : ite(164, 42, 172) : BV:8
174 : ite(163, 39, 173) : BV:8
175 : ite(162, 28, 174) : BV:8
176 : ite(161, 28, 175) : BV:8
177 : ite(160, 32, 176) : BV:8
178 : ite(159, 28, 177) : BV:8
179 : ite(158, 28, 178) : BV:8
180 : bvadd(37, 23, 133) : BV:32
181 : eq(180, 26) : BOOL
182 : eq(180, 29) : BOOL
183 : eq(180, 2) : BOOL
184 : eq(180, 33) : BOOL
185 : eq(180, 35) : BOOL
186 : eq(180, 37) : BOOL
187 : eq(180, 40) : BOOL
188 : eq(180, 43) : BOOL
189 : eq(180, 45) : BOOL
190 : eq(180, 47) : BOOL
191 : eq(180, 49) : BOOL
192 : ite(191, 28, 51) : BV:8
193 : ite(190, 28, 192) : BV:8
194 : ite(189, 28, 193) : BV:8
195 : ite(188, 28, 194) : BV:8
196 : ite(187, 42, 195) : BV:8
197 : ite(186, 39, 196) : BV:8
198 : ite(185, 28, 197) : BV:8
199 : ite(184, 28, 198) : BV:8
200 : ite(183, 32, 199) : BV:8
201 : ite(182, 28, 200) : BV:8
202 : ite(181, 28, 201) : BV:8
203 : bvadd(23, 133) : BV:32
204 : eq(203, 26) : BOOL
205 : eq(203, 29) : BOOL
206 : eq(203, 2) : BOOL
207 : eq(203, 33) : BOOL
208 : eq(203, 35) : BOOL
209 : eq(203, 37) : BOOL
210 : eq(203, 40) : BOOL
211 : eq(203, 43) : BOOL
212 : eq(203, 45) : BOOL
213 : eq(203, 47) : BOOL
214 : eq(203, 49) : BOOL
215 : ite(214, 28, 51) : BV:8
216 : ite(213, 28, 215) : BV:8
217 : ite(212, 28, 216) : BV:8
218 : ite(211, 28, 217) : BV:8
219 : ite(210, 42, 218) : BV:8
220 : ite(209, 39, 219) : BV:8
221 : ite(208, 28, 220) : BV:8
222 : ite(207, 28, 221) : BV:8
223 : ite(206, 32, 222) : BV:8
224 : ite(205, 28, 223) : BV:8
225 : ite(204, 28, 224) : BV:8
226 : bvconcat(156, 179, 202, 225) : BV:32
227 : lambda(20, 226) : FUNCTION[BV:32 -> BV:32]
228 : map(19, 227) : MAP[BV:32 -> BV:32]
229 : lambda(17, 228) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
230 : map(16, 229) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
231 : sym_const(230) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4283Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4284Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
12 : eq(10, 11) : BOOL
13 : 0 { 0x0 } : BV:8
14 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
15 : eq(10, 14) : BOOL
16 : eq(10, 8) : BOOL
17 : 169 { 0xa9 -87 } : BV:8
18 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
19 : eq(10, 18) : BOOL
20 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
21 : eq(10, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(10, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
26 : eq(10, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
29 : eq(10, 28) : BOOL
30 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
31 : eq(10, 30) : BOOL
32 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
33 : eq(10, 32) : BOOL
34 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
35 : eq(10, 34) : BOOL
36 : 251 { 0xfb -5 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(33, 13, 37) : BV:8
39 : ite(31, 13, 38) : BV:8
40 : ite(29, 13, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(21, 13, 42) : BV:8
44 : ite(19, 13, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : ite(15, 13, 45) : BV:8
47 : ite(12, 13, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 9, 8) : BV:32
50 : eq(49, 11) : BOOL
51 : eq(49, 14) : BOOL
52 : eq(49, 8) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 20) : BOOL
55 : eq(49, 22) : BOOL
56 : eq(49, 25) : BOOL
57 : eq(49, 28) : BOOL
58 : eq(49, 30) : BOOL
59 : eq(49, 32) : BOOL
60 : eq(49, 34) : BOOL
61 : ite(60, 13, 36) : BV:8
62 : ite(59, 13, 61) : BV:8
63 : ite(58, 13, 62) : BV:8
64 : ite(57, 13, 63) : BV:8
65 : ite(56, 27, 64) : BV:8
66 : ite(55, 24, 65) : BV:8
67 : ite(54, 13, 66) : BV:8
68 : ite(53, 13, 67) : BV:8
69 : ite(52, 17, 68) : BV:8
70 : ite(51, 13, 69) : BV:8
71 : ite(50, 13, 70) : BV:8
72 : bvadd(22, 9, 8) : BV:32
73 : eq(72, 11) : BOOL
74 : eq(72, 14) : BOOL
75 : eq(72, 8) : BOOL
76 : eq(72, 18) : BOOL
77 : eq(72, 20) : BOOL
78 : eq(72, 22) : BOOL
79 : eq(72, 25) : BOOL
80 : eq(72, 28) : BOOL
81 : eq(72, 30) : BOOL
82 : eq(72, 32) : BOOL
83 : eq(72, 34) : BOOL
84 : ite(83, 13, 36) : BV:8
85 : ite(82, 13, 84) : BV:8
86 : ite(81, 13, 85) : BV:8
87 : ite(80, 13, 86) : BV:8
88 : ite(79, 27, 87) : BV:8
89 : ite(78, 24, 88) : BV:8
90 : ite(77, 13, 89) : BV:8
91 : ite(76, 13, 90) : BV:8
92 : ite(75, 17, 91) : BV:8
93 : ite(74, 13, 92) : BV:8
94 : ite(73, 13, 93) : BV:8
95 : bvadd(9, 8) : BV:32
96 : eq(95, 11) : BOOL
97 : eq(95, 14) : BOOL
98 : eq(95, 8) : BOOL
99 : eq(95, 18) : BOOL
100 : eq(95, 20) : BOOL
101 : eq(95, 22) : BOOL
102 : eq(95, 25) : BOOL
103 : eq(95, 28) : BOOL
104 : eq(95, 30) : BOOL
105 : eq(95, 32) : BOOL
106 : eq(95, 34) : BOOL
107 : ite(106, 13, 36) : BV:8
108 : ite(105, 13, 107) : BV:8
109 : ite(104, 13, 108) : BV:8
110 : ite(103, 13, 109) : BV:8
111 : ite(102, 27, 110) : BV:8
112 : ite(101, 24, 111) : BV:8
113 : ite(100, 13, 112) : BV:8
114 : ite(99, 13, 113) : BV:8
115 : ite(98, 17, 114) : BV:8
116 : ite(97, 13, 115) : BV:8
117 : ite(96, 13, 116) : BV:8
118 : bvconcat(47, 71, 94, 117) : BV:32
119 : bvadd(5, 7, 118) : BV:32
120 : eq(119, 11) : BOOL
121 : eq(119, 14) : BOOL
122 : eq(119, 8) : BOOL
123 : eq(119, 18) : BOOL
124 : eq(119, 20) : BOOL
125 : eq(119, 22) : BOOL
126 : eq(119, 25) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 30) : BOOL
129 : eq(119, 32) : BOOL
130 : eq(119, 34) : BOOL
131 : ite(130, 13, 36) : BV:8
132 : ite(129, 13, 131) : BV:8
133 : ite(128, 13, 132) : BV:8
134 : ite(127, 13, 133) : BV:8
135 : ite(126, 27, 134) : BV:8
136 : ite(125, 24, 135) : BV:8
137 : ite(124, 13, 136) : BV:8
138 : ite(123, 13, 137) : BV:8
139 : ite(122, 17, 138) : BV:8
140 : ite(121, 13, 139) : BV:8
141 : ite(120, 13, 140) : BV:8
142 : bvadd(48, 7, 118) : BV:32
143 : eq(142, 11) : BOOL
144 : eq(142, 14) : BOOL
145 : eq(142, 8) : BOOL
146 : eq(142, 18) : BOOL
147 : eq(142, 20) : BOOL
148 : eq(142, 22) : BOOL
149 : eq(142, 25) : BOOL
150 : eq(142, 28) : BOOL
151 : eq(142, 30) : BOOL
152 : eq(142, 32) : BOOL
153 : eq(142, 34) : BOOL
154 : ite(153, 13, 36) : BV:8
155 : ite(152, 13, 154) : BV:8
156 : ite(151, 13, 155) : BV:8
157 : ite(150, 13, 156) : BV:8
158 : ite(149, 27, 157) : BV:8
159 : ite(148, 24, 158) : BV:8
160 : ite(147, 13, 159) : BV:8
161 : ite(146, 13, 160) : BV:8
162 : ite(145, 17, 161) : BV:8
163 : ite(144, 13, 162) : BV:8
164 : ite(143, 13, 163) : BV:8
165 : bvadd(22, 7, 118) : BV:32
166 : eq(165, 11) : BOOL
167 : eq(165, 14) : BOOL
168 : eq(165, 8) : BOOL
169 : eq(165, 18) : BOOL
170 : eq(165, 20) : BOOL
171 : eq(165, 22) : BOOL
172 : eq(165, 25) : BOOL
173 : eq(165, 28) : BOOL
174 : eq(165, 30) : BOOL
175 : eq(165, 32) : BOOL
176 : eq(165, 34) : BOOL
177 : ite(176, 13, 36) : BV:8
178 : ite(175, 13, 177) : BV:8
179 : ite(174, 13, 178) : BV:8
180 : ite(173, 13, 179) : BV:8
181 : ite(172, 27, 180) : BV:8
182 : ite(171, 24, 181) : BV:8
183 : ite(170, 13, 182) : BV:8
184 : ite(169, 13, 183) : BV:8
185 : ite(168, 17, 184) : BV:8
186 : ite(167, 13, 185) : BV:8
187 : ite(166, 13, 186) : BV:8
188 : bvadd(7, 118) : BV:32
189 : eq(188, 11) : BOOL
190 : eq(188, 14) : BOOL
191 : eq(188, 8) : BOOL
192 : eq(188, 18) : BOOL
193 : eq(188, 20) : BOOL
194 : eq(188, 22) : BOOL
195 : eq(188, 25) : BOOL
196 : eq(188, 28) : BOOL
197 : eq(188, 30) : BOOL
198 : eq(188, 32) : BOOL
199 : eq(188, 34) : BOOL
200 : ite(199, 13, 36) : BV:8
201 : ite(198, 13, 200) : BV:8
202 : ite(197, 13, 201) : BV:8
203 : ite(196, 13, 202) : BV:8
204 : ite(195, 27, 203) : BV:8
205 : ite(194, 24, 204) : BV:8
206 : ite(193, 13, 205) : BV:8
207 : ite(192, 13, 206) : BV:8
208 : ite(191, 17, 207) : BV:8
209 : ite(190, 13, 208) : BV:8
210 : ite(189, 13, 209) : BV:8
211 : bvconcat(141, 164, 187, 210) : BV:32
212 : lambda(4, 211) : FUNCTION[BV:32 -> BV:32]
213 : map(3, 212) : MAP[BV:32 -> BV:32]
214 : sym_const(213) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 169, [ 1; 1 ] -> 127, [ 2; 1813540559 ] -> 251, [ 1813540560; 1813540563 ] -> 0, [ 1813540564; 2761015701 ] -> 251, [ 2761015702; 2761015702 ] -> 1, [ 2761015703; 3833956687 ] -> 251, [ 3833956688; 3833956691 ] -> 0, [ 3833956692; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1813540559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1813540560; 1813540563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1813540564; 2761015699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2761015700; 2761015703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2761015704; 3833956687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3833956688; 3833956691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3833956692; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2761015700 { 0xa491c194 -1533951596 -1.13872003e202 } : BV:32
=input.dst.llvm-%n
1 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 569850645 { 0x21f73b15 +1.93149054e196 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda992Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda993Var : BV:32
18 : Lambda994Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda995Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 2) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
41 : eq(25, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
44 : eq(25, 43) : BOOL
45 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
46 : eq(25, 45) : BOOL
47 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
48 : eq(25, 47) : BOOL
49 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
50 : eq(25, 49) : BOOL
51 : 251 { 0xfb -5 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(48, 28, 52) : BV:8
54 : ite(46, 28, 53) : BV:8
55 : ite(44, 28, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 28, 57) : BV:8
59 : ite(34, 28, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(30, 28, 60) : BV:8
62 : ite(27, 28, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 2) : BV:32
65 : eq(64, 26) : BOOL
66 : eq(64, 29) : BOOL
67 : eq(64, 2) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 35) : BOOL
70 : eq(64, 37) : BOOL
71 : eq(64, 40) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 45) : BOOL
74 : eq(64, 47) : BOOL
75 : eq(64, 49) : BOOL
76 : ite(75, 28, 51) : BV:8
77 : ite(74, 28, 76) : BV:8
78 : ite(73, 28, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 42, 79) : BV:8
81 : ite(70, 39, 80) : BV:8
82 : ite(69, 28, 81) : BV:8
83 : ite(68, 28, 82) : BV:8
84 : ite(67, 32, 83) : BV:8
85 : ite(66, 28, 84) : BV:8
86 : ite(65, 28, 85) : BV:8
87 : bvadd(37, 24, 2) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 2) : BOOL
91 : eq(87, 33) : BOOL
92 : eq(87, 35) : BOOL
93 : eq(87, 37) : BOOL
94 : eq(87, 40) : BOOL
95 : eq(87, 43) : BOOL
96 : eq(87, 45) : BOOL
97 : eq(87, 47) : BOOL
98 : eq(87, 49) : BOOL
99 : ite(98, 28, 51) : BV:8
100 : ite(97, 28, 99) : BV:8
101 : ite(96, 28, 100) : BV:8
102 : ite(95, 28, 101) : BV:8
103 : ite(94, 42, 102) : BV:8
104 : ite(93, 39, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 28, 105) : BV:8
107 : ite(90, 32, 106) : BV:8
108 : ite(89, 28, 107) : BV:8
109 : ite(88, 28, 108) : BV:8
110 : bvadd(24, 2) : BV:32
111 : eq(110, 26) : BOOL
112 : eq(110, 29) : BOOL
113 : eq(110, 2) : BOOL
114 : eq(110, 33) : BOOL
115 : eq(110, 35) : BOOL
116 : eq(110, 37) : BOOL
117 : eq(110, 40) : BOOL
118 : eq(110, 43) : BOOL
119 : eq(110, 45) : BOOL
120 : eq(110, 47) : BOOL
121 : eq(110, 49) : BOOL
122 : ite(121, 28, 51) : BV:8
123 : ite(120, 28, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 28, 124) : BV:8
126 : ite(117, 42, 125) : BV:8
127 : ite(116, 39, 126) : BV:8
128 : ite(115, 28, 127) : BV:8
129 : ite(114, 28, 128) : BV:8
130 : ite(113, 32, 129) : BV:8
131 : ite(112, 28, 130) : BV:8
132 : ite(111, 28, 131) : BV:8
133 : bvconcat(62, 86, 109, 132) : BV:32
134 : bvadd(21, 23, 133) : BV:32
135 : eq(134, 26) : BOOL
136 : eq(134, 29) : BOOL
137 : eq(134, 2) : BOOL
138 : eq(134, 33) : BOOL
139 : eq(134, 35) : BOOL
140 : eq(134, 37) : BOOL
141 : eq(134, 40) : BOOL
142 : eq(134, 43) : BOOL
143 : eq(134, 45) : BOOL
144 : eq(134, 47) : BOOL
145 : eq(134, 49) : BOOL
146 : ite(145, 28, 51) : BV:8
147 : ite(144, 28, 146) : BV:8
148 : ite(143, 28, 147) : BV:8
149 : ite(142, 28, 148) : BV:8
150 : ite(141, 42, 149) : BV:8
151 : ite(140, 39, 150) : BV:8
152 : ite(139, 28, 151) : BV:8
153 : ite(138, 28, 152) : BV:8
154 : ite(137, 32, 153) : BV:8
155 : ite(136, 28, 154) : BV:8
156 : ite(135, 28, 155) : BV:8
157 : bvadd(63, 23, 133) : BV:32
158 : eq(157, 26) : BOOL
159 : eq(157, 29) : BOOL
160 : eq(157, 2) : BOOL
161 : eq(157, 33) : BOOL
162 : eq(157, 35) : BOOL
163 : eq(157, 37) : BOOL
164 : eq(157, 40) : BOOL
165 : eq(157, 43) : BOOL
166 : eq(157, 45) : BOOL
167 : eq(157, 47) : BOOL
168 : eq(157, 49) : BOOL
169 : ite(168, 28, 51) : BV:8
170 : ite(167, 28, 169) : BV:8
171 : ite(166, 28, 170) : BV:8
172 : ite(165, 28, 171) : BV:8
173 : ite(164, 42, 172) : BV:8
174 : ite(163, 39, 173) : BV:8
175 : ite(162, 28, 174) : BV:8
176 : ite(161, 28, 175) : BV:8
177 : ite(160, 32, 176) : BV:8
178 : ite(159, 28, 177) : BV:8
179 : ite(158, 28, 178) : BV:8
180 : bvadd(37, 23, 133) : BV:32
181 : eq(180, 26) : BOOL
182 : eq(180, 29) : BOOL
183 : eq(180, 2) : BOOL
184 : eq(180, 33) : BOOL
185 : eq(180, 35) : BOOL
186 : eq(180, 37) : BOOL
187 : eq(180, 40) : BOOL
188 : eq(180, 43) : BOOL
189 : eq(180, 45) : BOOL
190 : eq(180, 47) : BOOL
191 : eq(180, 49) : BOOL
192 : ite(191, 28, 51) : BV:8
193 : ite(190, 28, 192) : BV:8
194 : ite(189, 28, 193) : BV:8
195 : ite(188, 28, 194) : BV:8
196 : ite(187, 42, 195) : BV:8
197 : ite(186, 39, 196) : BV:8
198 : ite(185, 28, 197) : BV:8
199 : ite(184, 28, 198) : BV:8
200 : ite(183, 32, 199) : BV:8
201 : ite(182, 28, 200) : BV:8
202 : ite(181, 28, 201) : BV:8
203 : bvadd(23, 133) : BV:32
204 : eq(203, 26) : BOOL
205 : eq(203, 29) : BOOL
206 : eq(203, 2) : BOOL
207 : eq(203, 33) : BOOL
208 : eq(203, 35) : BOOL
209 : eq(203, 37) : BOOL
210 : eq(203, 40) : BOOL
211 : eq(203, 43) : BOOL
212 : eq(203, 45) : BOOL
213 : eq(203, 47) : BOOL
214 : eq(203, 49) : BOOL
215 : ite(214, 28, 51) : BV:8
216 : ite(213, 28, 215) : BV:8
217 : ite(212, 28, 216) : BV:8
218 : ite(211, 28, 217) : BV:8
219 : ite(210, 42, 218) : BV:8
220 : ite(209, 39, 219) : BV:8
221 : ite(208, 28, 220) : BV:8
222 : ite(207, 28, 221) : BV:8
223 : ite(206, 32, 222) : BV:8
224 : ite(205, 28, 223) : BV:8
225 : ite(204, 28, 224) : BV:8
226 : bvconcat(156, 179, 202, 225) : BV:32
227 : lambda(20, 226) : FUNCTION[BV:32 -> BV:32]
228 : map(19, 227) : MAP[BV:32 -> BV:32]
229 : lambda(17, 228) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
230 : map(16, 229) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
231 : sym_const(230) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4273Var : BV:32
19 : lambda(18, 12) : FUNCTION[BV:32 -> BOOL]
20 : Lambda4274Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 1) : BV:32
25 : bvadd(21, 24, 1) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 1) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : eq(25, 15) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
40 : eq(25, 39) : BOOL
41 : 1 { 0x1 } : BV:8
42 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
43 : eq(25, 42) : BOOL
44 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
45 : eq(25, 44) : BOOL
46 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
47 : eq(25, 46) : BOOL
48 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
49 : eq(25, 48) : BOOL
50 : 251 { 0xfb -5 } : BV:8
51 : ite(49, 28, 50) : BV:8
52 : ite(47, 28, 51) : BV:8
53 : ite(45, 28, 52) : BV:8
54 : ite(43, 28, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(36, 28, 56) : BV:8
58 : ite(34, 28, 57) : BV:8
59 : ite(31, 32, 58) : BV:8
60 : ite(30, 28, 59) : BV:8
61 : ite(27, 28, 60) : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : bvadd(62, 24, 1) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : eq(63, 1) : BOOL
67 : eq(63, 33) : BOOL
68 : eq(63, 35) : BOOL
69 : eq(63, 15) : BOOL
70 : eq(63, 39) : BOOL
71 : eq(63, 42) : BOOL
72 : eq(63, 44) : BOOL
73 : eq(63, 46) : BOOL
74 : eq(63, 48) : BOOL
75 : ite(74, 28, 50) : BV:8
76 : ite(73, 28, 75) : BV:8
77 : ite(72, 28, 76) : BV:8
78 : ite(71, 28, 77) : BV:8
79 : ite(70, 41, 78) : BV:8
80 : ite(69, 38, 79) : BV:8
81 : ite(68, 28, 80) : BV:8
82 : ite(67, 28, 81) : BV:8
83 : ite(66, 32, 82) : BV:8
84 : ite(65, 28, 83) : BV:8
85 : ite(64, 28, 84) : BV:8
86 : bvadd(15, 24, 1) : BV:32
87 : eq(86, 26) : BOOL
88 : eq(86, 29) : BOOL
89 : eq(86, 1) : BOOL
90 : eq(86, 33) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 15) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 42) : BOOL
95 : eq(86, 44) : BOOL
96 : eq(86, 46) : BOOL
97 : eq(86, 48) : BOOL
98 : ite(97, 28, 50) : BV:8
99 : ite(96, 28, 98) : BV:8
100 : ite(95, 28, 99) : BV:8
101 : ite(94, 28, 100) : BV:8
102 : ite(93, 41, 101) : BV:8
103 : ite(92, 38, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 28, 104) : BV:8
106 : ite(89, 32, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 28, 107) : BV:8
109 : bvadd(24, 1) : BV:32
110 : eq(109, 26) : BOOL
111 : eq(109, 29) : BOOL
112 : eq(109, 1) : BOOL
113 : eq(109, 33) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 15) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 42) : BOOL
118 : eq(109, 44) : BOOL
119 : eq(109, 46) : BOOL
120 : eq(109, 48) : BOOL
121 : ite(120, 28, 50) : BV:8
122 : ite(119, 28, 121) : BV:8
123 : ite(118, 28, 122) : BV:8
124 : ite(117, 28, 123) : BV:8
125 : ite(116, 41, 124) : BV:8
126 : ite(115, 38, 125) : BV:8
127 : ite(114, 28, 126) : BV:8
128 : ite(113, 28, 127) : BV:8
129 : ite(112, 32, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 28, 130) : BV:8
132 : bvconcat(61, 85, 108, 131) : BV:32
133 : bvadd(21, 23, 132) : BV:32
134 : eq(133, 26) : BOOL
135 : eq(133, 29) : BOOL
136 : eq(133, 1) : BOOL
137 : eq(133, 33) : BOOL
138 : eq(133, 35) : BOOL
139 : eq(133, 15) : BOOL
140 : eq(133, 39) : BOOL
141 : eq(133, 42) : BOOL
142 : eq(133, 44) : BOOL
143 : eq(133, 46) : BOOL
144 : eq(133, 48) : BOOL
145 : ite(144, 28, 50) : BV:8
146 : ite(143, 28, 145) : BV:8
147 : ite(142, 28, 146) : BV:8
148 : ite(141, 28, 147) : BV:8
149 : ite(140, 41, 148) : BV:8
150 : ite(139, 38, 149) : BV:8
151 : ite(138, 28, 150) : BV:8
152 : ite(137, 28, 151) : BV:8
153 : ite(136, 32, 152) : BV:8
154 : ite(135, 28, 153) : BV:8
155 : ite(134, 28, 154) : BV:8
156 : bvadd(62, 23, 132) : BV:32
157 : eq(156, 26) : BOOL
158 : eq(156, 29) : BOOL
159 : eq(156, 1) : BOOL
160 : eq(156, 33) : BOOL
161 : eq(156, 35) : BOOL
162 : eq(156, 15) : BOOL
163 : eq(156, 39) : BOOL
164 : eq(156, 42) : BOOL
165 : eq(156, 44) : BOOL
166 : eq(156, 46) : BOOL
167 : eq(156, 48) : BOOL
168 : ite(167, 28, 50) : BV:8
169 : ite(166, 28, 168) : BV:8
170 : ite(165, 28, 169) : BV:8
171 : ite(164, 28, 170) : BV:8
172 : ite(163, 41, 171) : BV:8
173 : ite(162, 38, 172) : BV:8
174 : ite(161, 28, 173) : BV:8
175 : ite(160, 28, 174) : BV:8
176 : ite(159, 32, 175) : BV:8
177 : ite(158, 28, 176) : BV:8
178 : ite(157, 28, 177) : BV:8
179 : bvadd(15, 23, 132) : BV:32
180 : eq(179, 26) : BOOL
181 : eq(179, 29) : BOOL
182 : eq(179, 1) : BOOL
183 : eq(179, 33) : BOOL
184 : eq(179, 35) : BOOL
185 : eq(179, 15) : BOOL
186 : eq(179, 39) : BOOL
187 : eq(179, 42) : BOOL
188 : eq(179, 44) : BOOL
189 : eq(179, 46) : BOOL
190 : eq(179, 48) : BOOL
191 : ite(190, 28, 50) : BV:8
192 : ite(189, 28, 191) : BV:8
193 : ite(188, 28, 192) : BV:8
194 : ite(187, 28, 193) : BV:8
195 : ite(186, 41, 194) : BV:8
196 : ite(185, 38, 195) : BV:8
197 : ite(184, 28, 196) : BV:8
198 : ite(183, 28, 197) : BV:8
199 : ite(182, 32, 198) : BV:8
200 : ite(181, 28, 199) : BV:8
201 : ite(180, 28, 200) : BV:8
202 : bvadd(23, 132) : BV:32
203 : eq(202, 26) : BOOL
204 : eq(202, 29) : BOOL
205 : eq(202, 1) : BOOL
206 : eq(202, 33) : BOOL
207 : eq(202, 35) : BOOL
208 : eq(202, 15) : BOOL
209 : eq(202, 39) : BOOL
210 : eq(202, 42) : BOOL
211 : eq(202, 44) : BOOL
212 : eq(202, 46) : BOOL
213 : eq(202, 48) : BOOL
214 : ite(213, 28, 50) : BV:8
215 : ite(212, 28, 214) : BV:8
216 : ite(211, 28, 215) : BV:8
217 : ite(210, 28, 216) : BV:8
218 : ite(209, 41, 217) : BV:8
219 : ite(208, 38, 218) : BV:8
220 : ite(207, 28, 219) : BV:8
221 : ite(206, 28, 220) : BV:8
222 : ite(205, 32, 221) : BV:8
223 : ite(204, 28, 222) : BV:8
224 : ite(203, 28, 223) : BV:8
225 : bvconcat(155, 178, 201, 224) : BV:32
226 : lambda(20, 225) : FUNCTION[BV:32 -> BV:32]
227 : map(19, 226) : MAP[BV:32 -> BV:32]
228 : sum(16, 17, 227) : SUM[UNIT,MAP[BV:32 -> BV:32]]
229 : sym_const(228) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4289Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4290Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
12 : eq(10, 11) : BOOL
13 : 0 { 0x0 } : BV:8
14 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
15 : eq(10, 14) : BOOL
16 : eq(10, 8) : BOOL
17 : 169 { 0xa9 -87 } : BV:8
18 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
19 : eq(10, 18) : BOOL
20 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
21 : eq(10, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(10, 22) : BOOL
24 : 127 { 0x7f } : BV:8
25 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
26 : eq(10, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
29 : eq(10, 28) : BOOL
30 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
31 : eq(10, 30) : BOOL
32 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
33 : eq(10, 32) : BOOL
34 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
35 : eq(10, 34) : BOOL
36 : 251 { 0xfb -5 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(33, 13, 37) : BV:8
39 : ite(31, 13, 38) : BV:8
40 : ite(29, 13, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(21, 13, 42) : BV:8
44 : ite(19, 13, 43) : BV:8
45 : ite(16, 17, 44) : BV:8
46 : ite(15, 13, 45) : BV:8
47 : ite(12, 13, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 9, 8) : BV:32
50 : eq(49, 11) : BOOL
51 : eq(49, 14) : BOOL
52 : eq(49, 8) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 20) : BOOL
55 : eq(49, 22) : BOOL
56 : eq(49, 25) : BOOL
57 : eq(49, 28) : BOOL
58 : eq(49, 30) : BOOL
59 : eq(49, 32) : BOOL
60 : eq(49, 34) : BOOL
61 : ite(60, 13, 36) : BV:8
62 : ite(59, 13, 61) : BV:8
63 : ite(58, 13, 62) : BV:8
64 : ite(57, 13, 63) : BV:8
65 : ite(56, 27, 64) : BV:8
66 : ite(55, 24, 65) : BV:8
67 : ite(54, 13, 66) : BV:8
68 : ite(53, 13, 67) : BV:8
69 : ite(52, 17, 68) : BV:8
70 : ite(51, 13, 69) : BV:8
71 : ite(50, 13, 70) : BV:8
72 : bvadd(22, 9, 8) : BV:32
73 : eq(72, 11) : BOOL
74 : eq(72, 14) : BOOL
75 : eq(72, 8) : BOOL
76 : eq(72, 18) : BOOL
77 : eq(72, 20) : BOOL
78 : eq(72, 22) : BOOL
79 : eq(72, 25) : BOOL
80 : eq(72, 28) : BOOL
81 : eq(72, 30) : BOOL
82 : eq(72, 32) : BOOL
83 : eq(72, 34) : BOOL
84 : ite(83, 13, 36) : BV:8
85 : ite(82, 13, 84) : BV:8
86 : ite(81, 13, 85) : BV:8
87 : ite(80, 13, 86) : BV:8
88 : ite(79, 27, 87) : BV:8
89 : ite(78, 24, 88) : BV:8
90 : ite(77, 13, 89) : BV:8
91 : ite(76, 13, 90) : BV:8
92 : ite(75, 17, 91) : BV:8
93 : ite(74, 13, 92) : BV:8
94 : ite(73, 13, 93) : BV:8
95 : bvadd(9, 8) : BV:32
96 : eq(95, 11) : BOOL
97 : eq(95, 14) : BOOL
98 : eq(95, 8) : BOOL
99 : eq(95, 18) : BOOL
100 : eq(95, 20) : BOOL
101 : eq(95, 22) : BOOL
102 : eq(95, 25) : BOOL
103 : eq(95, 28) : BOOL
104 : eq(95, 30) : BOOL
105 : eq(95, 32) : BOOL
106 : eq(95, 34) : BOOL
107 : ite(106, 13, 36) : BV:8
108 : ite(105, 13, 107) : BV:8
109 : ite(104, 13, 108) : BV:8
110 : ite(103, 13, 109) : BV:8
111 : ite(102, 27, 110) : BV:8
112 : ite(101, 24, 111) : BV:8
113 : ite(100, 13, 112) : BV:8
114 : ite(99, 13, 113) : BV:8
115 : ite(98, 17, 114) : BV:8
116 : ite(97, 13, 115) : BV:8
117 : ite(96, 13, 116) : BV:8
118 : bvconcat(47, 71, 94, 117) : BV:32
119 : bvadd(5, 7, 118) : BV:32
120 : eq(119, 11) : BOOL
121 : eq(119, 14) : BOOL
122 : eq(119, 8) : BOOL
123 : eq(119, 18) : BOOL
124 : eq(119, 20) : BOOL
125 : eq(119, 22) : BOOL
126 : eq(119, 25) : BOOL
127 : eq(119, 28) : BOOL
128 : eq(119, 30) : BOOL
129 : eq(119, 32) : BOOL
130 : eq(119, 34) : BOOL
131 : ite(130, 13, 36) : BV:8
132 : ite(129, 13, 131) : BV:8
133 : ite(128, 13, 132) : BV:8
134 : ite(127, 13, 133) : BV:8
135 : ite(126, 27, 134) : BV:8
136 : ite(125, 24, 135) : BV:8
137 : ite(124, 13, 136) : BV:8
138 : ite(123, 13, 137) : BV:8
139 : ite(122, 17, 138) : BV:8
140 : ite(121, 13, 139) : BV:8
141 : ite(120, 13, 140) : BV:8
142 : bvadd(48, 7, 118) : BV:32
143 : eq(142, 11) : BOOL
144 : eq(142, 14) : BOOL
145 : eq(142, 8) : BOOL
146 : eq(142, 18) : BOOL
147 : eq(142, 20) : BOOL
148 : eq(142, 22) : BOOL
149 : eq(142, 25) : BOOL
150 : eq(142, 28) : BOOL
151 : eq(142, 30) : BOOL
152 : eq(142, 32) : BOOL
153 : eq(142, 34) : BOOL
154 : ite(153, 13, 36) : BV:8
155 : ite(152, 13, 154) : BV:8
156 : ite(151, 13, 155) : BV:8
157 : ite(150, 13, 156) : BV:8
158 : ite(149, 27, 157) : BV:8
159 : ite(148, 24, 158) : BV:8
160 : ite(147, 13, 159) : BV:8
161 : ite(146, 13, 160) : BV:8
162 : ite(145, 17, 161) : BV:8
163 : ite(144, 13, 162) : BV:8
164 : ite(143, 13, 163) : BV:8
165 : bvadd(22, 7, 118) : BV:32
166 : eq(165, 11) : BOOL
167 : eq(165, 14) : BOOL
168 : eq(165, 8) : BOOL
169 : eq(165, 18) : BOOL
170 : eq(165, 20) : BOOL
171 : eq(165, 22) : BOOL
172 : eq(165, 25) : BOOL
173 : eq(165, 28) : BOOL
174 : eq(165, 30) : BOOL
175 : eq(165, 32) : BOOL
176 : eq(165, 34) : BOOL
177 : ite(176, 13, 36) : BV:8
178 : ite(175, 13, 177) : BV:8
179 : ite(174, 13, 178) : BV:8
180 : ite(173, 13, 179) : BV:8
181 : ite(172, 27, 180) : BV:8
182 : ite(171, 24, 181) : BV:8
183 : ite(170, 13, 182) : BV:8
184 : ite(169, 13, 183) : BV:8
185 : ite(168, 17, 184) : BV:8
186 : ite(167, 13, 185) : BV:8
187 : ite(166, 13, 186) : BV:8
188 : bvadd(7, 118) : BV:32
189 : eq(188, 11) : BOOL
190 : eq(188, 14) : BOOL
191 : eq(188, 8) : BOOL
192 : eq(188, 18) : BOOL
193 : eq(188, 20) : BOOL
194 : eq(188, 22) : BOOL
195 : eq(188, 25) : BOOL
196 : eq(188, 28) : BOOL
197 : eq(188, 30) : BOOL
198 : eq(188, 32) : BOOL
199 : eq(188, 34) : BOOL
200 : ite(199, 13, 36) : BV:8
201 : ite(198, 13, 200) : BV:8
202 : ite(197, 13, 201) : BV:8
203 : ite(196, 13, 202) : BV:8
204 : ite(195, 27, 203) : BV:8
205 : ite(194, 24, 204) : BV:8
206 : ite(193, 13, 205) : BV:8
207 : ite(192, 13, 206) : BV:8
208 : ite(191, 17, 207) : BV:8
209 : ite(190, 13, 208) : BV:8
210 : ite(189, 13, 209) : BV:8
211 : bvconcat(141, 164, 187, 210) : BV:32
212 : lambda(4, 211) : FUNCTION[BV:32 -> BV:32]
213 : map(3, 212) : MAP[BV:32 -> BV:32]
214 : sym_const(213) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 569850645 { 0x21f73b15 +1.93149054e196 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2761015700 { 0xa491c194 -1533951596 -1.13872003e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2761015703 { 0xa491c197 -1533951593 -1.13872039e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda891Var : BV:32
2 : Lambda892Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
13 : eq(8, 12) : BOOL
14 : eq(8, 7) : BOOL
15 : 169 { 0xa9 -87 } : BV:8
16 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(8, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
33 : eq(8, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(31, 11, 35) : BV:8
37 : ite(29, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 11, 40) : BV:8
42 : ite(17, 11, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 7) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 18) : BOOL
53 : eq(47, 20) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 11, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 22, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 15, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : bvadd(20, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 7) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 18) : BOOL
76 : eq(70, 20) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 28) : BOOL
80 : eq(70, 30) : BOOL
81 : eq(70, 32) : BOOL
82 : ite(81, 11, 34) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 22, 86) : BV:8
88 : ite(75, 11, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 7) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 18) : BOOL
99 : eq(93, 20) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 28) : BOOL
103 : eq(93, 30) : BOOL
104 : eq(93, 32) : BOOL
105 : ite(104, 11, 34) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 11, 106) : BV:8
108 : ite(101, 11, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 22, 109) : BV:8
111 : ite(98, 11, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 15, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(45, 69, 92, 115) : BV:32
117 : bvadd(3, 5, 116) : BV:32
118 : eq(117, 9) : BOOL
119 : eq(117, 12) : BOOL
120 : eq(117, 7) : BOOL
121 : eq(117, 16) : BOOL
122 : eq(117, 18) : BOOL
123 : eq(117, 20) : BOOL
124 : eq(117, 23) : BOOL
125 : eq(117, 26) : BOOL
126 : eq(117, 28) : BOOL
127 : eq(117, 30) : BOOL
128 : eq(117, 32) : BOOL
129 : ite(128, 11, 34) : BV:8
130 : ite(127, 11, 129) : BV:8
131 : ite(126, 11, 130) : BV:8
132 : ite(125, 11, 131) : BV:8
133 : ite(124, 25, 132) : BV:8
134 : ite(123, 22, 133) : BV:8
135 : ite(122, 11, 134) : BV:8
136 : ite(121, 11, 135) : BV:8
137 : ite(120, 15, 136) : BV:8
138 : ite(119, 11, 137) : BV:8
139 : ite(118, 11, 138) : BV:8
140 : bvadd(46, 5, 116) : BV:32
141 : eq(140, 9) : BOOL
142 : eq(140, 12) : BOOL
143 : eq(140, 7) : BOOL
144 : eq(140, 16) : BOOL
145 : eq(140, 18) : BOOL
146 : eq(140, 20) : BOOL
147 : eq(140, 23) : BOOL
148 : eq(140, 26) : BOOL
149 : eq(140, 28) : BOOL
150 : eq(140, 30) : BOOL
151 : eq(140, 32) : BOOL
152 : ite(151, 11, 34) : BV:8
153 : ite(150, 11, 152) : BV:8
154 : ite(149, 11, 153) : BV:8
155 : ite(148, 11, 154) : BV:8
156 : ite(147, 25, 155) : BV:8
157 : ite(146, 22, 156) : BV:8
158 : ite(145, 11, 157) : BV:8
159 : ite(144, 11, 158) : BV:8
160 : ite(143, 15, 159) : BV:8
161 : ite(142, 11, 160) : BV:8
162 : ite(141, 11, 161) : BV:8
163 : bvadd(20, 5, 116) : BV:32
164 : eq(163, 9) : BOOL
165 : eq(163, 12) : BOOL
166 : eq(163, 7) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 18) : BOOL
169 : eq(163, 20) : BOOL
170 : eq(163, 23) : BOOL
171 : eq(163, 26) : BOOL
172 : eq(163, 28) : BOOL
173 : eq(163, 30) : BOOL
174 : eq(163, 32) : BOOL
175 : ite(174, 11, 34) : BV:8
176 : ite(173, 11, 175) : BV:8
177 : ite(172, 11, 176) : BV:8
178 : ite(171, 11, 177) : BV:8
179 : ite(170, 25, 178) : BV:8
180 : ite(169, 22, 179) : BV:8
181 : ite(168, 11, 180) : BV:8
182 : ite(167, 11, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : ite(165, 11, 183) : BV:8
185 : ite(164, 11, 184) : BV:8
186 : bvadd(5, 116) : BV:32
187 : eq(186, 9) : BOOL
188 : eq(186, 12) : BOOL
189 : eq(186, 7) : BOOL
190 : eq(186, 16) : BOOL
191 : eq(186, 18) : BOOL
192 : eq(186, 20) : BOOL
193 : eq(186, 23) : BOOL
194 : eq(186, 26) : BOOL
195 : eq(186, 28) : BOOL
196 : eq(186, 30) : BOOL
197 : eq(186, 32) : BOOL
198 : ite(197, 11, 34) : BV:8
199 : ite(196, 11, 198) : BV:8
200 : ite(195, 11, 199) : BV:8
201 : ite(194, 11, 200) : BV:8
202 : ite(193, 25, 201) : BV:8
203 : ite(192, 22, 202) : BV:8
204 : ite(191, 11, 203) : BV:8
205 : ite(190, 11, 204) : BV:8
206 : ite(189, 15, 205) : BV:8
207 : ite(188, 11, 206) : BV:8
208 : ite(187, 11, 207) : BV:8
209 : bvconcat(139, 162, 185, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4211211258 ] -> true, [ 4211211259; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4211211258 ] -> true, [ 4211211259; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda901Var : BV:32
2 : Lambda902Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
13 : eq(8, 12) : BOOL
14 : eq(8, 7) : BOOL
15 : 169 { 0xa9 -87 } : BV:8
16 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(8, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
33 : eq(8, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(31, 11, 35) : BV:8
37 : ite(29, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 11, 40) : BV:8
42 : ite(17, 11, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 7) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 18) : BOOL
53 : eq(47, 20) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 11, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 22, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 15, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : bvadd(20, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 7) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 18) : BOOL
76 : eq(70, 20) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 28) : BOOL
80 : eq(70, 30) : BOOL
81 : eq(70, 32) : BOOL
82 : ite(81, 11, 34) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 22, 86) : BV:8
88 : ite(75, 11, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 7) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 18) : BOOL
99 : eq(93, 20) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 28) : BOOL
103 : eq(93, 30) : BOOL
104 : eq(93, 32) : BOOL
105 : ite(104, 11, 34) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 11, 106) : BV:8
108 : ite(101, 11, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 22, 109) : BV:8
111 : ite(98, 11, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 15, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(45, 69, 92, 115) : BV:32
117 : bvadd(3, 5, 116) : BV:32
118 : eq(117, 9) : BOOL
119 : eq(117, 12) : BOOL
120 : eq(117, 7) : BOOL
121 : eq(117, 16) : BOOL
122 : eq(117, 18) : BOOL
123 : eq(117, 20) : BOOL
124 : eq(117, 23) : BOOL
125 : eq(117, 26) : BOOL
126 : eq(117, 28) : BOOL
127 : eq(117, 30) : BOOL
128 : eq(117, 32) : BOOL
129 : ite(128, 11, 34) : BV:8
130 : ite(127, 11, 129) : BV:8
131 : ite(126, 11, 130) : BV:8
132 : ite(125, 11, 131) : BV:8
133 : ite(124, 25, 132) : BV:8
134 : ite(123, 22, 133) : BV:8
135 : ite(122, 11, 134) : BV:8
136 : ite(121, 11, 135) : BV:8
137 : ite(120, 15, 136) : BV:8
138 : ite(119, 11, 137) : BV:8
139 : ite(118, 11, 138) : BV:8
140 : bvadd(46, 5, 116) : BV:32
141 : eq(140, 9) : BOOL
142 : eq(140, 12) : BOOL
143 : eq(140, 7) : BOOL
144 : eq(140, 16) : BOOL
145 : eq(140, 18) : BOOL
146 : eq(140, 20) : BOOL
147 : eq(140, 23) : BOOL
148 : eq(140, 26) : BOOL
149 : eq(140, 28) : BOOL
150 : eq(140, 30) : BOOL
151 : eq(140, 32) : BOOL
152 : ite(151, 11, 34) : BV:8
153 : ite(150, 11, 152) : BV:8
154 : ite(149, 11, 153) : BV:8
155 : ite(148, 11, 154) : BV:8
156 : ite(147, 25, 155) : BV:8
157 : ite(146, 22, 156) : BV:8
158 : ite(145, 11, 157) : BV:8
159 : ite(144, 11, 158) : BV:8
160 : ite(143, 15, 159) : BV:8
161 : ite(142, 11, 160) : BV:8
162 : ite(141, 11, 161) : BV:8
163 : bvadd(20, 5, 116) : BV:32
164 : eq(163, 9) : BOOL
165 : eq(163, 12) : BOOL
166 : eq(163, 7) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 18) : BOOL
169 : eq(163, 20) : BOOL
170 : eq(163, 23) : BOOL
171 : eq(163, 26) : BOOL
172 : eq(163, 28) : BOOL
173 : eq(163, 30) : BOOL
174 : eq(163, 32) : BOOL
175 : ite(174, 11, 34) : BV:8
176 : ite(173, 11, 175) : BV:8
177 : ite(172, 11, 176) : BV:8
178 : ite(171, 11, 177) : BV:8
179 : ite(170, 25, 178) : BV:8
180 : ite(169, 22, 179) : BV:8
181 : ite(168, 11, 180) : BV:8
182 : ite(167, 11, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : ite(165, 11, 183) : BV:8
185 : ite(164, 11, 184) : BV:8
186 : bvadd(5, 116) : BV:32
187 : eq(186, 9) : BOOL
188 : eq(186, 12) : BOOL
189 : eq(186, 7) : BOOL
190 : eq(186, 16) : BOOL
191 : eq(186, 18) : BOOL
192 : eq(186, 20) : BOOL
193 : eq(186, 23) : BOOL
194 : eq(186, 26) : BOOL
195 : eq(186, 28) : BOOL
196 : eq(186, 30) : BOOL
197 : eq(186, 32) : BOOL
198 : ite(197, 11, 34) : BV:8
199 : ite(196, 11, 198) : BV:8
200 : ite(195, 11, 199) : BV:8
201 : ite(194, 11, 200) : BV:8
202 : ite(193, 25, 201) : BV:8
203 : ite(192, 22, 202) : BV:8
204 : ite(191, 11, 203) : BV:8
205 : ite(190, 11, 204) : BV:8
206 : ite(189, 15, 205) : BV:8
207 : ite(188, 11, 206) : BV:8
208 : ite(187, 11, 207) : BV:8
209 : bvconcat(139, 162, 185, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2534799433
=counter_example_end
=global nodece 6 num_edges_traversed 2
=global nodece 6 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 7
=global nodece 7 nodece z3v487.ce99.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3v487.ce99 6eb4e48df61dca8c1d2ed20a4da2015
=input.spec-%var-x-1
1 : Lambda1258Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1259Var : BV:32
11 : Lambda1260Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1261Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 171550847 ] -> 0, [ 171550848; 171550848 ] -> 1, [ 171550849; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 171550847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 171550848; 171550851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 171550852; 171944003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 171944004; 171944007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 171944008; 310237215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 310237216; 310237219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 310237220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 310237216 { 0x127dd820 +1.98315811e165 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 171944004 { 0xa3fa844 +1.49732255e149 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 712131944 { 0x2a724568 +1.89274311e213 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1258Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1259Var : BV:32
11 : Lambda1260Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1261Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 712131944 { 0x2a724568 +1.89274311e213 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 310237216 { 0x127dd820 +1.98315811e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 310237219 { 0x127dd823 +1.98315846e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 171944004 { 0xa3fa844 +1.49732255e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 171944007 { 0xa3fa847 +1.49732291e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 171550851 { 0xa39a883 +1.45045506e149 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1202Var : BV:32
2 : Lambda1203Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1210Var : BV:32
2 : Lambda1211Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2640874966
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce123.num_edges_traversed2
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce123 ff63798b3ee0936c90a5c37093e7f
=input.spec-%var-x-1
1 : Lambda1487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1488Var : BV:32
17 : Lambda1489Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1490Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
29 : eq(24, 28) : BOOL
30 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
31 : eq(24, 30) : BOOL
32 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4217Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4218Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
15 : eq(10, 14) : BOOL
16 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
17 : eq(10, 16) : BOOL
18 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 268659199 ] -> 0, [ 268659200; 268659203 ] -> 255, [ 268659204; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 440323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 440324; 440327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 440328; 8388867 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8388868; 8388871 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8388872; 268659199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268659200; 268659203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 268659204; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8388868 { 0x800104 +1.3099e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 440324 { 0x6b804 +1.5249071e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 664880861 { 0x27a146dd +1.25997507e208 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1488Var : BV:32
17 : Lambda1489Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1490Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
29 : eq(24, 28) : BOOL
30 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
31 : eq(24, 30) : BOOL
32 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda4207Var : BV:32
18 : lambda(17, 11) : FUNCTION[BV:32 -> BOOL]
19 : Lambda4208Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 1) : BV:32
24 : bvadd(20, 23, 1) : BV:32
25 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
29 : eq(24, 28) : BOOL
30 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
31 : eq(24, 30) : BOOL
32 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 1) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : bvadd(14, 23, 1) : BV:32
50 : eq(49, 25) : BOOL
51 : eq(49, 28) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 32) : BOOL
54 : ite(53, 27, 34) : BV:8
55 : ite(52, 27, 54) : BV:8
56 : ite(51, 27, 55) : BV:8
57 : ite(50, 27, 56) : BV:8
58 : bvadd(23, 1) : BV:32
59 : eq(58, 25) : BOOL
60 : eq(58, 28) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 32) : BOOL
63 : ite(62, 27, 34) : BV:8
64 : ite(61, 27, 63) : BV:8
65 : ite(60, 27, 64) : BV:8
66 : ite(59, 27, 65) : BV:8
67 : bvconcat(38, 48, 57, 66) : BV:32
68 : bvadd(20, 22, 67) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 30) : BOOL
72 : eq(68, 32) : BOOL
73 : ite(72, 27, 34) : BV:8
74 : ite(71, 27, 73) : BV:8
75 : ite(70, 27, 74) : BV:8
76 : ite(69, 27, 75) : BV:8
77 : bvadd(39, 22, 67) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 32) : BOOL
82 : ite(81, 27, 34) : BV:8
83 : ite(80, 27, 82) : BV:8
84 : ite(79, 27, 83) : BV:8
85 : ite(78, 27, 84) : BV:8
86 : bvadd(14, 22, 67) : BV:32
87 : eq(86, 25) : BOOL
88 : eq(86, 28) : BOOL
89 : eq(86, 30) : BOOL
90 : eq(86, 32) : BOOL
91 : ite(90, 27, 34) : BV:8
92 : ite(89, 27, 91) : BV:8
93 : ite(88, 27, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : bvadd(22, 67) : BV:32
96 : eq(95, 25) : BOOL
97 : eq(95, 28) : BOOL
98 : eq(95, 30) : BOOL
99 : eq(95, 32) : BOOL
100 : ite(99, 27, 34) : BV:8
101 : ite(98, 27, 100) : BV:8
102 : ite(97, 27, 101) : BV:8
103 : ite(96, 27, 102) : BV:8
104 : bvconcat(76, 85, 94, 103) : BV:32
105 : lambda(19, 104) : FUNCTION[BV:32 -> BV:32]
106 : map(18, 105) : MAP[BV:32 -> BV:32]
107 : sum(15, 16, 106) : SUM[UNIT,MAP[BV:32 -> BV:32]]
108 : sym_const(107) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4223Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda4224Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 8) : BV:32
11 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
12 : eq(10, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
15 : eq(10, 14) : BOOL
16 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
17 : eq(10, 16) : BOOL
18 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
19 : eq(10, 18) : BOOL
20 : 0 { 0x0 } : BV:8
21 : ite(19, 13, 20) : BV:8
22 : ite(17, 13, 21) : BV:8
23 : ite(15, 13, 22) : BV:8
24 : ite(12, 13, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 9, 8) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : eq(26, 16) : BOOL
30 : eq(26, 18) : BOOL
31 : ite(30, 13, 20) : BV:8
32 : ite(29, 13, 31) : BV:8
33 : ite(28, 13, 32) : BV:8
34 : ite(27, 13, 33) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 9, 8) : BV:32
37 : eq(36, 11) : BOOL
38 : eq(36, 14) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 18) : BOOL
41 : ite(40, 13, 20) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : bvadd(9, 8) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 16) : BOOL
49 : eq(45, 18) : BOOL
50 : ite(49, 13, 20) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : ite(47, 13, 51) : BV:8
53 : ite(46, 13, 52) : BV:8
54 : bvconcat(24, 34, 44, 53) : BV:32
55 : bvadd(5, 7, 54) : BV:32
56 : eq(55, 11) : BOOL
57 : eq(55, 14) : BOOL
58 : eq(55, 16) : BOOL
59 : eq(55, 18) : BOOL
60 : ite(59, 13, 20) : BV:8
61 : ite(58, 13, 60) : BV:8
62 : ite(57, 13, 61) : BV:8
63 : ite(56, 13, 62) : BV:8
64 : bvadd(25, 7, 54) : BV:32
65 : eq(64, 11) : BOOL
66 : eq(64, 14) : BOOL
67 : eq(64, 16) : BOOL
68 : eq(64, 18) : BOOL
69 : ite(68, 13, 20) : BV:8
70 : ite(67, 13, 69) : BV:8
71 : ite(66, 13, 70) : BV:8
72 : ite(65, 13, 71) : BV:8
73 : bvadd(35, 7, 54) : BV:32
74 : eq(73, 11) : BOOL
75 : eq(73, 14) : BOOL
76 : eq(73, 16) : BOOL
77 : eq(73, 18) : BOOL
78 : ite(77, 13, 20) : BV:8
79 : ite(76, 13, 78) : BV:8
80 : ite(75, 13, 79) : BV:8
81 : ite(74, 13, 80) : BV:8
82 : bvadd(7, 54) : BV:32
83 : eq(82, 11) : BOOL
84 : eq(82, 14) : BOOL
85 : eq(82, 16) : BOOL
86 : eq(82, 18) : BOOL
87 : ite(86, 13, 20) : BV:8
88 : ite(85, 13, 87) : BV:8
89 : ite(84, 13, 88) : BV:8
90 : ite(83, 13, 89) : BV:8
91 : bvconcat(63, 72, 81, 90) : BV:32
92 : lambda(4, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(3, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 664880861 { 0x27a146dd +1.25997507e208 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 440324 { 0x6b804 +1.5249071e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 440327 { 0x6b807 +1.5249106e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8388868 { 0x800104 +1.3099e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8388871 { 0x800107 +1.3135e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1427Var : BV:32
2 : Lambda1428Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
15 : eq(8, 14) : BOOL
16 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1437Var : BV:32
2 : Lambda1438Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
15 : eq(8, 14) : BOOL
16 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2464020496
=counter_example_end
=global nodece 8 num_edges_traversed 2
=global nodece 8 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 9
=global nodece 9 nodece z3v487.ce147.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce147 84e0202484f1951dba4b2d4ff1d5adc
=input.spec-%var-x-1
1 : Lambda1712Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1713Var : BV:32
11 : Lambda1714Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1715Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2114179 ] -> 0, [ 2114180; 2114183 ] -> 255, [ 2114184; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2114179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2114180; 2114183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2114184; 571886851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 571886852; 571886855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 571886856; 807216671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807216672; 807216675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807216676; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807216672 { 0x301d2620 +1.22772598e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 571886852 { 0x22164d04 +1.17422533e197 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 470490015 { 0x1c0b1b9f +1.8678042e185 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1712Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1713Var : BV:32
11 : Lambda1714Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1715Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 470490015 { 0x1c0b1b9f +1.8678042e185 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807216672 { 0x301d2620 +1.22772598e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807216675 { 0x301d2623 +1.22772634e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 571886852 { 0x22164d04 +1.17422533e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 571886855 { 0x22164d07 +1.17422568e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1656Var : BV:32
2 : Lambda1657Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1664Var : BV:32
2 : Lambda1665Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2543809887
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce171.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry)*(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce171 6d14aec7dfbcf6e1428c8624615e5f
=input.spec-%var-x-1
1 : Lambda1942Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1943Var : BV:32
18 : Lambda1944Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1945Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 128 { 0x80 -128 } : BV:8
64 : eq(60, 56) : BOOL
65 : 16 { 0x10 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 59, 2) : BV:32
71 : eq(70, 61) : BOOL
72 : eq(70, 56) : BOOL
73 : ite(72, 65, 66) : BV:8
74 : ite(71, 63, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 59, 2) : BV:32
77 : eq(76, 61) : BOOL
78 : eq(76, 56) : BOOL
79 : ite(78, 65, 66) : BV:8
80 : ite(77, 63, 79) : BV:8
81 : bvadd(59, 2) : BV:32
82 : eq(81, 61) : BOOL
83 : eq(81, 56) : BOOL
84 : ite(83, 65, 66) : BV:8
85 : ite(82, 63, 84) : BV:8
86 : bvconcat(68, 74, 80, 85) : BV:32
87 : bvadd(56, 58, 86) : BV:32
88 : eq(87, 61) : BOOL
89 : eq(87, 56) : BOOL
90 : ite(89, 65, 66) : BV:8
91 : ite(88, 63, 90) : BV:8
92 : bvadd(69, 58, 86) : BV:32
93 : eq(92, 61) : BOOL
94 : eq(92, 56) : BOOL
95 : ite(94, 65, 66) : BV:8
96 : ite(93, 63, 95) : BV:8
97 : bvadd(75, 58, 86) : BV:32
98 : eq(97, 61) : BOOL
99 : eq(97, 56) : BOOL
100 : ite(99, 65, 66) : BV:8
101 : ite(98, 63, 100) : BV:8
102 : bvadd(58, 86) : BV:32
103 : eq(102, 61) : BOOL
104 : eq(102, 56) : BOOL
105 : ite(104, 65, 66) : BV:8
106 : ite(103, 63, 105) : BV:8
107 : bvconcat(91, 96, 101, 106) : BV:32
108 : ite(55, 2, 107) : BV:32
109 : lambda(52, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(51, 109) : MAP[BV:32 -> BV:32]
111 : lambda(17, 110) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
112 : map(16, 111) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
113 : sym_const(112) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4151Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 268435457 { 0x10000001 +1.11e161 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4152Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
51 : eq(49, 50) : BOOL
52 : 128 { 0x80 -128 } : BV:8
53 : eq(49, 45) : BOOL
54 : 16 { 0x10 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 48, 2) : BV:32
60 : eq(59, 50) : BOOL
61 : eq(59, 45) : BOOL
62 : ite(61, 54, 55) : BV:8
63 : ite(60, 52, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 48, 2) : BV:32
66 : eq(65, 50) : BOOL
67 : eq(65, 45) : BOOL
68 : ite(67, 54, 55) : BV:8
69 : ite(66, 52, 68) : BV:8
70 : bvadd(48, 2) : BV:32
71 : eq(70, 50) : BOOL
72 : eq(70, 45) : BOOL
73 : ite(72, 54, 55) : BV:8
74 : ite(71, 52, 73) : BV:8
75 : bvconcat(57, 63, 69, 74) : BV:32
76 : bvadd(45, 47, 75) : BV:32
77 : eq(76, 50) : BOOL
78 : eq(76, 45) : BOOL
79 : ite(78, 54, 55) : BV:8
80 : ite(77, 52, 79) : BV:8
81 : bvadd(58, 47, 75) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 45) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : bvadd(64, 47, 75) : BV:32
87 : eq(86, 50) : BOOL
88 : eq(86, 45) : BOOL
89 : ite(88, 54, 55) : BV:8
90 : ite(87, 52, 89) : BV:8
91 : bvadd(47, 75) : BV:32
92 : eq(91, 50) : BOOL
93 : eq(91, 45) : BOOL
94 : ite(93, 54, 55) : BV:8
95 : ite(92, 52, 94) : BV:8
96 : bvconcat(80, 85, 90, 95) : BV:32
97 : ite(44, 2, 96) : BV:32
98 : lambda(41, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(40, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2 ] -> 0, [ 3; 3 ] -> 16, [ 4; 2147729418 ] -> 0, [ 2147729419; 2147729419 ] -> 128, [ 2147729420; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 134332483 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 134332484; 134332487 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 134332488; 2147729415 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147729416; 2147729419 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147729420; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147729416 { 0x8003c008 -2147237880 -1.2929782e129 } : BV:32
=input.dst.llvm-%m
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 134332484 { 0x801c044 +1.1367998e145 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1339827064 { 0x4fdc2378 +1.71983242e32 } : COUNT
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1942Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1943Var : BV:32
18 : Lambda1944Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda1945Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59, 2) : BV:32
61 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
62 : eq(60, 61) : BOOL
63 : 128 { 0x80 -128 } : BV:8
64 : eq(60, 56) : BOOL
65 : 16 { 0x10 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : 2 { 0x2 +1.23e129 } : BV:32
70 : bvadd(69, 59, 2) : BV:32
71 : eq(70, 61) : BOOL
72 : eq(70, 56) : BOOL
73 : ite(72, 65, 66) : BV:8
74 : ite(71, 63, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 59, 2) : BV:32
77 : eq(76, 61) : BOOL
78 : eq(76, 56) : BOOL
79 : ite(78, 65, 66) : BV:8
80 : ite(77, 63, 79) : BV:8
81 : bvadd(59, 2) : BV:32
82 : eq(81, 61) : BOOL
83 : eq(81, 56) : BOOL
84 : ite(83, 65, 66) : BV:8
85 : ite(82, 63, 84) : BV:8
86 : bvconcat(68, 74, 80, 85) : BV:32
87 : bvadd(56, 58, 86) : BV:32
88 : eq(87, 61) : BOOL
89 : eq(87, 56) : BOOL
90 : ite(89, 65, 66) : BV:8
91 : ite(88, 63, 90) : BV:8
92 : bvadd(69, 58, 86) : BV:32
93 : eq(92, 61) : BOOL
94 : eq(92, 56) : BOOL
95 : ite(94, 65, 66) : BV:8
96 : ite(93, 63, 95) : BV:8
97 : bvadd(75, 58, 86) : BV:32
98 : eq(97, 61) : BOOL
99 : eq(97, 56) : BOOL
100 : ite(99, 65, 66) : BV:8
101 : ite(98, 63, 100) : BV:8
102 : bvadd(58, 86) : BV:32
103 : eq(102, 61) : BOOL
104 : eq(102, 56) : BOOL
105 : ite(104, 65, 66) : BV:8
106 : ite(103, 63, 105) : BV:8
107 : bvconcat(91, 96, 101, 106) : BV:32
108 : ite(55, 2, 107) : BV:32
109 : lambda(52, 108) : FUNCTION[BV:32 -> BV:32]
110 : map(51, 109) : MAP[BV:32 -> BV:32]
111 : lambda(17, 110) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
112 : map(16, 111) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
113 : sym_const(112) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4141Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 268435457 { 0x10000001 +1.11e161 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4142Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54, 1) : BV:32
56 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
57 : eq(55, 56) : BOOL
58 : 128 { 0x80 -128 } : BV:8
59 : eq(55, 51) : BOOL
60 : 16 { 0x10 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(57, 58, 62) : BV:8
64 : 2 { 0x2 +1.23e129 } : BV:32
65 : bvadd(64, 54, 1) : BV:32
66 : eq(65, 56) : BOOL
67 : eq(65, 51) : BOOL
68 : ite(67, 60, 61) : BV:8
69 : ite(66, 58, 68) : BV:8
70 : bvadd(15, 54, 1) : BV:32
71 : eq(70, 56) : BOOL
72 : eq(70, 51) : BOOL
73 : ite(72, 60, 61) : BV:8
74 : ite(71, 58, 73) : BV:8
75 : bvadd(54, 1) : BV:32
76 : eq(75, 56) : BOOL
77 : eq(75, 51) : BOOL
78 : ite(77, 60, 61) : BV:8
79 : ite(76, 58, 78) : BV:8
80 : bvconcat(63, 69, 74, 79) : BV:32
81 : bvadd(51, 53, 80) : BV:32
82 : eq(81, 56) : BOOL
83 : eq(81, 51) : BOOL
84 : ite(83, 60, 61) : BV:8
85 : ite(82, 58, 84) : BV:8
86 : bvadd(64, 53, 80) : BV:32
87 : eq(86, 56) : BOOL
88 : eq(86, 51) : BOOL
89 : ite(88, 60, 61) : BV:8
90 : ite(87, 58, 89) : BV:8
91 : bvadd(15, 53, 80) : BV:32
92 : eq(91, 56) : BOOL
93 : eq(91, 51) : BOOL
94 : ite(93, 60, 61) : BV:8
95 : ite(92, 58, 94) : BV:8
96 : bvadd(53, 80) : BV:32
97 : eq(96, 56) : BOOL
98 : eq(96, 51) : BOOL
99 : ite(98, 60, 61) : BV:8
100 : ite(97, 58, 99) : BV:8
101 : bvconcat(85, 90, 95, 100) : BV:32
102 : ite(50, 1, 101) : BV:32
103 : lambda(47, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(46, 103) : MAP[BV:32 -> BV:32]
105 : sum(16, 17, 104) : SUM[UNIT,MAP[BV:32 -> BV:32]]
106 : sym_const(105) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4157Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 268435456 { 0x10000000 +1.0e161 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 268435457 { 0x10000001 +1.11e161 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4158Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48, 2) : BV:32
50 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
51 : eq(49, 50) : BOOL
52 : 128 { 0x80 -128 } : BV:8
53 : eq(49, 45) : BOOL
54 : 16 { 0x10 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 48, 2) : BV:32
60 : eq(59, 50) : BOOL
61 : eq(59, 45) : BOOL
62 : ite(61, 54, 55) : BV:8
63 : ite(60, 52, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 48, 2) : BV:32
66 : eq(65, 50) : BOOL
67 : eq(65, 45) : BOOL
68 : ite(67, 54, 55) : BV:8
69 : ite(66, 52, 68) : BV:8
70 : bvadd(48, 2) : BV:32
71 : eq(70, 50) : BOOL
72 : eq(70, 45) : BOOL
73 : ite(72, 54, 55) : BV:8
74 : ite(71, 52, 73) : BV:8
75 : bvconcat(57, 63, 69, 74) : BV:32
76 : bvadd(45, 47, 75) : BV:32
77 : eq(76, 50) : BOOL
78 : eq(76, 45) : BOOL
79 : ite(78, 54, 55) : BV:8
80 : ite(77, 52, 79) : BV:8
81 : bvadd(58, 47, 75) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 45) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : bvadd(64, 47, 75) : BV:32
87 : eq(86, 50) : BOOL
88 : eq(86, 45) : BOOL
89 : ite(88, 54, 55) : BV:8
90 : ite(87, 52, 89) : BV:8
91 : bvadd(47, 75) : BV:32
92 : eq(91, 50) : BOOL
93 : eq(91, 45) : BOOL
94 : ite(93, 54, 55) : BV:8
95 : ite(92, 52, 94) : BV:8
96 : bvconcat(80, 85, 90, 95) : BV:32
97 : ite(44, 2, 96) : BV:32
98 : lambda(41, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(40, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1339827064 { 0x4fdc2378 +1.71983242e32 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 134332484 { 0x801c044 +1.1367998e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 134332487 { 0x801c047 +1.1368033e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147729416 { 0x8003c008 -2147237880 -1.2929782e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1881Var : BV:32
2 : Lambda1882Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : eq(11, 7) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 10, 3) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 7) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 10, 3) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 7) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(10, 3) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 7) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(7, 9, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 9, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 7) : BOOL
46 : ite(45, 16, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 9, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 7) : BOOL
51 : ite(50, 16, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(9, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 7) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : ite(6, 3, 58) : BV:32
60 : lambda(1, 2, 59) : FUNCTION[BV:32,BV:32 -> BV:32]
61 : sym_const(60) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda1883Var : BV:32
2 : Lambda1884Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 268435457 { 0x10000001 +1.11e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda1892Var : BV:32
2 : Lambda1893Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 268435457 { 0x10000001 +1.11e161 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1896Var : BV:32
2 : Lambda1897Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10, 3) : BV:32
12 : 2147729419 { 0x8003c00b -2147237877 -1.2929818e129 } : BV:32
13 : eq(11, 12) : BOOL
14 : 128 { 0x80 -128 } : BV:8
15 : eq(11, 7) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(13, 14, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 10, 3) : BV:32
22 : eq(21, 12) : BOOL
23 : eq(21, 7) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 14, 24) : BV:8
26 : 1 { 0x1 +1.11e129 } : BV:32
27 : bvadd(26, 10, 3) : BV:32
28 : eq(27, 12) : BOOL
29 : eq(27, 7) : BOOL
30 : ite(29, 16, 17) : BV:8
31 : ite(28, 14, 30) : BV:8
32 : bvadd(10, 3) : BV:32
33 : eq(32, 12) : BOOL
34 : eq(32, 7) : BOOL
35 : ite(34, 16, 17) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : bvconcat(19, 25, 31, 36) : BV:32
38 : bvadd(7, 9, 37) : BV:32
39 : eq(38, 12) : BOOL
40 : eq(38, 7) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 14, 41) : BV:8
43 : bvadd(20, 9, 37) : BV:32
44 : eq(43, 12) : BOOL
45 : eq(43, 7) : BOOL
46 : ite(45, 16, 17) : BV:8
47 : ite(44, 14, 46) : BV:8
48 : bvadd(26, 9, 37) : BV:32
49 : eq(48, 12) : BOOL
50 : eq(48, 7) : BOOL
51 : ite(50, 16, 17) : BV:8
52 : ite(49, 14, 51) : BV:8
53 : bvadd(9, 37) : BV:32
54 : eq(53, 12) : BOOL
55 : eq(53, 7) : BOOL
56 : ite(55, 16, 17) : BV:8
57 : ite(54, 14, 56) : BV:8
58 : bvconcat(42, 47, 52, 57) : BV:32
59 : ite(6, 3, 58) : BV:32
60 : ite(6, 3, 59) : BV:32
61 : lambda(1, 2, 60) : FUNCTION[BV:32,BV:32 -> BV:32]
62 : sym_const(61) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2339900145
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce326.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce326 beb4986cbbbb9b8f8a2749208fc12960
=input.spec-%var-x-1
1 : Lambda3598Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3599Var : BV:32
18 : Lambda3600Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4097 { 0x1001 +1.48840e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3601Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 242 { 0xf2 -14 } : BV:8
82 : eq(79, 75) : BOOL
83 : 241 { 0xf1 -15 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 127 { 0x7f } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 253 { 0xfd -3 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda4103Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4096 { 0x1000 +1.48828e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 4097 { 0x1001 +1.48840e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4104Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 242, [ 1; 1 ] -> 127, [ 2; 2 ] -> 253, [ 3; 3 ] -> 241, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 408417167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 408417168; 408417171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 408417172; 2044707699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2044707700; 2044707703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2044707704; 3493055215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3493055216; 3493055219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3493055220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.llvm-%m
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3611Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3612Var : BV:32
18 : Lambda3613Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4095 { 0xfff +1.48816e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4096 { 0x1000 +1.48828e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4097 { 0x1001 +1.48840e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda3614Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 242 { 0xf2 -14 } : BV:8
63 : eq(60, 56) : BOOL
64 : 241 { 0xf1 -15 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 127 { 0x7f } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 253 { 0xfd -3 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda4093Var : BV:32
19 : bvule(1, 7) : BOOL
20 : and(8, 19) : BOOL
21 : 67108865 { 0x4000001 +1.11e137 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 10) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4095 { 0xfff +1.48816e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 4096 { 0x1000 +1.48828e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 4097 { 0x1001 +1.48840e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda4094Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 1) : BOOL
57 : 242 { 0xf2 -14 } : BV:8
58 : eq(55, 51) : BOOL
59 : 241 { 0xf1 -15 } : BV:8
60 : eq(55, 15) : BOOL
61 : 127 { 0x7f } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(55, 62) : BOOL
64 : 253 { 0xfd -3 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 59, 67) : BV:8
69 : ite(56, 57, 68) : BV:8
70 : bvadd(62, 54) : BV:32
71 : eq(70, 1) : BOOL
72 : eq(70, 51) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 57, 77) : BV:8
79 : bvadd(15, 54) : BV:32
80 : eq(79, 1) : BOOL
81 : eq(79, 51) : BOOL
82 : eq(79, 15) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 59, 85) : BV:8
87 : ite(80, 57, 86) : BV:8
88 : eq(54, 1) : BOOL
89 : eq(54, 51) : BOOL
90 : eq(54, 15) : BOOL
91 : eq(54, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 59, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(51, 53, 96) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 15) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 59, 103) : BV:8
105 : ite(98, 57, 104) : BV:8
106 : bvadd(62, 53, 96) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 51) : BOOL
109 : eq(106, 15) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 59, 112) : BV:8
114 : ite(107, 57, 113) : BV:8
115 : bvadd(15, 53, 96) : BV:32
116 : eq(115, 1) : BOOL
117 : eq(115, 51) : BOOL
118 : eq(115, 15) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 59, 121) : BV:8
123 : ite(116, 57, 122) : BV:8
124 : bvadd(53, 96) : BV:32
125 : eq(124, 1) : BOOL
126 : eq(124, 51) : BOOL
127 : eq(124, 15) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 59, 130) : BV:8
132 : ite(125, 57, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(50, 1, 133) : BV:32
135 : lambda(47, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(46, 135) : MAP[BV:32 -> BV:32]
137 : sum(16, 17, 136) : SUM[UNIT,MAP[BV:32 -> BV:32]]
138 : sym_const(137) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda4109Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 67108865 { 0x4000001 +1.11e137 } : BV:32
12 : bvule(11, 2) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(2, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4095 { 0xfff +1.48816e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 4096 { 0x1000 +1.48828e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 4097 { 0x1001 +1.48840e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 13) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda4110Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 242 { 0xf2 -14 } : BV:8
52 : eq(49, 45) : BOOL
53 : 241 { 0xf1 -15 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3493055216 { 0xd033caf0 -801912080 -1.40463066e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3493055219 { 0xd033caf3 -801912077 -1.40463101e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2044707700 { 0x79dfc374 +1.74815225e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2044707703 { 0x79dfc377 +1.74815261e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 408417168 { 0x1857f390 +1.68712043e177 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 408417171 { 0x1857f393 +1.68712079e177 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda3533Var : BV:32
2 : Lambda3534Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4095 { 0xfff +1.48816e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4096 { 0x1000 +1.48828e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 242 { 0xf2 -14 } : BV:8
55 : eq(52, 48) : BOOL
56 : 241 { 0xf1 -15 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 127 { 0x7f } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda3538Var : BV:32
2 : Lambda3539Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4096 { 0x1000 +1.48828e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4097 { 0x1001 +1.48840e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda3547Var : BV:32
2 : Lambda3548Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4095 { 0xfff +1.48816e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4096 { 0x1000 +1.48828e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4097 { 0x1001 +1.48840e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda3543Var : BV:32
2 : Lambda3544Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 242 { 0xf2 -14 } : BV:8
14 : eq(11, 7) : BOOL
15 : 241 { 0xf1 -15 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 127 { 0x7f } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 253 { 0xfd -3 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3458467281
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce327.num_edges_traversed0
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce327 b11d1c4ef26c20bdbc875ee3d34e8dec
=input.spec-%var-x-1
1 : Lambda3652Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3653Var : BV:32
18 : Lambda3654Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3655Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 1048579 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048580; 1048583 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048584; 33554439 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554440; 33554443 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 33554444; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda3669Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 31 { 0x1f +1.369e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32 { 0x20 +1.381e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3670Var : BV:32
18 : Lambda3671Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda3672Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 33554440 { 0x2000008 +1.95e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 33554443 { 0x200000b +1.131e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048583 { 0x100007 +1.12500083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 31 ] -> true, [ 32; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3293487391
=counter_example_end
=global nodece 12 num_edges_traversed 0
=global nodece 12 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce1824.num_edges_traversed1
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce1824 78785ba8a1566e6388425929886c43c6
=input.spec-%var-x-1
1 : Lambda11620Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11621Var : BV:32
18 : Lambda11622Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11623Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : bvmul(76, 17) : BV:32
79 : bvadd(75, 78) : BV:32
80 : eq(79, 2) : BOOL
81 : 13 { 0xd } : BV:8
82 : eq(79, 75) : BOOL
83 : 254 { 0xfe -2 } : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : eq(79, 84) : BOOL
86 : 255 { 0xff -1 } : BV:8
87 : 2 { 0x2 +1.23e129 } : BV:32
88 : eq(79, 87) : BOOL
89 : 159 { 0x9f -97 } : BV:8
90 : 0 { 0x0 } : BV:8
91 : ite(88, 89, 90) : BV:8
92 : ite(85, 86, 91) : BV:8
93 : ite(82, 83, 92) : BV:8
94 : ite(80, 81, 93) : BV:8
95 : bvadd(87, 78) : BV:32
96 : eq(95, 2) : BOOL
97 : eq(95, 75) : BOOL
98 : eq(95, 84) : BOOL
99 : eq(95, 87) : BOOL
100 : ite(99, 89, 90) : BV:8
101 : ite(98, 86, 100) : BV:8
102 : ite(97, 83, 101) : BV:8
103 : ite(96, 81, 102) : BV:8
104 : bvadd(84, 78) : BV:32
105 : eq(104, 2) : BOOL
106 : eq(104, 75) : BOOL
107 : eq(104, 84) : BOOL
108 : eq(104, 87) : BOOL
109 : ite(108, 89, 90) : BV:8
110 : ite(107, 86, 109) : BV:8
111 : ite(106, 83, 110) : BV:8
112 : ite(105, 81, 111) : BV:8
113 : eq(78, 2) : BOOL
114 : eq(78, 75) : BOOL
115 : eq(78, 84) : BOOL
116 : eq(78, 87) : BOOL
117 : ite(116, 89, 90) : BV:8
118 : ite(115, 86, 117) : BV:8
119 : ite(114, 83, 118) : BV:8
120 : ite(113, 81, 119) : BV:8
121 : bvconcat(94, 103, 112, 120) : BV:32
122 : bvadd(75, 77, 121) : BV:32
123 : eq(122, 2) : BOOL
124 : eq(122, 75) : BOOL
125 : eq(122, 84) : BOOL
126 : eq(122, 87) : BOOL
127 : ite(126, 89, 90) : BV:8
128 : ite(125, 86, 127) : BV:8
129 : ite(124, 83, 128) : BV:8
130 : ite(123, 81, 129) : BV:8
131 : bvadd(87, 77, 121) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 75) : BOOL
134 : eq(131, 84) : BOOL
135 : eq(131, 87) : BOOL
136 : ite(135, 89, 90) : BV:8
137 : ite(134, 86, 136) : BV:8
138 : ite(133, 83, 137) : BV:8
139 : ite(132, 81, 138) : BV:8
140 : bvadd(84, 77, 121) : BV:32
141 : eq(140, 2) : BOOL
142 : eq(140, 75) : BOOL
143 : eq(140, 84) : BOOL
144 : eq(140, 87) : BOOL
145 : ite(144, 89, 90) : BV:8
146 : ite(143, 86, 145) : BV:8
147 : ite(142, 83, 146) : BV:8
148 : ite(141, 81, 147) : BV:8
149 : bvadd(77, 121) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 75) : BOOL
152 : eq(149, 84) : BOOL
153 : eq(149, 87) : BOOL
154 : ite(153, 89, 90) : BV:8
155 : ite(152, 86, 154) : BV:8
156 : ite(151, 83, 155) : BV:8
157 : ite(150, 81, 156) : BV:8
158 : bvconcat(130, 139, 148, 157) : BV:32
159 : ite(55, 2, 158) : BV:32
160 : ite(74, 158, 159) : BV:32
161 : ite(55, 2, 160) : BV:32
162 : lambda(52, 161) : FUNCTION[BV:32 -> BV:32]
163 : map(51, 162) : MAP[BV:32 -> BV:32]
164 : lambda(17, 163) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
165 : map(16, 164) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
166 : sym_const(165) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16765Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 16385 { 0x4001 +1.195324e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 511 { 0x1ff +1.6091e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 512 { 0x200 +1.6103e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 513 { 0x201 +1.6115e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16766Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 13 { 0xd } : BV:8
52 : eq(49, 45) : BOOL
53 : 254 { 0xfe -2 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 159 { 0x9f -97 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 13, [ 1; 1 ] -> 255, [ 2; 2 ] -> 159, [ 3; 3 ] -> 254, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 708427843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 708427844; 708427847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 708427848; 1127837707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1127837708; 1127837711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1127837712; 3102617751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3102617752; 3102617755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3102617756; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.llvm-%m
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11633Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11634Var : BV:32
18 : Lambda11635Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 511 { 0x1ff +1.6091e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 512 { 0x200 +1.6103e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 513 { 0x201 +1.6115e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11636Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : bvmul(57, 17) : BV:32
60 : bvadd(56, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : 13 { 0xd } : BV:8
63 : eq(60, 56) : BOOL
64 : 254 { 0xfe -2 } : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : eq(60, 65) : BOOL
67 : 255 { 0xff -1 } : BV:8
68 : 2 { 0x2 +1.23e129 } : BV:32
69 : eq(60, 68) : BOOL
70 : 159 { 0x9f -97 } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(61, 62, 74) : BV:8
76 : bvadd(68, 59) : BV:32
77 : eq(76, 2) : BOOL
78 : eq(76, 56) : BOOL
79 : eq(76, 65) : BOOL
80 : eq(76, 68) : BOOL
81 : ite(80, 70, 71) : BV:8
82 : ite(79, 67, 81) : BV:8
83 : ite(78, 64, 82) : BV:8
84 : ite(77, 62, 83) : BV:8
85 : bvadd(65, 59) : BV:32
86 : eq(85, 2) : BOOL
87 : eq(85, 56) : BOOL
88 : eq(85, 65) : BOOL
89 : eq(85, 68) : BOOL
90 : ite(89, 70, 71) : BV:8
91 : ite(88, 67, 90) : BV:8
92 : ite(87, 64, 91) : BV:8
93 : ite(86, 62, 92) : BV:8
94 : eq(59, 2) : BOOL
95 : eq(59, 56) : BOOL
96 : eq(59, 65) : BOOL
97 : eq(59, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 62, 100) : BV:8
102 : bvconcat(75, 84, 93, 101) : BV:32
103 : bvadd(56, 58, 102) : BV:32
104 : eq(103, 2) : BOOL
105 : eq(103, 56) : BOOL
106 : eq(103, 65) : BOOL
107 : eq(103, 68) : BOOL
108 : ite(107, 70, 71) : BV:8
109 : ite(106, 67, 108) : BV:8
110 : ite(105, 64, 109) : BV:8
111 : ite(104, 62, 110) : BV:8
112 : bvadd(68, 58, 102) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 56) : BOOL
115 : eq(112, 65) : BOOL
116 : eq(112, 68) : BOOL
117 : ite(116, 70, 71) : BV:8
118 : ite(115, 67, 117) : BV:8
119 : ite(114, 64, 118) : BV:8
120 : ite(113, 62, 119) : BV:8
121 : bvadd(65, 58, 102) : BV:32
122 : eq(121, 2) : BOOL
123 : eq(121, 56) : BOOL
124 : eq(121, 65) : BOOL
125 : eq(121, 68) : BOOL
126 : ite(125, 70, 71) : BV:8
127 : ite(124, 67, 126) : BV:8
128 : ite(123, 64, 127) : BV:8
129 : ite(122, 62, 128) : BV:8
130 : bvadd(58, 102) : BV:32
131 : eq(130, 2) : BOOL
132 : eq(130, 56) : BOOL
133 : eq(130, 65) : BOOL
134 : eq(130, 68) : BOOL
135 : ite(134, 70, 71) : BV:8
136 : ite(133, 67, 135) : BV:8
137 : ite(132, 64, 136) : BV:8
138 : ite(131, 62, 137) : BV:8
139 : bvconcat(111, 120, 129, 138) : BV:32
140 : ite(55, 2, 139) : BV:32
141 : lambda(52, 140) : FUNCTION[BV:32 -> BV:32]
142 : map(51, 141) : MAP[BV:32 -> BV:32]
143 : lambda(17, 142) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
144 : map(16, 143) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
145 : sym_const(144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 16383 { 0x3fff +1.195300e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 16384 { 0x4000 +1.195312e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16755Var : BV:32
19 : 16385 { 0x4001 +1.195324e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 511 { 0x1ff +1.6091e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 512 { 0x200 +1.6103e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 513 { 0x201 +1.6115e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16756Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 47) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 1) : BOOL
57 : 13 { 0xd } : BV:8
58 : eq(55, 51) : BOOL
59 : 254 { 0xfe -2 } : BV:8
60 : eq(55, 15) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 2 { 0x2 +1.23e129 } : BV:32
63 : eq(55, 62) : BOOL
64 : 159 { 0x9f -97 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : ite(60, 61, 66) : BV:8
68 : ite(58, 59, 67) : BV:8
69 : ite(56, 57, 68) : BV:8
70 : bvadd(62, 54) : BV:32
71 : eq(70, 1) : BOOL
72 : eq(70, 51) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 62) : BOOL
75 : ite(74, 64, 65) : BV:8
76 : ite(73, 61, 75) : BV:8
77 : ite(72, 59, 76) : BV:8
78 : ite(71, 57, 77) : BV:8
79 : bvadd(15, 54) : BV:32
80 : eq(79, 1) : BOOL
81 : eq(79, 51) : BOOL
82 : eq(79, 15) : BOOL
83 : eq(79, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : ite(82, 61, 84) : BV:8
86 : ite(81, 59, 85) : BV:8
87 : ite(80, 57, 86) : BV:8
88 : eq(54, 1) : BOOL
89 : eq(54, 51) : BOOL
90 : eq(54, 15) : BOOL
91 : eq(54, 62) : BOOL
92 : ite(91, 64, 65) : BV:8
93 : ite(90, 61, 92) : BV:8
94 : ite(89, 59, 93) : BV:8
95 : ite(88, 57, 94) : BV:8
96 : bvconcat(69, 78, 87, 95) : BV:32
97 : bvadd(51, 53, 96) : BV:32
98 : eq(97, 1) : BOOL
99 : eq(97, 51) : BOOL
100 : eq(97, 15) : BOOL
101 : eq(97, 62) : BOOL
102 : ite(101, 64, 65) : BV:8
103 : ite(100, 61, 102) : BV:8
104 : ite(99, 59, 103) : BV:8
105 : ite(98, 57, 104) : BV:8
106 : bvadd(62, 53, 96) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 51) : BOOL
109 : eq(106, 15) : BOOL
110 : eq(106, 62) : BOOL
111 : ite(110, 64, 65) : BV:8
112 : ite(109, 61, 111) : BV:8
113 : ite(108, 59, 112) : BV:8
114 : ite(107, 57, 113) : BV:8
115 : bvadd(15, 53, 96) : BV:32
116 : eq(115, 1) : BOOL
117 : eq(115, 51) : BOOL
118 : eq(115, 15) : BOOL
119 : eq(115, 62) : BOOL
120 : ite(119, 64, 65) : BV:8
121 : ite(118, 61, 120) : BV:8
122 : ite(117, 59, 121) : BV:8
123 : ite(116, 57, 122) : BV:8
124 : bvadd(53, 96) : BV:32
125 : eq(124, 1) : BOOL
126 : eq(124, 51) : BOOL
127 : eq(124, 15) : BOOL
128 : eq(124, 62) : BOOL
129 : ite(128, 64, 65) : BV:8
130 : ite(127, 61, 129) : BV:8
131 : ite(126, 59, 130) : BV:8
132 : ite(125, 57, 131) : BV:8
133 : bvconcat(105, 114, 123, 132) : BV:32
134 : ite(50, 1, 133) : BV:32
135 : lambda(47, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(46, 135) : MAP[BV:32 -> BV:32]
137 : sum(16, 17, 136) : SUM[UNIT,MAP[BV:32 -> BV:32]]
138 : sym_const(137) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16771Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 16385 { 0x4001 +1.195324e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 511 { 0x1ff +1.6091e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 512 { 0x200 +1.6103e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 513 { 0x201 +1.6115e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16772Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 2) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 2) : BOOL
51 : 13 { 0xd } : BV:8
52 : eq(49, 45) : BOOL
53 : 254 { 0xfe -2 } : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 255 { 0xff -1 } : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : eq(49, 57) : BOOL
59 : 159 { 0x9f -97 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(55, 56, 61) : BV:8
63 : ite(52, 53, 62) : BV:8
64 : ite(50, 51, 63) : BV:8
65 : bvadd(57, 48) : BV:32
66 : eq(65, 2) : BOOL
67 : eq(65, 45) : BOOL
68 : eq(65, 54) : BOOL
69 : eq(65, 57) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 56, 70) : BV:8
72 : ite(67, 53, 71) : BV:8
73 : ite(66, 51, 72) : BV:8
74 : bvadd(54, 48) : BV:32
75 : eq(74, 2) : BOOL
76 : eq(74, 45) : BOOL
77 : eq(74, 54) : BOOL
78 : eq(74, 57) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 56, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : ite(75, 51, 81) : BV:8
83 : eq(48, 2) : BOOL
84 : eq(48, 45) : BOOL
85 : eq(48, 54) : BOOL
86 : eq(48, 57) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 56, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : ite(83, 51, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(45, 47, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 45) : BOOL
95 : eq(92, 54) : BOOL
96 : eq(92, 57) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 56, 97) : BV:8
99 : ite(94, 53, 98) : BV:8
100 : ite(93, 51, 99) : BV:8
101 : bvadd(57, 47, 91) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 45) : BOOL
104 : eq(101, 54) : BOOL
105 : eq(101, 57) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 56, 106) : BV:8
108 : ite(103, 53, 107) : BV:8
109 : ite(102, 51, 108) : BV:8
110 : bvadd(54, 47, 91) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 45) : BOOL
113 : eq(110, 54) : BOOL
114 : eq(110, 57) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 56, 115) : BV:8
117 : ite(112, 53, 116) : BV:8
118 : ite(111, 51, 117) : BV:8
119 : bvadd(47, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 45) : BOOL
122 : eq(119, 54) : BOOL
123 : eq(119, 57) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 56, 124) : BV:8
126 : ite(121, 53, 125) : BV:8
127 : ite(120, 51, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(44, 2, 128) : BV:32
130 : lambda(41, 129) : FUNCTION[BV:32 -> BV:32]
131 : map(40, 130) : MAP[BV:32 -> BV:32]
132 : sym_const(131) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3102617755 { 0xb8ee309b -1192349541 -1.86085832e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 708427847 { 0x2a39c047 +1.45118033e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1127837711 { 0x4339700f +1.44873225e7 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11550Var : BV:32
2 : Lambda11551Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 16383 { 0x3fff +1.195300e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 16385 { 0x4001 +1.195324e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 511 { 0x1ff +1.6091e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 512 { 0x200 +1.6103e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 513 { 0x201 +1.6115e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : bvmul(49, 1) : BV:32
52 : bvadd(48, 51) : BV:32
53 : eq(52, 3) : BOOL
54 : 13 { 0xd } : BV:8
55 : eq(52, 48) : BOOL
56 : 254 { 0xfe -2 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(52, 57) : BOOL
59 : 255 { 0xff -1 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(52, 60) : BOOL
62 : 159 { 0x9f -97 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : ite(53, 54, 66) : BV:8
68 : bvadd(60, 51) : BV:32
69 : eq(68, 3) : BOOL
70 : eq(68, 48) : BOOL
71 : eq(68, 57) : BOOL
72 : eq(68, 60) : BOOL
73 : ite(72, 62, 63) : BV:8
74 : ite(71, 59, 73) : BV:8
75 : ite(70, 56, 74) : BV:8
76 : ite(69, 54, 75) : BV:8
77 : bvadd(57, 51) : BV:32
78 : eq(77, 3) : BOOL
79 : eq(77, 48) : BOOL
80 : eq(77, 57) : BOOL
81 : eq(77, 60) : BOOL
82 : ite(81, 62, 63) : BV:8
83 : ite(80, 59, 82) : BV:8
84 : ite(79, 56, 83) : BV:8
85 : ite(78, 54, 84) : BV:8
86 : eq(51, 3) : BOOL
87 : eq(51, 48) : BOOL
88 : eq(51, 57) : BOOL
89 : eq(51, 60) : BOOL
90 : ite(89, 62, 63) : BV:8
91 : ite(88, 59, 90) : BV:8
92 : ite(87, 56, 91) : BV:8
93 : ite(86, 54, 92) : BV:8
94 : bvconcat(67, 76, 85, 93) : BV:32
95 : bvadd(48, 50, 94) : BV:32
96 : eq(95, 3) : BOOL
97 : eq(95, 48) : BOOL
98 : eq(95, 57) : BOOL
99 : eq(95, 60) : BOOL
100 : ite(99, 62, 63) : BV:8
101 : ite(98, 59, 100) : BV:8
102 : ite(97, 56, 101) : BV:8
103 : ite(96, 54, 102) : BV:8
104 : bvadd(60, 50, 94) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 48) : BOOL
107 : eq(104, 57) : BOOL
108 : eq(104, 60) : BOOL
109 : ite(108, 62, 63) : BV:8
110 : ite(107, 59, 109) : BV:8
111 : ite(106, 56, 110) : BV:8
112 : ite(105, 54, 111) : BV:8
113 : bvadd(57, 50, 94) : BV:32
114 : eq(113, 3) : BOOL
115 : eq(113, 48) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 60) : BOOL
118 : ite(117, 62, 63) : BV:8
119 : ite(116, 59, 118) : BV:8
120 : ite(115, 56, 119) : BV:8
121 : ite(114, 54, 120) : BV:8
122 : bvadd(50, 94) : BV:32
123 : eq(122, 3) : BOOL
124 : eq(122, 48) : BOOL
125 : eq(122, 57) : BOOL
126 : eq(122, 60) : BOOL
127 : ite(126, 62, 63) : BV:8
128 : ite(125, 59, 127) : BV:8
129 : ite(124, 56, 128) : BV:8
130 : ite(123, 54, 129) : BV:8
131 : bvconcat(103, 112, 121, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : ite(47, 131, 132) : BV:32
134 : ite(6, 3, 133) : BV:32
135 : lambda(1, 2, 134) : FUNCTION[BV:32,BV:32 -> BV:32]
136 : sym_const(135) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11555Var : BV:32
2 : Lambda11556Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16385 { 0x4001 +1.195324e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 16384 { 0x4000 +1.195312e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11564Var : BV:32
2 : Lambda11565Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16385 { 0x4001 +1.195324e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 16384 { 0x4000 +1.195312e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 511 { 0x1ff +1.6091e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 512 { 0x200 +1.6103e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 513 { 0x201 +1.6115e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11560Var : BV:32
2 : Lambda11561Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 13 { 0xd } : BV:8
14 : eq(11, 7) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 159 { 0x9f -97 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
341273175
=counter_example_end
=global nodece 13 num_edges_traversed 1
=global nodece 13 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce1825.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce1825 6d61f87f85d334874eae0757e1eb29d
=input.spec-%var-x-1
1 : Lambda11672Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11673Var : BV:32
18 : Lambda11674Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11675Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16813Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16814Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11685Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11686Var : BV:32
18 : Lambda11687Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11688Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16803Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 7 { 0x7 +1.83e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 9 { 0x9 +1.107e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16804Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(1, 47) : BOOL
52 : bvule(47, 29) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(32, 47) : BOOL
55 : bvule(47, 32) : BOOL
56 : and(54, 55) : BOOL
57 : bvule(36, 47) : BOOL
58 : bvule(47, 9) : BOOL
59 : and(57, 58) : BOOL
60 : ite(59, 36, 36) : BV:32
61 : ite(56, 32, 60) : BV:32
62 : ite(53, 1, 61) : BV:32
63 : eq(62, 1) : BOOL
64 : and(27, 63) : BOOL
65 : ite(64, 6, 12) : BOOL
66 : and(14, 65) : BOOL
67 : ite(50, 1, 1) : BV:32
68 : ite(66, 1, 67) : BV:32
69 : ite(50, 1, 68) : BV:32
70 : lambda(47, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(46, 70) : MAP[BV:32 -> BV:32]
72 : sum(16, 17, 71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
73 : sym_const(72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16819Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16820Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11571Var : BV:32
2 : Lambda11572Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11581Var : BV:32
2 : Lambda11582Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11585Var : BV:32
2 : Lambda11586Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4057320964
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce1866.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce1866 a2338881e92654844173fd81657e1ec1
=input.spec-%var-x-1
1 : Lambda11936Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11937Var : BV:32
18 : Lambda11938Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11939Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 10) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 41) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 52) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(37, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 13 { 0xd } : BV:8
81 : eq(78, 37) : BOOL
82 : 254 { 0xfe -2 } : BV:8
83 : eq(78, 34) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : eq(78, 41) : BOOL
86 : 159 { 0x9f -97 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(41, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 37) : BOOL
95 : eq(92, 34) : BOOL
96 : eq(92, 41) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(34, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 37) : BOOL
104 : eq(101, 34) : BOOL
105 : eq(101, 41) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 37) : BOOL
112 : eq(77, 34) : BOOL
113 : eq(77, 41) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(37, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 37) : BOOL
122 : eq(119, 34) : BOOL
123 : eq(119, 41) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(41, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 37) : BOOL
131 : eq(128, 34) : BOOL
132 : eq(128, 41) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(34, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 37) : BOOL
140 : eq(137, 34) : BOOL
141 : eq(137, 41) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 37) : BOOL
149 : eq(146, 34) : BOOL
150 : eq(146, 41) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(55, 2, 155) : BV:32
157 : ite(74, 155, 156) : BV:32
158 : ite(55, 2, 157) : BV:32
159 : lambda(52, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(51, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16867Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 16385 { 0x4001 +1.195324e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 9) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16868Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 41) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(24, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 13 { 0xd } : BV:8
51 : eq(48, 24) : BOOL
52 : 254 { 0xfe -2 } : BV:8
53 : eq(48, 21) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : eq(48, 28) : BOOL
56 : 159 { 0x9f -97 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(53, 54, 58) : BV:8
60 : ite(51, 52, 59) : BV:8
61 : ite(49, 50, 60) : BV:8
62 : bvadd(28, 47) : BV:32
63 : eq(62, 2) : BOOL
64 : eq(62, 24) : BOOL
65 : eq(62, 21) : BOOL
66 : eq(62, 28) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 54, 67) : BV:8
69 : ite(64, 52, 68) : BV:8
70 : ite(63, 50, 69) : BV:8
71 : bvadd(21, 47) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 24) : BOOL
74 : eq(71, 21) : BOOL
75 : eq(71, 28) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 54, 76) : BV:8
78 : ite(73, 52, 77) : BV:8
79 : ite(72, 50, 78) : BV:8
80 : eq(47, 2) : BOOL
81 : eq(47, 24) : BOOL
82 : eq(47, 21) : BOOL
83 : eq(47, 28) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 54, 84) : BV:8
86 : ite(81, 52, 85) : BV:8
87 : ite(80, 50, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(24, 46, 88) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 24) : BOOL
92 : eq(89, 21) : BOOL
93 : eq(89, 28) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 54, 94) : BV:8
96 : ite(91, 52, 95) : BV:8
97 : ite(90, 50, 96) : BV:8
98 : bvadd(28, 46, 88) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 24) : BOOL
101 : eq(98, 21) : BOOL
102 : eq(98, 28) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 54, 103) : BV:8
105 : ite(100, 52, 104) : BV:8
106 : ite(99, 50, 105) : BV:8
107 : bvadd(21, 46, 88) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 24) : BOOL
110 : eq(107, 21) : BOOL
111 : eq(107, 28) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 54, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 50, 114) : BV:8
116 : bvadd(46, 88) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 24) : BOOL
119 : eq(116, 21) : BOOL
120 : eq(116, 28) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 54, 121) : BV:8
123 : ite(118, 52, 122) : BV:8
124 : ite(117, 50, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(44, 2, 125) : BV:32
127 : lambda(41, 126) : FUNCTION[BV:32 -> BV:32]
128 : map(40, 127) : MAP[BV:32 -> BV:32]
129 : sym_const(128) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 13, [ 1; 1 ] -> 255, [ 2; 2 ] -> 159, [ 3; 3 ] -> 254, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 708427843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 708427844; 708427847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 708427848; 1127837707 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1127837708; 1127837711 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1127837712; 3102617751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3102617752; 3102617755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3102617756; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.llvm-%n
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11949Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11950Var : BV:32
18 : Lambda11951Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 16385 { 0x4001 +1.195324e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 3 { 0x3 +1.35e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 10) : BOOL
40 : and(38, 39) : BOOL
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 41) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11952Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 52) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(37, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 13 { 0xd } : BV:8
62 : eq(59, 37) : BOOL
63 : 254 { 0xfe -2 } : BV:8
64 : eq(59, 34) : BOOL
65 : 255 { 0xff -1 } : BV:8
66 : eq(59, 41) : BOOL
67 : 159 { 0x9f -97 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(41, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 37) : BOOL
76 : eq(73, 34) : BOOL
77 : eq(73, 41) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(34, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 37) : BOOL
85 : eq(82, 34) : BOOL
86 : eq(82, 41) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 37) : BOOL
93 : eq(58, 34) : BOOL
94 : eq(58, 41) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(37, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 37) : BOOL
103 : eq(100, 34) : BOOL
104 : eq(100, 41) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(41, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 37) : BOOL
112 : eq(109, 34) : BOOL
113 : eq(109, 41) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(34, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 37) : BOOL
121 : eq(118, 34) : BOOL
122 : eq(118, 41) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 37) : BOOL
130 : eq(127, 34) : BOOL
131 : eq(127, 41) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(55, 2, 136) : BV:32
138 : lambda(52, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(51, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 16383 { 0x3fff +1.195300e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 16384 { 0x4000 +1.195312e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16857Var : BV:32
19 : 16385 { 0x4001 +1.195324e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 15) : BOOL
30 : and(28, 29) : BOOL
31 : 3 { 0x3 +1.35e129 } : BV:32
32 : bvule(31, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvule(35, 18) : BOOL
37 : bvule(18, 35) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 1, 40) : BV:32
42 : eq(41, 1) : BOOL
43 : and(27, 42) : BOOL
44 : ite(43, 6, 12) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda16858Var : BV:32
47 : eq(1, 1) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : 4 { 0x4 +1.47e129 } : BV:32
51 : bvmul(50, 46) : BV:32
52 : bvmul(50, 1) : BV:32
53 : bvadd(31, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 13 { 0xd } : BV:8
56 : eq(53, 31) : BOOL
57 : 254 { 0xfe -2 } : BV:8
58 : eq(53, 15) : BOOL
59 : 255 { 0xff -1 } : BV:8
60 : eq(53, 35) : BOOL
61 : 159 { 0x9f -97 } : BV:8
62 : 0 { 0x0 } : BV:8
63 : ite(60, 61, 62) : BV:8
64 : ite(58, 59, 63) : BV:8
65 : ite(56, 57, 64) : BV:8
66 : ite(54, 55, 65) : BV:8
67 : bvadd(35, 52) : BV:32
68 : eq(67, 1) : BOOL
69 : eq(67, 31) : BOOL
70 : eq(67, 15) : BOOL
71 : eq(67, 35) : BOOL
72 : ite(71, 61, 62) : BV:8
73 : ite(70, 59, 72) : BV:8
74 : ite(69, 57, 73) : BV:8
75 : ite(68, 55, 74) : BV:8
76 : bvadd(15, 52) : BV:32
77 : eq(76, 1) : BOOL
78 : eq(76, 31) : BOOL
79 : eq(76, 15) : BOOL
80 : eq(76, 35) : BOOL
81 : ite(80, 61, 62) : BV:8
82 : ite(79, 59, 81) : BV:8
83 : ite(78, 57, 82) : BV:8
84 : ite(77, 55, 83) : BV:8
85 : eq(52, 1) : BOOL
86 : eq(52, 31) : BOOL
87 : eq(52, 15) : BOOL
88 : eq(52, 35) : BOOL
89 : ite(88, 61, 62) : BV:8
90 : ite(87, 59, 89) : BV:8
91 : ite(86, 57, 90) : BV:8
92 : ite(85, 55, 91) : BV:8
93 : bvconcat(66, 75, 84, 92) : BV:32
94 : bvadd(31, 51, 93) : BV:32
95 : eq(94, 1) : BOOL
96 : eq(94, 31) : BOOL
97 : eq(94, 15) : BOOL
98 : eq(94, 35) : BOOL
99 : ite(98, 61, 62) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 57, 100) : BV:8
102 : ite(95, 55, 101) : BV:8
103 : bvadd(35, 51, 93) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 31) : BOOL
106 : eq(103, 15) : BOOL
107 : eq(103, 35) : BOOL
108 : ite(107, 61, 62) : BV:8
109 : ite(106, 59, 108) : BV:8
110 : ite(105, 57, 109) : BV:8
111 : ite(104, 55, 110) : BV:8
112 : bvadd(15, 51, 93) : BV:32
113 : eq(112, 1) : BOOL
114 : eq(112, 31) : BOOL
115 : eq(112, 15) : BOOL
116 : eq(112, 35) : BOOL
117 : ite(116, 61, 62) : BV:8
118 : ite(115, 59, 117) : BV:8
119 : ite(114, 57, 118) : BV:8
120 : ite(113, 55, 119) : BV:8
121 : bvadd(51, 93) : BV:32
122 : eq(121, 1) : BOOL
123 : eq(121, 31) : BOOL
124 : eq(121, 15) : BOOL
125 : eq(121, 35) : BOOL
126 : ite(125, 61, 62) : BV:8
127 : ite(124, 59, 126) : BV:8
128 : ite(123, 57, 127) : BV:8
129 : ite(122, 55, 128) : BV:8
130 : bvconcat(102, 111, 120, 129) : BV:32
131 : ite(49, 1, 130) : BV:32
132 : lambda(46, 131) : FUNCTION[BV:32 -> BV:32]
133 : map(45, 132) : MAP[BV:32 -> BV:32]
134 : sum(16, 17, 133) : SUM[UNIT,MAP[BV:32 -> BV:32]]
135 : sym_const(134) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16873Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 16385 { 0x4001 +1.195324e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 3 { 0x3 +1.35e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 9) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 28) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16874Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 41) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(24, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 13 { 0xd } : BV:8
51 : eq(48, 24) : BOOL
52 : 254 { 0xfe -2 } : BV:8
53 : eq(48, 21) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : eq(48, 28) : BOOL
56 : 159 { 0x9f -97 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(53, 54, 58) : BV:8
60 : ite(51, 52, 59) : BV:8
61 : ite(49, 50, 60) : BV:8
62 : bvadd(28, 47) : BV:32
63 : eq(62, 2) : BOOL
64 : eq(62, 24) : BOOL
65 : eq(62, 21) : BOOL
66 : eq(62, 28) : BOOL
67 : ite(66, 56, 57) : BV:8
68 : ite(65, 54, 67) : BV:8
69 : ite(64, 52, 68) : BV:8
70 : ite(63, 50, 69) : BV:8
71 : bvadd(21, 47) : BV:32
72 : eq(71, 2) : BOOL
73 : eq(71, 24) : BOOL
74 : eq(71, 21) : BOOL
75 : eq(71, 28) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : ite(74, 54, 76) : BV:8
78 : ite(73, 52, 77) : BV:8
79 : ite(72, 50, 78) : BV:8
80 : eq(47, 2) : BOOL
81 : eq(47, 24) : BOOL
82 : eq(47, 21) : BOOL
83 : eq(47, 28) : BOOL
84 : ite(83, 56, 57) : BV:8
85 : ite(82, 54, 84) : BV:8
86 : ite(81, 52, 85) : BV:8
87 : ite(80, 50, 86) : BV:8
88 : bvconcat(61, 70, 79, 87) : BV:32
89 : bvadd(24, 46, 88) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 24) : BOOL
92 : eq(89, 21) : BOOL
93 : eq(89, 28) : BOOL
94 : ite(93, 56, 57) : BV:8
95 : ite(92, 54, 94) : BV:8
96 : ite(91, 52, 95) : BV:8
97 : ite(90, 50, 96) : BV:8
98 : bvadd(28, 46, 88) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 24) : BOOL
101 : eq(98, 21) : BOOL
102 : eq(98, 28) : BOOL
103 : ite(102, 56, 57) : BV:8
104 : ite(101, 54, 103) : BV:8
105 : ite(100, 52, 104) : BV:8
106 : ite(99, 50, 105) : BV:8
107 : bvadd(21, 46, 88) : BV:32
108 : eq(107, 2) : BOOL
109 : eq(107, 24) : BOOL
110 : eq(107, 21) : BOOL
111 : eq(107, 28) : BOOL
112 : ite(111, 56, 57) : BV:8
113 : ite(110, 54, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 50, 114) : BV:8
116 : bvadd(46, 88) : BV:32
117 : eq(116, 2) : BOOL
118 : eq(116, 24) : BOOL
119 : eq(116, 21) : BOOL
120 : eq(116, 28) : BOOL
121 : ite(120, 56, 57) : BV:8
122 : ite(119, 54, 121) : BV:8
123 : ite(118, 52, 122) : BV:8
124 : ite(117, 50, 123) : BV:8
125 : bvconcat(97, 106, 115, 124) : BV:32
126 : ite(44, 2, 125) : BV:32
127 : lambda(41, 126) : FUNCTION[BV:32 -> BV:32]
128 : map(40, 127) : MAP[BV:32 -> BV:32]
129 : sym_const(128) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3102617752 { 0xb8ee3098 -1192349544 -1.86085796e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3102617755 { 0xb8ee309b -1192349541 -1.86085832e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 708427844 { 0x2a39c044 +1.45117998e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 708427847 { 0x2a39c047 +1.45118033e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1127837708 { 0x4339700c +1.44873189e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1127837711 { 0x4339700f +1.44873225e7 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda11866Var : BV:32
2 : Lambda11867Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 16383 { 0x3fff +1.195300e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 16384 { 0x4000 +1.195312e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 16385 { 0x4001 +1.195324e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 3 { 0x3 +1.35e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 14) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 37) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(33, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 13 { 0xd } : BV:8
54 : eq(51, 33) : BOOL
55 : 254 { 0xfe -2 } : BV:8
56 : eq(51, 30) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : eq(51, 37) : BOOL
59 : 159 { 0x9f -97 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(37, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 33) : BOOL
68 : eq(65, 30) : BOOL
69 : eq(65, 37) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(30, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 33) : BOOL
77 : eq(74, 30) : BOOL
78 : eq(74, 37) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 33) : BOOL
85 : eq(50, 30) : BOOL
86 : eq(50, 37) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(33, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 33) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 37) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(37, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 33) : BOOL
104 : eq(101, 30) : BOOL
105 : eq(101, 37) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(30, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 33) : BOOL
113 : eq(110, 30) : BOOL
114 : eq(110, 37) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 33) : BOOL
122 : eq(119, 30) : BOOL
123 : eq(119, 37) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(47, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11871Var : BV:32
2 : Lambda11872Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16385 { 0x4001 +1.195324e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 16384 { 0x4000 +1.195312e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11880Var : BV:32
2 : Lambda11881Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 16385 { 0x4001 +1.195324e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 16384 { 0x4000 +1.195312e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 10) : BOOL
28 : and(26, 27) : BOOL
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 29) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11876Var : BV:32
2 : Lambda11877Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 13 { 0xd } : BV:8
14 : eq(11, 7) : BOOL
15 : 254 { 0xfe -2 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 159 { 0x9f -97 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
520629874
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 16
=global nodece 16 nodece z3v487.ce1867.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3v487.ce1867 51bd2d6c533a47df773b66fc53a41
=input.spec-%var-x-1
1 : Lambda11988Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11989Var : BV:32
18 : Lambda11990Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11991Var : BV:32
50 : lambda(49, 2) : FUNCTION[BV:32 -> BV:32]
51 : map(48, 50) : MAP[BV:32 -> BV:32]
52 : lambda(17, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(16, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16915Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16916Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12001Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12002Var : BV:32
18 : Lambda12003Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda12004Var : BV:32
50 : eq(17, 2) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : and(26, 24) : BOOL
54 : ite(53, 13, 13) : BOOL
55 : ite(21, 7, 54) : BOOL
56 : bvule(2, 49) : BOOL
57 : bvule(49, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(22, 49) : BOOL
60 : bvule(49, 10) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(8, 49) : BOOL
63 : bvule(49, 8) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 8, 8) : BV:32
66 : ite(61, 22, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(55, 70) : BOOL
72 : ite(52, 2, 2) : BV:32
73 : ite(71, 2, 72) : BV:32
74 : ite(52, 2, 73) : BV:32
75 : lambda(49, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(48, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : ite(14, 3, 1) : BV:32
16 : unit : UNIT
17 : Lambda16905Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvule(18, 1) : BOOL
20 : and(19, 10) : BOOL
21 : bvule(1, 7) : BOOL
22 : and(8, 21) : BOOL
23 : ite(22, 7, 7) : BV:32
24 : ite(20, 18, 23) : BV:32
25 : ite(5, 1, 24) : BV:32
26 : eq(25, 1) : BOOL
27 : bvule(1, 17) : BOOL
28 : bvule(17, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(18, 17) : BOOL
31 : bvule(17, 9) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(7, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 7, 7) : BV:32
37 : ite(32, 18, 36) : BV:32
38 : ite(29, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(26, 39) : BOOL
41 : ite(40, 6, 12) : BOOL
42 : lambda(17, 41) : FUNCTION[BV:32 -> BOOL]
43 : Lambda16906Var : BV:32
44 : eq(1, 1) : BOOL
45 : eq(43, 1) : BOOL
46 : and(44, 45) : BOOL
47 : bvule(1, 43) : BOOL
48 : bvule(43, 3) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 43) : BOOL
51 : bvule(43, 9) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(7, 43) : BOOL
54 : bvule(43, 7) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 7, 7) : BV:32
57 : ite(52, 18, 56) : BV:32
58 : ite(49, 1, 57) : BV:32
59 : eq(58, 1) : BOOL
60 : and(26, 59) : BOOL
61 : ite(60, 6, 12) : BOOL
62 : and(14, 61) : BOOL
63 : ite(46, 1, 1) : BV:32
64 : ite(62, 1, 63) : BV:32
65 : ite(46, 1, 64) : BV:32
66 : lambda(43, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(42, 66) : MAP[BV:32 -> BV:32]
68 : sum(15, 16, 67) : SUM[UNIT,MAP[BV:32 -> BV:32]]
69 : sym_const(68) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16921Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16922Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11887Var : BV:32
2 : Lambda11888Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11897Var : BV:32
2 : Lambda11898Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11901Var : BV:32
2 : Lambda11902Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 8) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(20, 2) : BOOL
33 : bvule(2, 14) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(12, 2) : BOOL
36 : bvule(2, 12) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 12, 12) : BV:32
39 : ite(34, 20, 38) : BV:32
40 : ite(31, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(28, 41) : BOOL
43 : ite(42, 11, 17) : BOOL
44 : and(19, 43) : BOOL
45 : ite(6, 3, 3) : BV:32
46 : ite(44, 3, 45) : BV:32
47 : ite(6, 3, 46) : BV:32
48 : lambda(1, 2, 47) : FUNCTION[BV:32,BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1453390321
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 17
=global nodece 17 nodece z3.ce1908.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce1908 303ee87c5b0f85f1badd2915b842f1
=input.spec-%var-x-1
1 : Lambda12252Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12253Var : BV:32
18 : Lambda12254Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 32769 { 0x8001 +1.390636e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda12255Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 4 { 0x4 } : BV:8
81 : eq(78, 74) : BOOL
82 : 190 { 0xbe -66 } : BV:8
83 : eq(78, 40) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(81, 82, 86) : BV:8
88 : ite(79, 80, 87) : BV:8
89 : bvadd(40, 77) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 74) : BOOL
92 : eq(89, 40) : BOOL
93 : ite(92, 84, 85) : BV:8
94 : ite(91, 82, 93) : BV:8
95 : ite(90, 80, 94) : BV:8
96 : bvadd(36, 77) : BV:32
97 : eq(96, 2) : BOOL
98 : eq(96, 74) : BOOL
99 : eq(96, 40) : BOOL
100 : ite(99, 84, 85) : BV:8
101 : ite(98, 82, 100) : BV:8
102 : ite(97, 80, 101) : BV:8
103 : eq(77, 2) : BOOL
104 : eq(77, 74) : BOOL
105 : eq(77, 40) : BOOL
106 : ite(105, 84, 85) : BV:8
107 : ite(104, 82, 106) : BV:8
108 : ite(103, 80, 107) : BV:8
109 : bvconcat(88, 95, 102, 108) : BV:32
110 : bvadd(74, 76, 109) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 74) : BOOL
113 : eq(110, 40) : BOOL
114 : ite(113, 84, 85) : BV:8
115 : ite(112, 82, 114) : BV:8
116 : ite(111, 80, 115) : BV:8
117 : bvadd(40, 76, 109) : BV:32
118 : eq(117, 2) : BOOL
119 : eq(117, 74) : BOOL
120 : eq(117, 40) : BOOL
121 : ite(120, 84, 85) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 80, 122) : BV:8
124 : bvadd(36, 76, 109) : BV:32
125 : eq(124, 2) : BOOL
126 : eq(124, 74) : BOOL
127 : eq(124, 40) : BOOL
128 : ite(127, 84, 85) : BV:8
129 : ite(126, 82, 128) : BV:8
130 : ite(125, 80, 129) : BV:8
131 : bvadd(76, 109) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 74) : BOOL
134 : eq(131, 40) : BOOL
135 : ite(134, 84, 85) : BV:8
136 : ite(133, 82, 135) : BV:8
137 : ite(132, 80, 136) : BV:8
138 : bvconcat(116, 123, 130, 137) : BV:32
139 : ite(54, 2, 138) : BV:32
140 : ite(73, 138, 139) : BV:32
141 : ite(54, 2, 140) : BV:32
142 : lambda(51, 141) : FUNCTION[BV:32 -> BV:32]
143 : map(50, 142) : MAP[BV:32 -> BV:32]
144 : lambda(17, 143) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
145 : map(16, 144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
146 : sym_const(145) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16969Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 32769 { 0x8001 +1.390636e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 32768 { 0x8000 +1.390625e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 9) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16970Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 4 { 0x4 } : BV:8
51 : eq(48, 44) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 27) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : ite(49, 50, 57) : BV:8
59 : bvadd(27, 47) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 44) : BOOL
62 : eq(59, 27) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 52, 63) : BV:8
65 : ite(60, 50, 64) : BV:8
66 : bvadd(23, 47) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 44) : BOOL
69 : eq(66, 27) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 52, 70) : BV:8
72 : ite(67, 50, 71) : BV:8
73 : eq(47, 2) : BOOL
74 : eq(47, 44) : BOOL
75 : eq(47, 27) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 52, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(44, 46, 79) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 44) : BOOL
83 : eq(80, 27) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : bvadd(27, 46, 79) : BV:32
88 : eq(87, 2) : BOOL
89 : eq(87, 44) : BOOL
90 : eq(87, 27) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 52, 91) : BV:8
93 : ite(88, 50, 92) : BV:8
94 : bvadd(23, 46, 79) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 44) : BOOL
97 : eq(94, 27) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 52, 98) : BV:8
100 : ite(95, 50, 99) : BV:8
101 : bvadd(46, 79) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 44) : BOOL
104 : eq(101, 27) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 52, 105) : BV:8
107 : ite(102, 50, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(43, 2, 108) : BV:32
110 : lambda(40, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(39, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 4, [ 1; 1 ] -> 0, [ 2; 2 ] -> 223, [ 3; 3 ] -> 190, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 161866995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 161866996; 161866999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 161867000; 544929879 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 544929880; 544929883 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 544929884; 3094983655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094983656; 3094983659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3094983660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3094983656 { 0xb879b3e8 -1199983640 -1.95080280e241 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 161866996 { 0x9a5e4f4 +1.29604959e148 } : BV:32
=input.dst.llvm-%n
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 544929880 { 0x207af858 +1.96070384e193 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12265Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12266Var : BV:32
18 : Lambda12267Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 32769 { 0x8001 +1.390636e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda12268Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 4 { 0x4 } : BV:8
62 : eq(59, 55) : BOOL
63 : 190 { 0xbe -66 } : BV:8
64 : eq(59, 40) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : ite(60, 61, 68) : BV:8
70 : bvadd(40, 58) : BV:32
71 : eq(70, 2) : BOOL
72 : eq(70, 55) : BOOL
73 : eq(70, 40) : BOOL
74 : ite(73, 65, 66) : BV:8
75 : ite(72, 63, 74) : BV:8
76 : ite(71, 61, 75) : BV:8
77 : bvadd(36, 58) : BV:32
78 : eq(77, 2) : BOOL
79 : eq(77, 55) : BOOL
80 : eq(77, 40) : BOOL
81 : ite(80, 65, 66) : BV:8
82 : ite(79, 63, 81) : BV:8
83 : ite(78, 61, 82) : BV:8
84 : eq(58, 2) : BOOL
85 : eq(58, 55) : BOOL
86 : eq(58, 40) : BOOL
87 : ite(86, 65, 66) : BV:8
88 : ite(85, 63, 87) : BV:8
89 : ite(84, 61, 88) : BV:8
90 : bvconcat(69, 76, 83, 89) : BV:32
91 : bvadd(55, 57, 90) : BV:32
92 : eq(91, 2) : BOOL
93 : eq(91, 55) : BOOL
94 : eq(91, 40) : BOOL
95 : ite(94, 65, 66) : BV:8
96 : ite(93, 63, 95) : BV:8
97 : ite(92, 61, 96) : BV:8
98 : bvadd(40, 57, 90) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 55) : BOOL
101 : eq(98, 40) : BOOL
102 : ite(101, 65, 66) : BV:8
103 : ite(100, 63, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : bvadd(36, 57, 90) : BV:32
106 : eq(105, 2) : BOOL
107 : eq(105, 55) : BOOL
108 : eq(105, 40) : BOOL
109 : ite(108, 65, 66) : BV:8
110 : ite(107, 63, 109) : BV:8
111 : ite(106, 61, 110) : BV:8
112 : bvadd(57, 90) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 55) : BOOL
115 : eq(112, 40) : BOOL
116 : ite(115, 65, 66) : BV:8
117 : ite(114, 63, 116) : BV:8
118 : ite(113, 61, 117) : BV:8
119 : bvconcat(97, 104, 111, 118) : BV:32
120 : ite(54, 2, 119) : BV:32
121 : lambda(51, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(50, 121) : MAP[BV:32 -> BV:32]
123 : lambda(17, 122) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
124 : map(16, 123) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
125 : sym_const(124) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 32767 { 0x7fff +1.390613e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 32768 { 0x8000 +1.390625e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16959Var : BV:32
19 : 32769 { 0x8001 +1.390636e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16960Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : 3 { 0x3 +1.35e129 } : BV:32
50 : 4 { 0x4 +1.47e129 } : BV:32
51 : bvmul(50, 45) : BV:32
52 : bvmul(50, 1) : BV:32
53 : bvadd(49, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 4 { 0x4 } : BV:8
56 : eq(53, 49) : BOOL
57 : 190 { 0xbe -66 } : BV:8
58 : eq(53, 34) : BOOL
59 : 223 { 0xdf -33 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : bvadd(34, 52) : BV:32
65 : eq(64, 1) : BOOL
66 : eq(64, 49) : BOOL
67 : eq(64, 34) : BOOL
68 : ite(67, 59, 60) : BV:8
69 : ite(66, 57, 68) : BV:8
70 : ite(65, 55, 69) : BV:8
71 : bvadd(15, 52) : BV:32
72 : eq(71, 1) : BOOL
73 : eq(71, 49) : BOOL
74 : eq(71, 34) : BOOL
75 : ite(74, 59, 60) : BV:8
76 : ite(73, 57, 75) : BV:8
77 : ite(72, 55, 76) : BV:8
78 : eq(52, 1) : BOOL
79 : eq(52, 49) : BOOL
80 : eq(52, 34) : BOOL
81 : ite(80, 59, 60) : BV:8
82 : ite(79, 57, 81) : BV:8
83 : ite(78, 55, 82) : BV:8
84 : bvconcat(63, 70, 77, 83) : BV:32
85 : bvadd(49, 51, 84) : BV:32
86 : eq(85, 1) : BOOL
87 : eq(85, 49) : BOOL
88 : eq(85, 34) : BOOL
89 : ite(88, 59, 60) : BV:8
90 : ite(87, 57, 89) : BV:8
91 : ite(86, 55, 90) : BV:8
92 : bvadd(34, 51, 84) : BV:32
93 : eq(92, 1) : BOOL
94 : eq(92, 49) : BOOL
95 : eq(92, 34) : BOOL
96 : ite(95, 59, 60) : BV:8
97 : ite(94, 57, 96) : BV:8
98 : ite(93, 55, 97) : BV:8
99 : bvadd(15, 51, 84) : BV:32
100 : eq(99, 1) : BOOL
101 : eq(99, 49) : BOOL
102 : eq(99, 34) : BOOL
103 : ite(102, 59, 60) : BV:8
104 : ite(101, 57, 103) : BV:8
105 : ite(100, 55, 104) : BV:8
106 : bvadd(51, 84) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 49) : BOOL
109 : eq(106, 34) : BOOL
110 : ite(109, 59, 60) : BV:8
111 : ite(108, 57, 110) : BV:8
112 : ite(107, 55, 111) : BV:8
113 : bvconcat(91, 98, 105, 112) : BV:32
114 : ite(48, 1, 113) : BV:32
115 : lambda(45, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(44, 115) : MAP[BV:32 -> BV:32]
117 : sum(16, 17, 116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
118 : sym_const(117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16975Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 32769 { 0x8001 +1.390636e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 32768 { 0x8000 +1.390625e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 9) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16976Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 4 { 0x4 } : BV:8
51 : eq(48, 44) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 27) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : ite(49, 50, 57) : BV:8
59 : bvadd(27, 47) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 44) : BOOL
62 : eq(59, 27) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 52, 63) : BV:8
65 : ite(60, 50, 64) : BV:8
66 : bvadd(23, 47) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 44) : BOOL
69 : eq(66, 27) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 52, 70) : BV:8
72 : ite(67, 50, 71) : BV:8
73 : eq(47, 2) : BOOL
74 : eq(47, 44) : BOOL
75 : eq(47, 27) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 52, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(44, 46, 79) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 44) : BOOL
83 : eq(80, 27) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : bvadd(27, 46, 79) : BV:32
88 : eq(87, 2) : BOOL
89 : eq(87, 44) : BOOL
90 : eq(87, 27) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 52, 91) : BV:8
93 : ite(88, 50, 92) : BV:8
94 : bvadd(23, 46, 79) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 44) : BOOL
97 : eq(94, 27) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 52, 98) : BV:8
100 : ite(95, 50, 99) : BV:8
101 : bvadd(46, 79) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 44) : BOOL
104 : eq(101, 27) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 52, 105) : BV:8
107 : ite(102, 50, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(43, 2, 108) : BV:32
110 : lambda(40, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(39, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 161866996 { 0x9a5e4f4 +1.29604959e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 161866999 { 0x9a5e4f7 +1.29604995e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 544929880 { 0x207af858 +1.96070384e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 544929883 { 0x207af85b +1.96070420e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3094983656 { 0xb879b3e8 -1199983640 -1.95080280e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3094983659 { 0xb879b3eb -1199983637 -1.95080316e241 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12182Var : BV:32
2 : Lambda12183Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 32767 { 0x7fff +1.390613e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 32768 { 0x8000 +1.390625e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 32769 { 0x8001 +1.390636e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 4 { 0x4 } : BV:8
54 : eq(51, 47) : BOOL
55 : 190 { 0xbe -66 } : BV:8
56 : eq(51, 36) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(54, 55, 59) : BV:8
61 : ite(52, 53, 60) : BV:8
62 : bvadd(36, 50) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 47) : BOOL
65 : eq(62, 36) : BOOL
66 : ite(65, 57, 58) : BV:8
67 : ite(64, 55, 66) : BV:8
68 : ite(63, 53, 67) : BV:8
69 : bvadd(32, 50) : BV:32
70 : eq(69, 3) : BOOL
71 : eq(69, 47) : BOOL
72 : eq(69, 36) : BOOL
73 : ite(72, 57, 58) : BV:8
74 : ite(71, 55, 73) : BV:8
75 : ite(70, 53, 74) : BV:8
76 : eq(50, 3) : BOOL
77 : eq(50, 47) : BOOL
78 : eq(50, 36) : BOOL
79 : ite(78, 57, 58) : BV:8
80 : ite(77, 55, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : bvconcat(61, 68, 75, 81) : BV:32
83 : bvadd(47, 49, 82) : BV:32
84 : eq(83, 3) : BOOL
85 : eq(83, 47) : BOOL
86 : eq(83, 36) : BOOL
87 : ite(86, 57, 58) : BV:8
88 : ite(85, 55, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : bvadd(36, 49, 82) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 47) : BOOL
93 : eq(90, 36) : BOOL
94 : ite(93, 57, 58) : BV:8
95 : ite(92, 55, 94) : BV:8
96 : ite(91, 53, 95) : BV:8
97 : bvadd(32, 49, 82) : BV:32
98 : eq(97, 3) : BOOL
99 : eq(97, 47) : BOOL
100 : eq(97, 36) : BOOL
101 : ite(100, 57, 58) : BV:8
102 : ite(99, 55, 101) : BV:8
103 : ite(98, 53, 102) : BV:8
104 : bvadd(49, 82) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 47) : BOOL
107 : eq(104, 36) : BOOL
108 : ite(107, 57, 58) : BV:8
109 : ite(106, 55, 108) : BV:8
110 : ite(105, 53, 109) : BV:8
111 : bvconcat(89, 96, 103, 110) : BV:32
112 : ite(6, 3, 111) : BV:32
113 : ite(46, 111, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12187Var : BV:32
2 : Lambda12188Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32769 { 0x8001 +1.390636e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 32768 { 0x8000 +1.390625e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12196Var : BV:32
2 : Lambda12197Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32769 { 0x8001 +1.390636e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 32768 { 0x8000 +1.390625e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12192Var : BV:32
2 : Lambda12193Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 4 { 0x4 } : BV:8
14 : eq(11, 7) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 223 { 0xdf -33 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(12, 13, 21) : BV:8
23 : bvadd(16, 10) : BV:32
24 : eq(23, 3) : BOOL
25 : eq(23, 7) : BOOL
26 : eq(23, 16) : BOOL
27 : ite(26, 18, 19) : BV:8
28 : ite(25, 15, 27) : BV:8
29 : ite(24, 13, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 10) : BV:32
32 : eq(31, 3) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 16) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 15, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 3) : BOOL
39 : eq(10, 7) : BOOL
40 : eq(10, 16) : BOOL
41 : ite(40, 18, 19) : BV:8
42 : ite(39, 15, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(22, 29, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 7) : BOOL
48 : eq(45, 16) : BOOL
49 : ite(48, 18, 19) : BV:8
50 : ite(47, 15, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(16, 9, 44) : BV:32
53 : eq(52, 3) : BOOL
54 : eq(52, 7) : BOOL
55 : eq(52, 16) : BOOL
56 : ite(55, 18, 19) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(30, 9, 44) : BV:32
60 : eq(59, 3) : BOOL
61 : eq(59, 7) : BOOL
62 : eq(59, 16) : BOOL
63 : ite(62, 18, 19) : BV:8
64 : ite(61, 15, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 3) : BOOL
68 : eq(66, 7) : BOOL
69 : eq(66, 16) : BOOL
70 : ite(69, 18, 19) : BV:8
71 : ite(68, 15, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1666922080
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 18
=global nodece 18 nodece z3.ce1950.num_edges_traversed1
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce1950 f5a436158131b24d71cbaba160cb427c
=input.spec-%var-x-1
1 : Lambda12672Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12673Var : BV:32
18 : Lambda12674Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12675Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17493Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17494Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12685Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12686Var : BV:32
18 : Lambda12687Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12688Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda17483Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda17484Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17499Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17500Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12602Var : BV:32
2 : Lambda12603Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12607Var : BV:32
2 : Lambda12608Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12616Var : BV:32
2 : Lambda12617Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12612Var : BV:32
2 : Lambda12613Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2510307781
=counter_example_end
=global nodece 18 num_edges_traversed 1
=global nodece 18 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 19
=global nodece 19 nodece z3v487.ce3247.num_edges_traversed0
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce3247 32a3f173ee58f339f48d14f181749057
=input.spec-%var-x-1
1 : Lambda26395Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26396Var : BV:32
18 : Lambda26397Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26398Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26428Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26429Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1709676611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1709676612; 1709676615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1709676616; 2147485311 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147485312; 2147485315 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147485316; 2148054647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2148054648; 2148054651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2148054652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2148054648 { 0x8008b678 -2146912648 -1.6806850e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147485312 { 0x80000680 -2147481984 -1.19836e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1709676612 { 0x65e79844 +1.80933427e76 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26420Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26421Var : BV:32
18 : Lambda26422Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26423Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda26405Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda26406Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26434Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26435Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147485312 { 0x80000680 -2147481984 -1.19836e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147485315 { 0x80000683 -2147481981 -1.19872e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1709676612 { 0x65e79844 +1.80933427e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1709676615 { 0x65e79847 +1.80933463e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2148054648 { 0x8008b678 -2146912648 -1.6806850e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2148054651 { 0x8008b67b -2146912645 -1.6806886e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3487087505
=counter_example_end
=global nodece 19 num_edges_traversed 0
=global nodece 19 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 20
=global nodece 20 nodece z3.ce3248.num_edges_traversed0
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce3248 b732887ba87efa3fa198140bb9aa8bd
=input.spec-%var-x-1
1 : Lambda26487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26488Var : BV:32
18 : Lambda26489Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26490Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26520Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26521Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1406444491 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1406444492; 1406444495 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1406444496; 2548826111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2548826112; 2548826115 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2548826116; 2895236383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2895236384; 2895236387 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2895236388; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2548826112 { 0x97ec0000 -1746141184 -1.84375000e176 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1406444492 { 0x53d4a3cc +1.66124868e40 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2895236384 { 0xac91cd20 -1399730912 -1.13907241e218 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26512Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26513Var : BV:32
18 : Lambda26514Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26515Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2 { 0x2 +1.23e129 } : BV:32
2 : unit : UNIT
3 : Lambda26497Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda26498Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26526Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda26527Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1406444492 { 0x53d4a3cc +1.66124868e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1406444495 { 0x53d4a3cf +1.66124904e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2895236384 { 0xac91cd20 -1399730912 -1.13907241e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2895236387 { 0xac91cd23 -1399730909 -1.13907277e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2548826112 { 0x97ec0000 -1746141184 -1.84375000e176 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2548826115 { 0x97ec0003 -1746141181 -1.84375035e176 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2273524265
=counter_example_end
=global nodece 20 num_edges_traversed 0
=global nodece 20 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 21
=global nodece 21 nodece z3v487.ce3340.num_edges_traversed4
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce3340 b88621bb39b7481c65ec3cd586d62f
=input.spec-%var-x-1
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26666Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26667Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 6) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : bvadd(8, 9, 6) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 6) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 11) : BOOL
44 : eq(42, 14) : BOOL
45 : ite(44, 16, 17) : BV:8
46 : ite(43, 13, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 11) : BOOL
49 : eq(47, 14) : BOOL
50 : ite(49, 16, 17) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 11) : BOOL
54 : eq(52, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 419430463 ] -> 0, [ 419430464; 419430464 ] -> 4, [ 419430465; 508821510 ] -> 0, [ 508821511; 508821511 ] -> 16, [ 508821512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65796; 65799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 65800; 419430463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 419430464; 419430467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 419430468; 508821507 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 508821508; 508821511 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 508821512; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : ite(15, 2, 1) : BV:32
17 : unit : UNIT
18 : Lambda26656Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26657Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 2) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : bvadd(2, 24, 22) : BV:32
42 : eq(41, 26) : BOOL
43 : eq(41, 29) : BOOL
44 : ite(43, 31, 32) : BV:8
45 : ite(42, 28, 44) : BV:8
46 : bvadd(24, 22) : BV:32
47 : eq(46, 26) : BOOL
48 : eq(46, 29) : BOOL
49 : ite(48, 31, 32) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : bvconcat(34, 40, 45, 50) : BV:32
52 : bvadd(21, 23, 51) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : ite(54, 31, 32) : BV:8
56 : ite(53, 28, 55) : BV:8
57 : bvadd(35, 23, 51) : BV:32
58 : eq(57, 26) : BOOL
59 : eq(57, 29) : BOOL
60 : ite(59, 31, 32) : BV:8
61 : ite(58, 28, 60) : BV:8
62 : bvadd(2, 23, 51) : BV:32
63 : eq(62, 26) : BOOL
64 : eq(62, 29) : BOOL
65 : ite(64, 31, 32) : BV:8
66 : ite(63, 28, 65) : BV:8
67 : bvadd(23, 51) : BV:32
68 : eq(67, 26) : BOOL
69 : eq(67, 29) : BOOL
70 : ite(69, 31, 32) : BV:8
71 : ite(68, 28, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(20, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(19, 73) : MAP[BV:32 -> BV:32]
75 : sum(16, 17, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26672Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26673Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvadd(20, 9, 6) : BV:32
22 : eq(21, 11) : BOOL
23 : eq(21, 14) : BOOL
24 : ite(23, 16, 17) : BV:8
25 : ite(22, 13, 24) : BV:8
26 : bvadd(8, 9, 6) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 6) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(19, 25, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : bvadd(20, 7, 36) : BV:32
43 : eq(42, 11) : BOOL
44 : eq(42, 14) : BOOL
45 : ite(44, 16, 17) : BV:8
46 : ite(43, 13, 45) : BV:8
47 : bvadd(8, 7, 36) : BV:32
48 : eq(47, 11) : BOOL
49 : eq(47, 14) : BOOL
50 : ite(49, 16, 17) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 11) : BOOL
54 : eq(52, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 419430467 { 0x19000043 +1.798e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 65799 { 0x10107 +1.784385e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda662Var : BV:32
2 : Lambda663Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda672Var : BV:32
2 : Lambda673Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
475400718
=counter_example_end
=global nodece 21 num_edges_traversed 4
=global nodece 21 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 22
=global nodece 22 nodece z3v487.ce3376.num_edges_traversed6
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce3376 bbd35a748adc4a29a1dedc1a568a8ec
=input.spec-%var-x-1
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda26744Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26745Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : bvadd(8, 9, 6) : BV:32
21 : eq(20, 11) : BOOL
22 : eq(20, 14) : BOOL
23 : ite(22, 16, 17) : BV:8
24 : ite(21, 13, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 6) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 6) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 11) : BOOL
44 : eq(42, 14) : BOOL
45 : ite(44, 16, 17) : BV:8
46 : ite(43, 13, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 11) : BOOL
49 : eq(47, 14) : BOOL
50 : ite(49, 16, 17) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 11) : BOOL
54 : eq(52, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 419430463 ] -> 0, [ 419430464; 419430464 ] -> 4, [ 419430465; 508821510 ] -> 0, [ 508821511; 508821511 ] -> 16, [ 508821512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65796; 65799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 65800; 419430463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 419430464; 419430467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 419430468; 508821507 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 508821508; 508821511 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 508821512; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda26734Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda26735Var : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 21) : BV:32
25 : bvmul(23, 2) : BV:32
26 : bvadd(22, 25, 23) : BV:32
27 : 419430464 { 0x19000040 +1.762e179 } : BV:32
28 : eq(26, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
31 : eq(26, 30) : BOOL
32 : 16 { 0x10 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : bvadd(2, 25, 23) : BV:32
37 : eq(36, 27) : BOOL
38 : eq(36, 30) : BOOL
39 : ite(38, 32, 33) : BV:8
40 : ite(37, 29, 39) : BV:8
41 : bvadd(16, 25, 23) : BV:32
42 : eq(41, 27) : BOOL
43 : eq(41, 30) : BOOL
44 : ite(43, 32, 33) : BV:8
45 : ite(42, 29, 44) : BV:8
46 : bvadd(25, 23) : BV:32
47 : eq(46, 27) : BOOL
48 : eq(46, 30) : BOOL
49 : ite(48, 32, 33) : BV:8
50 : ite(47, 29, 49) : BV:8
51 : bvconcat(35, 40, 45, 50) : BV:32
52 : bvadd(22, 24, 51) : BV:32
53 : eq(52, 27) : BOOL
54 : eq(52, 30) : BOOL
55 : ite(54, 32, 33) : BV:8
56 : ite(53, 29, 55) : BV:8
57 : bvadd(2, 24, 51) : BV:32
58 : eq(57, 27) : BOOL
59 : eq(57, 30) : BOOL
60 : ite(59, 32, 33) : BV:8
61 : ite(58, 29, 60) : BV:8
62 : bvadd(16, 24, 51) : BV:32
63 : eq(62, 27) : BOOL
64 : eq(62, 30) : BOOL
65 : ite(64, 32, 33) : BV:8
66 : ite(63, 29, 65) : BV:8
67 : bvadd(24, 51) : BV:32
68 : eq(67, 27) : BOOL
69 : eq(67, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : bvconcat(56, 61, 66, 71) : BV:32
73 : lambda(21, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(20, 73) : MAP[BV:32 -> BV:32]
75 : sum(17, 18, 74) : SUM[UNIT,MAP[BV:32 -> BV:32]]
76 : sym_const(75) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda26750Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda26751Var : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 4) : BV:32
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvmul(6, 8) : BV:32
10 : bvadd(5, 9, 6) : BV:32
11 : 419430464 { 0x19000040 +1.762e179 } : BV:32
12 : eq(10, 11) : BOOL
13 : 4 { 0x4 } : BV:8
14 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
15 : eq(10, 14) : BOOL
16 : 16 { 0x10 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : bvadd(8, 9, 6) : BV:32
21 : eq(20, 11) : BOOL
22 : eq(20, 14) : BOOL
23 : ite(22, 16, 17) : BV:8
24 : ite(21, 13, 23) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 9, 6) : BV:32
27 : eq(26, 11) : BOOL
28 : eq(26, 14) : BOOL
29 : ite(28, 16, 17) : BV:8
30 : ite(27, 13, 29) : BV:8
31 : bvadd(9, 6) : BV:32
32 : eq(31, 11) : BOOL
33 : eq(31, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : bvconcat(19, 24, 30, 35) : BV:32
37 : bvadd(5, 7, 36) : BV:32
38 : eq(37, 11) : BOOL
39 : eq(37, 14) : BOOL
40 : ite(39, 16, 17) : BV:8
41 : ite(38, 13, 40) : BV:8
42 : bvadd(8, 7, 36) : BV:32
43 : eq(42, 11) : BOOL
44 : eq(42, 14) : BOOL
45 : ite(44, 16, 17) : BV:8
46 : ite(43, 13, 45) : BV:8
47 : bvadd(25, 7, 36) : BV:32
48 : eq(47, 11) : BOOL
49 : eq(47, 14) : BOOL
50 : ite(49, 16, 17) : BV:8
51 : ite(48, 13, 50) : BV:8
52 : bvadd(7, 36) : BV:32
53 : eq(52, 11) : BOOL
54 : eq(52, 14) : BOOL
55 : ite(54, 16, 17) : BV:8
56 : ite(53, 13, 55) : BV:8
57 : bvconcat(41, 46, 51, 56) : BV:32
58 : lambda(4, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(3, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 419430467 { 0x19000043 +1.798e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 65799 { 0x10107 +1.784385e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda662Var : BV:32
2 : Lambda663Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda672Var : BV:32
2 : Lambda673Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
475400718
=counter_example_end
=global nodece 22 num_edges_traversed 6
=global nodece 22 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 23
=global nodece 23 nodece z3v487.ce3412.num_edges_traversed7
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(epsilon)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce3412 d990b3cd82cda557b6c14bcc9b60c012
=input.spec-%var-x-1
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 419430463 ] -> 0, [ 419430464; 419430464 ] -> 4, [ 419430465; 508821510 ] -> 0, [ 508821511; 508821511 ] -> 16, [ 508821512; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 65795 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 65796; 65799 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 65800; 419430463 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 419430464; 419430467 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 419430468; 508821507 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 508821508; 508821511 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 508821512; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.llvm-%n
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.llvm-%x
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda763Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda764Var : BV:32
18 : Lambda765Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda766Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 22) : BV:32
26 : 419430464 { 0x19000040 +1.762e179 } : BV:32
27 : eq(25, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
30 : eq(25, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : 2 { 0x2 +1.23e129 } : BV:32
36 : bvadd(35, 24, 22) : BV:32
37 : eq(36, 26) : BOOL
38 : eq(36, 29) : BOOL
39 : ite(38, 31, 32) : BV:8
40 : ite(37, 28, 39) : BV:8
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvadd(41, 24, 22) : BV:32
43 : eq(42, 26) : BOOL
44 : eq(42, 29) : BOOL
45 : ite(44, 31, 32) : BV:8
46 : ite(43, 28, 45) : BV:8
47 : bvadd(24, 22) : BV:32
48 : eq(47, 26) : BOOL
49 : eq(47, 29) : BOOL
50 : ite(49, 31, 32) : BV:8
51 : ite(48, 28, 50) : BV:8
52 : bvconcat(34, 40, 46, 51) : BV:32
53 : bvadd(21, 23, 52) : BV:32
54 : eq(53, 26) : BOOL
55 : eq(53, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : bvadd(35, 23, 52) : BV:32
59 : eq(58, 26) : BOOL
60 : eq(58, 29) : BOOL
61 : ite(60, 31, 32) : BV:8
62 : ite(59, 28, 61) : BV:8
63 : bvadd(41, 23, 52) : BV:32
64 : eq(63, 26) : BOOL
65 : eq(63, 29) : BOOL
66 : ite(65, 31, 32) : BV:8
67 : ite(64, 28, 66) : BV:8
68 : bvadd(23, 52) : BV:32
69 : eq(68, 26) : BOOL
70 : eq(68, 29) : BOOL
71 : ite(70, 31, 32) : BV:8
72 : ite(69, 28, 71) : BV:8
73 : bvconcat(57, 62, 67, 72) : BV:32
74 : lambda(20, 73) : FUNCTION[BV:32 -> BV:32]
75 : map(19, 74) : MAP[BV:32 -> BV:32]
76 : lambda(17, 75) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
77 : map(16, 76) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
78 : sym_const(77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 774309974 { 0x2e270856 +1.30494189e221 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 508821508 { 0x1e540004 +1.65625047e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 419430464 { 0x19000040 +1.762e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 419430467 { 0x19000043 +1.798e179 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 65796 { 0x10104 +1.784349e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 65799 { 0x10107 +1.784385e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda662Var : BV:32
2 : Lambda663Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda672Var : BV:32
2 : Lambda673Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : bvadd(3, 6, 4) : BV:32
8 : 419430464 { 0x19000040 +1.762e179 } : BV:32
9 : eq(7, 8) : BOOL
10 : 4 { 0x4 } : BV:8
11 : 508821511 { 0x1e540007 +1.65625083e189 } : BV:32
12 : eq(7, 11) : BOOL
13 : 16 { 0x10 } : BV:8
14 : 0 { 0x0 } : BV:8
15 : ite(12, 13, 14) : BV:8
16 : ite(9, 10, 15) : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : bvadd(17, 6, 4) : BV:32
19 : eq(18, 8) : BOOL
20 : eq(18, 11) : BOOL
21 : ite(20, 13, 14) : BV:8
22 : ite(19, 10, 21) : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvadd(23, 6, 4) : BV:32
25 : eq(24, 8) : BOOL
26 : eq(24, 11) : BOOL
27 : ite(26, 13, 14) : BV:8
28 : ite(25, 10, 27) : BV:8
29 : bvadd(6, 4) : BV:32
30 : eq(29, 8) : BOOL
31 : eq(29, 11) : BOOL
32 : ite(31, 13, 14) : BV:8
33 : ite(30, 10, 32) : BV:8
34 : bvconcat(16, 22, 28, 33) : BV:32
35 : bvadd(3, 5, 34) : BV:32
36 : eq(35, 8) : BOOL
37 : eq(35, 11) : BOOL
38 : ite(37, 13, 14) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : bvadd(17, 5, 34) : BV:32
41 : eq(40, 8) : BOOL
42 : eq(40, 11) : BOOL
43 : ite(42, 13, 14) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : bvadd(23, 5, 34) : BV:32
46 : eq(45, 8) : BOOL
47 : eq(45, 11) : BOOL
48 : ite(47, 13, 14) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : bvadd(5, 34) : BV:32
51 : eq(50, 8) : BOOL
52 : eq(50, 11) : BOOL
53 : ite(52, 13, 14) : BV:8
54 : ite(51, 10, 53) : BV:8
55 : bvconcat(39, 44, 49, 54) : BV:32
56 : lambda(1, 2, 55) : FUNCTION[BV:32,BV:32 -> BV:32]
57 : sym_const(56) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
475400718
=counter_example_end
=global nodece 23 num_edges_traversed 7
=global nodece 23 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 24
=global nodece 24 nodece z3v487.ce3330.num_edges_traversed3
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(epsilon)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3v487.ce3330 96b4e0756acd1476c1601a5ac377014
=input.spec-%var-x-1
1 : Lambda938Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda939Var : BV:32
18 : Lambda940Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda941Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3539702153 ] -> 0, [ 3539702154; 3539702154 ] -> 16, [ 3539702155; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1048203 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048204; 1048207 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1048208; 2147484179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147484180; 2147484183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147484184; 3539702151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3539702152; 3539702155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3539702156; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1048204 { 0xffe8c +1.12495565e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3539702152 { 0xd2fb9188 -755265144 -1.96537876e38 } : BV:32
=input.dst.llvm-%n
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147484180 { 0x80000214 -2147483116 -1.6341e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda938Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda939Var : BV:32
18 : Lambda940Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda941Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
27 : eq(25, 26) : BOOL
28 : 16 { 0x10 } : BV:8
29 : 0 { 0x0 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvadd(31, 24, 2) : BV:32
33 : eq(32, 26) : BOOL
34 : ite(33, 28, 29) : BV:8
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvadd(35, 24, 2) : BV:32
37 : eq(36, 26) : BOOL
38 : ite(37, 28, 29) : BV:8
39 : bvadd(24, 2) : BV:32
40 : eq(39, 26) : BOOL
41 : ite(40, 28, 29) : BV:8
42 : bvconcat(30, 34, 38, 41) : BV:32
43 : bvadd(21, 23, 42) : BV:32
44 : eq(43, 26) : BOOL
45 : ite(44, 28, 29) : BV:8
46 : bvadd(31, 23, 42) : BV:32
47 : eq(46, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : bvadd(35, 23, 42) : BV:32
50 : eq(49, 26) : BOOL
51 : ite(50, 28, 29) : BV:8
52 : bvadd(23, 42) : BV:32
53 : eq(52, 26) : BOOL
54 : ite(53, 28, 29) : BV:8
55 : bvconcat(45, 48, 51, 54) : BV:32
56 : lambda(20, 55) : FUNCTION[BV:32 -> BV:32]
57 : map(19, 56) : MAP[BV:32 -> BV:32]
58 : lambda(17, 57) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
59 : map(16, 58) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
60 : sym_const(59) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1185342811 { 0x46a6e55b +1.30387437e14 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3539702152 { 0xd2fb9188 -755265144 -1.96537876e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3539702155 { 0xd2fb918b -755265141 -1.96537911e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147484180 { 0x80000214 -2147483116 -1.6341e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147484183 { 0x80000217 -2147483113 -1.6377e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1048204 { 0xffe8c +1.12495565e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1048207 { 0xffe8f +1.12495601e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda878Var : BV:32
2 : Lambda879Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda888Var : BV:32
2 : Lambda889Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3539702154 { 0xd2fb918a -755265142 -1.96537899e38 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3445317818
=counter_example_end
=global nodece 24 num_edges_traversed 3
=global nodece 24 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 25
=global nodece 25 nodece z3.ce3320.num_edges_traversed3
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(epsilon)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce3320 364a38634321f3d828205e6197cd8c2
=input.spec-%var-x-1
1 : Lambda992Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda993Var : BV:32
18 : Lambda994Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda995Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 2) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
41 : eq(25, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
44 : eq(25, 43) : BOOL
45 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
46 : eq(25, 45) : BOOL
47 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
48 : eq(25, 47) : BOOL
49 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
50 : eq(25, 49) : BOOL
51 : 251 { 0xfb -5 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(48, 28, 52) : BV:8
54 : ite(46, 28, 53) : BV:8
55 : ite(44, 28, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 28, 57) : BV:8
59 : ite(34, 28, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(30, 28, 60) : BV:8
62 : ite(27, 28, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 2) : BV:32
65 : eq(64, 26) : BOOL
66 : eq(64, 29) : BOOL
67 : eq(64, 2) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 35) : BOOL
70 : eq(64, 37) : BOOL
71 : eq(64, 40) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 45) : BOOL
74 : eq(64, 47) : BOOL
75 : eq(64, 49) : BOOL
76 : ite(75, 28, 51) : BV:8
77 : ite(74, 28, 76) : BV:8
78 : ite(73, 28, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 42, 79) : BV:8
81 : ite(70, 39, 80) : BV:8
82 : ite(69, 28, 81) : BV:8
83 : ite(68, 28, 82) : BV:8
84 : ite(67, 32, 83) : BV:8
85 : ite(66, 28, 84) : BV:8
86 : ite(65, 28, 85) : BV:8
87 : bvadd(37, 24, 2) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 2) : BOOL
91 : eq(87, 33) : BOOL
92 : eq(87, 35) : BOOL
93 : eq(87, 37) : BOOL
94 : eq(87, 40) : BOOL
95 : eq(87, 43) : BOOL
96 : eq(87, 45) : BOOL
97 : eq(87, 47) : BOOL
98 : eq(87, 49) : BOOL
99 : ite(98, 28, 51) : BV:8
100 : ite(97, 28, 99) : BV:8
101 : ite(96, 28, 100) : BV:8
102 : ite(95, 28, 101) : BV:8
103 : ite(94, 42, 102) : BV:8
104 : ite(93, 39, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 28, 105) : BV:8
107 : ite(90, 32, 106) : BV:8
108 : ite(89, 28, 107) : BV:8
109 : ite(88, 28, 108) : BV:8
110 : bvadd(24, 2) : BV:32
111 : eq(110, 26) : BOOL
112 : eq(110, 29) : BOOL
113 : eq(110, 2) : BOOL
114 : eq(110, 33) : BOOL
115 : eq(110, 35) : BOOL
116 : eq(110, 37) : BOOL
117 : eq(110, 40) : BOOL
118 : eq(110, 43) : BOOL
119 : eq(110, 45) : BOOL
120 : eq(110, 47) : BOOL
121 : eq(110, 49) : BOOL
122 : ite(121, 28, 51) : BV:8
123 : ite(120, 28, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 28, 124) : BV:8
126 : ite(117, 42, 125) : BV:8
127 : ite(116, 39, 126) : BV:8
128 : ite(115, 28, 127) : BV:8
129 : ite(114, 28, 128) : BV:8
130 : ite(113, 32, 129) : BV:8
131 : ite(112, 28, 130) : BV:8
132 : ite(111, 28, 131) : BV:8
133 : bvconcat(62, 86, 109, 132) : BV:32
134 : bvadd(21, 23, 133) : BV:32
135 : eq(134, 26) : BOOL
136 : eq(134, 29) : BOOL
137 : eq(134, 2) : BOOL
138 : eq(134, 33) : BOOL
139 : eq(134, 35) : BOOL
140 : eq(134, 37) : BOOL
141 : eq(134, 40) : BOOL
142 : eq(134, 43) : BOOL
143 : eq(134, 45) : BOOL
144 : eq(134, 47) : BOOL
145 : eq(134, 49) : BOOL
146 : ite(145, 28, 51) : BV:8
147 : ite(144, 28, 146) : BV:8
148 : ite(143, 28, 147) : BV:8
149 : ite(142, 28, 148) : BV:8
150 : ite(141, 42, 149) : BV:8
151 : ite(140, 39, 150) : BV:8
152 : ite(139, 28, 151) : BV:8
153 : ite(138, 28, 152) : BV:8
154 : ite(137, 32, 153) : BV:8
155 : ite(136, 28, 154) : BV:8
156 : ite(135, 28, 155) : BV:8
157 : bvadd(63, 23, 133) : BV:32
158 : eq(157, 26) : BOOL
159 : eq(157, 29) : BOOL
160 : eq(157, 2) : BOOL
161 : eq(157, 33) : BOOL
162 : eq(157, 35) : BOOL
163 : eq(157, 37) : BOOL
164 : eq(157, 40) : BOOL
165 : eq(157, 43) : BOOL
166 : eq(157, 45) : BOOL
167 : eq(157, 47) : BOOL
168 : eq(157, 49) : BOOL
169 : ite(168, 28, 51) : BV:8
170 : ite(167, 28, 169) : BV:8
171 : ite(166, 28, 170) : BV:8
172 : ite(165, 28, 171) : BV:8
173 : ite(164, 42, 172) : BV:8
174 : ite(163, 39, 173) : BV:8
175 : ite(162, 28, 174) : BV:8
176 : ite(161, 28, 175) : BV:8
177 : ite(160, 32, 176) : BV:8
178 : ite(159, 28, 177) : BV:8
179 : ite(158, 28, 178) : BV:8
180 : bvadd(37, 23, 133) : BV:32
181 : eq(180, 26) : BOOL
182 : eq(180, 29) : BOOL
183 : eq(180, 2) : BOOL
184 : eq(180, 33) : BOOL
185 : eq(180, 35) : BOOL
186 : eq(180, 37) : BOOL
187 : eq(180, 40) : BOOL
188 : eq(180, 43) : BOOL
189 : eq(180, 45) : BOOL
190 : eq(180, 47) : BOOL
191 : eq(180, 49) : BOOL
192 : ite(191, 28, 51) : BV:8
193 : ite(190, 28, 192) : BV:8
194 : ite(189, 28, 193) : BV:8
195 : ite(188, 28, 194) : BV:8
196 : ite(187, 42, 195) : BV:8
197 : ite(186, 39, 196) : BV:8
198 : ite(185, 28, 197) : BV:8
199 : ite(184, 28, 198) : BV:8
200 : ite(183, 32, 199) : BV:8
201 : ite(182, 28, 200) : BV:8
202 : ite(181, 28, 201) : BV:8
203 : bvadd(23, 133) : BV:32
204 : eq(203, 26) : BOOL
205 : eq(203, 29) : BOOL
206 : eq(203, 2) : BOOL
207 : eq(203, 33) : BOOL
208 : eq(203, 35) : BOOL
209 : eq(203, 37) : BOOL
210 : eq(203, 40) : BOOL
211 : eq(203, 43) : BOOL
212 : eq(203, 45) : BOOL
213 : eq(203, 47) : BOOL
214 : eq(203, 49) : BOOL
215 : ite(214, 28, 51) : BV:8
216 : ite(213, 28, 215) : BV:8
217 : ite(212, 28, 216) : BV:8
218 : ite(211, 28, 217) : BV:8
219 : ite(210, 42, 218) : BV:8
220 : ite(209, 39, 219) : BV:8
221 : ite(208, 28, 220) : BV:8
222 : ite(207, 28, 221) : BV:8
223 : ite(206, 32, 222) : BV:8
224 : ite(205, 28, 223) : BV:8
225 : ite(204, 28, 224) : BV:8
226 : bvconcat(156, 179, 202, 225) : BV:32
227 : lambda(20, 226) : FUNCTION[BV:32 -> BV:32]
228 : map(19, 227) : MAP[BV:32 -> BV:32]
229 : lambda(17, 228) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
230 : map(16, 229) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
231 : sym_const(230) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 169, [ 1; 1 ] -> 127, [ 2; 1813540559 ] -> 251, [ 1813540560; 1813540563 ] -> 0, [ 1813540564; 2761015701 ] -> 251, [ 2761015702; 2761015702 ] -> 1, [ 2761015703; 3833956687 ] -> 251, [ 3833956688; 3833956691 ] -> 0, [ 3833956692; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1813540559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1813540560; 1813540563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1813540564; 2761015699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2761015700; 2761015703 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2761015704; 3833956687 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3833956688; 3833956691 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3833956692; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2761015700 { 0xa491c194 -1533951596 -1.13872003e202 } : BV:32
=input.dst.llvm-%n
1 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda992Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4211211258 { 0xfb01fbfa -83756038 -1.1550221e119 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4211211259 { 0xfb01fbfb -83756037 -1.1550233e119 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda993Var : BV:32
18 : Lambda994Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda995Var : BV:32
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 20) : BV:32
24 : bvmul(22, 17) : BV:32
25 : bvadd(21, 24, 2) : BV:32
26 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
27 : eq(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
30 : eq(25, 29) : BOOL
31 : eq(25, 2) : BOOL
32 : 169 { 0xa9 -87 } : BV:8
33 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
34 : eq(25, 33) : BOOL
35 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
36 : eq(25, 35) : BOOL
37 : 1 { 0x1 +1.11e129 } : BV:32
38 : eq(25, 37) : BOOL
39 : 127 { 0x7f } : BV:8
40 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
41 : eq(25, 40) : BOOL
42 : 1 { 0x1 } : BV:8
43 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
44 : eq(25, 43) : BOOL
45 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
46 : eq(25, 45) : BOOL
47 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
48 : eq(25, 47) : BOOL
49 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
50 : eq(25, 49) : BOOL
51 : 251 { 0xfb -5 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(48, 28, 52) : BV:8
54 : ite(46, 28, 53) : BV:8
55 : ite(44, 28, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(36, 28, 57) : BV:8
59 : ite(34, 28, 58) : BV:8
60 : ite(31, 32, 59) : BV:8
61 : ite(30, 28, 60) : BV:8
62 : ite(27, 28, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 24, 2) : BV:32
65 : eq(64, 26) : BOOL
66 : eq(64, 29) : BOOL
67 : eq(64, 2) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 35) : BOOL
70 : eq(64, 37) : BOOL
71 : eq(64, 40) : BOOL
72 : eq(64, 43) : BOOL
73 : eq(64, 45) : BOOL
74 : eq(64, 47) : BOOL
75 : eq(64, 49) : BOOL
76 : ite(75, 28, 51) : BV:8
77 : ite(74, 28, 76) : BV:8
78 : ite(73, 28, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 42, 79) : BV:8
81 : ite(70, 39, 80) : BV:8
82 : ite(69, 28, 81) : BV:8
83 : ite(68, 28, 82) : BV:8
84 : ite(67, 32, 83) : BV:8
85 : ite(66, 28, 84) : BV:8
86 : ite(65, 28, 85) : BV:8
87 : bvadd(37, 24, 2) : BV:32
88 : eq(87, 26) : BOOL
89 : eq(87, 29) : BOOL
90 : eq(87, 2) : BOOL
91 : eq(87, 33) : BOOL
92 : eq(87, 35) : BOOL
93 : eq(87, 37) : BOOL
94 : eq(87, 40) : BOOL
95 : eq(87, 43) : BOOL
96 : eq(87, 45) : BOOL
97 : eq(87, 47) : BOOL
98 : eq(87, 49) : BOOL
99 : ite(98, 28, 51) : BV:8
100 : ite(97, 28, 99) : BV:8
101 : ite(96, 28, 100) : BV:8
102 : ite(95, 28, 101) : BV:8
103 : ite(94, 42, 102) : BV:8
104 : ite(93, 39, 103) : BV:8
105 : ite(92, 28, 104) : BV:8
106 : ite(91, 28, 105) : BV:8
107 : ite(90, 32, 106) : BV:8
108 : ite(89, 28, 107) : BV:8
109 : ite(88, 28, 108) : BV:8
110 : bvadd(24, 2) : BV:32
111 : eq(110, 26) : BOOL
112 : eq(110, 29) : BOOL
113 : eq(110, 2) : BOOL
114 : eq(110, 33) : BOOL
115 : eq(110, 35) : BOOL
116 : eq(110, 37) : BOOL
117 : eq(110, 40) : BOOL
118 : eq(110, 43) : BOOL
119 : eq(110, 45) : BOOL
120 : eq(110, 47) : BOOL
121 : eq(110, 49) : BOOL
122 : ite(121, 28, 51) : BV:8
123 : ite(120, 28, 122) : BV:8
124 : ite(119, 28, 123) : BV:8
125 : ite(118, 28, 124) : BV:8
126 : ite(117, 42, 125) : BV:8
127 : ite(116, 39, 126) : BV:8
128 : ite(115, 28, 127) : BV:8
129 : ite(114, 28, 128) : BV:8
130 : ite(113, 32, 129) : BV:8
131 : ite(112, 28, 130) : BV:8
132 : ite(111, 28, 131) : BV:8
133 : bvconcat(62, 86, 109, 132) : BV:32
134 : bvadd(21, 23, 133) : BV:32
135 : eq(134, 26) : BOOL
136 : eq(134, 29) : BOOL
137 : eq(134, 2) : BOOL
138 : eq(134, 33) : BOOL
139 : eq(134, 35) : BOOL
140 : eq(134, 37) : BOOL
141 : eq(134, 40) : BOOL
142 : eq(134, 43) : BOOL
143 : eq(134, 45) : BOOL
144 : eq(134, 47) : BOOL
145 : eq(134, 49) : BOOL
146 : ite(145, 28, 51) : BV:8
147 : ite(144, 28, 146) : BV:8
148 : ite(143, 28, 147) : BV:8
149 : ite(142, 28, 148) : BV:8
150 : ite(141, 42, 149) : BV:8
151 : ite(140, 39, 150) : BV:8
152 : ite(139, 28, 151) : BV:8
153 : ite(138, 28, 152) : BV:8
154 : ite(137, 32, 153) : BV:8
155 : ite(136, 28, 154) : BV:8
156 : ite(135, 28, 155) : BV:8
157 : bvadd(63, 23, 133) : BV:32
158 : eq(157, 26) : BOOL
159 : eq(157, 29) : BOOL
160 : eq(157, 2) : BOOL
161 : eq(157, 33) : BOOL
162 : eq(157, 35) : BOOL
163 : eq(157, 37) : BOOL
164 : eq(157, 40) : BOOL
165 : eq(157, 43) : BOOL
166 : eq(157, 45) : BOOL
167 : eq(157, 47) : BOOL
168 : eq(157, 49) : BOOL
169 : ite(168, 28, 51) : BV:8
170 : ite(167, 28, 169) : BV:8
171 : ite(166, 28, 170) : BV:8
172 : ite(165, 28, 171) : BV:8
173 : ite(164, 42, 172) : BV:8
174 : ite(163, 39, 173) : BV:8
175 : ite(162, 28, 174) : BV:8
176 : ite(161, 28, 175) : BV:8
177 : ite(160, 32, 176) : BV:8
178 : ite(159, 28, 177) : BV:8
179 : ite(158, 28, 178) : BV:8
180 : bvadd(37, 23, 133) : BV:32
181 : eq(180, 26) : BOOL
182 : eq(180, 29) : BOOL
183 : eq(180, 2) : BOOL
184 : eq(180, 33) : BOOL
185 : eq(180, 35) : BOOL
186 : eq(180, 37) : BOOL
187 : eq(180, 40) : BOOL
188 : eq(180, 43) : BOOL
189 : eq(180, 45) : BOOL
190 : eq(180, 47) : BOOL
191 : eq(180, 49) : BOOL
192 : ite(191, 28, 51) : BV:8
193 : ite(190, 28, 192) : BV:8
194 : ite(189, 28, 193) : BV:8
195 : ite(188, 28, 194) : BV:8
196 : ite(187, 42, 195) : BV:8
197 : ite(186, 39, 196) : BV:8
198 : ite(185, 28, 197) : BV:8
199 : ite(184, 28, 198) : BV:8
200 : ite(183, 32, 199) : BV:8
201 : ite(182, 28, 200) : BV:8
202 : ite(181, 28, 201) : BV:8
203 : bvadd(23, 133) : BV:32
204 : eq(203, 26) : BOOL
205 : eq(203, 29) : BOOL
206 : eq(203, 2) : BOOL
207 : eq(203, 33) : BOOL
208 : eq(203, 35) : BOOL
209 : eq(203, 37) : BOOL
210 : eq(203, 40) : BOOL
211 : eq(203, 43) : BOOL
212 : eq(203, 45) : BOOL
213 : eq(203, 47) : BOOL
214 : eq(203, 49) : BOOL
215 : ite(214, 28, 51) : BV:8
216 : ite(213, 28, 215) : BV:8
217 : ite(212, 28, 216) : BV:8
218 : ite(211, 28, 217) : BV:8
219 : ite(210, 42, 218) : BV:8
220 : ite(209, 39, 219) : BV:8
221 : ite(208, 28, 220) : BV:8
222 : ite(207, 28, 221) : BV:8
223 : ite(206, 32, 222) : BV:8
224 : ite(205, 28, 223) : BV:8
225 : ite(204, 28, 224) : BV:8
226 : bvconcat(156, 179, 202, 225) : BV:32
227 : lambda(20, 226) : FUNCTION[BV:32 -> BV:32]
228 : map(19, 227) : MAP[BV:32 -> BV:32]
229 : lambda(17, 228) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
230 : map(16, 229) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
231 : sym_const(230) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 569850645 { 0x21f73b15 +1.93149054e196 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2761015700 { 0xa491c194 -1533951596 -1.13872003e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2761015703 { 0xa491c197 -1533951593 -1.13872039e202 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda891Var : BV:32
2 : Lambda892Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
13 : eq(8, 12) : BOOL
14 : eq(8, 7) : BOOL
15 : 169 { 0xa9 -87 } : BV:8
16 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(8, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
33 : eq(8, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(31, 11, 35) : BV:8
37 : ite(29, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 11, 40) : BV:8
42 : ite(17, 11, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 7) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 18) : BOOL
53 : eq(47, 20) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 11, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 22, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 15, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : bvadd(20, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 7) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 18) : BOOL
76 : eq(70, 20) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 28) : BOOL
80 : eq(70, 30) : BOOL
81 : eq(70, 32) : BOOL
82 : ite(81, 11, 34) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 22, 86) : BV:8
88 : ite(75, 11, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 7) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 18) : BOOL
99 : eq(93, 20) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 28) : BOOL
103 : eq(93, 30) : BOOL
104 : eq(93, 32) : BOOL
105 : ite(104, 11, 34) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 11, 106) : BV:8
108 : ite(101, 11, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 22, 109) : BV:8
111 : ite(98, 11, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 15, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(45, 69, 92, 115) : BV:32
117 : bvadd(3, 5, 116) : BV:32
118 : eq(117, 9) : BOOL
119 : eq(117, 12) : BOOL
120 : eq(117, 7) : BOOL
121 : eq(117, 16) : BOOL
122 : eq(117, 18) : BOOL
123 : eq(117, 20) : BOOL
124 : eq(117, 23) : BOOL
125 : eq(117, 26) : BOOL
126 : eq(117, 28) : BOOL
127 : eq(117, 30) : BOOL
128 : eq(117, 32) : BOOL
129 : ite(128, 11, 34) : BV:8
130 : ite(127, 11, 129) : BV:8
131 : ite(126, 11, 130) : BV:8
132 : ite(125, 11, 131) : BV:8
133 : ite(124, 25, 132) : BV:8
134 : ite(123, 22, 133) : BV:8
135 : ite(122, 11, 134) : BV:8
136 : ite(121, 11, 135) : BV:8
137 : ite(120, 15, 136) : BV:8
138 : ite(119, 11, 137) : BV:8
139 : ite(118, 11, 138) : BV:8
140 : bvadd(46, 5, 116) : BV:32
141 : eq(140, 9) : BOOL
142 : eq(140, 12) : BOOL
143 : eq(140, 7) : BOOL
144 : eq(140, 16) : BOOL
145 : eq(140, 18) : BOOL
146 : eq(140, 20) : BOOL
147 : eq(140, 23) : BOOL
148 : eq(140, 26) : BOOL
149 : eq(140, 28) : BOOL
150 : eq(140, 30) : BOOL
151 : eq(140, 32) : BOOL
152 : ite(151, 11, 34) : BV:8
153 : ite(150, 11, 152) : BV:8
154 : ite(149, 11, 153) : BV:8
155 : ite(148, 11, 154) : BV:8
156 : ite(147, 25, 155) : BV:8
157 : ite(146, 22, 156) : BV:8
158 : ite(145, 11, 157) : BV:8
159 : ite(144, 11, 158) : BV:8
160 : ite(143, 15, 159) : BV:8
161 : ite(142, 11, 160) : BV:8
162 : ite(141, 11, 161) : BV:8
163 : bvadd(20, 5, 116) : BV:32
164 : eq(163, 9) : BOOL
165 : eq(163, 12) : BOOL
166 : eq(163, 7) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 18) : BOOL
169 : eq(163, 20) : BOOL
170 : eq(163, 23) : BOOL
171 : eq(163, 26) : BOOL
172 : eq(163, 28) : BOOL
173 : eq(163, 30) : BOOL
174 : eq(163, 32) : BOOL
175 : ite(174, 11, 34) : BV:8
176 : ite(173, 11, 175) : BV:8
177 : ite(172, 11, 176) : BV:8
178 : ite(171, 11, 177) : BV:8
179 : ite(170, 25, 178) : BV:8
180 : ite(169, 22, 179) : BV:8
181 : ite(168, 11, 180) : BV:8
182 : ite(167, 11, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : ite(165, 11, 183) : BV:8
185 : ite(164, 11, 184) : BV:8
186 : bvadd(5, 116) : BV:32
187 : eq(186, 9) : BOOL
188 : eq(186, 12) : BOOL
189 : eq(186, 7) : BOOL
190 : eq(186, 16) : BOOL
191 : eq(186, 18) : BOOL
192 : eq(186, 20) : BOOL
193 : eq(186, 23) : BOOL
194 : eq(186, 26) : BOOL
195 : eq(186, 28) : BOOL
196 : eq(186, 30) : BOOL
197 : eq(186, 32) : BOOL
198 : ite(197, 11, 34) : BV:8
199 : ite(196, 11, 198) : BV:8
200 : ite(195, 11, 199) : BV:8
201 : ite(194, 11, 200) : BV:8
202 : ite(193, 25, 201) : BV:8
203 : ite(192, 22, 202) : BV:8
204 : ite(191, 11, 203) : BV:8
205 : ite(190, 11, 204) : BV:8
206 : ite(189, 15, 205) : BV:8
207 : ite(188, 11, 206) : BV:8
208 : ite(187, 11, 207) : BV:8
209 : bvconcat(139, 162, 185, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4211211258 ] -> true, [ 4211211259; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4211211258 ] -> true, [ 4211211259; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda901Var : BV:32
2 : Lambda902Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 1813540562 { 0x6c186ed2 +1.19088196e89 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3833956690 { 0xe4858952 -461010606 -1.4325318e74 } : BV:32
13 : eq(8, 12) : BOOL
14 : eq(8, 7) : BOOL
15 : 169 { 0xa9 -87 } : BV:8
16 : 1813540560 { 0x6c186ed0 +1.19088172e89 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1813540563 { 0x6c186ed3 +1.19088208e89 } : BV:32
19 : eq(8, 18) : BOOL
20 : 1 { 0x1 +1.11e129 } : BV:32
21 : eq(8, 20) : BOOL
22 : 127 { 0x7f } : BV:8
23 : 2761015702 { 0xa491c196 -1533951594 -1.13872027e202 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1 { 0x1 } : BV:8
26 : 1813540561 { 0x6c186ed1 +1.19088184e89 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3833956689 { 0xe4858951 -461010607 -1.4325306e74 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3833956691 { 0xe4858953 -461010605 -1.4325330e74 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3833956688 { 0xe4858950 -461010608 -1.4325294e74 } : BV:32
33 : eq(8, 32) : BOOL
34 : 251 { 0xfb -5 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(31, 11, 35) : BV:8
37 : ite(29, 11, 36) : BV:8
38 : ite(27, 11, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(19, 11, 40) : BV:8
42 : ite(17, 11, 41) : BV:8
43 : ite(14, 15, 42) : BV:8
44 : ite(13, 11, 43) : BV:8
45 : ite(10, 11, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 9) : BOOL
49 : eq(47, 12) : BOOL
50 : eq(47, 7) : BOOL
51 : eq(47, 16) : BOOL
52 : eq(47, 18) : BOOL
53 : eq(47, 20) : BOOL
54 : eq(47, 23) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 11, 34) : BV:8
60 : ite(57, 11, 59) : BV:8
61 : ite(56, 11, 60) : BV:8
62 : ite(55, 11, 61) : BV:8
63 : ite(54, 25, 62) : BV:8
64 : ite(53, 22, 63) : BV:8
65 : ite(52, 11, 64) : BV:8
66 : ite(51, 11, 65) : BV:8
67 : ite(50, 15, 66) : BV:8
68 : ite(49, 11, 67) : BV:8
69 : ite(48, 11, 68) : BV:8
70 : bvadd(20, 6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 7) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 18) : BOOL
76 : eq(70, 20) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 26) : BOOL
79 : eq(70, 28) : BOOL
80 : eq(70, 30) : BOOL
81 : eq(70, 32) : BOOL
82 : ite(81, 11, 34) : BV:8
83 : ite(80, 11, 82) : BV:8
84 : ite(79, 11, 83) : BV:8
85 : ite(78, 11, 84) : BV:8
86 : ite(77, 25, 85) : BV:8
87 : ite(76, 22, 86) : BV:8
88 : ite(75, 11, 87) : BV:8
89 : ite(74, 11, 88) : BV:8
90 : ite(73, 15, 89) : BV:8
91 : ite(72, 11, 90) : BV:8
92 : ite(71, 11, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 9) : BOOL
95 : eq(93, 12) : BOOL
96 : eq(93, 7) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 18) : BOOL
99 : eq(93, 20) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 26) : BOOL
102 : eq(93, 28) : BOOL
103 : eq(93, 30) : BOOL
104 : eq(93, 32) : BOOL
105 : ite(104, 11, 34) : BV:8
106 : ite(103, 11, 105) : BV:8
107 : ite(102, 11, 106) : BV:8
108 : ite(101, 11, 107) : BV:8
109 : ite(100, 25, 108) : BV:8
110 : ite(99, 22, 109) : BV:8
111 : ite(98, 11, 110) : BV:8
112 : ite(97, 11, 111) : BV:8
113 : ite(96, 15, 112) : BV:8
114 : ite(95, 11, 113) : BV:8
115 : ite(94, 11, 114) : BV:8
116 : bvconcat(45, 69, 92, 115) : BV:32
117 : bvadd(3, 5, 116) : BV:32
118 : eq(117, 9) : BOOL
119 : eq(117, 12) : BOOL
120 : eq(117, 7) : BOOL
121 : eq(117, 16) : BOOL
122 : eq(117, 18) : BOOL
123 : eq(117, 20) : BOOL
124 : eq(117, 23) : BOOL
125 : eq(117, 26) : BOOL
126 : eq(117, 28) : BOOL
127 : eq(117, 30) : BOOL
128 : eq(117, 32) : BOOL
129 : ite(128, 11, 34) : BV:8
130 : ite(127, 11, 129) : BV:8
131 : ite(126, 11, 130) : BV:8
132 : ite(125, 11, 131) : BV:8
133 : ite(124, 25, 132) : BV:8
134 : ite(123, 22, 133) : BV:8
135 : ite(122, 11, 134) : BV:8
136 : ite(121, 11, 135) : BV:8
137 : ite(120, 15, 136) : BV:8
138 : ite(119, 11, 137) : BV:8
139 : ite(118, 11, 138) : BV:8
140 : bvadd(46, 5, 116) : BV:32
141 : eq(140, 9) : BOOL
142 : eq(140, 12) : BOOL
143 : eq(140, 7) : BOOL
144 : eq(140, 16) : BOOL
145 : eq(140, 18) : BOOL
146 : eq(140, 20) : BOOL
147 : eq(140, 23) : BOOL
148 : eq(140, 26) : BOOL
149 : eq(140, 28) : BOOL
150 : eq(140, 30) : BOOL
151 : eq(140, 32) : BOOL
152 : ite(151, 11, 34) : BV:8
153 : ite(150, 11, 152) : BV:8
154 : ite(149, 11, 153) : BV:8
155 : ite(148, 11, 154) : BV:8
156 : ite(147, 25, 155) : BV:8
157 : ite(146, 22, 156) : BV:8
158 : ite(145, 11, 157) : BV:8
159 : ite(144, 11, 158) : BV:8
160 : ite(143, 15, 159) : BV:8
161 : ite(142, 11, 160) : BV:8
162 : ite(141, 11, 161) : BV:8
163 : bvadd(20, 5, 116) : BV:32
164 : eq(163, 9) : BOOL
165 : eq(163, 12) : BOOL
166 : eq(163, 7) : BOOL
167 : eq(163, 16) : BOOL
168 : eq(163, 18) : BOOL
169 : eq(163, 20) : BOOL
170 : eq(163, 23) : BOOL
171 : eq(163, 26) : BOOL
172 : eq(163, 28) : BOOL
173 : eq(163, 30) : BOOL
174 : eq(163, 32) : BOOL
175 : ite(174, 11, 34) : BV:8
176 : ite(173, 11, 175) : BV:8
177 : ite(172, 11, 176) : BV:8
178 : ite(171, 11, 177) : BV:8
179 : ite(170, 25, 178) : BV:8
180 : ite(169, 22, 179) : BV:8
181 : ite(168, 11, 180) : BV:8
182 : ite(167, 11, 181) : BV:8
183 : ite(166, 15, 182) : BV:8
184 : ite(165, 11, 183) : BV:8
185 : ite(164, 11, 184) : BV:8
186 : bvadd(5, 116) : BV:32
187 : eq(186, 9) : BOOL
188 : eq(186, 12) : BOOL
189 : eq(186, 7) : BOOL
190 : eq(186, 16) : BOOL
191 : eq(186, 18) : BOOL
192 : eq(186, 20) : BOOL
193 : eq(186, 23) : BOOL
194 : eq(186, 26) : BOOL
195 : eq(186, 28) : BOOL
196 : eq(186, 30) : BOOL
197 : eq(186, 32) : BOOL
198 : ite(197, 11, 34) : BV:8
199 : ite(196, 11, 198) : BV:8
200 : ite(195, 11, 199) : BV:8
201 : ite(194, 11, 200) : BV:8
202 : ite(193, 25, 201) : BV:8
203 : ite(192, 22, 202) : BV:8
204 : ite(191, 11, 203) : BV:8
205 : ite(190, 11, 204) : BV:8
206 : ite(189, 15, 205) : BV:8
207 : ite(188, 11, 206) : BV:8
208 : ite(187, 11, 207) : BV:8
209 : bvconcat(139, 162, 185, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2534799433
=counter_example_end
=global nodece 25 num_edges_traversed 3
=global nodece 25 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 26
=global nodece 26 nodece z3v487.ce3310.num_edges_traversed3
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(epsilon)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce3310 66db9eaf64ce5ba694a7950b75b7821
=input.spec-%var-x-1
1 : Lambda1487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1488Var : BV:32
17 : Lambda1489Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1490Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
29 : eq(24, 28) : BOOL
30 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
31 : eq(24, 30) : BOOL
32 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268659199 ] -> 0, [ 268659200; 268659203 ] -> 255, [ 268659204; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 440323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 440324; 440327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 440328; 8388867 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8388868; 8388871 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 8388872; 268659199 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 268659200; 268659203 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 268659204; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 8388868 { 0x800104 +1.3099e130 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 440324 { 0x6b804 +1.5249071e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1487Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1488Var : BV:32
17 : Lambda1489Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1490Var : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 19) : BV:32
23 : bvmul(21, 16) : BV:32
24 : bvadd(20, 23, 2) : BV:32
25 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
26 : eq(24, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
29 : eq(24, 28) : BOOL
30 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
31 : eq(24, 30) : BOOL
32 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
33 : eq(24, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 27, 34) : BV:8
36 : ite(31, 27, 35) : BV:8
37 : ite(29, 27, 36) : BV:8
38 : ite(26, 27, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 23, 2) : BV:32
41 : eq(40, 25) : BOOL
42 : eq(40, 28) : BOOL
43 : eq(40, 30) : BOOL
44 : eq(40, 32) : BOOL
45 : ite(44, 27, 34) : BV:8
46 : ite(43, 27, 45) : BV:8
47 : ite(42, 27, 46) : BV:8
48 : ite(41, 27, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 23, 2) : BV:32
51 : eq(50, 25) : BOOL
52 : eq(50, 28) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 32) : BOOL
55 : ite(54, 27, 34) : BV:8
56 : ite(53, 27, 55) : BV:8
57 : ite(52, 27, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : bvadd(23, 2) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 32) : BOOL
64 : ite(63, 27, 34) : BV:8
65 : ite(62, 27, 64) : BV:8
66 : ite(61, 27, 65) : BV:8
67 : ite(60, 27, 66) : BV:8
68 : bvconcat(38, 48, 58, 67) : BV:32
69 : bvadd(20, 22, 68) : BV:32
70 : eq(69, 25) : BOOL
71 : eq(69, 28) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 32) : BOOL
74 : ite(73, 27, 34) : BV:8
75 : ite(72, 27, 74) : BV:8
76 : ite(71, 27, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : bvadd(39, 22, 68) : BV:32
79 : eq(78, 25) : BOOL
80 : eq(78, 28) : BOOL
81 : eq(78, 30) : BOOL
82 : eq(78, 32) : BOOL
83 : ite(82, 27, 34) : BV:8
84 : ite(81, 27, 83) : BV:8
85 : ite(80, 27, 84) : BV:8
86 : ite(79, 27, 85) : BV:8
87 : bvadd(49, 22, 68) : BV:32
88 : eq(87, 25) : BOOL
89 : eq(87, 28) : BOOL
90 : eq(87, 30) : BOOL
91 : eq(87, 32) : BOOL
92 : ite(91, 27, 34) : BV:8
93 : ite(90, 27, 92) : BV:8
94 : ite(89, 27, 93) : BV:8
95 : ite(88, 27, 94) : BV:8
96 : bvadd(22, 68) : BV:32
97 : eq(96, 25) : BOOL
98 : eq(96, 28) : BOOL
99 : eq(96, 30) : BOOL
100 : eq(96, 32) : BOOL
101 : ite(100, 27, 34) : BV:8
102 : ite(99, 27, 101) : BV:8
103 : ite(98, 27, 102) : BV:8
104 : ite(97, 27, 103) : BV:8
105 : bvconcat(77, 86, 95, 104) : BV:32
106 : lambda(19, 105) : FUNCTION[BV:32 -> BV:32]
107 : map(18, 106) : MAP[BV:32 -> BV:32]
108 : lambda(16, 107) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
109 : map(15, 108) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
110 : sym_const(109) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 664880861 { 0x27a146dd +1.25997507e208 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 440324 { 0x6b804 +1.5249071e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 440327 { 0x6b807 +1.5249106e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 8388868 { 0x800104 +1.3099e130 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 8388871 { 0x800107 +1.3135e130 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1427Var : BV:32
2 : Lambda1428Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
15 : eq(8, 14) : BOOL
16 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1437Var : BV:32
2 : Lambda1438Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 268659203 { 0x10036a03 +1.2667272e161 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 268659202 { 0x10036a02 +1.2667260e161 } : BV:32
13 : eq(8, 12) : BOOL
14 : 268659200 { 0x10036a00 +1.2667236e161 } : BV:32
15 : eq(8, 14) : BOOL
16 : 268659201 { 0x10036a01 +1.2667248e161 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2464020496
=counter_example_end
=global nodece 26 num_edges_traversed 3
=global nodece 26 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 27
=global nodece 27 nodece z3v487.ce3268.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3v487.ce3268 5d656efa6a8b932249a659a7cd7e7d5f
=input.spec-%var-x-1
1 : Lambda26395Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26396Var : BV:32
18 : Lambda26397Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26398Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1709676611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1709676612; 1709676615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1709676616; 2147485311 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147485312; 2147485315 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147485316; 2148054647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2148054648; 2148054651 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2148054652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2148054648 { 0x8008b678 -2146912648 -1.6806850e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147485312 { 0x80000680 -2147481984 -1.19836e129 } : BV:32
=input.dst.llvm-%n
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1709676612 { 0x65e79844 +1.80933427e76 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda26420Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda26421Var : BV:32
18 : Lambda26422Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda26423Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 835080693 { 0x31c651f5 +1.54937613e228 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 960586445 { 0x394162cd +1.51082766e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147485312 { 0x80000680 -2147481984 -1.19836e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147485315 { 0x80000683 -2147481981 -1.19872e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1709676612 { 0x65e79844 +1.80933427e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1709676615 { 0x65e79847 +1.80933463e76 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2148054648 { 0x8008b678 -2146912648 -1.6806850e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2148054651 { 0x8008b67b -2146912645 -1.6806886e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3956586809
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 28
=global nodece 28 nodece z3v487.ce3540.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce3540 12491b3a6673f808b9474b4f06632c5
=input.spec-%var-x-1
1 : Lambda29838Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29839Var : BV:32
18 : Lambda29840Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29841Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda29871Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda29872Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1048580; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda29863Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda29864Var : BV:32
18 : Lambda29865Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda29866Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
2 : unit : UNIT
3 : Lambda29848Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda29849Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1453152858 { 0x569d5a5a +1.22931981e46 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda29877Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda29878Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 337738078 { 0x1421795e +1.26151633e169 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1048579 { 0x100003 +1.12500035e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2466079006
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 29
=global nodece 29 nodece z3v487.ce3606.num_edges_traversed1
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce3606 4ad2ad947c7bd74b4045e59d273f59e8
=input.spec-%var-x-1
1 : Lambda31542Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31543Var : BV:32
18 : Lambda31544Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda31545Var : BV:32
62 : lambda(61, 2) : FUNCTION[BV:32 -> BV:32]
63 : map(60, 62) : MAP[BV:32 -> BV:32]
64 : lambda(17, 63) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
65 : map(16, 64) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
66 : sym_const(65) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda31653Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda31654Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 8; 3181392167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3181392168; 3181392171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3181392172; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3181392168 { 0xbda03128 -1113575128 -1.25150012e252 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda31555Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda31556Var : BV:32
18 : Lambda31557Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : 7 { 0x7 +1.83e129 } : BV:32
41 : bvule(18, 40) : BOOL
42 : and(39, 41) : BOOL
43 : 8 { 0x8 +1.95e129 } : BV:32
44 : bvule(43, 18) : BOOL
45 : bvule(18, 43) : BOOL
46 : and(44, 45) : BOOL
47 : 9 { 0x9 +1.107e129 } : BV:32
48 : bvule(47, 18) : BOOL
49 : bvule(18, 10) : BOOL
50 : and(48, 49) : BOOL
51 : ite(50, 47, 47) : BV:32
52 : ite(46, 43, 51) : BV:32
53 : ite(42, 2, 52) : BV:32
54 : eq(53, 2) : BOOL
55 : and(38, 54) : BOOL
56 : eq(37, 2) : BOOL
57 : and(56, 54) : BOOL
58 : or(55, 57) : BOOL
59 : ite(58, 7, 13) : BOOL
60 : lambda(18, 59) : FUNCTION[BV:32 -> BOOL]
61 : Lambda31558Var : BV:32
62 : eq(17, 23) : BOOL
63 : eq(61, 2) : BOOL
64 : and(62, 63) : BOOL
65 : eq(17, 2) : BOOL
66 : and(65, 63) : BOOL
67 : and(19, 25) : BOOL
68 : and(27, 32) : BOOL
69 : ite(68, 13, 13) : BOOL
70 : ite(67, 7, 69) : BOOL
71 : bvule(2, 61) : BOOL
72 : bvule(61, 40) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(43, 61) : BOOL
75 : bvule(61, 43) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(47, 61) : BOOL
78 : bvule(61, 10) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 47, 47) : BV:32
81 : ite(76, 43, 80) : BV:32
82 : ite(73, 2, 81) : BV:32
83 : eq(82, 2) : BOOL
84 : and(38, 83) : BOOL
85 : and(56, 83) : BOOL
86 : or(84, 85) : BOOL
87 : ite(86, 7, 13) : BOOL
88 : and(70, 87) : BOOL
89 : ite(66, 2, 2) : BV:32
90 : ite(64, 2, 89) : BV:32
91 : ite(88, 2, 90) : BV:32
92 : ite(66, 2, 91) : BV:32
93 : ite(64, 2, 92) : BV:32
94 : lambda(61, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(60, 94) : MAP[BV:32 -> BV:32]
96 : lambda(17, 95) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
97 : map(16, 96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
98 : sym_const(97) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda31643Var : BV:32
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : bvule(2, 20) : BOOL
22 : and(3, 21) : BOOL
23 : bvule(2, 2) : BOOL
24 : and(23, 5) : BOOL
25 : bvule(2, 8) : BOOL
26 : and(9, 25) : BOOL
27 : 33554433 { 0x2000001 +1.11e133 } : BV:32
28 : bvule(27, 2) : BOOL
29 : and(28, 11) : BOOL
30 : ite(29, 27, 27) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(24, 2, 31) : BV:32
33 : ite(22, 1, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : bvule(1, 19) : BOOL
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : bvule(19, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 8 { 0x8 +1.95e129 } : BV:32
40 : bvule(39, 19) : BOOL
41 : bvule(19, 39) : BOOL
42 : and(40, 41) : BOOL
43 : 9 { 0x9 +1.107e129 } : BV:32
44 : bvule(43, 19) : BOOL
45 : bvule(19, 10) : BOOL
46 : and(44, 45) : BOOL
47 : ite(46, 43, 43) : BV:32
48 : ite(42, 39, 47) : BV:32
49 : ite(38, 1, 48) : BV:32
50 : eq(49, 1) : BOOL
51 : and(34, 50) : BOOL
52 : eq(33, 1) : BOOL
53 : and(52, 50) : BOOL
54 : or(51, 53) : BOOL
55 : ite(54, 7, 13) : BOOL
56 : lambda(19, 55) : FUNCTION[BV:32 -> BOOL]
57 : Lambda31644Var : BV:32
58 : eq(2, 2) : BOOL
59 : eq(57, 1) : BOOL
60 : and(58, 59) : BOOL
61 : eq(2, 1) : BOOL
62 : and(61, 59) : BOOL
63 : bvule(1, 57) : BOOL
64 : bvule(57, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(39, 57) : BOOL
67 : bvule(57, 39) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(43, 57) : BOOL
70 : bvule(57, 10) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 43, 43) : BV:32
73 : ite(68, 39, 72) : BV:32
74 : ite(65, 1, 73) : BV:32
75 : eq(74, 1) : BOOL
76 : and(34, 75) : BOOL
77 : and(52, 75) : BOOL
78 : or(76, 77) : BOOL
79 : ite(78, 7, 13) : BOOL
80 : and(15, 79) : BOOL
81 : ite(62, 1, 1) : BV:32
82 : ite(60, 1, 81) : BV:32
83 : ite(80, 1, 82) : BV:32
84 : ite(62, 1, 83) : BV:32
85 : ite(60, 1, 84) : BV:32
86 : lambda(57, 85) : FUNCTION[BV:32 -> BV:32]
87 : map(56, 86) : MAP[BV:32 -> BV:32]
88 : sum(17, 18, 87) : SUM[UNIT,MAP[BV:32 -> BV:32]]
89 : sym_const(88) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda31659Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : bvule(3, 3) : BOOL
9 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
10 : bvule(3, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 33554432 { 0x2000000 +1.0e133 } : BV:32
13 : bvule(12, 3) : BOOL
14 : bvule(3, 12) : BOOL
15 : and(13, 14) : BOOL
16 : 33554433 { 0x2000001 +1.11e133 } : BV:32
17 : bvule(16, 3) : BOOL
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : bvule(3, 18) : BOOL
20 : and(17, 19) : BOOL
21 : ite(20, 16, 16) : BV:32
22 : ite(15, 12, 21) : BV:32
23 : ite(11, 3, 22) : BV:32
24 : ite(7, 2, 23) : BV:32
25 : eq(24, 3) : BOOL
26 : bvule(2, 1) : BOOL
27 : 7 { 0x7 +1.83e129 } : BV:32
28 : bvule(1, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(30, 1) : BOOL
32 : bvule(1, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 9 { 0x9 +1.107e129 } : BV:32
35 : bvule(34, 1) : BOOL
36 : bvule(1, 18) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 2, 39) : BV:32
41 : eq(40, 2) : BOOL
42 : and(25, 41) : BOOL
43 : eq(24, 2) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 48) : FUNCTION[BV:32 -> BOOL]
50 : Lambda31660Var : BV:32
51 : eq(3, 3) : BOOL
52 : eq(50, 2) : BOOL
53 : and(51, 52) : BOOL
54 : eq(3, 2) : BOOL
55 : and(54, 52) : BOOL
56 : and(4, 10) : BOOL
57 : and(13, 19) : BOOL
58 : ite(57, 47, 47) : BOOL
59 : ite(56, 46, 58) : BOOL
60 : bvule(2, 50) : BOOL
61 : bvule(50, 27) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(30, 50) : BOOL
64 : bvule(50, 30) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(34, 50) : BOOL
67 : bvule(50, 18) : BOOL
68 : and(66, 67) : BOOL
69 : ite(68, 34, 34) : BV:32
70 : ite(65, 30, 69) : BV:32
71 : ite(62, 2, 70) : BV:32
72 : eq(71, 2) : BOOL
73 : and(25, 72) : BOOL
74 : and(43, 72) : BOOL
75 : or(73, 74) : BOOL
76 : ite(75, 46, 47) : BOOL
77 : and(59, 76) : BOOL
78 : ite(55, 2, 2) : BV:32
79 : ite(53, 2, 78) : BV:32
80 : ite(77, 2, 79) : BV:32
81 : ite(55, 2, 80) : BV:32
82 : ite(53, 2, 81) : BV:32
83 : lambda(50, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(49, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3181392168 { 0xbda03128 -1113575128 -1.25150012e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3181392171 { 0xbda0312b -1113575125 -1.25150048e252 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda31477Var : BV:32
2 : Lambda31478Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda31487Var : BV:32
2 : Lambda31488Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 33554432 { 0x2000000 +1.0e133 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 33554433 { 0x2000001 +1.11e133 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : 7 { 0x7 +1.83e129 } : BV:32
29 : bvule(2, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 8 { 0x8 +1.95e129 } : BV:32
32 : bvule(31, 2) : BOOL
33 : bvule(2, 31) : BOOL
34 : and(32, 33) : BOOL
35 : 9 { 0x9 +1.107e129 } : BV:32
36 : bvule(35, 2) : BOOL
37 : bvule(2, 19) : BOOL
38 : and(36, 37) : BOOL
39 : ite(38, 35, 35) : BV:32
40 : ite(34, 31, 39) : BV:32
41 : ite(30, 3, 40) : BV:32
42 : eq(41, 3) : BOOL
43 : and(26, 42) : BOOL
44 : eq(25, 3) : BOOL
45 : and(44, 42) : BOOL
46 : or(43, 45) : BOOL
47 : 1 { 0x1 } : BOOL
48 : 0 { 0x0 } : BOOL
49 : ite(46, 47, 48) : BOOL
50 : lambda(1, 2, 49) : FUNCTION[BV:32,BV:32 -> BOOL]
51 : sym_const(50) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda31491Var : BV:32
2 : Lambda31492Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 33554432 { 0x2000000 +1.0e133 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(3, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 33554433 { 0x2000001 +1.11e133 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 3, 34) : BV:32
36 : ite(25, 5, 35) : BV:32
37 : eq(36, 3) : BOOL
38 : bvule(5, 2) : BOOL
39 : 7 { 0x7 +1.83e129 } : BV:32
40 : bvule(2, 39) : BOOL
41 : and(38, 40) : BOOL
42 : 8 { 0x8 +1.95e129 } : BV:32
43 : bvule(42, 2) : BOOL
44 : bvule(2, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 9 { 0x9 +1.107e129 } : BV:32
47 : bvule(46, 2) : BOOL
48 : bvule(2, 17) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 5, 51) : BV:32
53 : eq(52, 5) : BOOL
54 : and(37, 53) : BOOL
55 : eq(36, 5) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 14, 20) : BOOL
59 : and(22, 58) : BOOL
60 : ite(9, 5, 5) : BV:32
61 : ite(7, 5, 60) : BV:32
62 : ite(59, 5, 61) : BV:32
63 : ite(9, 5, 62) : BV:32
64 : ite(7, 5, 63) : BV:32
65 : lambda(1, 2, 64) : FUNCTION[BV:32,BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2801463143
=counter_example_end
=global nodece 29 num_edges_traversed 1
=global nodece 29 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 30
=global nodece 30 nodece z3.ce3658.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce3658 d5c17bf27181ed23c91242953165776
=input.spec-%var-x-1
1 : Lambda33746Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 9 { 0x9 +1.107e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 10 { 0xa +1.119e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33747Var : BV:32
18 : Lambda33748Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33749Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda33779Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33780Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 684957447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 684957448; 684957451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 684957452; 2848318907 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2848318908; 2848318911 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2848318912; 3366535435 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3366535436; 3366535439 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3366535440; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3366535436 { 0xc8a9410c -928431860 -1.32229757e18 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2848318908 { 0xa9c5e5bc -1446648388 -1.54607343e212 } : BV:32
=input.dst.llvm-%n
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 684957448 { 0x28d39f08 +1.65329074e210 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda33771Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 9 { 0x9 +1.107e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 10 { 0xa +1.119e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33772Var : BV:32
18 : Lambda33773Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33774Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda33756Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda33757Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 866351437 { 0x33a3794d +1.27713930e232 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda33785Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda33786Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1630904994 { 0x6135a2a2 +1.41902565e67 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2848318908 { 0xa9c5e5bc -1446648388 -1.54607343e212 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2848318911 { 0xa9c5e5bf -1446648385 -1.54607379e212 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 684957448 { 0x28d39f08 +1.65329074e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 684957451 { 0x28d39f0b +1.65329110e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3366535436 { 0xc8a9410c -928431860 -1.32229757e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3366535439 { 0xc8a9410f -928431857 -1.32229793e18 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 9 ] -> true, [ 10; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 9 ] -> true, [ 10; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2839310786
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 31
=global nodece 31 nodece z3.ce3689.num_edges_traversed2
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3.ce3689 a9d0824566538bacbb4ddc8b8294b92
=input.spec-%var-x-1
1 : Lambda33746Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 9 { 0x9 +1.107e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 10 { 0xa +1.119e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33747Var : BV:32
18 : Lambda33748Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33749Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda33945Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda33946Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 684957447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 684957448; 684957451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 684957452; 2848318907 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2848318908; 2848318911 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2848318912; 3366535435 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3366535436; 3366535439 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3366535440; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3366535436 { 0xc8a9410c -928431860 -1.32229757e18 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2848318908 { 0xa9c5e5bc -1446648388 -1.54607343e212 } : BV:32
=input.dst.llvm-%n
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 684957448 { 0x28d39f08 +1.65329074e210 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda33771Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 9 { 0x9 +1.107e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 10 { 0xa +1.119e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33772Var : BV:32
18 : Lambda33773Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33774Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 9 { 0x9 +1.107e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 10 { 0xa +1.119e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda33935Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda33936Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 866351437 { 0x33a3794d +1.27713930e232 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda33951Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda33952Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1630904994 { 0x6135a2a2 +1.41902565e67 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2848318908 { 0xa9c5e5bc -1446648388 -1.54607343e212 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2848318911 { 0xa9c5e5bf -1446648385 -1.54607379e212 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 684957448 { 0x28d39f08 +1.65329074e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 684957451 { 0x28d39f0b +1.65329110e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3366535436 { 0xc8a9410c -928431860 -1.32229757e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3366535439 { 0xc8a9410f -928431857 -1.32229793e18 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 9 ] -> true, [ 10; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 9 ] -> true, [ 10; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2839310786
=counter_example_end
=global nodece 31 num_edges_traversed 2
=global nodece 31 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 32
=global nodece 32 nodece z3.ce3713.num_edges_traversed4
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3.ce3713 0a63ed6eb8754763a62a2a12fb31ba1
=input.spec-%var-x-1
1 : Lambda33746Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 9 { 0x9 +1.107e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 10 { 0xa +1.119e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33747Var : BV:32
18 : Lambda33748Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33749Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda34023Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34024Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 684957447 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 684957448; 684957451 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 684957452; 2848318907 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2848318908; 2848318911 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2848318912; 3366535435 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3366535436; 3366535439 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3366535440; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3366535436 { 0xc8a9410c -928431860 -1.32229757e18 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2848318908 { 0xa9c5e5bc -1446648388 -1.54607343e212 } : BV:32
=input.dst.llvm-%n
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 684957448 { 0x28d39f08 +1.65329074e210 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda33771Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 9 { 0x9 +1.107e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 10 { 0xa +1.119e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33772Var : BV:32
18 : Lambda33773Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda33774Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 5 { 0x5 +1.59e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 9 { 0x9 +1.107e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 10 { 0xa +1.119e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda34013Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda34014Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 866351438 { 0x33a3794e +1.27713942e232 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda34029Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda34030Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1630904995 { 0x6135a2a3 +1.41902577e67 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2848318908 { 0xa9c5e5bc -1446648388 -1.54607343e212 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2848318911 { 0xa9c5e5bf -1446648385 -1.54607379e212 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 684957448 { 0x28d39f08 +1.65329074e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 684957451 { 0x28d39f0b +1.65329110e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3366535436 { 0xc8a9410c -928431860 -1.32229757e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3366535439 { 0xc8a9410f -928431857 -1.32229793e18 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 9 ] -> true, [ 10; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 9 ] -> true, [ 10; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2839310786
=counter_example_end
=global nodece 32 num_edges_traversed 4
=global nodece 32 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 33
=global nodece 33 nodece z3v487.ce3760.num_edges_traversed1
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3v487.ce3760 caf3ba54aebf4a62d3733988368a2610
=input.spec-%var-x-1
1 : Lambda34317Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1794878543 { 0x6afbac4f +1.96619594e86 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1794878544 { 0x6afbac50 +1.96619606e86 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34318Var : BV:32
18 : Lambda34319Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda34320Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda34350Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda34351Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 6595 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 6596; 6599 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 6600; 4194307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194308; 4194311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194312; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 1794878544 { 0x6afbac50 +1.96619606e86 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 6596 { 0x19c4 +1.78630e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda34342Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1794878543 { 0x6afbac4f +1.96619594e86 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1794878544 { 0x6afbac50 +1.96619606e86 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34343Var : BV:32
18 : Lambda34344Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda34345Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda34327Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda34328Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1275616396 { 0x4c085c8c +1.6532430e25 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda34356Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda34357Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2142312477 { 0x7fb1181d +1.38354837e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 6596 { 0x19c4 +1.78630e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 6599 { 0x19c7 +1.78666e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194311 { 0x400007 +1.50000083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1794878543 ] -> true, [ 1794878544; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1794878543 ] -> true, [ 1794878544; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1995773828
=counter_example_end
=global nodece 33 num_edges_traversed 1
=global nodece 33 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 34
=global nodece 34 nodece z3v487.ce3826.num_edges_traversed1
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3v487.ce3826 1e9960cc433df99cd21deda8ffc74de
=input.spec-%var-x-1
1 : Lambda36194Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36195Var : BV:32
18 : Lambda36196Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36197Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda36255Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda36256Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 335415327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 335415328; 335415331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 335415332; 737558787 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 737558788; 737558791 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 737558792; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda36211Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36212Var : BV:32
18 : Lambda36213Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36214Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda36245Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda36246Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda36261Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda36262Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 737558791 { 0x2bf64107 +1.92385947e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 335415331 { 0x13fe0823 +1.98462331e168 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
684446497
=counter_example_end
=global nodece 34 num_edges_traversed 1
=global nodece 34 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 35
=global nodece 35 nodece z3v487.ce3859.num_edges_traversed3
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3v487.ce3859 53e82b84972ddb2ae3147ec62b4bcab
=input.spec-%var-x-1
1 : Lambda36194Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36195Var : BV:32
18 : Lambda36196Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36197Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda36333Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda36334Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 335415327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 335415328; 335415331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 335415332; 737558787 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 737558788; 737558791 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 737558792; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda36211Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36212Var : BV:32
18 : Lambda36213Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36214Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda36323Var : BV:32
20 : lambda(19, 13) : FUNCTION[BV:32 -> BOOL]
21 : Lambda36324Var : BV:32
22 : lambda(21, 1) : FUNCTION[BV:32 -> BV:32]
23 : map(20, 22) : MAP[BV:32 -> BV:32]
24 : sum(17, 18, 23) : SUM[UNIT,MAP[BV:32 -> BV:32]]
25 : sym_const(24) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 928487693 { 0x3757990d +1.68435823e239 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda36339Var : BV:32
2 : 0 { 0x0 } : BOOL
3 : lambda(1, 2) : FUNCTION[BV:32 -> BOOL]
4 : Lambda36340Var : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : lambda(4, 5) : FUNCTION[BV:32 -> BV:32]
7 : map(3, 6) : MAP[BV:32 -> BV:32]
8 : sym_const(7) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1513448778 { 0x5a35654a +1.41715359e53 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 737558791 { 0x2bf64107 +1.92385947e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 335415331 { 0x13fe0823 +1.98462331e168 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
303740617
=counter_example_end
=global nodece 35 num_edges_traversed 3
=global nodece 35 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 36
=global nodece 36 nodece z3v487.ce3895.num_edges_traversed4
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(epsilon)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3v487.ce3895 34bcd0f7272a6054a7a2718d8cbe49a9
=input.spec-%var-x-1
1 : Lambda36194Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36195Var : BV:32
18 : Lambda36196Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36197Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 335415327 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 335415328; 335415331 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 335415332; 737558787 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 737558788; 737558791 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 737558792; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda36211Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294279023 { 0xfff57f6f -688273 -1.91795146e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294279024 { 0xfff57f70 -688272 -1.91795158e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36212Var : BV:32
18 : Lambda36213Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda36214Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 928487694 { 0x3757990e +1.68435835e239 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2147483649 { 0x80000001 -2147483647 -1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1513448779 { 0x5a35654b +1.41715371e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 737558788 { 0x2bf64104 +1.92385911e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 737558791 { 0x2bf64107 +1.92385947e216 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 335415328 { 0x13fe0820 +1.98462295e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 335415331 { 0x13fe0823 +1.98462331e168 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294279023 ] -> true, [ 4294279024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
303740617
=counter_example_end
=global nodece 36 num_edges_traversed 4
=global nodece 36 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 37
=global nodece 37 nodece z3v487.ce3899.num_edges_traversed1
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3v487.ce3899 a3dc90a0147d786b91f894bd39ab8daa
=input.spec-%var-x-1
1 : Lambda37858Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4202004478 { 0xfa757ffe -92962818 -1.91796851e117 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4202004479 { 0xfa757fff -92962817 -1.91796863e117 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37859Var : BV:32
18 : Lambda37860Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda37861Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda37891Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda37892Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 12; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%n
1 : 4202004479 { 0xfa757fff -92962817 -1.91796863e117 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda37883Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4202004478 { 0xfa757ffe -92962818 -1.91796851e117 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4202004479 { 0xfa757fff -92962817 -1.91796863e117 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda37884Var : BV:32
18 : Lambda37885Var : BV:32
19 : lambda(18, 13) : FUNCTION[BV:32 -> BOOL]
20 : Lambda37886Var : BV:32
21 : lambda(20, 2) : FUNCTION[BV:32 -> BV:32]
22 : map(19, 21) : MAP[BV:32 -> BV:32]
23 : lambda(17, 22) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
24 : map(16, 23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
25 : sym_const(24) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2048 { 0x800 +1.24414e129 } : BV:32
2 : unit : UNIT
3 : Lambda37868Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda37869Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1619621082 { 0x608974da +1.7387852e66 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3221225470 { 0xbffffffe -1073741826 -1.99999976e0 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda37897Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda37898Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1673858067 { 0x63c50c13 +1.53943097e72 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 3221225471 { 0xbfffffff -1073741825 -1.99999988e0 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4202004478 ] -> true, [ 4202004479; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4202004478 ] -> true, [ 4202004479; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2090207708
=counter_example_end
=global nodece 37 num_edges_traversed 1
=global nodece 37 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 38
=global nodece 38 nodece z3.ce3965.num_edges_traversed1
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce3965 6c8229cd354ec84cddb83af4c3025e8
=input.spec-%var-x-1
1 : Lambda39043Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda39044Var : BV:32
17 : Lambda39045Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda39046Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : and(18, 26) : BOOL
60 : ite(24, 12, 12) : BOOL
61 : ite(59, 7, 60) : BOOL
62 : bvule(2, 53) : BOOL
63 : bvule(53, 2) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(35, 53) : BOOL
66 : bvule(53, 35) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(39, 53) : BOOL
69 : bvule(53, 8) : BOOL
70 : and(68, 69) : BOOL
71 : ite(70, 39, 39) : BV:32
72 : ite(67, 35, 71) : BV:32
73 : ite(64, 2, 72) : BV:32
74 : eq(73, 2) : BOOL
75 : and(31, 74) : BOOL
76 : and(48, 74) : BOOL
77 : ite(76, 7, 12) : BOOL
78 : ite(75, 7, 77) : BOOL
79 : and(61, 78) : BOOL
80 : 3 { 0x3 +1.35e129 } : BV:32
81 : 4 { 0x4 +1.47e129 } : BV:32
82 : bvmul(81, 53) : BV:32
83 : bvmul(81, 16) : BV:32
84 : bvadd(80, 83) : BV:32
85 : eq(84, 2) : BOOL
86 : 168 { 0xa8 -88 } : BV:8
87 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
88 : eq(84, 87) : BOOL
89 : 235 { 0xeb -21 } : BV:8
90 : eq(84, 80) : BOOL
91 : 27 { 0x1b } : BV:8
92 : eq(84, 35) : BOOL
93 : 223 { 0xdf -33 } : BV:8
94 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
95 : eq(84, 94) : BOOL
96 : 68 { 0x44 } : BV:8
97 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
98 : eq(84, 97) : BOOL
99 : 114 { 0x72 } : BV:8
100 : eq(84, 39) : BOOL
101 : 104 { 0x68 } : BV:8
102 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
103 : eq(84, 102) : BOOL
104 : 164 { 0xa4 -92 } : BV:8
105 : 0 { 0x0 } : BV:8
106 : ite(103, 104, 105) : BV:8
107 : ite(100, 101, 106) : BV:8
108 : ite(98, 99, 107) : BV:8
109 : ite(95, 96, 108) : BV:8
110 : ite(92, 93, 109) : BV:8
111 : ite(90, 91, 110) : BV:8
112 : ite(88, 89, 111) : BV:8
113 : ite(85, 86, 112) : BV:8
114 : bvadd(39, 83) : BV:32
115 : eq(114, 2) : BOOL
116 : eq(114, 87) : BOOL
117 : eq(114, 80) : BOOL
118 : eq(114, 35) : BOOL
119 : eq(114, 94) : BOOL
120 : eq(114, 97) : BOOL
121 : eq(114, 39) : BOOL
122 : eq(114, 102) : BOOL
123 : ite(122, 104, 105) : BV:8
124 : ite(121, 101, 123) : BV:8
125 : ite(120, 99, 124) : BV:8
126 : ite(119, 96, 125) : BV:8
127 : ite(118, 93, 126) : BV:8
128 : ite(117, 91, 127) : BV:8
129 : ite(116, 89, 128) : BV:8
130 : ite(115, 86, 129) : BV:8
131 : bvadd(35, 83) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 87) : BOOL
134 : eq(131, 80) : BOOL
135 : eq(131, 35) : BOOL
136 : eq(131, 94) : BOOL
137 : eq(131, 97) : BOOL
138 : eq(131, 39) : BOOL
139 : eq(131, 102) : BOOL
140 : ite(139, 104, 105) : BV:8
141 : ite(138, 101, 140) : BV:8
142 : ite(137, 99, 141) : BV:8
143 : ite(136, 96, 142) : BV:8
144 : ite(135, 93, 143) : BV:8
145 : ite(134, 91, 144) : BV:8
146 : ite(133, 89, 145) : BV:8
147 : ite(132, 86, 146) : BV:8
148 : eq(83, 2) : BOOL
149 : eq(83, 87) : BOOL
150 : eq(83, 80) : BOOL
151 : eq(83, 35) : BOOL
152 : eq(83, 94) : BOOL
153 : eq(83, 97) : BOOL
154 : eq(83, 39) : BOOL
155 : eq(83, 102) : BOOL
156 : ite(155, 104, 105) : BV:8
157 : ite(154, 101, 156) : BV:8
158 : ite(153, 99, 157) : BV:8
159 : ite(152, 96, 158) : BV:8
160 : ite(151, 93, 159) : BV:8
161 : ite(150, 91, 160) : BV:8
162 : ite(149, 89, 161) : BV:8
163 : ite(148, 86, 162) : BV:8
164 : bvconcat(113, 130, 147, 163) : BV:32
165 : bvadd(80, 82, 164) : BV:32
166 : eq(165, 2) : BOOL
167 : eq(165, 87) : BOOL
168 : eq(165, 80) : BOOL
169 : eq(165, 35) : BOOL
170 : eq(165, 94) : BOOL
171 : eq(165, 97) : BOOL
172 : eq(165, 39) : BOOL
173 : eq(165, 102) : BOOL
174 : ite(173, 104, 105) : BV:8
175 : ite(172, 101, 174) : BV:8
176 : ite(171, 99, 175) : BV:8
177 : ite(170, 96, 176) : BV:8
178 : ite(169, 93, 177) : BV:8
179 : ite(168, 91, 178) : BV:8
180 : ite(167, 89, 179) : BV:8
181 : ite(166, 86, 180) : BV:8
182 : bvadd(39, 82, 164) : BV:32
183 : eq(182, 2) : BOOL
184 : eq(182, 87) : BOOL
185 : eq(182, 80) : BOOL
186 : eq(182, 35) : BOOL
187 : eq(182, 94) : BOOL
188 : eq(182, 97) : BOOL
189 : eq(182, 39) : BOOL
190 : eq(182, 102) : BOOL
191 : ite(190, 104, 105) : BV:8
192 : ite(189, 101, 191) : BV:8
193 : ite(188, 99, 192) : BV:8
194 : ite(187, 96, 193) : BV:8
195 : ite(186, 93, 194) : BV:8
196 : ite(185, 91, 195) : BV:8
197 : ite(184, 89, 196) : BV:8
198 : ite(183, 86, 197) : BV:8
199 : bvadd(35, 82, 164) : BV:32
200 : eq(199, 2) : BOOL
201 : eq(199, 87) : BOOL
202 : eq(199, 80) : BOOL
203 : eq(199, 35) : BOOL
204 : eq(199, 94) : BOOL
205 : eq(199, 97) : BOOL
206 : eq(199, 39) : BOOL
207 : eq(199, 102) : BOOL
208 : ite(207, 104, 105) : BV:8
209 : ite(206, 101, 208) : BV:8
210 : ite(205, 99, 209) : BV:8
211 : ite(204, 96, 210) : BV:8
212 : ite(203, 93, 211) : BV:8
213 : ite(202, 91, 212) : BV:8
214 : ite(201, 89, 213) : BV:8
215 : ite(200, 86, 214) : BV:8
216 : bvadd(82, 164) : BV:32
217 : eq(216, 2) : BOOL
218 : eq(216, 87) : BOOL
219 : eq(216, 80) : BOOL
220 : eq(216, 35) : BOOL
221 : eq(216, 94) : BOOL
222 : eq(216, 97) : BOOL
223 : eq(216, 39) : BOOL
224 : eq(216, 102) : BOOL
225 : ite(224, 104, 105) : BV:8
226 : ite(223, 101, 225) : BV:8
227 : ite(222, 99, 226) : BV:8
228 : ite(221, 96, 227) : BV:8
229 : ite(220, 93, 228) : BV:8
230 : ite(219, 91, 229) : BV:8
231 : ite(218, 89, 230) : BV:8
232 : ite(217, 86, 231) : BV:8
233 : bvconcat(181, 198, 215, 232) : BV:32
234 : ite(58, 2, 233) : BV:32
235 : ite(56, 2, 234) : BV:32
236 : ite(79, 233, 235) : BV:32
237 : ite(58, 2, 236) : BV:32
238 : ite(56, 2, 237) : BV:32
239 : lambda(53, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(52, 239) : MAP[BV:32 -> BV:32]
241 : lambda(16, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(15, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda39150Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda39151Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 27 { 0x1b } : BV:8
59 : eq(51, 21) : BOOL
60 : 223 { 0xdf -33 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 104 { 0x68 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 223, [ 2; 2 ] -> 104, [ 3; 3 ] -> 27, [ 4; 4294967287 ] -> 0, [ 4294967288; 4294967288 ] -> 164, [ 4294967289; 4294967289 ] -> 114, [ 4294967290; 4294967290 ] -> 235, [ 4294967291; 4294967291 ] -> 68, [ 4294967292; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 740395007 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 740395008; 740395011 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 740395012; 1061322755 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1061322756; 1061322759 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1061322760; 3663098495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3663098496; 3663098499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3663098500; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1061322756 { 0x3f428004 +1.51953172e255 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3663098496 { 0xda567280 -631868800 -1.67536926e53 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 740395008 { 0x2c218800 +1.26196289e217 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda39056Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda39057Var : BV:32
17 : Lambda39058Var : BV:32
18 : bvule(2, 16) : BOOL
19 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
20 : bvule(16, 19) : BOOL
21 : and(18, 20) : BOOL
22 : bvule(8, 16) : BOOL
23 : bvule(16, 8) : BOOL
24 : and(22, 23) : BOOL
25 : bvule(4, 16) : BOOL
26 : bvule(16, 4) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 4, 4) : BV:32
29 : ite(24, 8, 28) : BV:32
30 : ite(21, 2, 29) : BV:32
31 : eq(30, 4) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : bvule(35, 17) : BOOL
37 : bvule(17, 35) : BOOL
38 : and(36, 37) : BOOL
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvule(39, 17) : BOOL
41 : bvule(17, 8) : BOOL
42 : and(40, 41) : BOOL
43 : ite(42, 39, 39) : BV:32
44 : ite(38, 35, 43) : BV:32
45 : ite(34, 2, 44) : BV:32
46 : eq(45, 2) : BOOL
47 : and(31, 46) : BOOL
48 : eq(30, 2) : BOOL
49 : and(48, 46) : BOOL
50 : ite(49, 7, 12) : BOOL
51 : ite(47, 7, 50) : BOOL
52 : lambda(17, 51) : FUNCTION[BV:32 -> BOOL]
53 : Lambda39059Var : BV:32
54 : eq(16, 4) : BOOL
55 : eq(53, 2) : BOOL
56 : and(54, 55) : BOOL
57 : eq(16, 2) : BOOL
58 : and(57, 55) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 53) : BV:32
62 : bvmul(60, 16) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 2) : BOOL
65 : 168 { 0xa8 -88 } : BV:8
66 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
67 : eq(63, 66) : BOOL
68 : 235 { 0xeb -21 } : BV:8
69 : eq(63, 59) : BOOL
70 : 27 { 0x1b } : BV:8
71 : eq(63, 35) : BOOL
72 : 223 { 0xdf -33 } : BV:8
73 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
74 : eq(63, 73) : BOOL
75 : 68 { 0x44 } : BV:8
76 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
77 : eq(63, 76) : BOOL
78 : 114 { 0x72 } : BV:8
79 : eq(63, 39) : BOOL
80 : 104 { 0x68 } : BV:8
81 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
82 : eq(63, 81) : BOOL
83 : 164 { 0xa4 -92 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : ite(79, 80, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(71, 72, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(67, 68, 90) : BV:8
92 : ite(64, 65, 91) : BV:8
93 : bvadd(39, 62) : BV:32
94 : eq(93, 2) : BOOL
95 : eq(93, 66) : BOOL
96 : eq(93, 59) : BOOL
97 : eq(93, 35) : BOOL
98 : eq(93, 73) : BOOL
99 : eq(93, 76) : BOOL
100 : eq(93, 39) : BOOL
101 : eq(93, 81) : BOOL
102 : ite(101, 83, 84) : BV:8
103 : ite(100, 80, 102) : BV:8
104 : ite(99, 78, 103) : BV:8
105 : ite(98, 75, 104) : BV:8
106 : ite(97, 72, 105) : BV:8
107 : ite(96, 70, 106) : BV:8
108 : ite(95, 68, 107) : BV:8
109 : ite(94, 65, 108) : BV:8
110 : bvadd(35, 62) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 66) : BOOL
113 : eq(110, 59) : BOOL
114 : eq(110, 35) : BOOL
115 : eq(110, 73) : BOOL
116 : eq(110, 76) : BOOL
117 : eq(110, 39) : BOOL
118 : eq(110, 81) : BOOL
119 : ite(118, 83, 84) : BV:8
120 : ite(117, 80, 119) : BV:8
121 : ite(116, 78, 120) : BV:8
122 : ite(115, 75, 121) : BV:8
123 : ite(114, 72, 122) : BV:8
124 : ite(113, 70, 123) : BV:8
125 : ite(112, 68, 124) : BV:8
126 : ite(111, 65, 125) : BV:8
127 : eq(62, 2) : BOOL
128 : eq(62, 66) : BOOL
129 : eq(62, 59) : BOOL
130 : eq(62, 35) : BOOL
131 : eq(62, 73) : BOOL
132 : eq(62, 76) : BOOL
133 : eq(62, 39) : BOOL
134 : eq(62, 81) : BOOL
135 : ite(134, 83, 84) : BV:8
136 : ite(133, 80, 135) : BV:8
137 : ite(132, 78, 136) : BV:8
138 : ite(131, 75, 137) : BV:8
139 : ite(130, 72, 138) : BV:8
140 : ite(129, 70, 139) : BV:8
141 : ite(128, 68, 140) : BV:8
142 : ite(127, 65, 141) : BV:8
143 : bvconcat(92, 109, 126, 142) : BV:32
144 : bvadd(59, 61, 143) : BV:32
145 : eq(144, 2) : BOOL
146 : eq(144, 66) : BOOL
147 : eq(144, 59) : BOOL
148 : eq(144, 35) : BOOL
149 : eq(144, 73) : BOOL
150 : eq(144, 76) : BOOL
151 : eq(144, 39) : BOOL
152 : eq(144, 81) : BOOL
153 : ite(152, 83, 84) : BV:8
154 : ite(151, 80, 153) : BV:8
155 : ite(150, 78, 154) : BV:8
156 : ite(149, 75, 155) : BV:8
157 : ite(148, 72, 156) : BV:8
158 : ite(147, 70, 157) : BV:8
159 : ite(146, 68, 158) : BV:8
160 : ite(145, 65, 159) : BV:8
161 : bvadd(39, 61, 143) : BV:32
162 : eq(161, 2) : BOOL
163 : eq(161, 66) : BOOL
164 : eq(161, 59) : BOOL
165 : eq(161, 35) : BOOL
166 : eq(161, 73) : BOOL
167 : eq(161, 76) : BOOL
168 : eq(161, 39) : BOOL
169 : eq(161, 81) : BOOL
170 : ite(169, 83, 84) : BV:8
171 : ite(168, 80, 170) : BV:8
172 : ite(167, 78, 171) : BV:8
173 : ite(166, 75, 172) : BV:8
174 : ite(165, 72, 173) : BV:8
175 : ite(164, 70, 174) : BV:8
176 : ite(163, 68, 175) : BV:8
177 : ite(162, 65, 176) : BV:8
178 : bvadd(35, 61, 143) : BV:32
179 : eq(178, 2) : BOOL
180 : eq(178, 66) : BOOL
181 : eq(178, 59) : BOOL
182 : eq(178, 35) : BOOL
183 : eq(178, 73) : BOOL
184 : eq(178, 76) : BOOL
185 : eq(178, 39) : BOOL
186 : eq(178, 81) : BOOL
187 : ite(186, 83, 84) : BV:8
188 : ite(185, 80, 187) : BV:8
189 : ite(184, 78, 188) : BV:8
190 : ite(183, 75, 189) : BV:8
191 : ite(182, 72, 190) : BV:8
192 : ite(181, 70, 191) : BV:8
193 : ite(180, 68, 192) : BV:8
194 : ite(179, 65, 193) : BV:8
195 : bvadd(61, 143) : BV:32
196 : eq(195, 2) : BOOL
197 : eq(195, 66) : BOOL
198 : eq(195, 59) : BOOL
199 : eq(195, 35) : BOOL
200 : eq(195, 73) : BOOL
201 : eq(195, 76) : BOOL
202 : eq(195, 39) : BOOL
203 : eq(195, 81) : BOOL
204 : ite(203, 83, 84) : BV:8
205 : ite(202, 80, 204) : BV:8
206 : ite(201, 78, 205) : BV:8
207 : ite(200, 75, 206) : BV:8
208 : ite(199, 72, 207) : BV:8
209 : ite(198, 70, 208) : BV:8
210 : ite(197, 68, 209) : BV:8
211 : ite(196, 65, 210) : BV:8
212 : bvconcat(160, 177, 194, 211) : BV:32
213 : ite(58, 2, 212) : BV:32
214 : ite(56, 2, 213) : BV:32
215 : lambda(53, 214) : FUNCTION[BV:32 -> BV:32]
216 : map(52, 215) : MAP[BV:32 -> BV:32]
217 : lambda(16, 216) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
218 : map(15, 217) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
219 : sym_const(218) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(7, 2) : BOOL
9 : bvule(2, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : ite(10, 11, 11) : BOOL
13 : ite(5, 6, 12) : BOOL
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : ite(13, 14, 1) : BV:32
16 : unit : UNIT
17 : Lambda39140Var : BV:32
18 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
19 : bvule(2, 18) : BOOL
20 : and(3, 19) : BOOL
21 : and(4, 4) : BOOL
22 : ite(21, 2, 2) : BV:32
23 : ite(10, 7, 22) : BV:32
24 : ite(20, 1, 23) : BV:32
25 : eq(24, 2) : BOOL
26 : bvule(1, 17) : BOOL
27 : bvule(17, 1) : BOOL
28 : and(26, 27) : BOOL
29 : bvule(14, 17) : BOOL
30 : bvule(17, 14) : BOOL
31 : and(29, 30) : BOOL
32 : 2 { 0x2 +1.23e129 } : BV:32
33 : bvule(32, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 32, 32) : BV:32
37 : ite(31, 14, 36) : BV:32
38 : ite(28, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(25, 39) : BOOL
41 : eq(24, 1) : BOOL
42 : and(41, 39) : BOOL
43 : ite(42, 6, 11) : BOOL
44 : ite(40, 6, 43) : BOOL
45 : lambda(17, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda39141Var : BV:32
47 : eq(2, 2) : BOOL
48 : eq(46, 1) : BOOL
49 : and(47, 48) : BOOL
50 : eq(2, 1) : BOOL
51 : and(50, 48) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 46) : BV:32
55 : bvmul(53, 2) : BV:32
56 : bvadd(52, 55) : BV:32
57 : eq(56, 1) : BOOL
58 : 168 { 0xa8 -88 } : BV:8
59 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
60 : eq(56, 59) : BOOL
61 : 235 { 0xeb -21 } : BV:8
62 : eq(56, 52) : BOOL
63 : 27 { 0x1b } : BV:8
64 : eq(56, 14) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
67 : eq(56, 66) : BOOL
68 : 68 { 0x44 } : BV:8
69 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
70 : eq(56, 69) : BOOL
71 : 114 { 0x72 } : BV:8
72 : eq(56, 32) : BOOL
73 : 104 { 0x68 } : BV:8
74 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
75 : eq(56, 74) : BOOL
76 : 164 { 0xa4 -92 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(70, 71, 79) : BV:8
81 : ite(67, 68, 80) : BV:8
82 : ite(64, 65, 81) : BV:8
83 : ite(62, 63, 82) : BV:8
84 : ite(60, 61, 83) : BV:8
85 : ite(57, 58, 84) : BV:8
86 : bvadd(32, 55) : BV:32
87 : eq(86, 1) : BOOL
88 : eq(86, 59) : BOOL
89 : eq(86, 52) : BOOL
90 : eq(86, 14) : BOOL
91 : eq(86, 66) : BOOL
92 : eq(86, 69) : BOOL
93 : eq(86, 32) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 71, 96) : BV:8
98 : ite(91, 68, 97) : BV:8
99 : ite(90, 65, 98) : BV:8
100 : ite(89, 63, 99) : BV:8
101 : ite(88, 61, 100) : BV:8
102 : ite(87, 58, 101) : BV:8
103 : bvadd(14, 55) : BV:32
104 : eq(103, 1) : BOOL
105 : eq(103, 59) : BOOL
106 : eq(103, 52) : BOOL
107 : eq(103, 14) : BOOL
108 : eq(103, 66) : BOOL
109 : eq(103, 69) : BOOL
110 : eq(103, 32) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 71, 113) : BV:8
115 : ite(108, 68, 114) : BV:8
116 : ite(107, 65, 115) : BV:8
117 : ite(106, 63, 116) : BV:8
118 : ite(105, 61, 117) : BV:8
119 : ite(104, 58, 118) : BV:8
120 : eq(55, 1) : BOOL
121 : eq(55, 59) : BOOL
122 : eq(55, 52) : BOOL
123 : eq(55, 14) : BOOL
124 : eq(55, 66) : BOOL
125 : eq(55, 69) : BOOL
126 : eq(55, 32) : BOOL
127 : eq(55, 74) : BOOL
128 : ite(127, 76, 77) : BV:8
129 : ite(126, 73, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : ite(124, 68, 130) : BV:8
132 : ite(123, 65, 131) : BV:8
133 : ite(122, 63, 132) : BV:8
134 : ite(121, 61, 133) : BV:8
135 : ite(120, 58, 134) : BV:8
136 : bvconcat(85, 102, 119, 135) : BV:32
137 : bvadd(52, 54, 136) : BV:32
138 : eq(137, 1) : BOOL
139 : eq(137, 59) : BOOL
140 : eq(137, 52) : BOOL
141 : eq(137, 14) : BOOL
142 : eq(137, 66) : BOOL
143 : eq(137, 69) : BOOL
144 : eq(137, 32) : BOOL
145 : eq(137, 74) : BOOL
146 : ite(145, 76, 77) : BV:8
147 : ite(144, 73, 146) : BV:8
148 : ite(143, 71, 147) : BV:8
149 : ite(142, 68, 148) : BV:8
150 : ite(141, 65, 149) : BV:8
151 : ite(140, 63, 150) : BV:8
152 : ite(139, 61, 151) : BV:8
153 : ite(138, 58, 152) : BV:8
154 : bvadd(32, 54, 136) : BV:32
155 : eq(154, 1) : BOOL
156 : eq(154, 59) : BOOL
157 : eq(154, 52) : BOOL
158 : eq(154, 14) : BOOL
159 : eq(154, 66) : BOOL
160 : eq(154, 69) : BOOL
161 : eq(154, 32) : BOOL
162 : eq(154, 74) : BOOL
163 : ite(162, 76, 77) : BV:8
164 : ite(161, 73, 163) : BV:8
165 : ite(160, 71, 164) : BV:8
166 : ite(159, 68, 165) : BV:8
167 : ite(158, 65, 166) : BV:8
168 : ite(157, 63, 167) : BV:8
169 : ite(156, 61, 168) : BV:8
170 : ite(155, 58, 169) : BV:8
171 : bvadd(14, 54, 136) : BV:32
172 : eq(171, 1) : BOOL
173 : eq(171, 59) : BOOL
174 : eq(171, 52) : BOOL
175 : eq(171, 14) : BOOL
176 : eq(171, 66) : BOOL
177 : eq(171, 69) : BOOL
178 : eq(171, 32) : BOOL
179 : eq(171, 74) : BOOL
180 : ite(179, 76, 77) : BV:8
181 : ite(178, 73, 180) : BV:8
182 : ite(177, 71, 181) : BV:8
183 : ite(176, 68, 182) : BV:8
184 : ite(175, 65, 183) : BV:8
185 : ite(174, 63, 184) : BV:8
186 : ite(173, 61, 185) : BV:8
187 : ite(172, 58, 186) : BV:8
188 : bvadd(54, 136) : BV:32
189 : eq(188, 1) : BOOL
190 : eq(188, 59) : BOOL
191 : eq(188, 52) : BOOL
192 : eq(188, 14) : BOOL
193 : eq(188, 66) : BOOL
194 : eq(188, 69) : BOOL
195 : eq(188, 32) : BOOL
196 : eq(188, 74) : BOOL
197 : ite(196, 76, 77) : BV:8
198 : ite(195, 73, 197) : BV:8
199 : ite(194, 71, 198) : BV:8
200 : ite(193, 68, 199) : BV:8
201 : ite(192, 65, 200) : BV:8
202 : ite(191, 63, 201) : BV:8
203 : ite(190, 61, 202) : BV:8
204 : ite(189, 58, 203) : BV:8
205 : bvconcat(153, 170, 187, 204) : BV:32
206 : ite(51, 1, 205) : BV:32
207 : ite(49, 1, 206) : BV:32
208 : lambda(46, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(45, 208) : MAP[BV:32 -> BV:32]
210 : sum(15, 16, 209) : SUM[UNIT,MAP[BV:32 -> BV:32]]
211 : sym_const(210) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda39156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : bvule(3, 3) : BOOL
13 : and(12, 12) : BOOL
14 : ite(13, 3, 3) : BV:32
15 : ite(11, 8, 14) : BV:32
16 : ite(7, 2, 15) : BV:32
17 : eq(16, 3) : BOOL
18 : bvule(2, 1) : BOOL
19 : bvule(1, 2) : BOOL
20 : and(18, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : bvule(1, 21) : BOOL
24 : and(22, 23) : BOOL
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 21, 29) : BV:32
31 : ite(20, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(17, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : eq(16, 2) : BOOL
36 : and(35, 32) : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(36, 34, 37) : BOOL
39 : ite(33, 34, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda39157Var : BV:32
42 : eq(3, 3) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : eq(3, 2) : BOOL
46 : and(45, 43) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 41) : BV:32
50 : bvmul(48, 3) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 2) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
55 : eq(51, 54) : BOOL
56 : 235 { 0xeb -21 } : BV:8
57 : eq(51, 47) : BOOL
58 : 27 { 0x1b } : BV:8
59 : eq(51, 21) : BOOL
60 : 223 { 0xdf -33 } : BV:8
61 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
62 : eq(51, 61) : BOOL
63 : 68 { 0x44 } : BV:8
64 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
65 : eq(51, 64) : BOOL
66 : 114 { 0x72 } : BV:8
67 : eq(51, 25) : BOOL
68 : 104 { 0x68 } : BV:8
69 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 164 { 0xa4 -92 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(65, 66, 74) : BV:8
76 : ite(62, 63, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : ite(57, 58, 77) : BV:8
79 : ite(55, 56, 78) : BV:8
80 : ite(52, 53, 79) : BV:8
81 : bvadd(25, 50) : BV:32
82 : eq(81, 2) : BOOL
83 : eq(81, 54) : BOOL
84 : eq(81, 47) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 61) : BOOL
87 : eq(81, 64) : BOOL
88 : eq(81, 25) : BOOL
89 : eq(81, 69) : BOOL
90 : ite(89, 71, 72) : BV:8
91 : ite(88, 68, 90) : BV:8
92 : ite(87, 66, 91) : BV:8
93 : ite(86, 63, 92) : BV:8
94 : ite(85, 60, 93) : BV:8
95 : ite(84, 58, 94) : BV:8
96 : ite(83, 56, 95) : BV:8
97 : ite(82, 53, 96) : BV:8
98 : bvadd(21, 50) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 54) : BOOL
101 : eq(98, 47) : BOOL
102 : eq(98, 21) : BOOL
103 : eq(98, 61) : BOOL
104 : eq(98, 64) : BOOL
105 : eq(98, 25) : BOOL
106 : eq(98, 69) : BOOL
107 : ite(106, 71, 72) : BV:8
108 : ite(105, 68, 107) : BV:8
109 : ite(104, 66, 108) : BV:8
110 : ite(103, 63, 109) : BV:8
111 : ite(102, 60, 110) : BV:8
112 : ite(101, 58, 111) : BV:8
113 : ite(100, 56, 112) : BV:8
114 : ite(99, 53, 113) : BV:8
115 : eq(50, 2) : BOOL
116 : eq(50, 54) : BOOL
117 : eq(50, 47) : BOOL
118 : eq(50, 21) : BOOL
119 : eq(50, 61) : BOOL
120 : eq(50, 64) : BOOL
121 : eq(50, 25) : BOOL
122 : eq(50, 69) : BOOL
123 : ite(122, 71, 72) : BV:8
124 : ite(121, 68, 123) : BV:8
125 : ite(120, 66, 124) : BV:8
126 : ite(119, 63, 125) : BV:8
127 : ite(118, 60, 126) : BV:8
128 : ite(117, 58, 127) : BV:8
129 : ite(116, 56, 128) : BV:8
130 : ite(115, 53, 129) : BV:8
131 : bvconcat(80, 97, 114, 130) : BV:32
132 : bvadd(47, 49, 131) : BV:32
133 : eq(132, 2) : BOOL
134 : eq(132, 54) : BOOL
135 : eq(132, 47) : BOOL
136 : eq(132, 21) : BOOL
137 : eq(132, 61) : BOOL
138 : eq(132, 64) : BOOL
139 : eq(132, 25) : BOOL
140 : eq(132, 69) : BOOL
141 : ite(140, 71, 72) : BV:8
142 : ite(139, 68, 141) : BV:8
143 : ite(138, 66, 142) : BV:8
144 : ite(137, 63, 143) : BV:8
145 : ite(136, 60, 144) : BV:8
146 : ite(135, 58, 145) : BV:8
147 : ite(134, 56, 146) : BV:8
148 : ite(133, 53, 147) : BV:8
149 : bvadd(25, 49, 131) : BV:32
150 : eq(149, 2) : BOOL
151 : eq(149, 54) : BOOL
152 : eq(149, 47) : BOOL
153 : eq(149, 21) : BOOL
154 : eq(149, 61) : BOOL
155 : eq(149, 64) : BOOL
156 : eq(149, 25) : BOOL
157 : eq(149, 69) : BOOL
158 : ite(157, 71, 72) : BV:8
159 : ite(156, 68, 158) : BV:8
160 : ite(155, 66, 159) : BV:8
161 : ite(154, 63, 160) : BV:8
162 : ite(153, 60, 161) : BV:8
163 : ite(152, 58, 162) : BV:8
164 : ite(151, 56, 163) : BV:8
165 : ite(150, 53, 164) : BV:8
166 : bvadd(21, 49, 131) : BV:32
167 : eq(166, 2) : BOOL
168 : eq(166, 54) : BOOL
169 : eq(166, 47) : BOOL
170 : eq(166, 21) : BOOL
171 : eq(166, 61) : BOOL
172 : eq(166, 64) : BOOL
173 : eq(166, 25) : BOOL
174 : eq(166, 69) : BOOL
175 : ite(174, 71, 72) : BV:8
176 : ite(173, 68, 175) : BV:8
177 : ite(172, 66, 176) : BV:8
178 : ite(171, 63, 177) : BV:8
179 : ite(170, 60, 178) : BV:8
180 : ite(169, 58, 179) : BV:8
181 : ite(168, 56, 180) : BV:8
182 : ite(167, 53, 181) : BV:8
183 : bvadd(49, 131) : BV:32
184 : eq(183, 2) : BOOL
185 : eq(183, 54) : BOOL
186 : eq(183, 47) : BOOL
187 : eq(183, 21) : BOOL
188 : eq(183, 61) : BOOL
189 : eq(183, 64) : BOOL
190 : eq(183, 25) : BOOL
191 : eq(183, 69) : BOOL
192 : ite(191, 71, 72) : BV:8
193 : ite(190, 68, 192) : BV:8
194 : ite(189, 66, 193) : BV:8
195 : ite(188, 63, 194) : BV:8
196 : ite(187, 60, 195) : BV:8
197 : ite(186, 58, 196) : BV:8
198 : ite(185, 56, 197) : BV:8
199 : ite(184, 53, 198) : BV:8
200 : bvconcat(148, 165, 182, 199) : BV:32
201 : ite(46, 2, 200) : BV:32
202 : ite(44, 2, 201) : BV:32
203 : lambda(41, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(40, 203) : MAP[BV:32 -> BV:32]
205 : sym_const(204) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3663098496 { 0xda567280 -631868800 -1.67536926e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3663098499 { 0xda567283 -631868797 -1.67536962e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 740395008 { 0x2c218800 +1.26196289e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 740395011 { 0x2c218803 +1.26196324e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1061322756 { 0x3f428004 +1.51953172e255 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1061322759 { 0x3f428007 +1.51953208e255 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda38973Var : BV:32
2 : Lambda38974Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : bvule(5, 1) : BOOL
11 : bvule(1, 3) : BOOL
12 : and(10, 11) : BOOL
13 : 1 { 0x1 } : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(14, 1) : BOOL
16 : bvule(1, 14) : BOOL
17 : and(15, 16) : BOOL
18 : 0 { 0x0 } : BOOL
19 : ite(17, 18, 18) : BOOL
20 : ite(12, 13, 19) : BOOL
21 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(10, 22) : BOOL
24 : bvule(3, 1) : BOOL
25 : and(24, 11) : BOOL
26 : ite(25, 3, 3) : BV:32
27 : ite(17, 14, 26) : BV:32
28 : ite(23, 5, 27) : BV:32
29 : eq(28, 3) : BOOL
30 : bvule(5, 2) : BOOL
31 : bvule(2, 5) : BOOL
32 : and(30, 31) : BOOL
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 5, 42) : BV:32
44 : eq(43, 5) : BOOL
45 : and(29, 44) : BOOL
46 : eq(28, 5) : BOOL
47 : and(46, 44) : BOOL
48 : ite(47, 13, 18) : BOOL
49 : ite(45, 13, 48) : BOOL
50 : and(20, 49) : BOOL
51 : 3 { 0x3 +1.35e129 } : BV:32
52 : 4 { 0x4 +1.47e129 } : BV:32
53 : bvmul(52, 2) : BV:32
54 : bvmul(52, 1) : BV:32
55 : bvadd(51, 54) : BV:32
56 : eq(55, 5) : BOOL
57 : 168 { 0xa8 -88 } : BV:8
58 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
59 : eq(55, 58) : BOOL
60 : 235 { 0xeb -21 } : BV:8
61 : eq(55, 51) : BOOL
62 : 27 { 0x1b } : BV:8
63 : eq(55, 33) : BOOL
64 : 223 { 0xdf -33 } : BV:8
65 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
66 : eq(55, 65) : BOOL
67 : 68 { 0x44 } : BV:8
68 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
69 : eq(55, 68) : BOOL
70 : 114 { 0x72 } : BV:8
71 : eq(55, 37) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
74 : eq(55, 73) : BOOL
75 : 164 { 0xa4 -92 } : BV:8
76 : 0 { 0x0 } : BV:8
77 : ite(74, 75, 76) : BV:8
78 : ite(71, 72, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(63, 64, 80) : BV:8
82 : ite(61, 62, 81) : BV:8
83 : ite(59, 60, 82) : BV:8
84 : ite(56, 57, 83) : BV:8
85 : bvadd(37, 54) : BV:32
86 : eq(85, 5) : BOOL
87 : eq(85, 58) : BOOL
88 : eq(85, 51) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 65) : BOOL
91 : eq(85, 68) : BOOL
92 : eq(85, 37) : BOOL
93 : eq(85, 73) : BOOL
94 : ite(93, 75, 76) : BV:8
95 : ite(92, 72, 94) : BV:8
96 : ite(91, 70, 95) : BV:8
97 : ite(90, 67, 96) : BV:8
98 : ite(89, 64, 97) : BV:8
99 : ite(88, 62, 98) : BV:8
100 : ite(87, 60, 99) : BV:8
101 : ite(86, 57, 100) : BV:8
102 : bvadd(33, 54) : BV:32
103 : eq(102, 5) : BOOL
104 : eq(102, 58) : BOOL
105 : eq(102, 51) : BOOL
106 : eq(102, 33) : BOOL
107 : eq(102, 65) : BOOL
108 : eq(102, 68) : BOOL
109 : eq(102, 37) : BOOL
110 : eq(102, 73) : BOOL
111 : ite(110, 75, 76) : BV:8
112 : ite(109, 72, 111) : BV:8
113 : ite(108, 70, 112) : BV:8
114 : ite(107, 67, 113) : BV:8
115 : ite(106, 64, 114) : BV:8
116 : ite(105, 62, 115) : BV:8
117 : ite(104, 60, 116) : BV:8
118 : ite(103, 57, 117) : BV:8
119 : eq(54, 5) : BOOL
120 : eq(54, 58) : BOOL
121 : eq(54, 51) : BOOL
122 : eq(54, 33) : BOOL
123 : eq(54, 65) : BOOL
124 : eq(54, 68) : BOOL
125 : eq(54, 37) : BOOL
126 : eq(54, 73) : BOOL
127 : ite(126, 75, 76) : BV:8
128 : ite(125, 72, 127) : BV:8
129 : ite(124, 70, 128) : BV:8
130 : ite(123, 67, 129) : BV:8
131 : ite(122, 64, 130) : BV:8
132 : ite(121, 62, 131) : BV:8
133 : ite(120, 60, 132) : BV:8
134 : ite(119, 57, 133) : BV:8
135 : bvconcat(84, 101, 118, 134) : BV:32
136 : bvadd(51, 53, 135) : BV:32
137 : eq(136, 5) : BOOL
138 : eq(136, 58) : BOOL
139 : eq(136, 51) : BOOL
140 : eq(136, 33) : BOOL
141 : eq(136, 65) : BOOL
142 : eq(136, 68) : BOOL
143 : eq(136, 37) : BOOL
144 : eq(136, 73) : BOOL
145 : ite(144, 75, 76) : BV:8
146 : ite(143, 72, 145) : BV:8
147 : ite(142, 70, 146) : BV:8
148 : ite(141, 67, 147) : BV:8
149 : ite(140, 64, 148) : BV:8
150 : ite(139, 62, 149) : BV:8
151 : ite(138, 60, 150) : BV:8
152 : ite(137, 57, 151) : BV:8
153 : bvadd(37, 53, 135) : BV:32
154 : eq(153, 5) : BOOL
155 : eq(153, 58) : BOOL
156 : eq(153, 51) : BOOL
157 : eq(153, 33) : BOOL
158 : eq(153, 65) : BOOL
159 : eq(153, 68) : BOOL
160 : eq(153, 37) : BOOL
161 : eq(153, 73) : BOOL
162 : ite(161, 75, 76) : BV:8
163 : ite(160, 72, 162) : BV:8
164 : ite(159, 70, 163) : BV:8
165 : ite(158, 67, 164) : BV:8
166 : ite(157, 64, 165) : BV:8
167 : ite(156, 62, 166) : BV:8
168 : ite(155, 60, 167) : BV:8
169 : ite(154, 57, 168) : BV:8
170 : bvadd(33, 53, 135) : BV:32
171 : eq(170, 5) : BOOL
172 : eq(170, 58) : BOOL
173 : eq(170, 51) : BOOL
174 : eq(170, 33) : BOOL
175 : eq(170, 65) : BOOL
176 : eq(170, 68) : BOOL
177 : eq(170, 37) : BOOL
178 : eq(170, 73) : BOOL
179 : ite(178, 75, 76) : BV:8
180 : ite(177, 72, 179) : BV:8
181 : ite(176, 70, 180) : BV:8
182 : ite(175, 67, 181) : BV:8
183 : ite(174, 64, 182) : BV:8
184 : ite(173, 62, 183) : BV:8
185 : ite(172, 60, 184) : BV:8
186 : ite(171, 57, 185) : BV:8
187 : bvadd(53, 135) : BV:32
188 : eq(187, 5) : BOOL
189 : eq(187, 58) : BOOL
190 : eq(187, 51) : BOOL
191 : eq(187, 33) : BOOL
192 : eq(187, 65) : BOOL
193 : eq(187, 68) : BOOL
194 : eq(187, 37) : BOOL
195 : eq(187, 73) : BOOL
196 : ite(195, 75, 76) : BV:8
197 : ite(194, 72, 196) : BV:8
198 : ite(193, 70, 197) : BV:8
199 : ite(192, 67, 198) : BV:8
200 : ite(191, 64, 199) : BV:8
201 : ite(190, 62, 200) : BV:8
202 : ite(189, 60, 201) : BV:8
203 : ite(188, 57, 202) : BV:8
204 : bvconcat(152, 169, 186, 203) : BV:32
205 : ite(9, 5, 204) : BV:32
206 : ite(7, 5, 205) : BV:32
207 : ite(50, 204, 206) : BV:32
208 : ite(9, 5, 207) : BV:32
209 : ite(7, 5, 208) : BV:32
210 : lambda(1, 2, 209) : FUNCTION[BV:32,BV:32 -> BV:32]
211 : sym_const(210) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda38978Var : BV:32
2 : Lambda38979Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda38987Var : BV:32
2 : Lambda38988Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4294967293 { 0xfffffffd -3 -1.99999964e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
13 : bvule(12, 1) : BOOL
14 : bvule(1, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 8, 16) : BV:32
18 : ite(7, 3, 17) : BV:32
19 : eq(18, 12) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 2) : BOOL
25 : bvule(2, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 2) : BOOL
29 : bvule(2, 8) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 3, 32) : BV:32
34 : eq(33, 3) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : eq(18, 3) : BOOL
38 : and(37, 34) : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(38, 36, 39) : BOOL
41 : ite(35, 36, 40) : BOOL
42 : lambda(1, 2, 41) : FUNCTION[BV:32,BV:32 -> BOOL]
43 : sym_const(42) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda38983Var : BV:32
2 : Lambda38984Var : BV:32
3 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
4 : eq(1, 3) : BOOL
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : eq(1, 5) : BOOL
9 : and(8, 6) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 5) : BOOL
16 : 168 { 0xa8 -88 } : BV:8
17 : 4294967290 { 0xfffffffa -6 -1.99999928e128 } : BV:32
18 : eq(14, 17) : BOOL
19 : 235 { 0xeb -21 } : BV:8
20 : eq(14, 10) : BOOL
21 : 27 { 0x1b } : BV:8
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(14, 22) : BOOL
24 : 223 { 0xdf -33 } : BV:8
25 : 4294967291 { 0xfffffffb -5 -1.99999940e128 } : BV:32
26 : eq(14, 25) : BOOL
27 : 68 { 0x44 } : BV:8
28 : 4294967289 { 0xfffffff9 -7 -1.99999916e128 } : BV:32
29 : eq(14, 28) : BOOL
30 : 114 { 0x72 } : BV:8
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 104 { 0x68 } : BV:8
34 : 4294967288 { 0xfffffff8 -8 -1.99999904e128 } : BV:32
35 : eq(14, 34) : BOOL
36 : 164 { 0xa4 -92 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(18, 19, 43) : BV:8
45 : ite(15, 16, 44) : BV:8
46 : bvadd(31, 13) : BV:32
47 : eq(46, 5) : BOOL
48 : eq(46, 17) : BOOL
49 : eq(46, 10) : BOOL
50 : eq(46, 22) : BOOL
51 : eq(46, 25) : BOOL
52 : eq(46, 28) : BOOL
53 : eq(46, 31) : BOOL
54 : eq(46, 34) : BOOL
55 : ite(54, 36, 37) : BV:8
56 : ite(53, 33, 55) : BV:8
57 : ite(52, 30, 56) : BV:8
58 : ite(51, 27, 57) : BV:8
59 : ite(50, 24, 58) : BV:8
60 : ite(49, 21, 59) : BV:8
61 : ite(48, 19, 60) : BV:8
62 : ite(47, 16, 61) : BV:8
63 : bvadd(22, 13) : BV:32
64 : eq(63, 5) : BOOL
65 : eq(63, 17) : BOOL
66 : eq(63, 10) : BOOL
67 : eq(63, 22) : BOOL
68 : eq(63, 25) : BOOL
69 : eq(63, 28) : BOOL
70 : eq(63, 31) : BOOL
71 : eq(63, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 30, 73) : BV:8
75 : ite(68, 27, 74) : BV:8
76 : ite(67, 24, 75) : BV:8
77 : ite(66, 21, 76) : BV:8
78 : ite(65, 19, 77) : BV:8
79 : ite(64, 16, 78) : BV:8
80 : eq(13, 5) : BOOL
81 : eq(13, 17) : BOOL
82 : eq(13, 10) : BOOL
83 : eq(13, 22) : BOOL
84 : eq(13, 25) : BOOL
85 : eq(13, 28) : BOOL
86 : eq(13, 31) : BOOL
87 : eq(13, 34) : BOOL
88 : ite(87, 36, 37) : BV:8
89 : ite(86, 33, 88) : BV:8
90 : ite(85, 30, 89) : BV:8
91 : ite(84, 27, 90) : BV:8
92 : ite(83, 24, 91) : BV:8
93 : ite(82, 21, 92) : BV:8
94 : ite(81, 19, 93) : BV:8
95 : ite(80, 16, 94) : BV:8
96 : bvconcat(45, 62, 79, 95) : BV:32
97 : bvadd(10, 12, 96) : BV:32
98 : eq(97, 5) : BOOL
99 : eq(97, 17) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 22) : BOOL
102 : eq(97, 25) : BOOL
103 : eq(97, 28) : BOOL
104 : eq(97, 31) : BOOL
105 : eq(97, 34) : BOOL
106 : ite(105, 36, 37) : BV:8
107 : ite(104, 33, 106) : BV:8
108 : ite(103, 30, 107) : BV:8
109 : ite(102, 27, 108) : BV:8
110 : ite(101, 24, 109) : BV:8
111 : ite(100, 21, 110) : BV:8
112 : ite(99, 19, 111) : BV:8
113 : ite(98, 16, 112) : BV:8
114 : bvadd(31, 12, 96) : BV:32
115 : eq(114, 5) : BOOL
116 : eq(114, 17) : BOOL
117 : eq(114, 10) : BOOL
118 : eq(114, 22) : BOOL
119 : eq(114, 25) : BOOL
120 : eq(114, 28) : BOOL
121 : eq(114, 31) : BOOL
122 : eq(114, 34) : BOOL
123 : ite(122, 36, 37) : BV:8
124 : ite(121, 33, 123) : BV:8
125 : ite(120, 30, 124) : BV:8
126 : ite(119, 27, 125) : BV:8
127 : ite(118, 24, 126) : BV:8
128 : ite(117, 21, 127) : BV:8
129 : ite(116, 19, 128) : BV:8
130 : ite(115, 16, 129) : BV:8
131 : bvadd(22, 12, 96) : BV:32
132 : eq(131, 5) : BOOL
133 : eq(131, 17) : BOOL
134 : eq(131, 10) : BOOL
135 : eq(131, 22) : BOOL
136 : eq(131, 25) : BOOL
137 : eq(131, 28) : BOOL
138 : eq(131, 31) : BOOL
139 : eq(131, 34) : BOOL
140 : ite(139, 36, 37) : BV:8
141 : ite(138, 33, 140) : BV:8
142 : ite(137, 30, 141) : BV:8
143 : ite(136, 27, 142) : BV:8
144 : ite(135, 24, 143) : BV:8
145 : ite(134, 21, 144) : BV:8
146 : ite(133, 19, 145) : BV:8
147 : ite(132, 16, 146) : BV:8
148 : bvadd(12, 96) : BV:32
149 : eq(148, 5) : BOOL
150 : eq(148, 17) : BOOL
151 : eq(148, 10) : BOOL
152 : eq(148, 22) : BOOL
153 : eq(148, 25) : BOOL
154 : eq(148, 28) : BOOL
155 : eq(148, 31) : BOOL
156 : eq(148, 34) : BOOL
157 : ite(156, 36, 37) : BV:8
158 : ite(155, 33, 157) : BV:8
159 : ite(154, 30, 158) : BV:8
160 : ite(153, 27, 159) : BV:8
161 : ite(152, 24, 160) : BV:8
162 : ite(151, 21, 161) : BV:8
163 : ite(150, 19, 162) : BV:8
164 : ite(149, 16, 163) : BV:8
165 : bvconcat(113, 130, 147, 164) : BV:32
166 : ite(9, 5, 165) : BV:32
167 : ite(7, 5, 166) : BV:32
168 : lambda(1, 2, 167) : FUNCTION[BV:32,BV:32 -> BV:32]
169 : sym_const(168) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
3201415978
=counter_example_end
=global nodece 38 num_edges_traversed 1
=global nodece 38 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 39
=global nodece 39 nodece z3v487.ce4017.num_edges_traversed1
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3v487.ce4017 c50bdfaee18c1f5c63b425c5f159340
=input.spec-%var-x-1
1 : Lambda40803Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda40804Var : BV:32
17 : Lambda40805Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda40806Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda40836Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda40837Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda40828Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda40829Var : BV:32
17 : Lambda40830Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda40831Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : Lambda40813Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 0 { 0x0 } : BOOL
10 : ite(8, 9, 9) : BOOL
11 : lambda(3, 10) : FUNCTION[BV:32 -> BOOL]
12 : Lambda40814Var : BV:32
13 : bvule(4, 12) : BOOL
14 : bvule(12, 6) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 4, 4) : BV:32
17 : lambda(12, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(11, 17) : MAP[BV:32 -> BV:32]
19 : sum(1, 2, 18) : SUM[UNIT,MAP[BV:32 -> BV:32]]
20 : sym_const(19) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2050334942 { 0x7a35a0de +1.41897177e117 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : ite(5, 1, 1) : BV:32
12 : sum(9, 10, 11) : SUM[UNIT,BV:32]
13 : sym_const(12) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda40842Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda40843Var : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 715470198 { 0x2aa53576 +1.29069399e214 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
4182106870
=counter_example_end
=global nodece 39 num_edges_traversed 1
=global nodece 39 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 40
=global nodece 40 nodece z3.ce4063.num_edges_traversed0
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(epsilon)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3.ce4063 6d65c5edad4aaffa237cd4680c1042
=input.spec-%var-x-1
1 : Lambda41985Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41986Var : BV:32
18 : Lambda41987Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 15 { 0xf +1.178e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16 { 0x10 +1.190e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 17 { 0x11 +1.202e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41988Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
82 : eq(80, 81) : BOOL
83 : 236 { 0xec -20 } : BV:8
84 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
85 : eq(80, 84) : BOOL
86 : 84 { 0x54 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
90 : eq(80, 89) : BOOL
91 : 212 { 0xd4 -44 } : BV:8
92 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
93 : eq(80, 92) : BOOL
94 : 191 { 0xbf -65 } : BV:8
95 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
96 : eq(80, 95) : BOOL
97 : 92 { 0x5c } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 81) : BOOL
107 : eq(105, 84) : BOOL
108 : eq(105, 78) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 86, 115) : BV:8
117 : ite(106, 83, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 78) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 86, 128) : BV:8
130 : ite(119, 83, 129) : BV:8
131 : bvadd(89, 79) : BV:32
132 : eq(131, 81) : BOOL
133 : eq(131, 84) : BOOL
134 : eq(131, 78) : BOOL
135 : eq(131, 89) : BOOL
136 : eq(131, 92) : BOOL
137 : eq(131, 95) : BOOL
138 : ite(137, 97, 98) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 91, 139) : BV:8
141 : ite(134, 88, 140) : BV:8
142 : ite(133, 86, 141) : BV:8
143 : ite(132, 83, 142) : BV:8
144 : bvconcat(104, 117, 130, 143) : BV:32
145 : bvadd(75, 77, 144) : BV:32
146 : eq(145, 81) : BOOL
147 : eq(145, 84) : BOOL
148 : eq(145, 78) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 92) : BOOL
151 : eq(145, 95) : BOOL
152 : ite(151, 97, 98) : BV:8
153 : ite(150, 94, 152) : BV:8
154 : ite(149, 91, 153) : BV:8
155 : ite(148, 88, 154) : BV:8
156 : ite(147, 86, 155) : BV:8
157 : ite(146, 83, 156) : BV:8
158 : 2 { 0x2 +1.23e129 } : BV:32
159 : bvadd(158, 77, 144) : BV:32
160 : eq(159, 81) : BOOL
161 : eq(159, 84) : BOOL
162 : eq(159, 78) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : eq(159, 95) : BOOL
166 : ite(165, 97, 98) : BV:8
167 : ite(164, 94, 166) : BV:8
168 : ite(163, 91, 167) : BV:8
169 : ite(162, 88, 168) : BV:8
170 : ite(161, 86, 169) : BV:8
171 : ite(160, 83, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 77, 144) : BV:32
174 : eq(173, 81) : BOOL
175 : eq(173, 84) : BOOL
176 : eq(173, 78) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : eq(173, 95) : BOOL
180 : ite(179, 97, 98) : BV:8
181 : ite(178, 94, 180) : BV:8
182 : ite(177, 91, 181) : BV:8
183 : ite(176, 88, 182) : BV:8
184 : ite(175, 86, 183) : BV:8
185 : ite(174, 83, 184) : BV:8
186 : bvadd(77, 144) : BV:32
187 : eq(186, 81) : BOOL
188 : eq(186, 84) : BOOL
189 : eq(186, 78) : BOOL
190 : eq(186, 89) : BOOL
191 : eq(186, 92) : BOOL
192 : eq(186, 95) : BOOL
193 : ite(192, 97, 98) : BV:8
194 : ite(191, 94, 193) : BV:8
195 : ite(190, 91, 194) : BV:8
196 : ite(189, 88, 195) : BV:8
197 : ite(188, 86, 196) : BV:8
198 : ite(187, 83, 197) : BV:8
199 : bvconcat(157, 171, 185, 198) : BV:32
200 : ite(55, 2, 199) : BV:32
201 : ite(74, 199, 200) : BV:32
202 : ite(55, 2, 201) : BV:32
203 : lambda(52, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(51, 203) : MAP[BV:32 -> BV:32]
205 : lambda(17, 204) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
206 : map(16, 205) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
207 : sym_const(206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda42012Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42013Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
25 : eq(23, 24) : BOOL
26 : 236 { 0xec -20 } : BV:8
27 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
28 : eq(23, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
34 : eq(23, 33) : BOOL
35 : 212 { 0xd4 -44 } : BV:8
36 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
40 : eq(23, 39) : BOOL
41 : 92 { 0x5c } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1405091841 ] -> 0, [ 1405091842; 1405091842 ] -> 84, [ 1405091843; 1405091843 ] -> 236, [ 1405091844; 3417309187 ] -> 0, [ 3417309188; 3417309188 ] -> 212, [ 3417309189; 3417309189 ] -> 92, [ 3417309190; 3417309190 ] -> 191, [ 3417309191; 3417309191 ] -> 255, [ 3417309192; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 780824503 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 780824504; 780824507 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 780824508; 927891459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 927891460; 927891463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 927891464; 1847329835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1847329836; 1847329839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1847329840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1847329836 { 0x6e1c042c +1.21887731e93 } : BV:32
=input.dst.llvm-%m
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 780824504 { 0x2e8a6fb8 +1.8153438e222 } : BV:32
=input.dst.llvm-%n
1 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 927891460 { 0x374e8004 +1.61328172e239 } : BV:32
=input.dst.llvm-%x
1 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42005Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42006Var : BV:32
18 : Lambda42007Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 15 { 0xf +1.178e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16 { 0x10 +1.190e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 17 { 0x11 +1.202e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda42008Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
63 : eq(61, 62) : BOOL
64 : 236 { 0xec -20 } : BV:8
65 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
66 : eq(61, 65) : BOOL
67 : 84 { 0x54 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
71 : eq(61, 70) : BOOL
72 : 212 { 0xd4 -44 } : BV:8
73 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
74 : eq(61, 73) : BOOL
75 : 191 { 0xbf -65 } : BV:8
76 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
77 : eq(61, 76) : BOOL
78 : 92 { 0x5c } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 62) : BOOL
88 : eq(86, 65) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 67, 96) : BV:8
98 : ite(87, 64, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 59) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 67, 109) : BV:8
111 : ite(100, 64, 110) : BV:8
112 : bvadd(70, 60) : BV:32
113 : eq(112, 62) : BOOL
114 : eq(112, 65) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 70) : BOOL
117 : eq(112, 73) : BOOL
118 : eq(112, 76) : BOOL
119 : ite(118, 78, 79) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 72, 120) : BV:8
122 : ite(115, 69, 121) : BV:8
123 : ite(114, 67, 122) : BV:8
124 : ite(113, 64, 123) : BV:8
125 : bvconcat(85, 98, 111, 124) : BV:32
126 : bvadd(56, 58, 125) : BV:32
127 : eq(126, 62) : BOOL
128 : eq(126, 65) : BOOL
129 : eq(126, 59) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 73) : BOOL
132 : eq(126, 76) : BOOL
133 : ite(132, 78, 79) : BV:8
134 : ite(131, 75, 133) : BV:8
135 : ite(130, 72, 134) : BV:8
136 : ite(129, 69, 135) : BV:8
137 : ite(128, 67, 136) : BV:8
138 : ite(127, 64, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 58, 125) : BV:32
141 : eq(140, 62) : BOOL
142 : eq(140, 65) : BOOL
143 : eq(140, 59) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : eq(140, 76) : BOOL
147 : ite(146, 78, 79) : BV:8
148 : ite(145, 75, 147) : BV:8
149 : ite(144, 72, 148) : BV:8
150 : ite(143, 69, 149) : BV:8
151 : ite(142, 67, 150) : BV:8
152 : ite(141, 64, 151) : BV:8
153 : 1 { 0x1 +1.11e129 } : BV:32
154 : bvadd(153, 58, 125) : BV:32
155 : eq(154, 62) : BOOL
156 : eq(154, 65) : BOOL
157 : eq(154, 59) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : eq(154, 76) : BOOL
161 : ite(160, 78, 79) : BV:8
162 : ite(159, 75, 161) : BV:8
163 : ite(158, 72, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 67, 164) : BV:8
166 : ite(155, 64, 165) : BV:8
167 : bvadd(58, 125) : BV:32
168 : eq(167, 62) : BOOL
169 : eq(167, 65) : BOOL
170 : eq(167, 59) : BOOL
171 : eq(167, 70) : BOOL
172 : eq(167, 73) : BOOL
173 : eq(167, 76) : BOOL
174 : ite(173, 78, 79) : BV:8
175 : ite(172, 75, 174) : BV:8
176 : ite(171, 72, 175) : BV:8
177 : ite(170, 69, 176) : BV:8
178 : ite(169, 67, 177) : BV:8
179 : ite(168, 64, 178) : BV:8
180 : bvconcat(138, 152, 166, 179) : BV:32
181 : ite(55, 2, 180) : BV:32
182 : lambda(52, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(51, 182) : MAP[BV:32 -> BV:32]
184 : lambda(17, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(16, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
2 : unit : UNIT
3 : Lambda41994Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda41995Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
27 : eq(25, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
30 : eq(25, 29) : BOOL
31 : 84 { 0x54 } : BV:8
32 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
33 : eq(25, 32) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
36 : eq(25, 35) : BOOL
37 : 212 { 0xd4 -44 } : BV:8
38 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
39 : eq(25, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
42 : eq(25, 41) : BOOL
43 : 92 { 0x5c } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 23, 24) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : eq(52, 32) : BOOL
56 : eq(52, 35) : BOOL
57 : eq(52, 38) : BOOL
58 : eq(52, 41) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 40, 59) : BV:8
61 : ite(56, 37, 60) : BV:8
62 : ite(55, 34, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 23, 24) : BV:32
67 : eq(66, 26) : BOOL
68 : eq(66, 29) : BOOL
69 : eq(66, 32) : BOOL
70 : eq(66, 35) : BOOL
71 : eq(66, 38) : BOOL
72 : eq(66, 41) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 40, 73) : BV:8
75 : ite(70, 37, 74) : BV:8
76 : ite(69, 34, 75) : BV:8
77 : ite(68, 31, 76) : BV:8
78 : ite(67, 28, 77) : BV:8
79 : bvadd(23, 24) : BV:32
80 : eq(79, 26) : BOOL
81 : eq(79, 29) : BOOL
82 : eq(79, 32) : BOOL
83 : eq(79, 35) : BOOL
84 : eq(79, 38) : BOOL
85 : eq(79, 41) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 37, 87) : BV:8
89 : ite(82, 34, 88) : BV:8
90 : ite(81, 31, 89) : BV:8
91 : ite(80, 28, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(20, 4, 92) : BV:32
94 : lambda(19, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(18, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 570687488 { 0x22040000 +1.3125000e197 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda42017Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42018Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
25 : eq(23, 24) : BOOL
26 : 236 { 0xec -20 } : BV:8
27 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
28 : eq(23, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
34 : eq(23, 33) : BOOL
35 : 212 { 0xd4 -44 } : BV:8
36 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
40 : eq(23, 39) : BOOL
41 : 92 { 0x5c } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 780824504 { 0x2e8a6fb8 +1.8153438e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 780824507 { 0x2e8a6fbb +1.8153474e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 927891460 { 0x374e8004 +1.61328172e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 927891463 { 0x374e8007 +1.61328208e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1847329836 { 0x6e1c042c +1.21887731e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1847329839 { 0x6e1c042f +1.21887767e93 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda41877Var : BV:32
2 : Lambda41878Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 15 { 0xf +1.178e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16 { 0x10 +1.190e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 17 { 0x11 +1.202e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
55 : eq(53, 54) : BOOL
56 : 236 { 0xec -20 } : BV:8
57 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
58 : eq(53, 57) : BOOL
59 : 84 { 0x54 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
63 : eq(53, 62) : BOOL
64 : 212 { 0xd4 -44 } : BV:8
65 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
66 : eq(53, 65) : BOOL
67 : 191 { 0xbf -65 } : BV:8
68 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
69 : eq(53, 68) : BOOL
70 : 92 { 0x5c } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 54) : BOOL
80 : eq(78, 57) : BOOL
81 : eq(78, 51) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 59, 88) : BV:8
90 : ite(79, 56, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 51) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 59, 101) : BV:8
103 : ite(92, 56, 102) : BV:8
104 : bvadd(62, 52) : BV:32
105 : eq(104, 54) : BOOL
106 : eq(104, 57) : BOOL
107 : eq(104, 51) : BOOL
108 : eq(104, 62) : BOOL
109 : eq(104, 65) : BOOL
110 : eq(104, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : ite(107, 61, 113) : BV:8
115 : ite(106, 59, 114) : BV:8
116 : ite(105, 56, 115) : BV:8
117 : bvconcat(77, 90, 103, 116) : BV:32
118 : bvadd(48, 50, 117) : BV:32
119 : eq(118, 54) : BOOL
120 : eq(118, 57) : BOOL
121 : eq(118, 51) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 65) : BOOL
124 : eq(118, 68) : BOOL
125 : ite(124, 70, 71) : BV:8
126 : ite(123, 67, 125) : BV:8
127 : ite(122, 64, 126) : BV:8
128 : ite(121, 61, 127) : BV:8
129 : ite(120, 59, 128) : BV:8
130 : ite(119, 56, 129) : BV:8
131 : 2 { 0x2 +1.23e129 } : BV:32
132 : bvadd(131, 50, 117) : BV:32
133 : eq(132, 54) : BOOL
134 : eq(132, 57) : BOOL
135 : eq(132, 51) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : eq(132, 68) : BOOL
139 : ite(138, 70, 71) : BV:8
140 : ite(137, 67, 139) : BV:8
141 : ite(136, 64, 140) : BV:8
142 : ite(135, 61, 141) : BV:8
143 : ite(134, 59, 142) : BV:8
144 : ite(133, 56, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 50, 117) : BV:32
147 : eq(146, 54) : BOOL
148 : eq(146, 57) : BOOL
149 : eq(146, 51) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : eq(146, 68) : BOOL
153 : ite(152, 70, 71) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 64, 154) : BV:8
156 : ite(149, 61, 155) : BV:8
157 : ite(148, 59, 156) : BV:8
158 : ite(147, 56, 157) : BV:8
159 : bvadd(50, 117) : BV:32
160 : eq(159, 54) : BOOL
161 : eq(159, 57) : BOOL
162 : eq(159, 51) : BOOL
163 : eq(159, 62) : BOOL
164 : eq(159, 65) : BOOL
165 : eq(159, 68) : BOOL
166 : ite(165, 70, 71) : BV:8
167 : ite(164, 67, 166) : BV:8
168 : ite(163, 64, 167) : BV:8
169 : ite(162, 61, 168) : BV:8
170 : ite(161, 59, 169) : BV:8
171 : ite(160, 56, 170) : BV:8
172 : bvconcat(130, 144, 158, 171) : BV:32
173 : ite(6, 3, 172) : BV:32
174 : ite(47, 172, 173) : BV:32
175 : ite(6, 3, 174) : BV:32
176 : lambda(1, 2, 175) : FUNCTION[BV:32,BV:32 -> BV:32]
177 : sym_const(176) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda41882Var : BV:32
2 : Lambda41883Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 15 { 0xf +1.178e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 17 { 0x11 +1.202e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2215116795 ] -> true, [ 2215116796; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2215116795 ] -> true, [ 2215116796; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda41891Var : BV:32
2 : Lambda41892Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 15 { 0xf +1.178e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 17 { 0x11 +1.202e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda41887Var : BV:32
2 : Lambda41888Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
14 : eq(12, 13) : BOOL
15 : 236 { 0xec -20 } : BV:8
16 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
17 : eq(12, 16) : BOOL
18 : 84 { 0x54 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
22 : eq(12, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
25 : eq(12, 24) : BOOL
26 : 191 { 0xbf -65 } : BV:8
27 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
28 : eq(12, 27) : BOOL
29 : 92 { 0x5c } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 13) : BOOL
39 : eq(37, 16) : BOOL
40 : eq(37, 10) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 18, 47) : BV:8
49 : ite(38, 15, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 10) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 18, 60) : BV:8
62 : ite(51, 15, 61) : BV:8
63 : bvadd(21, 11) : BV:32
64 : eq(63, 13) : BOOL
65 : eq(63, 16) : BOOL
66 : eq(63, 10) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : ite(69, 29, 30) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 23, 71) : BV:8
73 : ite(66, 20, 72) : BV:8
74 : ite(65, 18, 73) : BV:8
75 : ite(64, 15, 74) : BV:8
76 : bvconcat(36, 49, 62, 75) : BV:32
77 : bvadd(7, 9, 76) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 16) : BOOL
80 : eq(77, 10) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : ite(83, 29, 30) : BV:8
85 : ite(82, 26, 84) : BV:8
86 : ite(81, 23, 85) : BV:8
87 : ite(80, 20, 86) : BV:8
88 : ite(79, 18, 87) : BV:8
89 : ite(78, 15, 88) : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : bvadd(90, 9, 76) : BV:32
92 : eq(91, 13) : BOOL
93 : eq(91, 16) : BOOL
94 : eq(91, 10) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : eq(91, 27) : BOOL
98 : ite(97, 29, 30) : BV:8
99 : ite(96, 26, 98) : BV:8
100 : ite(95, 23, 99) : BV:8
101 : ite(94, 20, 100) : BV:8
102 : ite(93, 18, 101) : BV:8
103 : ite(92, 15, 102) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 9, 76) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 10) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 27) : BOOL
112 : ite(111, 29, 30) : BV:8
113 : ite(110, 26, 112) : BV:8
114 : ite(109, 23, 113) : BV:8
115 : ite(108, 20, 114) : BV:8
116 : ite(107, 18, 115) : BV:8
117 : ite(106, 15, 116) : BV:8
118 : bvadd(9, 76) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 10) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : ite(124, 29, 30) : BV:8
126 : ite(123, 26, 125) : BV:8
127 : ite(122, 23, 126) : BV:8
128 : ite(121, 20, 127) : BV:8
129 : ite(120, 18, 128) : BV:8
130 : ite(119, 15, 129) : BV:8
131 : bvconcat(89, 103, 117, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda41898Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda41902Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda41903Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
2473482671
=counter_example_end
=global nodece 40 num_edges_traversed 0
=global nodece 40 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 41
=global nodece 41 nodece z3v487.ce4064.num_edges_traversed0
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce4064 dc7bd587449a8e2d74f818defb399c74
=input.spec-%var-x-1
1 : Lambda42066Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3128910039 { 0xba7f60d7 -1166057257 -1.99514281e245 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3128910040 { 0xba7f60d8 -1166057256 -1.99514293e245 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42067Var : BV:32
18 : Lambda42068Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3128910041 { 0xba7f60d9 -1166057255 -1.99514305e245 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536870912 { 0x20000000 +1.0e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536870913 { 0x20000001 +1.11e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda42069Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 536870915 { 0x20000003 +1.35e193 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
63 : eq(61, 62) : BOOL
64 : 64 { 0x40 } : BV:8
65 : 0 { 0x0 } : BV:8
66 : ite(63, 64, 65) : BV:8
67 : 536870914 { 0x20000002 +1.23e193 } : BV:32
68 : bvadd(67, 60) : BV:32
69 : eq(68, 62) : BOOL
70 : ite(69, 64, 65) : BV:8
71 : bvadd(41, 60) : BV:32
72 : eq(71, 62) : BOOL
73 : ite(72, 64, 65) : BV:8
74 : bvadd(37, 60) : BV:32
75 : eq(74, 62) : BOOL
76 : ite(75, 64, 65) : BV:8
77 : bvconcat(66, 70, 73, 76) : BV:32
78 : bvadd(56, 58, 77) : BV:32
79 : eq(78, 62) : BOOL
80 : ite(79, 64, 65) : BV:8
81 : 2 { 0x2 +1.23e129 } : BV:32
82 : bvadd(81, 58, 77) : BV:32
83 : eq(82, 62) : BOOL
84 : ite(83, 64, 65) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 58, 77) : BV:32
87 : eq(86, 62) : BOOL
88 : ite(87, 64, 65) : BV:8
89 : bvadd(58, 77) : BV:32
90 : eq(89, 62) : BOOL
91 : ite(90, 64, 65) : BV:8
92 : bvconcat(80, 84, 88, 91) : BV:32
93 : ite(55, 2, 92) : BV:32
94 : lambda(52, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(51, 94) : MAP[BV:32 -> BV:32]
96 : lambda(17, 95) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
97 : map(16, 96) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
98 : sym_const(97) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1879048191 { 0x6fffffff +1.99999988e96 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda42093Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42094Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
25 : eq(23, 24) : BOOL
26 : 64 { 0x40 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3758096382 ] -> 0, [ 3758096383; 3758096383 ] -> 64, [ 3758096384; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 826277895 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 826277896; 826277899 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 826277900; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2147483656; 2181051519 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2181051520; 2181051523 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2181051524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2181051520 { 0x82003480 -2113915776 -1.160217e133 } : BV:32
=input.dst.llvm-%m
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 826277896 { 0x31400008 +1.50000095e227 } : BV:32
=input.dst.llvm-%n
1 : 3128910040 { 0xba7f60d8 -1166057256 -1.99514293e245 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%x
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42086Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3128910039 { 0xba7f60d7 -1166057257 -1.99514281e245 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3128910040 { 0xba7f60d8 -1166057256 -1.99514293e245 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42087Var : BV:32
18 : Lambda42088Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3128910041 { 0xba7f60d9 -1166057255 -1.99514305e245 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 536870912 { 0x20000000 +1.0e193 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 536870913 { 0x20000001 +1.11e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda42089Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 536870915 { 0x20000003 +1.35e193 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
82 : eq(80, 81) : BOOL
83 : 64 { 0x40 } : BV:8
84 : 0 { 0x0 } : BV:8
85 : ite(82, 83, 84) : BV:8
86 : 536870914 { 0x20000002 +1.23e193 } : BV:32
87 : bvadd(86, 79) : BV:32
88 : eq(87, 81) : BOOL
89 : ite(88, 83, 84) : BV:8
90 : bvadd(41, 79) : BV:32
91 : eq(90, 81) : BOOL
92 : ite(91, 83, 84) : BV:8
93 : bvadd(37, 79) : BV:32
94 : eq(93, 81) : BOOL
95 : ite(94, 83, 84) : BV:8
96 : bvconcat(85, 89, 92, 95) : BV:32
97 : bvadd(75, 77, 96) : BV:32
98 : eq(97, 81) : BOOL
99 : ite(98, 83, 84) : BV:8
100 : 2 { 0x2 +1.23e129 } : BV:32
101 : bvadd(100, 77, 96) : BV:32
102 : eq(101, 81) : BOOL
103 : ite(102, 83, 84) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 77, 96) : BV:32
106 : eq(105, 81) : BOOL
107 : ite(106, 83, 84) : BV:8
108 : bvadd(77, 96) : BV:32
109 : eq(108, 81) : BOOL
110 : ite(109, 83, 84) : BV:8
111 : bvconcat(99, 103, 107, 110) : BV:32
112 : ite(55, 2, 111) : BV:32
113 : ite(74, 111, 112) : BV:32
114 : ite(55, 2, 113) : BV:32
115 : lambda(52, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(51, 115) : MAP[BV:32 -> BV:32]
117 : lambda(17, 116) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
118 : map(16, 117) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
119 : sym_const(118) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : Lambda42075Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda42076Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : bvadd(21, 23, 1) : BV:32
25 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
26 : eq(24, 25) : BOOL
27 : 64 { 0x40 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 23, 1) : BV:32
32 : eq(31, 25) : BOOL
33 : ite(32, 27, 28) : BV:8
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : bvadd(34, 23, 1) : BV:32
36 : eq(35, 25) : BOOL
37 : ite(36, 27, 28) : BV:8
38 : bvadd(23, 1) : BV:32
39 : eq(38, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : bvconcat(29, 33, 37, 40) : BV:32
42 : ite(20, 4, 41) : BV:32
43 : lambda(19, 42) : FUNCTION[BV:32 -> BV:32]
44 : map(18, 43) : MAP[BV:32 -> BV:32]
45 : sum(1, 2, 44) : SUM[UNIT,MAP[BV:32 -> BV:32]]
46 : sym_const(45) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 1879048191 { 0x6fffffff +1.99999988e96 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1879048192 { 0x70000000 +1.0e97 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda42098Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42099Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
25 : eq(23, 24) : BOOL
26 : 64 { 0x40 } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : 2 { 0x2 +1.23e129 } : BV:32
30 : bvadd(29, 21, 22) : BV:32
31 : eq(30, 24) : BOOL
32 : ite(31, 26, 27) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 21, 22) : BV:32
35 : eq(34, 24) : BOOL
36 : ite(35, 26, 27) : BV:8
37 : bvadd(21, 22) : BV:32
38 : eq(37, 24) : BOOL
39 : ite(38, 26, 27) : BV:8
40 : bvconcat(28, 32, 36, 39) : BV:32
41 : ite(18, 2, 40) : BV:32
42 : lambda(17, 41) : FUNCTION[BV:32 -> BV:32]
43 : map(16, 42) : MAP[BV:32 -> BV:32]
44 : sym_const(43) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1879048191 { 0x6fffffff +1.99999988e96 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 826277896 { 0x31400008 +1.50000095e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 826277899 { 0x3140000b +1.50000131e227 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2181051520 { 0x82003480 -2113915776 -1.160217e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2181051523 { 0x82003483 -2113915773 -1.160253e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda41908Var : BV:32
2 : Lambda41909Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 536870915 { 0x20000003 +1.35e193 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
14 : eq(12, 13) : BOOL
15 : 64 { 0x40 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : 536870914 { 0x20000002 +1.23e193 } : BV:32
19 : bvadd(18, 11) : BV:32
20 : eq(19, 13) : BOOL
21 : ite(20, 15, 16) : BV:8
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvadd(22, 11) : BV:32
24 : eq(23, 13) : BOOL
25 : ite(24, 15, 16) : BV:8
26 : 536870912 { 0x20000000 +1.0e193 } : BV:32
27 : bvadd(26, 11) : BV:32
28 : eq(27, 13) : BOOL
29 : ite(28, 15, 16) : BV:8
30 : bvconcat(17, 21, 25, 29) : BV:32
31 : bvadd(7, 9, 30) : BV:32
32 : eq(31, 13) : BOOL
33 : ite(32, 15, 16) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 9, 30) : BV:32
36 : eq(35, 13) : BOOL
37 : ite(36, 15, 16) : BV:8
38 : 1 { 0x1 +1.11e129 } : BV:32
39 : bvadd(38, 9, 30) : BV:32
40 : eq(39, 13) : BOOL
41 : ite(40, 15, 16) : BV:8
42 : bvadd(9, 30) : BV:32
43 : eq(42, 13) : BOOL
44 : ite(43, 15, 16) : BV:8
45 : bvconcat(33, 37, 41, 44) : BV:32
46 : ite(6, 3, 45) : BV:32
47 : lambda(1, 2, 46) : FUNCTION[BV:32,BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda41910Var : BV:32
2 : Lambda41911Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3128910039 { 0xba7f60d7 -1166057257 -1.99514281e245 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3128910041 { 0xba7f60d9 -1166057255 -1.99514305e245 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3128910040 { 0xba7f60d8 -1166057256 -1.99514293e245 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536870913 { 0x20000001 +1.11e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3128910039 ] -> true, [ 3128910040; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3128910039 ] -> true, [ 3128910040; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda41920Var : BV:32
2 : Lambda41921Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3128910039 { 0xba7f60d7 -1166057257 -1.99514281e245 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3128910041 { 0xba7f60d9 -1166057255 -1.99514305e245 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 3128910040 { 0xba7f60d8 -1166057256 -1.99514293e245 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 536870912 { 0x20000000 +1.0e193 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 536870913 { 0x20000001 +1.11e193 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda41924Var : BV:32
2 : Lambda41925Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3128910039 { 0xba7f60d7 -1166057257 -1.99514281e245 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3128910040 { 0xba7f60d8 -1166057256 -1.99514293e245 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3128910041 { 0xba7f60d9 -1166057255 -1.99514305e245 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 536870912 { 0x20000000 +1.0e193 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 536870913 { 0x20000001 +1.11e193 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 536870915 { 0x20000003 +1.35e193 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
55 : eq(53, 54) : BOOL
56 : 64 { 0x40 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : 536870914 { 0x20000002 +1.23e193 } : BV:32
60 : bvadd(59, 52) : BV:32
61 : eq(60, 54) : BOOL
62 : ite(61, 56, 57) : BV:8
63 : bvadd(37, 52) : BV:32
64 : eq(63, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : bvadd(33, 52) : BV:32
67 : eq(66, 54) : BOOL
68 : ite(67, 56, 57) : BV:8
69 : bvconcat(58, 62, 65, 68) : BV:32
70 : bvadd(48, 50, 69) : BV:32
71 : eq(70, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : 2 { 0x2 +1.23e129 } : BV:32
74 : bvadd(73, 50, 69) : BV:32
75 : eq(74, 54) : BOOL
76 : ite(75, 56, 57) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 50, 69) : BV:32
79 : eq(78, 54) : BOOL
80 : ite(79, 56, 57) : BV:8
81 : bvadd(50, 69) : BV:32
82 : eq(81, 54) : BOOL
83 : ite(82, 56, 57) : BV:8
84 : bvconcat(72, 76, 80, 83) : BV:32
85 : ite(6, 3, 84) : BV:32
86 : ite(47, 84, 85) : BV:32
87 : ite(6, 3, 86) : BV:32
88 : lambda(1, 2, 87) : FUNCTION[BV:32,BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda41929Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda41933Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda41934Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3758096383 { 0xdfffffff -536870913 -1.99999988e64 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : ite(3, 2, 25) : BV:32
27 : lambda(1, 26) : FUNCTION[BV:32 -> BV:32]
28 : sym_const(27) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1891525183
=counter_example_end
=global nodece 41 num_edges_traversed 0
=global nodece 41 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 42
=global nodece 42 nodece z3v487.ce4219.num_edges_traversed2
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(epsilon)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3v487.ce4219 21dc5e423dda6515dde9263e6a4dc30
=input.spec-%var-x-1
1 : Lambda11672Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11673Var : BV:32
18 : Lambda11674Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11675Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16813Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16814Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11685Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11686Var : BV:32
18 : Lambda11687Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11688Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16803Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 7 { 0x7 +1.83e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 9 { 0x9 +1.107e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16804Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(1, 47) : BOOL
52 : bvule(47, 29) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(32, 47) : BOOL
55 : bvule(47, 32) : BOOL
56 : and(54, 55) : BOOL
57 : bvule(36, 47) : BOOL
58 : bvule(47, 9) : BOOL
59 : and(57, 58) : BOOL
60 : ite(59, 36, 36) : BV:32
61 : ite(56, 32, 60) : BV:32
62 : ite(53, 1, 61) : BV:32
63 : eq(62, 1) : BOOL
64 : and(27, 63) : BOOL
65 : ite(64, 6, 12) : BOOL
66 : and(14, 65) : BOOL
67 : ite(50, 1, 1) : BV:32
68 : ite(66, 1, 67) : BV:32
69 : ite(50, 1, 68) : BV:32
70 : lambda(47, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(46, 70) : MAP[BV:32 -> BV:32]
72 : sum(16, 17, 71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
73 : sym_const(72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16819Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16820Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11571Var : BV:32
2 : Lambda11572Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11581Var : BV:32
2 : Lambda11582Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11585Var : BV:32
2 : Lambda11586Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4057320964
=counter_example_end
=global nodece 42 num_edges_traversed 2
=global nodece 42 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 43
=global nodece 43 nodece z3v487.ce4282.num_edges_traversed3
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3v487.ce4282 245736b7e1e8030997220ceedf3ea3c
=input.spec-%var-x-1
1 : Lambda11672Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11673Var : BV:32
18 : Lambda11674Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11675Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16813Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16814Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11685Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11686Var : BV:32
18 : Lambda11687Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11688Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16803Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 7 { 0x7 +1.83e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 9 { 0x9 +1.107e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16804Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(1, 47) : BOOL
52 : bvule(47, 29) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(32, 47) : BOOL
55 : bvule(47, 32) : BOOL
56 : and(54, 55) : BOOL
57 : bvule(36, 47) : BOOL
58 : bvule(47, 9) : BOOL
59 : and(57, 58) : BOOL
60 : ite(59, 36, 36) : BV:32
61 : ite(56, 32, 60) : BV:32
62 : ite(53, 1, 61) : BV:32
63 : eq(62, 1) : BOOL
64 : and(27, 63) : BOOL
65 : ite(64, 6, 12) : BOOL
66 : and(14, 65) : BOOL
67 : ite(50, 1, 1) : BV:32
68 : ite(66, 1, 67) : BV:32
69 : ite(50, 1, 68) : BV:32
70 : lambda(47, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(46, 70) : MAP[BV:32 -> BV:32]
72 : sum(16, 17, 71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
73 : sym_const(72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16819Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16820Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11571Var : BV:32
2 : Lambda11572Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11581Var : BV:32
2 : Lambda11582Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11585Var : BV:32
2 : Lambda11586Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4057320964
=counter_example_end
=global nodece 43 num_edges_traversed 3
=global nodece 43 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 44
=global nodece 44 nodece z3v487.ce4319.num_edges_traversed4
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce4319 b92703446fea7899170fc9a19b4d7
=input.spec-%var-x-1
1 : Lambda11672Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11673Var : BV:32
18 : Lambda11674Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11675Var : BV:32
53 : lambda(52, 2) : FUNCTION[BV:32 -> BV:32]
54 : map(51, 53) : MAP[BV:32 -> BV:32]
55 : lambda(17, 54) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
56 : map(16, 55) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
57 : sym_const(56) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16813Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16814Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda11685Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11686Var : BV:32
18 : Lambda11687Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 7 { 0x7 +1.83e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 8 { 0x8 +1.95e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 9 { 0x9 +1.107e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda11688Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(26, 24) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : ite(55, 2, 2) : BV:32
76 : ite(74, 2, 75) : BV:32
77 : ite(55, 2, 76) : BV:32
78 : lambda(52, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(51, 78) : MAP[BV:32 -> BV:32]
80 : lambda(17, 79) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
81 : map(16, 80) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
82 : sym_const(81) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16803Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 7 { 0x7 +1.83e129 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : 8 { 0x8 +1.95e129 } : BV:32
33 : bvule(32, 18) : BOOL
34 : bvule(18, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 9 { 0x9 +1.107e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 9) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(27, 43) : BOOL
45 : ite(44, 6, 12) : BOOL
46 : lambda(18, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda16804Var : BV:32
48 : eq(1, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(1, 47) : BOOL
52 : bvule(47, 29) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(32, 47) : BOOL
55 : bvule(47, 32) : BOOL
56 : and(54, 55) : BOOL
57 : bvule(36, 47) : BOOL
58 : bvule(47, 9) : BOOL
59 : and(57, 58) : BOOL
60 : ite(59, 36, 36) : BV:32
61 : ite(56, 32, 60) : BV:32
62 : ite(53, 1, 61) : BV:32
63 : eq(62, 1) : BOOL
64 : and(27, 63) : BOOL
65 : ite(64, 6, 12) : BOOL
66 : and(14, 65) : BOOL
67 : ite(50, 1, 1) : BV:32
68 : ite(66, 1, 67) : BV:32
69 : ite(50, 1, 68) : BV:32
70 : lambda(47, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(46, 70) : MAP[BV:32 -> BV:32]
72 : sum(16, 17, 71) : SUM[UNIT,MAP[BV:32 -> BV:32]]
73 : sym_const(72) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16819Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 8 { 0x8 +1.95e129 } : BV:32
25 : bvule(24, 1) : BOOL
26 : bvule(1, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 9 { 0x9 +1.107e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 9) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(19, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda16820Var : BV:32
42 : eq(2, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : and(13, 10) : BOOL
46 : ite(45, 38, 38) : BOOL
47 : ite(6, 37, 46) : BOOL
48 : bvule(2, 41) : BOOL
49 : bvule(41, 21) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 24) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(28, 41) : BOOL
55 : bvule(41, 9) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 28, 28) : BV:32
58 : ite(53, 24, 57) : BV:32
59 : ite(50, 2, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : and(19, 60) : BOOL
62 : ite(61, 37, 38) : BOOL
63 : and(47, 62) : BOOL
64 : ite(44, 2, 2) : BV:32
65 : ite(63, 2, 64) : BV:32
66 : ite(44, 2, 65) : BV:32
67 : lambda(41, 66) : FUNCTION[BV:32 -> BV:32]
68 : map(40, 67) : MAP[BV:32 -> BV:32]
69 : sym_const(68) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11571Var : BV:32
2 : Lambda11572Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11581Var : BV:32
2 : Lambda11582Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 7 { 0x7 +1.83e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 8 { 0x8 +1.95e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 9 { 0x9 +1.107e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 10) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11585Var : BV:32
2 : Lambda11586Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 7 { 0x7 +1.83e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 8 { 0x8 +1.95e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : ite(6, 3, 3) : BV:32
49 : ite(47, 3, 48) : BV:32
50 : ite(6, 3, 49) : BV:32
51 : lambda(1, 2, 50) : FUNCTION[BV:32,BV:32 -> BV:32]
52 : sym_const(51) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4057320964
=counter_example_end
=global nodece 44 num_edges_traversed 4
=global nodece 44 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 45
=global nodece 45 nodece z3v487.ce4196.num_edges_traversed2
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3v487.ce4196 ef977e495098117c85a9ab49d86cc5d
=input.spec-%var-x-1
1 : Lambda11988Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11989Var : BV:32
18 : Lambda11990Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11991Var : BV:32
50 : lambda(49, 2) : FUNCTION[BV:32 -> BV:32]
51 : map(48, 50) : MAP[BV:32 -> BV:32]
52 : lambda(17, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(16, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16915Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16916Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12001Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12002Var : BV:32
18 : Lambda12003Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda12004Var : BV:32
50 : eq(17, 2) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : and(26, 24) : BOOL
54 : ite(53, 13, 13) : BOOL
55 : ite(21, 7, 54) : BOOL
56 : bvule(2, 49) : BOOL
57 : bvule(49, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(22, 49) : BOOL
60 : bvule(49, 10) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(8, 49) : BOOL
63 : bvule(49, 8) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 8, 8) : BV:32
66 : ite(61, 22, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(55, 70) : BOOL
72 : ite(52, 2, 2) : BV:32
73 : ite(71, 2, 72) : BV:32
74 : ite(52, 2, 73) : BV:32
75 : lambda(49, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(48, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : ite(14, 3, 1) : BV:32
16 : unit : UNIT
17 : Lambda16905Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvule(18, 1) : BOOL
20 : and(19, 10) : BOOL
21 : bvule(1, 7) : BOOL
22 : and(8, 21) : BOOL
23 : ite(22, 7, 7) : BV:32
24 : ite(20, 18, 23) : BV:32
25 : ite(5, 1, 24) : BV:32
26 : eq(25, 1) : BOOL
27 : bvule(1, 17) : BOOL
28 : bvule(17, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(18, 17) : BOOL
31 : bvule(17, 9) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(7, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 7, 7) : BV:32
37 : ite(32, 18, 36) : BV:32
38 : ite(29, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(26, 39) : BOOL
41 : ite(40, 6, 12) : BOOL
42 : lambda(17, 41) : FUNCTION[BV:32 -> BOOL]
43 : Lambda16906Var : BV:32
44 : eq(1, 1) : BOOL
45 : eq(43, 1) : BOOL
46 : and(44, 45) : BOOL
47 : bvule(1, 43) : BOOL
48 : bvule(43, 3) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 43) : BOOL
51 : bvule(43, 9) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(7, 43) : BOOL
54 : bvule(43, 7) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 7, 7) : BV:32
57 : ite(52, 18, 56) : BV:32
58 : ite(49, 1, 57) : BV:32
59 : eq(58, 1) : BOOL
60 : and(26, 59) : BOOL
61 : ite(60, 6, 12) : BOOL
62 : and(14, 61) : BOOL
63 : ite(46, 1, 1) : BV:32
64 : ite(62, 1, 63) : BV:32
65 : ite(46, 1, 64) : BV:32
66 : lambda(43, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(42, 66) : MAP[BV:32 -> BV:32]
68 : sum(15, 16, 67) : SUM[UNIT,MAP[BV:32 -> BV:32]]
69 : sym_const(68) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16921Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16922Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11887Var : BV:32
2 : Lambda11888Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11897Var : BV:32
2 : Lambda11898Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11901Var : BV:32
2 : Lambda11902Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 8) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(20, 2) : BOOL
33 : bvule(2, 14) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(12, 2) : BOOL
36 : bvule(2, 12) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 12, 12) : BV:32
39 : ite(34, 20, 38) : BV:32
40 : ite(31, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(28, 41) : BOOL
43 : ite(42, 11, 17) : BOOL
44 : and(19, 43) : BOOL
45 : ite(6, 3, 3) : BV:32
46 : ite(44, 3, 45) : BV:32
47 : ite(6, 3, 46) : BV:32
48 : lambda(1, 2, 47) : FUNCTION[BV:32,BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1453390321
=counter_example_end
=global nodece 45 num_edges_traversed 2
=global nodece 45 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 46
=global nodece 46 nodece z3v487.ce4355.num_edges_traversed3
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3v487.ce4355 19d7cae7999cf30aea0ea13faae7
=input.spec-%var-x-1
1 : Lambda11988Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11989Var : BV:32
18 : Lambda11990Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11991Var : BV:32
50 : lambda(49, 2) : FUNCTION[BV:32 -> BV:32]
51 : map(48, 50) : MAP[BV:32 -> BV:32]
52 : lambda(17, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(16, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16915Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16916Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12001Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12002Var : BV:32
18 : Lambda12003Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda12004Var : BV:32
50 : eq(17, 2) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : and(26, 24) : BOOL
54 : ite(53, 13, 13) : BOOL
55 : ite(21, 7, 54) : BOOL
56 : bvule(2, 49) : BOOL
57 : bvule(49, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(22, 49) : BOOL
60 : bvule(49, 10) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(8, 49) : BOOL
63 : bvule(49, 8) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 8, 8) : BV:32
66 : ite(61, 22, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(55, 70) : BOOL
72 : ite(52, 2, 2) : BV:32
73 : ite(71, 2, 72) : BV:32
74 : ite(52, 2, 73) : BV:32
75 : lambda(49, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(48, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : ite(14, 3, 1) : BV:32
16 : unit : UNIT
17 : Lambda16905Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvule(18, 1) : BOOL
20 : and(19, 10) : BOOL
21 : bvule(1, 7) : BOOL
22 : and(8, 21) : BOOL
23 : ite(22, 7, 7) : BV:32
24 : ite(20, 18, 23) : BV:32
25 : ite(5, 1, 24) : BV:32
26 : eq(25, 1) : BOOL
27 : bvule(1, 17) : BOOL
28 : bvule(17, 3) : BOOL
29 : and(27, 28) : BOOL
30 : bvule(18, 17) : BOOL
31 : bvule(17, 9) : BOOL
32 : and(30, 31) : BOOL
33 : bvule(7, 17) : BOOL
34 : bvule(17, 7) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 7, 7) : BV:32
37 : ite(32, 18, 36) : BV:32
38 : ite(29, 1, 37) : BV:32
39 : eq(38, 1) : BOOL
40 : and(26, 39) : BOOL
41 : ite(40, 6, 12) : BOOL
42 : lambda(17, 41) : FUNCTION[BV:32 -> BOOL]
43 : Lambda16906Var : BV:32
44 : eq(1, 1) : BOOL
45 : eq(43, 1) : BOOL
46 : and(44, 45) : BOOL
47 : bvule(1, 43) : BOOL
48 : bvule(43, 3) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 43) : BOOL
51 : bvule(43, 9) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(7, 43) : BOOL
54 : bvule(43, 7) : BOOL
55 : and(53, 54) : BOOL
56 : ite(55, 7, 7) : BV:32
57 : ite(52, 18, 56) : BV:32
58 : ite(49, 1, 57) : BV:32
59 : eq(58, 1) : BOOL
60 : and(26, 59) : BOOL
61 : ite(60, 6, 12) : BOOL
62 : and(14, 61) : BOOL
63 : ite(46, 1, 1) : BV:32
64 : ite(62, 1, 63) : BV:32
65 : ite(46, 1, 64) : BV:32
66 : lambda(43, 65) : FUNCTION[BV:32 -> BV:32]
67 : map(42, 66) : MAP[BV:32 -> BV:32]
68 : sum(15, 16, 67) : SUM[UNIT,MAP[BV:32 -> BV:32]]
69 : sym_const(68) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16921Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 1) : BOOL
24 : bvule(1, 9) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(12, 1) : BOOL
27 : bvule(1, 12) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 12, 12) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 36) : FUNCTION[BV:32 -> BOOL]
38 : Lambda16922Var : BV:32
39 : eq(2, 2) : BOOL
40 : eq(38, 2) : BOOL
41 : and(39, 40) : BOOL
42 : and(13, 10) : BOOL
43 : ite(42, 35, 35) : BOOL
44 : ite(6, 34, 43) : BOOL
45 : bvule(2, 38) : BOOL
46 : bvule(38, 4) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(7, 38) : BOOL
49 : bvule(38, 9) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(12, 38) : BOOL
52 : bvule(38, 12) : BOOL
53 : and(51, 52) : BOOL
54 : ite(53, 12, 12) : BV:32
55 : ite(50, 7, 54) : BV:32
56 : ite(47, 2, 55) : BV:32
57 : eq(56, 2) : BOOL
58 : and(19, 57) : BOOL
59 : ite(58, 34, 35) : BOOL
60 : and(44, 59) : BOOL
61 : ite(41, 2, 2) : BV:32
62 : ite(60, 2, 61) : BV:32
63 : ite(41, 2, 62) : BV:32
64 : lambda(38, 63) : FUNCTION[BV:32 -> BV:32]
65 : map(37, 64) : MAP[BV:32 -> BV:32]
66 : sym_const(65) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11887Var : BV:32
2 : Lambda11888Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11897Var : BV:32
2 : Lambda11898Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11901Var : BV:32
2 : Lambda11902Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 8) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(20, 2) : BOOL
33 : bvule(2, 14) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(12, 2) : BOOL
36 : bvule(2, 12) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 12, 12) : BV:32
39 : ite(34, 20, 38) : BV:32
40 : ite(31, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(28, 41) : BOOL
43 : ite(42, 11, 17) : BOOL
44 : and(19, 43) : BOOL
45 : ite(6, 3, 3) : BV:32
46 : ite(44, 3, 45) : BV:32
47 : ite(6, 3, 46) : BV:32
48 : lambda(1, 2, 47) : FUNCTION[BV:32,BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1453390321
=counter_example_end
=global nodece 46 num_edges_traversed 3
=global nodece 46 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 47
=global nodece 47 nodece z3v487.ce4382.num_edges_traversed4
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3v487.ce4382 e245b23930ff6f9b266c2687117c226
=input.spec-%var-x-1
1 : Lambda11988Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda11989Var : BV:32
18 : Lambda11990Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda11991Var : BV:32
50 : lambda(49, 2) : FUNCTION[BV:32 -> BV:32]
51 : map(48, 50) : MAP[BV:32 -> BV:32]
52 : lambda(17, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(16, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 828; 831 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 832; 34573943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 34573944; 34573947 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 34573948; 68130443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 68130444; 68130447 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 68130448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.llvm-%m
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.llvm-%n
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12001Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12002Var : BV:32
18 : Lambda12003Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 4) : BOOL
35 : and(33, 34) : BOOL
36 : bvule(22, 18) : BOOL
37 : bvule(18, 10) : BOOL
38 : and(36, 37) : BOOL
39 : bvule(8, 18) : BOOL
40 : bvule(18, 8) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 8, 8) : BV:32
43 : ite(38, 22, 42) : BV:32
44 : ite(35, 2, 43) : BV:32
45 : eq(44, 2) : BOOL
46 : and(32, 45) : BOOL
47 : ite(46, 7, 13) : BOOL
48 : lambda(18, 47) : FUNCTION[BV:32 -> BOOL]
49 : Lambda12004Var : BV:32
50 : eq(17, 2) : BOOL
51 : eq(49, 2) : BOOL
52 : and(50, 51) : BOOL
53 : and(26, 24) : BOOL
54 : ite(53, 13, 13) : BOOL
55 : ite(21, 7, 54) : BOOL
56 : bvule(2, 49) : BOOL
57 : bvule(49, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(22, 49) : BOOL
60 : bvule(49, 10) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(8, 49) : BOOL
63 : bvule(49, 8) : BOOL
64 : and(62, 63) : BOOL
65 : ite(64, 8, 8) : BV:32
66 : ite(61, 22, 65) : BV:32
67 : ite(58, 2, 66) : BV:32
68 : eq(67, 2) : BOOL
69 : and(32, 68) : BOOL
70 : ite(69, 7, 13) : BOOL
71 : and(55, 70) : BOOL
72 : ite(52, 2, 2) : BV:32
73 : ite(71, 2, 72) : BV:32
74 : ite(52, 2, 73) : BV:32
75 : lambda(49, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(48, 75) : MAP[BV:32 -> BV:32]
77 : lambda(17, 76) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
78 : map(16, 77) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
79 : sym_const(78) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1543894318 { 0x5c05f52e +1.4654479e57 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 25885967 { 0x18afd0f +1.8584773e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 828 { 0x33c +1.9870e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 831 { 0x33f +1.9906e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 68130444 { 0x40f968c +1.12178182e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 68130447 { 0x40f968f +1.12178218e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 34573944 { 0x20f8e78 +1.12153530e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 34573947 { 0x20f8e7b +1.12153565e133 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda11887Var : BV:32
2 : Lambda11888Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda11897Var : BV:32
2 : Lambda11898Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2 { 0x2 +1.23e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 5) : BOOL
23 : and(21, 22) : BOOL
24 : bvule(8, 2) : BOOL
25 : bvule(2, 10) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(13, 2) : BOOL
28 : bvule(2, 13) : BOOL
29 : and(27, 28) : BOOL
30 : ite(29, 13, 13) : BV:32
31 : ite(26, 8, 30) : BV:32
32 : ite(23, 3, 31) : BV:32
33 : eq(32, 3) : BOOL
34 : and(20, 33) : BOOL
35 : 1 { 0x1 } : BOOL
36 : 0 { 0x0 } : BOOL
37 : ite(34, 35, 36) : BOOL
38 : lambda(1, 2, 37) : FUNCTION[BV:32,BV:32 -> BOOL]
39 : sym_const(38) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda11901Var : BV:32
2 : Lambda11902Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 8) : BOOL
31 : and(29, 30) : BOOL
32 : bvule(20, 2) : BOOL
33 : bvule(2, 14) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(12, 2) : BOOL
36 : bvule(2, 12) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 12, 12) : BV:32
39 : ite(34, 20, 38) : BV:32
40 : ite(31, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(28, 41) : BOOL
43 : ite(42, 11, 17) : BOOL
44 : and(19, 43) : BOOL
45 : ite(6, 3, 3) : BV:32
46 : ite(44, 3, 45) : BV:32
47 : ite(6, 3, 46) : BV:32
48 : lambda(1, 2, 47) : FUNCTION[BV:32,BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2823404441
=counter_example_end
=global nodece 47 num_edges_traversed 4
=global nodece 47 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 48
=global nodece 48 nodece z3.ce4180.num_edges_traversed2
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3.ce4180 9801e2a7b167140657e8626c2e36
=input.spec-%var-x-1
1 : Lambda12252Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12253Var : BV:32
18 : Lambda12254Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 32769 { 0x8001 +1.390636e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda12255Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 4 { 0x4 } : BV:8
81 : eq(78, 74) : BOOL
82 : 190 { 0xbe -66 } : BV:8
83 : eq(78, 40) : BOOL
84 : 223 { 0xdf -33 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(81, 82, 86) : BV:8
88 : ite(79, 80, 87) : BV:8
89 : bvadd(40, 77) : BV:32
90 : eq(89, 2) : BOOL
91 : eq(89, 74) : BOOL
92 : eq(89, 40) : BOOL
93 : ite(92, 84, 85) : BV:8
94 : ite(91, 82, 93) : BV:8
95 : ite(90, 80, 94) : BV:8
96 : bvadd(36, 77) : BV:32
97 : eq(96, 2) : BOOL
98 : eq(96, 74) : BOOL
99 : eq(96, 40) : BOOL
100 : ite(99, 84, 85) : BV:8
101 : ite(98, 82, 100) : BV:8
102 : ite(97, 80, 101) : BV:8
103 : eq(77, 2) : BOOL
104 : eq(77, 74) : BOOL
105 : eq(77, 40) : BOOL
106 : ite(105, 84, 85) : BV:8
107 : ite(104, 82, 106) : BV:8
108 : ite(103, 80, 107) : BV:8
109 : bvconcat(88, 95, 102, 108) : BV:32
110 : bvadd(74, 76, 109) : BV:32
111 : eq(110, 2) : BOOL
112 : eq(110, 74) : BOOL
113 : eq(110, 40) : BOOL
114 : ite(113, 84, 85) : BV:8
115 : ite(112, 82, 114) : BV:8
116 : ite(111, 80, 115) : BV:8
117 : bvadd(40, 76, 109) : BV:32
118 : eq(117, 2) : BOOL
119 : eq(117, 74) : BOOL
120 : eq(117, 40) : BOOL
121 : ite(120, 84, 85) : BV:8
122 : ite(119, 82, 121) : BV:8
123 : ite(118, 80, 122) : BV:8
124 : bvadd(36, 76, 109) : BV:32
125 : eq(124, 2) : BOOL
126 : eq(124, 74) : BOOL
127 : eq(124, 40) : BOOL
128 : ite(127, 84, 85) : BV:8
129 : ite(126, 82, 128) : BV:8
130 : ite(125, 80, 129) : BV:8
131 : bvadd(76, 109) : BV:32
132 : eq(131, 2) : BOOL
133 : eq(131, 74) : BOOL
134 : eq(131, 40) : BOOL
135 : ite(134, 84, 85) : BV:8
136 : ite(133, 82, 135) : BV:8
137 : ite(132, 80, 136) : BV:8
138 : bvconcat(116, 123, 130, 137) : BV:32
139 : ite(54, 2, 138) : BV:32
140 : ite(73, 138, 139) : BV:32
141 : ite(54, 2, 140) : BV:32
142 : lambda(51, 141) : FUNCTION[BV:32 -> BV:32]
143 : map(50, 142) : MAP[BV:32 -> BV:32]
144 : lambda(17, 143) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
145 : map(16, 144) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
146 : sym_const(145) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda16969Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 32769 { 0x8001 +1.390636e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 32768 { 0x8000 +1.390625e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 9) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16970Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 4 { 0x4 } : BV:8
51 : eq(48, 44) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 27) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : ite(49, 50, 57) : BV:8
59 : bvadd(27, 47) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 44) : BOOL
62 : eq(59, 27) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 52, 63) : BV:8
65 : ite(60, 50, 64) : BV:8
66 : bvadd(23, 47) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 44) : BOOL
69 : eq(66, 27) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 52, 70) : BV:8
72 : ite(67, 50, 71) : BV:8
73 : eq(47, 2) : BOOL
74 : eq(47, 44) : BOOL
75 : eq(47, 27) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 52, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(44, 46, 79) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 44) : BOOL
83 : eq(80, 27) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : bvadd(27, 46, 79) : BV:32
88 : eq(87, 2) : BOOL
89 : eq(87, 44) : BOOL
90 : eq(87, 27) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 52, 91) : BV:8
93 : ite(88, 50, 92) : BV:8
94 : bvadd(23, 46, 79) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 44) : BOOL
97 : eq(94, 27) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 52, 98) : BV:8
100 : ite(95, 50, 99) : BV:8
101 : bvadd(46, 79) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 44) : BOOL
104 : eq(101, 27) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 52, 105) : BV:8
107 : ite(102, 50, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(43, 2, 108) : BV:32
110 : lambda(40, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(39, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 4, [ 1; 1 ] -> 0, [ 2; 2 ] -> 223, [ 3; 3 ] -> 190, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 161866995 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 161866996; 161866999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 161867000; 544929879 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 544929880; 544929883 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 544929884; 3094983655 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3094983656; 3094983659 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3094983660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3094983656 { 0xb879b3e8 -1199983640 -1.95080280e241 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 161866996 { 0x9a5e4f4 +1.29604959e148 } : BV:32
=input.dst.llvm-%n
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 544929880 { 0x207af858 +1.96070384e193 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12265Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12266Var : BV:32
18 : Lambda12267Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 32769 { 0x8001 +1.390636e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda12268Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 4 { 0x4 } : BV:8
62 : eq(59, 55) : BOOL
63 : 190 { 0xbe -66 } : BV:8
64 : eq(59, 40) : BOOL
65 : 223 { 0xdf -33 } : BV:8
66 : 0 { 0x0 } : BV:8
67 : ite(64, 65, 66) : BV:8
68 : ite(62, 63, 67) : BV:8
69 : ite(60, 61, 68) : BV:8
70 : bvadd(40, 58) : BV:32
71 : eq(70, 2) : BOOL
72 : eq(70, 55) : BOOL
73 : eq(70, 40) : BOOL
74 : ite(73, 65, 66) : BV:8
75 : ite(72, 63, 74) : BV:8
76 : ite(71, 61, 75) : BV:8
77 : bvadd(36, 58) : BV:32
78 : eq(77, 2) : BOOL
79 : eq(77, 55) : BOOL
80 : eq(77, 40) : BOOL
81 : ite(80, 65, 66) : BV:8
82 : ite(79, 63, 81) : BV:8
83 : ite(78, 61, 82) : BV:8
84 : eq(58, 2) : BOOL
85 : eq(58, 55) : BOOL
86 : eq(58, 40) : BOOL
87 : ite(86, 65, 66) : BV:8
88 : ite(85, 63, 87) : BV:8
89 : ite(84, 61, 88) : BV:8
90 : bvconcat(69, 76, 83, 89) : BV:32
91 : bvadd(55, 57, 90) : BV:32
92 : eq(91, 2) : BOOL
93 : eq(91, 55) : BOOL
94 : eq(91, 40) : BOOL
95 : ite(94, 65, 66) : BV:8
96 : ite(93, 63, 95) : BV:8
97 : ite(92, 61, 96) : BV:8
98 : bvadd(40, 57, 90) : BV:32
99 : eq(98, 2) : BOOL
100 : eq(98, 55) : BOOL
101 : eq(98, 40) : BOOL
102 : ite(101, 65, 66) : BV:8
103 : ite(100, 63, 102) : BV:8
104 : ite(99, 61, 103) : BV:8
105 : bvadd(36, 57, 90) : BV:32
106 : eq(105, 2) : BOOL
107 : eq(105, 55) : BOOL
108 : eq(105, 40) : BOOL
109 : ite(108, 65, 66) : BV:8
110 : ite(107, 63, 109) : BV:8
111 : ite(106, 61, 110) : BV:8
112 : bvadd(57, 90) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 55) : BOOL
115 : eq(112, 40) : BOOL
116 : ite(115, 65, 66) : BV:8
117 : ite(114, 63, 116) : BV:8
118 : ite(113, 61, 117) : BV:8
119 : bvconcat(97, 104, 111, 118) : BV:32
120 : ite(54, 2, 119) : BV:32
121 : lambda(51, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(50, 121) : MAP[BV:32 -> BV:32]
123 : lambda(17, 122) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
124 : map(16, 123) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
125 : sym_const(124) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 32767 { 0x7fff +1.390613e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 32768 { 0x8000 +1.390625e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda16959Var : BV:32
19 : 32769 { 0x8001 +1.390636e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : bvule(18, 1) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(15, 18) : BOOL
32 : bvule(18, 15) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 18) : BOOL
36 : bvule(18, 9) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 15, 38) : BV:32
40 : ite(30, 1, 39) : BV:32
41 : eq(40, 1) : BOOL
42 : and(27, 41) : BOOL
43 : ite(42, 6, 12) : BOOL
44 : lambda(18, 43) : FUNCTION[BV:32 -> BOOL]
45 : Lambda16960Var : BV:32
46 : eq(1, 1) : BOOL
47 : eq(45, 1) : BOOL
48 : and(46, 47) : BOOL
49 : 3 { 0x3 +1.35e129 } : BV:32
50 : 4 { 0x4 +1.47e129 } : BV:32
51 : bvmul(50, 45) : BV:32
52 : bvmul(50, 1) : BV:32
53 : bvadd(49, 52) : BV:32
54 : eq(53, 1) : BOOL
55 : 4 { 0x4 } : BV:8
56 : eq(53, 49) : BOOL
57 : 190 { 0xbe -66 } : BV:8
58 : eq(53, 34) : BOOL
59 : 223 { 0xdf -33 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : bvadd(34, 52) : BV:32
65 : eq(64, 1) : BOOL
66 : eq(64, 49) : BOOL
67 : eq(64, 34) : BOOL
68 : ite(67, 59, 60) : BV:8
69 : ite(66, 57, 68) : BV:8
70 : ite(65, 55, 69) : BV:8
71 : bvadd(15, 52) : BV:32
72 : eq(71, 1) : BOOL
73 : eq(71, 49) : BOOL
74 : eq(71, 34) : BOOL
75 : ite(74, 59, 60) : BV:8
76 : ite(73, 57, 75) : BV:8
77 : ite(72, 55, 76) : BV:8
78 : eq(52, 1) : BOOL
79 : eq(52, 49) : BOOL
80 : eq(52, 34) : BOOL
81 : ite(80, 59, 60) : BV:8
82 : ite(79, 57, 81) : BV:8
83 : ite(78, 55, 82) : BV:8
84 : bvconcat(63, 70, 77, 83) : BV:32
85 : bvadd(49, 51, 84) : BV:32
86 : eq(85, 1) : BOOL
87 : eq(85, 49) : BOOL
88 : eq(85, 34) : BOOL
89 : ite(88, 59, 60) : BV:8
90 : ite(87, 57, 89) : BV:8
91 : ite(86, 55, 90) : BV:8
92 : bvadd(34, 51, 84) : BV:32
93 : eq(92, 1) : BOOL
94 : eq(92, 49) : BOOL
95 : eq(92, 34) : BOOL
96 : ite(95, 59, 60) : BV:8
97 : ite(94, 57, 96) : BV:8
98 : ite(93, 55, 97) : BV:8
99 : bvadd(15, 51, 84) : BV:32
100 : eq(99, 1) : BOOL
101 : eq(99, 49) : BOOL
102 : eq(99, 34) : BOOL
103 : ite(102, 59, 60) : BV:8
104 : ite(101, 57, 103) : BV:8
105 : ite(100, 55, 104) : BV:8
106 : bvadd(51, 84) : BV:32
107 : eq(106, 1) : BOOL
108 : eq(106, 49) : BOOL
109 : eq(106, 34) : BOOL
110 : ite(109, 59, 60) : BV:8
111 : ite(108, 57, 110) : BV:8
112 : ite(107, 55, 111) : BV:8
113 : bvconcat(91, 98, 105, 112) : BV:32
114 : ite(48, 1, 113) : BV:32
115 : lambda(45, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(44, 115) : MAP[BV:32 -> BV:32]
117 : sum(16, 17, 116) : SUM[UNIT,MAP[BV:32 -> BV:32]]
118 : sym_const(117) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda16975Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 32769 { 0x8001 +1.390636e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 32768 { 0x8000 +1.390625e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : bvule(1, 2) : BOOL
22 : and(20, 21) : BOOL
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : bvule(23, 1) : BOOL
25 : bvule(1, 23) : BOOL
26 : and(24, 25) : BOOL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvule(27, 1) : BOOL
29 : bvule(1, 9) : BOOL
30 : and(28, 29) : BOOL
31 : ite(30, 27, 27) : BV:32
32 : ite(26, 23, 31) : BV:32
33 : ite(22, 2, 32) : BV:32
34 : eq(33, 2) : BOOL
35 : and(19, 34) : BOOL
36 : 1 { 0x1 } : BOOL
37 : 0 { 0x0 } : BOOL
38 : ite(35, 36, 37) : BOOL
39 : lambda(1, 38) : FUNCTION[BV:32 -> BOOL]
40 : Lambda16976Var : BV:32
41 : eq(2, 2) : BOOL
42 : eq(40, 2) : BOOL
43 : and(41, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 40) : BV:32
47 : bvmul(45, 2) : BV:32
48 : bvadd(44, 47) : BV:32
49 : eq(48, 2) : BOOL
50 : 4 { 0x4 } : BV:8
51 : eq(48, 44) : BOOL
52 : 190 { 0xbe -66 } : BV:8
53 : eq(48, 27) : BOOL
54 : 223 { 0xdf -33 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(51, 52, 56) : BV:8
58 : ite(49, 50, 57) : BV:8
59 : bvadd(27, 47) : BV:32
60 : eq(59, 2) : BOOL
61 : eq(59, 44) : BOOL
62 : eq(59, 27) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 52, 63) : BV:8
65 : ite(60, 50, 64) : BV:8
66 : bvadd(23, 47) : BV:32
67 : eq(66, 2) : BOOL
68 : eq(66, 44) : BOOL
69 : eq(66, 27) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 52, 70) : BV:8
72 : ite(67, 50, 71) : BV:8
73 : eq(47, 2) : BOOL
74 : eq(47, 44) : BOOL
75 : eq(47, 27) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 52, 76) : BV:8
78 : ite(73, 50, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(44, 46, 79) : BV:32
81 : eq(80, 2) : BOOL
82 : eq(80, 44) : BOOL
83 : eq(80, 27) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 52, 84) : BV:8
86 : ite(81, 50, 85) : BV:8
87 : bvadd(27, 46, 79) : BV:32
88 : eq(87, 2) : BOOL
89 : eq(87, 44) : BOOL
90 : eq(87, 27) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 52, 91) : BV:8
93 : ite(88, 50, 92) : BV:8
94 : bvadd(23, 46, 79) : BV:32
95 : eq(94, 2) : BOOL
96 : eq(94, 44) : BOOL
97 : eq(94, 27) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 52, 98) : BV:8
100 : ite(95, 50, 99) : BV:8
101 : bvadd(46, 79) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 44) : BOOL
104 : eq(101, 27) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 52, 105) : BV:8
107 : ite(102, 50, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(43, 2, 108) : BV:32
110 : lambda(40, 109) : FUNCTION[BV:32 -> BV:32]
111 : map(39, 110) : MAP[BV:32 -> BV:32]
112 : sym_const(111) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 161866996 { 0x9a5e4f4 +1.29604959e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 161866999 { 0x9a5e4f7 +1.29604995e148 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 544929880 { 0x207af858 +1.96070384e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 544929883 { 0x207af85b +1.96070420e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3094983656 { 0xb879b3e8 -1199983640 -1.95080280e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3094983659 { 0xb879b3eb -1199983637 -1.95080316e241 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12182Var : BV:32
2 : Lambda12183Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 32767 { 0x7fff +1.390613e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 32768 { 0x8000 +1.390625e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 32769 { 0x8001 +1.390636e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 4 { 0x4 } : BV:8
54 : eq(51, 47) : BOOL
55 : 190 { 0xbe -66 } : BV:8
56 : eq(51, 36) : BOOL
57 : 223 { 0xdf -33 } : BV:8
58 : 0 { 0x0 } : BV:8
59 : ite(56, 57, 58) : BV:8
60 : ite(54, 55, 59) : BV:8
61 : ite(52, 53, 60) : BV:8
62 : bvadd(36, 50) : BV:32
63 : eq(62, 3) : BOOL
64 : eq(62, 47) : BOOL
65 : eq(62, 36) : BOOL
66 : ite(65, 57, 58) : BV:8
67 : ite(64, 55, 66) : BV:8
68 : ite(63, 53, 67) : BV:8
69 : bvadd(32, 50) : BV:32
70 : eq(69, 3) : BOOL
71 : eq(69, 47) : BOOL
72 : eq(69, 36) : BOOL
73 : ite(72, 57, 58) : BV:8
74 : ite(71, 55, 73) : BV:8
75 : ite(70, 53, 74) : BV:8
76 : eq(50, 3) : BOOL
77 : eq(50, 47) : BOOL
78 : eq(50, 36) : BOOL
79 : ite(78, 57, 58) : BV:8
80 : ite(77, 55, 79) : BV:8
81 : ite(76, 53, 80) : BV:8
82 : bvconcat(61, 68, 75, 81) : BV:32
83 : bvadd(47, 49, 82) : BV:32
84 : eq(83, 3) : BOOL
85 : eq(83, 47) : BOOL
86 : eq(83, 36) : BOOL
87 : ite(86, 57, 58) : BV:8
88 : ite(85, 55, 87) : BV:8
89 : ite(84, 53, 88) : BV:8
90 : bvadd(36, 49, 82) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 47) : BOOL
93 : eq(90, 36) : BOOL
94 : ite(93, 57, 58) : BV:8
95 : ite(92, 55, 94) : BV:8
96 : ite(91, 53, 95) : BV:8
97 : bvadd(32, 49, 82) : BV:32
98 : eq(97, 3) : BOOL
99 : eq(97, 47) : BOOL
100 : eq(97, 36) : BOOL
101 : ite(100, 57, 58) : BV:8
102 : ite(99, 55, 101) : BV:8
103 : ite(98, 53, 102) : BV:8
104 : bvadd(49, 82) : BV:32
105 : eq(104, 3) : BOOL
106 : eq(104, 47) : BOOL
107 : eq(104, 36) : BOOL
108 : ite(107, 57, 58) : BV:8
109 : ite(106, 55, 108) : BV:8
110 : ite(105, 53, 109) : BV:8
111 : bvconcat(89, 96, 103, 110) : BV:32
112 : ite(6, 3, 111) : BV:32
113 : ite(46, 111, 112) : BV:32
114 : ite(6, 3, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12187Var : BV:32
2 : Lambda12188Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32769 { 0x8001 +1.390636e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 32768 { 0x8000 +1.390625e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12196Var : BV:32
2 : Lambda12197Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 32767 { 0x7fff +1.390613e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 32769 { 0x8001 +1.390636e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 32768 { 0x8000 +1.390625e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12192Var : BV:32
2 : Lambda12193Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 4 { 0x4 } : BV:8
14 : eq(11, 7) : BOOL
15 : 190 { 0xbe -66 } : BV:8
16 : 2 { 0x2 +1.23e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 223 { 0xdf -33 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : ite(14, 15, 20) : BV:8
22 : ite(12, 13, 21) : BV:8
23 : bvadd(16, 10) : BV:32
24 : eq(23, 3) : BOOL
25 : eq(23, 7) : BOOL
26 : eq(23, 16) : BOOL
27 : ite(26, 18, 19) : BV:8
28 : ite(25, 15, 27) : BV:8
29 : ite(24, 13, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 10) : BV:32
32 : eq(31, 3) : BOOL
33 : eq(31, 7) : BOOL
34 : eq(31, 16) : BOOL
35 : ite(34, 18, 19) : BV:8
36 : ite(33, 15, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 3) : BOOL
39 : eq(10, 7) : BOOL
40 : eq(10, 16) : BOOL
41 : ite(40, 18, 19) : BV:8
42 : ite(39, 15, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(22, 29, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 3) : BOOL
47 : eq(45, 7) : BOOL
48 : eq(45, 16) : BOOL
49 : ite(48, 18, 19) : BV:8
50 : ite(47, 15, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(16, 9, 44) : BV:32
53 : eq(52, 3) : BOOL
54 : eq(52, 7) : BOOL
55 : eq(52, 16) : BOOL
56 : ite(55, 18, 19) : BV:8
57 : ite(54, 15, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(30, 9, 44) : BV:32
60 : eq(59, 3) : BOOL
61 : eq(59, 7) : BOOL
62 : eq(59, 16) : BOOL
63 : ite(62, 18, 19) : BV:8
64 : ite(61, 15, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 3) : BOOL
68 : eq(66, 7) : BOOL
69 : eq(66, 16) : BOOL
70 : ite(69, 18, 19) : BV:8
71 : ite(68, 15, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1666922080
=counter_example_end
=global nodece 48 num_edges_traversed 2
=global nodece 48 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 49
=global nodece 49 nodece z3.ce4164.num_edges_traversed2
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(epsilon)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce4164 a23aaaaeec6b249df6291ebbeb14c21
=input.spec-%var-x-1
1 : Lambda12672Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12673Var : BV:32
18 : Lambda12674Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12675Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : and(26, 24) : BOOL
51 : ite(50, 13, 13) : BOOL
52 : ite(21, 7, 51) : BOOL
53 : bvule(2, 46) : BOOL
54 : bvule(46, 34) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(10, 46) : BOOL
57 : bvule(46, 10) : BOOL
58 : and(56, 57) : BOOL
59 : ite(58, 10, 10) : BV:32
60 : ite(55, 2, 59) : BV:32
61 : eq(60, 2) : BOOL
62 : and(32, 61) : BOOL
63 : ite(62, 7, 13) : BOOL
64 : and(52, 63) : BOOL
65 : 3 { 0x3 +1.35e129 } : BV:32
66 : 4 { 0x4 +1.47e129 } : BV:32
67 : bvmul(66, 46) : BV:32
68 : bvmul(66, 17) : BV:32
69 : bvadd(65, 68) : BV:32
70 : eq(69, 65) : BOOL
71 : 183 { 0xb7 -73 } : BV:8
72 : 1 { 0x1 +1.11e129 } : BV:32
73 : eq(69, 72) : BOOL
74 : 176 { 0xb0 -80 } : BV:8
75 : 2 { 0x2 +1.23e129 } : BV:32
76 : eq(69, 75) : BOOL
77 : 39 { 0x27 } : BV:8
78 : 0 { 0x0 } : BV:8
79 : ite(76, 77, 78) : BV:8
80 : ite(73, 74, 79) : BV:8
81 : ite(70, 71, 80) : BV:8
82 : bvadd(75, 68) : BV:32
83 : eq(82, 65) : BOOL
84 : eq(82, 72) : BOOL
85 : eq(82, 75) : BOOL
86 : ite(85, 77, 78) : BV:8
87 : ite(84, 74, 86) : BV:8
88 : ite(83, 71, 87) : BV:8
89 : bvadd(72, 68) : BV:32
90 : eq(89, 65) : BOOL
91 : eq(89, 72) : BOOL
92 : eq(89, 75) : BOOL
93 : ite(92, 77, 78) : BV:8
94 : ite(91, 74, 93) : BV:8
95 : ite(90, 71, 94) : BV:8
96 : eq(68, 65) : BOOL
97 : eq(68, 72) : BOOL
98 : eq(68, 75) : BOOL
99 : ite(98, 77, 78) : BV:8
100 : ite(97, 74, 99) : BV:8
101 : ite(96, 71, 100) : BV:8
102 : bvconcat(81, 88, 95, 101) : BV:32
103 : bvadd(65, 67, 102) : BV:32
104 : eq(103, 65) : BOOL
105 : eq(103, 72) : BOOL
106 : eq(103, 75) : BOOL
107 : ite(106, 77, 78) : BV:8
108 : ite(105, 74, 107) : BV:8
109 : ite(104, 71, 108) : BV:8
110 : bvadd(75, 67, 102) : BV:32
111 : eq(110, 65) : BOOL
112 : eq(110, 72) : BOOL
113 : eq(110, 75) : BOOL
114 : ite(113, 77, 78) : BV:8
115 : ite(112, 74, 114) : BV:8
116 : ite(111, 71, 115) : BV:8
117 : bvadd(72, 67, 102) : BV:32
118 : eq(117, 65) : BOOL
119 : eq(117, 72) : BOOL
120 : eq(117, 75) : BOOL
121 : ite(120, 77, 78) : BV:8
122 : ite(119, 74, 121) : BV:8
123 : ite(118, 71, 122) : BV:8
124 : bvadd(67, 102) : BV:32
125 : eq(124, 65) : BOOL
126 : eq(124, 72) : BOOL
127 : eq(124, 75) : BOOL
128 : ite(127, 77, 78) : BV:8
129 : ite(126, 74, 128) : BV:8
130 : ite(125, 71, 129) : BV:8
131 : bvconcat(109, 116, 123, 130) : BV:32
132 : ite(49, 2, 131) : BV:32
133 : ite(64, 131, 132) : BV:32
134 : ite(49, 2, 133) : BV:32
135 : lambda(46, 134) : FUNCTION[BV:32 -> BV:32]
136 : map(45, 135) : MAP[BV:32 -> BV:32]
137 : lambda(17, 136) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
138 : map(16, 137) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
139 : sym_const(138) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda17493Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17494Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 0, [ 1; 1 ] -> 176, [ 2; 2 ] -> 39, [ 3; 3 ] -> 183, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193909575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193909576; 193909579 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 193909580; 2462740611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2462740612; 2462740615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2462740616; 2651225835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2651225836; 2651225839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2651225840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.llvm-%n
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda12685Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1024 { 0x400 +1.12207e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda12686Var : BV:32
18 : Lambda12687Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 1025 { 0x401 +1.12218e129 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : bvule(10, 18) : BOOL
38 : bvule(18, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 10, 10) : BV:32
41 : ite(36, 2, 40) : BV:32
42 : eq(41, 2) : BOOL
43 : and(32, 42) : BOOL
44 : ite(43, 7, 13) : BOOL
45 : lambda(18, 44) : FUNCTION[BV:32 -> BOOL]
46 : Lambda12688Var : BV:32
47 : eq(17, 2) : BOOL
48 : eq(46, 2) : BOOL
49 : and(47, 48) : BOOL
50 : 3 { 0x3 +1.35e129 } : BV:32
51 : 4 { 0x4 +1.47e129 } : BV:32
52 : bvmul(51, 46) : BV:32
53 : bvmul(51, 17) : BV:32
54 : bvadd(50, 53) : BV:32
55 : eq(54, 50) : BOOL
56 : 183 { 0xb7 -73 } : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : eq(54, 57) : BOOL
59 : 176 { 0xb0 -80 } : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : eq(54, 60) : BOOL
62 : 39 { 0x27 } : BV:8
63 : 0 { 0x0 } : BV:8
64 : ite(61, 62, 63) : BV:8
65 : ite(58, 59, 64) : BV:8
66 : ite(55, 56, 65) : BV:8
67 : bvadd(60, 53) : BV:32
68 : eq(67, 50) : BOOL
69 : eq(67, 57) : BOOL
70 : eq(67, 60) : BOOL
71 : ite(70, 62, 63) : BV:8
72 : ite(69, 59, 71) : BV:8
73 : ite(68, 56, 72) : BV:8
74 : bvadd(57, 53) : BV:32
75 : eq(74, 50) : BOOL
76 : eq(74, 57) : BOOL
77 : eq(74, 60) : BOOL
78 : ite(77, 62, 63) : BV:8
79 : ite(76, 59, 78) : BV:8
80 : ite(75, 56, 79) : BV:8
81 : eq(53, 50) : BOOL
82 : eq(53, 57) : BOOL
83 : eq(53, 60) : BOOL
84 : ite(83, 62, 63) : BV:8
85 : ite(82, 59, 84) : BV:8
86 : ite(81, 56, 85) : BV:8
87 : bvconcat(66, 73, 80, 86) : BV:32
88 : bvadd(50, 52, 87) : BV:32
89 : eq(88, 50) : BOOL
90 : eq(88, 57) : BOOL
91 : eq(88, 60) : BOOL
92 : ite(91, 62, 63) : BV:8
93 : ite(90, 59, 92) : BV:8
94 : ite(89, 56, 93) : BV:8
95 : bvadd(60, 52, 87) : BV:32
96 : eq(95, 50) : BOOL
97 : eq(95, 57) : BOOL
98 : eq(95, 60) : BOOL
99 : ite(98, 62, 63) : BV:8
100 : ite(97, 59, 99) : BV:8
101 : ite(96, 56, 100) : BV:8
102 : bvadd(57, 52, 87) : BV:32
103 : eq(102, 50) : BOOL
104 : eq(102, 57) : BOOL
105 : eq(102, 60) : BOOL
106 : ite(105, 62, 63) : BV:8
107 : ite(104, 59, 106) : BV:8
108 : ite(103, 56, 107) : BV:8
109 : bvadd(52, 87) : BV:32
110 : eq(109, 50) : BOOL
111 : eq(109, 57) : BOOL
112 : eq(109, 60) : BOOL
113 : ite(112, 62, 63) : BV:8
114 : ite(111, 59, 113) : BV:8
115 : ite(110, 56, 114) : BV:8
116 : bvconcat(94, 101, 108, 115) : BV:32
117 : ite(49, 2, 116) : BV:32
118 : lambda(46, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(45, 118) : MAP[BV:32 -> BV:32]
120 : lambda(17, 119) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
121 : map(16, 120) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
122 : sym_const(121) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 1023 { 0x3ff +1.12195e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1024 { 0x400 +1.12207e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : Lambda17483Var : BV:32
19 : 1025 { 0x401 +1.12218e129 } : BV:32
20 : bvule(19, 1) : BOOL
21 : and(20, 10) : BOOL
22 : bvule(1, 7) : BOOL
23 : and(8, 22) : BOOL
24 : ite(23, 7, 7) : BV:32
25 : ite(21, 19, 24) : BV:32
26 : ite(5, 1, 25) : BV:32
27 : eq(26, 1) : BOOL
28 : bvule(1, 18) : BOOL
29 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
30 : bvule(18, 29) : BOOL
31 : and(28, 30) : BOOL
32 : bvule(9, 18) : BOOL
33 : bvule(18, 9) : BOOL
34 : and(32, 33) : BOOL
35 : ite(34, 9, 9) : BV:32
36 : ite(31, 1, 35) : BV:32
37 : eq(36, 1) : BOOL
38 : and(27, 37) : BOOL
39 : ite(38, 6, 12) : BOOL
40 : lambda(18, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda17484Var : BV:32
42 : eq(1, 1) : BOOL
43 : eq(41, 1) : BOOL
44 : and(42, 43) : BOOL
45 : 3 { 0x3 +1.35e129 } : BV:32
46 : 4 { 0x4 +1.47e129 } : BV:32
47 : bvmul(46, 41) : BV:32
48 : bvmul(46, 1) : BV:32
49 : bvadd(45, 48) : BV:32
50 : eq(49, 45) : BOOL
51 : 183 { 0xb7 -73 } : BV:8
52 : eq(49, 15) : BOOL
53 : 176 { 0xb0 -80 } : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : eq(49, 54) : BOOL
56 : 39 { 0x27 } : BV:8
57 : 0 { 0x0 } : BV:8
58 : ite(55, 56, 57) : BV:8
59 : ite(52, 53, 58) : BV:8
60 : ite(50, 51, 59) : BV:8
61 : bvadd(54, 48) : BV:32
62 : eq(61, 45) : BOOL
63 : eq(61, 15) : BOOL
64 : eq(61, 54) : BOOL
65 : ite(64, 56, 57) : BV:8
66 : ite(63, 53, 65) : BV:8
67 : ite(62, 51, 66) : BV:8
68 : bvadd(15, 48) : BV:32
69 : eq(68, 45) : BOOL
70 : eq(68, 15) : BOOL
71 : eq(68, 54) : BOOL
72 : ite(71, 56, 57) : BV:8
73 : ite(70, 53, 72) : BV:8
74 : ite(69, 51, 73) : BV:8
75 : eq(48, 45) : BOOL
76 : eq(48, 15) : BOOL
77 : eq(48, 54) : BOOL
78 : ite(77, 56, 57) : BV:8
79 : ite(76, 53, 78) : BV:8
80 : ite(75, 51, 79) : BV:8
81 : bvconcat(60, 67, 74, 80) : BV:32
82 : bvadd(45, 47, 81) : BV:32
83 : eq(82, 45) : BOOL
84 : eq(82, 15) : BOOL
85 : eq(82, 54) : BOOL
86 : ite(85, 56, 57) : BV:8
87 : ite(84, 53, 86) : BV:8
88 : ite(83, 51, 87) : BV:8
89 : bvadd(54, 47, 81) : BV:32
90 : eq(89, 45) : BOOL
91 : eq(89, 15) : BOOL
92 : eq(89, 54) : BOOL
93 : ite(92, 56, 57) : BV:8
94 : ite(91, 53, 93) : BV:8
95 : ite(90, 51, 94) : BV:8
96 : bvadd(15, 47, 81) : BV:32
97 : eq(96, 45) : BOOL
98 : eq(96, 15) : BOOL
99 : eq(96, 54) : BOOL
100 : ite(99, 56, 57) : BV:8
101 : ite(98, 53, 100) : BV:8
102 : ite(97, 51, 101) : BV:8
103 : bvadd(47, 81) : BV:32
104 : eq(103, 45) : BOOL
105 : eq(103, 15) : BOOL
106 : eq(103, 54) : BOOL
107 : ite(106, 56, 57) : BV:8
108 : ite(105, 53, 107) : BV:8
109 : ite(104, 51, 108) : BV:8
110 : bvconcat(88, 95, 102, 109) : BV:32
111 : ite(44, 1, 110) : BV:32
112 : lambda(41, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(40, 112) : MAP[BV:32 -> BV:32]
114 : sum(16, 17, 113) : SUM[UNIT,MAP[BV:32 -> BV:32]]
115 : sym_const(114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda17499Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 2) : BOOL
4 : 1023 { 0x3ff +1.12195e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1025 { 0x401 +1.12218e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 2) : BOOL
14 : bvule(2, 12) : BOOL
15 : and(13, 14) : BOOL
16 : ite(15, 12, 12) : BV:32
17 : ite(11, 7, 16) : BV:32
18 : ite(6, 2, 17) : BV:32
19 : eq(18, 2) : BOOL
20 : bvule(2, 1) : BOOL
21 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
22 : bvule(1, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvule(9, 1) : BOOL
25 : bvule(1, 9) : BOOL
26 : and(24, 25) : BOOL
27 : ite(26, 9, 9) : BV:32
28 : ite(23, 2, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : and(19, 29) : BOOL
31 : 1 { 0x1 } : BOOL
32 : 0 { 0x0 } : BOOL
33 : ite(30, 31, 32) : BOOL
34 : lambda(1, 33) : FUNCTION[BV:32 -> BOOL]
35 : Lambda17500Var : BV:32
36 : eq(2, 2) : BOOL
37 : eq(35, 2) : BOOL
38 : and(36, 37) : BOOL
39 : 3 { 0x3 +1.35e129 } : BV:32
40 : 4 { 0x4 +1.47e129 } : BV:32
41 : bvmul(40, 35) : BV:32
42 : bvmul(40, 2) : BV:32
43 : bvadd(39, 42) : BV:32
44 : eq(43, 39) : BOOL
45 : 183 { 0xb7 -73 } : BV:8
46 : 1 { 0x1 +1.11e129 } : BV:32
47 : eq(43, 46) : BOOL
48 : 176 { 0xb0 -80 } : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : eq(43, 49) : BOOL
51 : 39 { 0x27 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : bvadd(49, 42) : BV:32
57 : eq(56, 39) : BOOL
58 : eq(56, 46) : BOOL
59 : eq(56, 49) : BOOL
60 : ite(59, 51, 52) : BV:8
61 : ite(58, 48, 60) : BV:8
62 : ite(57, 45, 61) : BV:8
63 : bvadd(46, 42) : BV:32
64 : eq(63, 39) : BOOL
65 : eq(63, 46) : BOOL
66 : eq(63, 49) : BOOL
67 : ite(66, 51, 52) : BV:8
68 : ite(65, 48, 67) : BV:8
69 : ite(64, 45, 68) : BV:8
70 : eq(42, 39) : BOOL
71 : eq(42, 46) : BOOL
72 : eq(42, 49) : BOOL
73 : ite(72, 51, 52) : BV:8
74 : ite(71, 48, 73) : BV:8
75 : ite(70, 45, 74) : BV:8
76 : bvconcat(55, 62, 69, 75) : BV:32
77 : bvadd(39, 41, 76) : BV:32
78 : eq(77, 39) : BOOL
79 : eq(77, 46) : BOOL
80 : eq(77, 49) : BOOL
81 : ite(80, 51, 52) : BV:8
82 : ite(79, 48, 81) : BV:8
83 : ite(78, 45, 82) : BV:8
84 : bvadd(49, 41, 76) : BV:32
85 : eq(84, 39) : BOOL
86 : eq(84, 46) : BOOL
87 : eq(84, 49) : BOOL
88 : ite(87, 51, 52) : BV:8
89 : ite(86, 48, 88) : BV:8
90 : ite(85, 45, 89) : BV:8
91 : bvadd(46, 41, 76) : BV:32
92 : eq(91, 39) : BOOL
93 : eq(91, 46) : BOOL
94 : eq(91, 49) : BOOL
95 : ite(94, 51, 52) : BV:8
96 : ite(93, 48, 95) : BV:8
97 : ite(92, 45, 96) : BV:8
98 : bvadd(41, 76) : BV:32
99 : eq(98, 39) : BOOL
100 : eq(98, 46) : BOOL
101 : eq(98, 49) : BOOL
102 : ite(101, 51, 52) : BV:8
103 : ite(100, 48, 102) : BV:8
104 : ite(99, 45, 103) : BV:8
105 : bvconcat(83, 90, 97, 104) : BV:32
106 : ite(38, 2, 105) : BV:32
107 : lambda(35, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(34, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2462740612 { 0x92ca7084 -1832226684 -1.58155870e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2462740615 { 0x92ca7087 -1832226681 -1.58155906e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2651225836 { 0x9e067eec -1643741460 -1.5074834e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2651225839 { 0x9e067eef -1643741457 -1.5074870e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 193909576 { 0xb8ed348 +1.11582279e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 193909579 { 0xb8ed34b +1.11582314e152 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda12602Var : BV:32
2 : Lambda12603Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 1023 { 0x3ff +1.12195e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 1024 { 0x400 +1.12207e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 1025 { 0x401 +1.12218e129 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(14, 2) : BOOL
34 : bvule(2, 14) : BOOL
35 : and(33, 34) : BOOL
36 : ite(35, 14, 14) : BV:32
37 : ite(32, 3, 36) : BV:32
38 : eq(37, 3) : BOOL
39 : and(28, 38) : BOOL
40 : ite(39, 11, 17) : BOOL
41 : and(19, 40) : BOOL
42 : 3 { 0x3 +1.35e129 } : BV:32
43 : 4 { 0x4 +1.47e129 } : BV:32
44 : bvmul(43, 2) : BV:32
45 : bvmul(43, 1) : BV:32
46 : bvadd(42, 45) : BV:32
47 : eq(46, 42) : BOOL
48 : 183 { 0xb7 -73 } : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : eq(46, 49) : BOOL
51 : 176 { 0xb0 -80 } : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : eq(46, 52) : BOOL
54 : 39 { 0x27 } : BV:8
55 : 0 { 0x0 } : BV:8
56 : ite(53, 54, 55) : BV:8
57 : ite(50, 51, 56) : BV:8
58 : ite(47, 48, 57) : BV:8
59 : bvadd(52, 45) : BV:32
60 : eq(59, 42) : BOOL
61 : eq(59, 49) : BOOL
62 : eq(59, 52) : BOOL
63 : ite(62, 54, 55) : BV:8
64 : ite(61, 51, 63) : BV:8
65 : ite(60, 48, 64) : BV:8
66 : bvadd(49, 45) : BV:32
67 : eq(66, 42) : BOOL
68 : eq(66, 49) : BOOL
69 : eq(66, 52) : BOOL
70 : ite(69, 54, 55) : BV:8
71 : ite(68, 51, 70) : BV:8
72 : ite(67, 48, 71) : BV:8
73 : eq(45, 42) : BOOL
74 : eq(45, 49) : BOOL
75 : eq(45, 52) : BOOL
76 : ite(75, 54, 55) : BV:8
77 : ite(74, 51, 76) : BV:8
78 : ite(73, 48, 77) : BV:8
79 : bvconcat(58, 65, 72, 78) : BV:32
80 : bvadd(42, 44, 79) : BV:32
81 : eq(80, 42) : BOOL
82 : eq(80, 49) : BOOL
83 : eq(80, 52) : BOOL
84 : ite(83, 54, 55) : BV:8
85 : ite(82, 51, 84) : BV:8
86 : ite(81, 48, 85) : BV:8
87 : bvadd(52, 44, 79) : BV:32
88 : eq(87, 42) : BOOL
89 : eq(87, 49) : BOOL
90 : eq(87, 52) : BOOL
91 : ite(90, 54, 55) : BV:8
92 : ite(89, 51, 91) : BV:8
93 : ite(88, 48, 92) : BV:8
94 : bvadd(49, 44, 79) : BV:32
95 : eq(94, 42) : BOOL
96 : eq(94, 49) : BOOL
97 : eq(94, 52) : BOOL
98 : ite(97, 54, 55) : BV:8
99 : ite(96, 51, 98) : BV:8
100 : ite(95, 48, 99) : BV:8
101 : bvadd(44, 79) : BV:32
102 : eq(101, 42) : BOOL
103 : eq(101, 49) : BOOL
104 : eq(101, 52) : BOOL
105 : ite(104, 54, 55) : BV:8
106 : ite(103, 51, 105) : BV:8
107 : ite(102, 48, 106) : BV:8
108 : bvconcat(86, 93, 100, 107) : BV:32
109 : ite(6, 3, 108) : BV:32
110 : ite(41, 108, 109) : BV:32
111 : ite(6, 3, 110) : BV:32
112 : lambda(1, 2, 111) : FUNCTION[BV:32,BV:32 -> BV:32]
113 : sym_const(112) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda12607Var : BV:32
2 : Lambda12608Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 1023 ] -> true, [ 1024; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda12616Var : BV:32
2 : Lambda12617Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 1023 { 0x3ff +1.12195e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1025 { 0x401 +1.12218e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 1024 { 0x400 +1.12207e129 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(10, 2) : BOOL
26 : bvule(2, 10) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 10, 10) : BV:32
29 : ite(24, 3, 28) : BV:32
30 : eq(29, 3) : BOOL
31 : and(20, 30) : BOOL
32 : 1 { 0x1 } : BOOL
33 : 0 { 0x0 } : BOOL
34 : ite(31, 32, 33) : BOOL
35 : lambda(1, 2, 34) : FUNCTION[BV:32,BV:32 -> BOOL]
36 : sym_const(35) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda12612Var : BV:32
2 : Lambda12613Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 7) : BOOL
13 : 183 { 0xb7 -73 } : BV:8
14 : 1 { 0x1 +1.11e129 } : BV:32
15 : eq(11, 14) : BOOL
16 : 176 { 0xb0 -80 } : BV:8
17 : 2 { 0x2 +1.23e129 } : BV:32
18 : eq(11, 17) : BOOL
19 : 39 { 0x27 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : ite(12, 13, 22) : BV:8
24 : bvadd(17, 10) : BV:32
25 : eq(24, 7) : BOOL
26 : eq(24, 14) : BOOL
27 : eq(24, 17) : BOOL
28 : ite(27, 19, 20) : BV:8
29 : ite(26, 16, 28) : BV:8
30 : ite(25, 13, 29) : BV:8
31 : bvadd(14, 10) : BV:32
32 : eq(31, 7) : BOOL
33 : eq(31, 14) : BOOL
34 : eq(31, 17) : BOOL
35 : ite(34, 19, 20) : BV:8
36 : ite(33, 16, 35) : BV:8
37 : ite(32, 13, 36) : BV:8
38 : eq(10, 7) : BOOL
39 : eq(10, 14) : BOOL
40 : eq(10, 17) : BOOL
41 : ite(40, 19, 20) : BV:8
42 : ite(39, 16, 41) : BV:8
43 : ite(38, 13, 42) : BV:8
44 : bvconcat(23, 30, 37, 43) : BV:32
45 : bvadd(7, 9, 44) : BV:32
46 : eq(45, 7) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : ite(48, 19, 20) : BV:8
50 : ite(47, 16, 49) : BV:8
51 : ite(46, 13, 50) : BV:8
52 : bvadd(17, 9, 44) : BV:32
53 : eq(52, 7) : BOOL
54 : eq(52, 14) : BOOL
55 : eq(52, 17) : BOOL
56 : ite(55, 19, 20) : BV:8
57 : ite(54, 16, 56) : BV:8
58 : ite(53, 13, 57) : BV:8
59 : bvadd(14, 9, 44) : BV:32
60 : eq(59, 7) : BOOL
61 : eq(59, 14) : BOOL
62 : eq(59, 17) : BOOL
63 : ite(62, 19, 20) : BV:8
64 : ite(61, 16, 63) : BV:8
65 : ite(60, 13, 64) : BV:8
66 : bvadd(9, 44) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : ite(69, 19, 20) : BV:8
71 : ite(68, 16, 70) : BV:8
72 : ite(67, 13, 71) : BV:8
73 : bvconcat(51, 58, 65, 72) : BV:32
74 : ite(6, 3, 73) : BV:32
75 : lambda(1, 2, 74) : FUNCTION[BV:32,BV:32 -> BV:32]
76 : sym_const(75) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2510307781
=counter_example_end
=global nodece 49 num_edges_traversed 2
=global nodece 49 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 50
=global nodece 50 nodece z3.ce4101.num_edges_traversed1
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3.ce4101 727d54879f3e87228733527cb182aa1
=input.spec-%var-x-1
1 : Lambda41985Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41986Var : BV:32
18 : Lambda41987Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 15 { 0xf +1.178e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16 { 0x10 +1.190e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 17 { 0x11 +1.202e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41988Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
82 : eq(80, 81) : BOOL
83 : 236 { 0xec -20 } : BV:8
84 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
85 : eq(80, 84) : BOOL
86 : 84 { 0x54 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
90 : eq(80, 89) : BOOL
91 : 212 { 0xd4 -44 } : BV:8
92 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
93 : eq(80, 92) : BOOL
94 : 191 { 0xbf -65 } : BV:8
95 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
96 : eq(80, 95) : BOOL
97 : 92 { 0x5c } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 81) : BOOL
107 : eq(105, 84) : BOOL
108 : eq(105, 78) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 86, 115) : BV:8
117 : ite(106, 83, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 78) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 86, 128) : BV:8
130 : ite(119, 83, 129) : BV:8
131 : bvadd(89, 79) : BV:32
132 : eq(131, 81) : BOOL
133 : eq(131, 84) : BOOL
134 : eq(131, 78) : BOOL
135 : eq(131, 89) : BOOL
136 : eq(131, 92) : BOOL
137 : eq(131, 95) : BOOL
138 : ite(137, 97, 98) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 91, 139) : BV:8
141 : ite(134, 88, 140) : BV:8
142 : ite(133, 86, 141) : BV:8
143 : ite(132, 83, 142) : BV:8
144 : bvconcat(104, 117, 130, 143) : BV:32
145 : bvadd(75, 77, 144) : BV:32
146 : eq(145, 81) : BOOL
147 : eq(145, 84) : BOOL
148 : eq(145, 78) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 92) : BOOL
151 : eq(145, 95) : BOOL
152 : ite(151, 97, 98) : BV:8
153 : ite(150, 94, 152) : BV:8
154 : ite(149, 91, 153) : BV:8
155 : ite(148, 88, 154) : BV:8
156 : ite(147, 86, 155) : BV:8
157 : ite(146, 83, 156) : BV:8
158 : 2 { 0x2 +1.23e129 } : BV:32
159 : bvadd(158, 77, 144) : BV:32
160 : eq(159, 81) : BOOL
161 : eq(159, 84) : BOOL
162 : eq(159, 78) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : eq(159, 95) : BOOL
166 : ite(165, 97, 98) : BV:8
167 : ite(164, 94, 166) : BV:8
168 : ite(163, 91, 167) : BV:8
169 : ite(162, 88, 168) : BV:8
170 : ite(161, 86, 169) : BV:8
171 : ite(160, 83, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 77, 144) : BV:32
174 : eq(173, 81) : BOOL
175 : eq(173, 84) : BOOL
176 : eq(173, 78) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : eq(173, 95) : BOOL
180 : ite(179, 97, 98) : BV:8
181 : ite(178, 94, 180) : BV:8
182 : ite(177, 91, 181) : BV:8
183 : ite(176, 88, 182) : BV:8
184 : ite(175, 86, 183) : BV:8
185 : ite(174, 83, 184) : BV:8
186 : bvadd(77, 144) : BV:32
187 : eq(186, 81) : BOOL
188 : eq(186, 84) : BOOL
189 : eq(186, 78) : BOOL
190 : eq(186, 89) : BOOL
191 : eq(186, 92) : BOOL
192 : eq(186, 95) : BOOL
193 : ite(192, 97, 98) : BV:8
194 : ite(191, 94, 193) : BV:8
195 : ite(190, 91, 194) : BV:8
196 : ite(189, 88, 195) : BV:8
197 : ite(188, 86, 196) : BV:8
198 : ite(187, 83, 197) : BV:8
199 : bvconcat(157, 171, 185, 198) : BV:32
200 : ite(55, 2, 199) : BV:32
201 : ite(74, 199, 200) : BV:32
202 : ite(55, 2, 201) : BV:32
203 : lambda(52, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(51, 203) : MAP[BV:32 -> BV:32]
205 : lambda(17, 204) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
206 : map(16, 205) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
207 : sym_const(206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda42012Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42013Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
25 : eq(23, 24) : BOOL
26 : 236 { 0xec -20 } : BV:8
27 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
28 : eq(23, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
34 : eq(23, 33) : BOOL
35 : 212 { 0xd4 -44 } : BV:8
36 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
40 : eq(23, 39) : BOOL
41 : 92 { 0x5c } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1405091841 ] -> 0, [ 1405091842; 1405091842 ] -> 84, [ 1405091843; 1405091843 ] -> 236, [ 1405091844; 3417309187 ] -> 0, [ 3417309188; 3417309188 ] -> 212, [ 3417309189; 3417309189 ] -> 92, [ 3417309190; 3417309190 ] -> 191, [ 3417309191; 3417309191 ] -> 255, [ 3417309192; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 780824503 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 780824504; 780824507 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 780824508; 927891459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 927891460; 927891463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 927891464; 1847329835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1847329836; 1847329839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1847329840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1847329836 { 0x6e1c042c +1.21887731e93 } : BV:32
=input.dst.llvm-%m
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 780824504 { 0x2e8a6fb8 +1.8153438e222 } : BV:32
=input.dst.llvm-%n
1 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 927891460 { 0x374e8004 +1.61328172e239 } : BV:32
=input.dst.llvm-%x
1 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42005Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42006Var : BV:32
18 : Lambda42007Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 15 { 0xf +1.178e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16 { 0x10 +1.190e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 17 { 0x11 +1.202e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda42008Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
63 : eq(61, 62) : BOOL
64 : 236 { 0xec -20 } : BV:8
65 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
66 : eq(61, 65) : BOOL
67 : 84 { 0x54 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
71 : eq(61, 70) : BOOL
72 : 212 { 0xd4 -44 } : BV:8
73 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
74 : eq(61, 73) : BOOL
75 : 191 { 0xbf -65 } : BV:8
76 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
77 : eq(61, 76) : BOOL
78 : 92 { 0x5c } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 62) : BOOL
88 : eq(86, 65) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 67, 96) : BV:8
98 : ite(87, 64, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 59) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 67, 109) : BV:8
111 : ite(100, 64, 110) : BV:8
112 : bvadd(70, 60) : BV:32
113 : eq(112, 62) : BOOL
114 : eq(112, 65) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 70) : BOOL
117 : eq(112, 73) : BOOL
118 : eq(112, 76) : BOOL
119 : ite(118, 78, 79) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 72, 120) : BV:8
122 : ite(115, 69, 121) : BV:8
123 : ite(114, 67, 122) : BV:8
124 : ite(113, 64, 123) : BV:8
125 : bvconcat(85, 98, 111, 124) : BV:32
126 : bvadd(56, 58, 125) : BV:32
127 : eq(126, 62) : BOOL
128 : eq(126, 65) : BOOL
129 : eq(126, 59) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 73) : BOOL
132 : eq(126, 76) : BOOL
133 : ite(132, 78, 79) : BV:8
134 : ite(131, 75, 133) : BV:8
135 : ite(130, 72, 134) : BV:8
136 : ite(129, 69, 135) : BV:8
137 : ite(128, 67, 136) : BV:8
138 : ite(127, 64, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 58, 125) : BV:32
141 : eq(140, 62) : BOOL
142 : eq(140, 65) : BOOL
143 : eq(140, 59) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : eq(140, 76) : BOOL
147 : ite(146, 78, 79) : BV:8
148 : ite(145, 75, 147) : BV:8
149 : ite(144, 72, 148) : BV:8
150 : ite(143, 69, 149) : BV:8
151 : ite(142, 67, 150) : BV:8
152 : ite(141, 64, 151) : BV:8
153 : 1 { 0x1 +1.11e129 } : BV:32
154 : bvadd(153, 58, 125) : BV:32
155 : eq(154, 62) : BOOL
156 : eq(154, 65) : BOOL
157 : eq(154, 59) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : eq(154, 76) : BOOL
161 : ite(160, 78, 79) : BV:8
162 : ite(159, 75, 161) : BV:8
163 : ite(158, 72, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 67, 164) : BV:8
166 : ite(155, 64, 165) : BV:8
167 : bvadd(58, 125) : BV:32
168 : eq(167, 62) : BOOL
169 : eq(167, 65) : BOOL
170 : eq(167, 59) : BOOL
171 : eq(167, 70) : BOOL
172 : eq(167, 73) : BOOL
173 : eq(167, 76) : BOOL
174 : ite(173, 78, 79) : BV:8
175 : ite(172, 75, 174) : BV:8
176 : ite(171, 72, 175) : BV:8
177 : ite(170, 69, 176) : BV:8
178 : ite(169, 67, 177) : BV:8
179 : ite(168, 64, 178) : BV:8
180 : bvconcat(138, 152, 166, 179) : BV:32
181 : ite(55, 2, 180) : BV:32
182 : lambda(52, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(51, 182) : MAP[BV:32 -> BV:32]
184 : lambda(17, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(16, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
2 : unit : UNIT
3 : Lambda41994Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda41995Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
27 : eq(25, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
30 : eq(25, 29) : BOOL
31 : 84 { 0x54 } : BV:8
32 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
33 : eq(25, 32) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
36 : eq(25, 35) : BOOL
37 : 212 { 0xd4 -44 } : BV:8
38 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
39 : eq(25, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
42 : eq(25, 41) : BOOL
43 : 92 { 0x5c } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 23, 24) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : eq(52, 32) : BOOL
56 : eq(52, 35) : BOOL
57 : eq(52, 38) : BOOL
58 : eq(52, 41) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 40, 59) : BV:8
61 : ite(56, 37, 60) : BV:8
62 : ite(55, 34, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 23, 24) : BV:32
67 : eq(66, 26) : BOOL
68 : eq(66, 29) : BOOL
69 : eq(66, 32) : BOOL
70 : eq(66, 35) : BOOL
71 : eq(66, 38) : BOOL
72 : eq(66, 41) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 40, 73) : BV:8
75 : ite(70, 37, 74) : BV:8
76 : ite(69, 34, 75) : BV:8
77 : ite(68, 31, 76) : BV:8
78 : ite(67, 28, 77) : BV:8
79 : bvadd(23, 24) : BV:32
80 : eq(79, 26) : BOOL
81 : eq(79, 29) : BOOL
82 : eq(79, 32) : BOOL
83 : eq(79, 35) : BOOL
84 : eq(79, 38) : BOOL
85 : eq(79, 41) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 37, 87) : BV:8
89 : ite(82, 34, 88) : BV:8
90 : ite(81, 31, 89) : BV:8
91 : ite(80, 28, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(20, 4, 92) : BV:32
94 : lambda(19, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(18, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 570687488 { 0x22040000 +1.3125000e197 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1324678469 { 0x4ef4fd45 +1.91397917e30 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda42017Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42018Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
25 : eq(23, 24) : BOOL
26 : 236 { 0xec -20 } : BV:8
27 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
28 : eq(23, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
34 : eq(23, 33) : BOOL
35 : 212 { 0xd4 -44 } : BV:8
36 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
40 : eq(23, 39) : BOOL
41 : 92 { 0x5c } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 445857882 { 0x1a93405a +1.15040135e182 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 780824504 { 0x2e8a6fb8 +1.8153438e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 780824507 { 0x2e8a6fbb +1.8153474e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 927891460 { 0x374e8004 +1.61328172e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 927891463 { 0x374e8007 +1.61328208e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1847329836 { 0x6e1c042c +1.21887731e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1847329839 { 0x6e1c042f +1.21887767e93 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda41877Var : BV:32
2 : Lambda41878Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 15 { 0xf +1.178e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16 { 0x10 +1.190e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 17 { 0x11 +1.202e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
55 : eq(53, 54) : BOOL
56 : 236 { 0xec -20 } : BV:8
57 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
58 : eq(53, 57) : BOOL
59 : 84 { 0x54 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
63 : eq(53, 62) : BOOL
64 : 212 { 0xd4 -44 } : BV:8
65 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
66 : eq(53, 65) : BOOL
67 : 191 { 0xbf -65 } : BV:8
68 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
69 : eq(53, 68) : BOOL
70 : 92 { 0x5c } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 54) : BOOL
80 : eq(78, 57) : BOOL
81 : eq(78, 51) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 59, 88) : BV:8
90 : ite(79, 56, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 51) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 59, 101) : BV:8
103 : ite(92, 56, 102) : BV:8
104 : bvadd(62, 52) : BV:32
105 : eq(104, 54) : BOOL
106 : eq(104, 57) : BOOL
107 : eq(104, 51) : BOOL
108 : eq(104, 62) : BOOL
109 : eq(104, 65) : BOOL
110 : eq(104, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : ite(107, 61, 113) : BV:8
115 : ite(106, 59, 114) : BV:8
116 : ite(105, 56, 115) : BV:8
117 : bvconcat(77, 90, 103, 116) : BV:32
118 : bvadd(48, 50, 117) : BV:32
119 : eq(118, 54) : BOOL
120 : eq(118, 57) : BOOL
121 : eq(118, 51) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 65) : BOOL
124 : eq(118, 68) : BOOL
125 : ite(124, 70, 71) : BV:8
126 : ite(123, 67, 125) : BV:8
127 : ite(122, 64, 126) : BV:8
128 : ite(121, 61, 127) : BV:8
129 : ite(120, 59, 128) : BV:8
130 : ite(119, 56, 129) : BV:8
131 : 2 { 0x2 +1.23e129 } : BV:32
132 : bvadd(131, 50, 117) : BV:32
133 : eq(132, 54) : BOOL
134 : eq(132, 57) : BOOL
135 : eq(132, 51) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : eq(132, 68) : BOOL
139 : ite(138, 70, 71) : BV:8
140 : ite(137, 67, 139) : BV:8
141 : ite(136, 64, 140) : BV:8
142 : ite(135, 61, 141) : BV:8
143 : ite(134, 59, 142) : BV:8
144 : ite(133, 56, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 50, 117) : BV:32
147 : eq(146, 54) : BOOL
148 : eq(146, 57) : BOOL
149 : eq(146, 51) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : eq(146, 68) : BOOL
153 : ite(152, 70, 71) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 64, 154) : BV:8
156 : ite(149, 61, 155) : BV:8
157 : ite(148, 59, 156) : BV:8
158 : ite(147, 56, 157) : BV:8
159 : bvadd(50, 117) : BV:32
160 : eq(159, 54) : BOOL
161 : eq(159, 57) : BOOL
162 : eq(159, 51) : BOOL
163 : eq(159, 62) : BOOL
164 : eq(159, 65) : BOOL
165 : eq(159, 68) : BOOL
166 : ite(165, 70, 71) : BV:8
167 : ite(164, 67, 166) : BV:8
168 : ite(163, 64, 167) : BV:8
169 : ite(162, 61, 168) : BV:8
170 : ite(161, 59, 169) : BV:8
171 : ite(160, 56, 170) : BV:8
172 : bvconcat(130, 144, 158, 171) : BV:32
173 : ite(6, 3, 172) : BV:32
174 : ite(47, 172, 173) : BV:32
175 : ite(6, 3, 174) : BV:32
176 : lambda(1, 2, 175) : FUNCTION[BV:32,BV:32 -> BV:32]
177 : sym_const(176) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda41882Var : BV:32
2 : Lambda41883Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 15 { 0xf +1.178e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 17 { 0x11 +1.202e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2215116795 ] -> true, [ 2215116796; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2215116795 ] -> true, [ 2215116796; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda41891Var : BV:32
2 : Lambda41892Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 15 { 0xf +1.178e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 17 { 0x11 +1.202e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda41887Var : BV:32
2 : Lambda41888Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
14 : eq(12, 13) : BOOL
15 : 236 { 0xec -20 } : BV:8
16 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
17 : eq(12, 16) : BOOL
18 : 84 { 0x54 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
22 : eq(12, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
25 : eq(12, 24) : BOOL
26 : 191 { 0xbf -65 } : BV:8
27 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
28 : eq(12, 27) : BOOL
29 : 92 { 0x5c } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 13) : BOOL
39 : eq(37, 16) : BOOL
40 : eq(37, 10) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 18, 47) : BV:8
49 : ite(38, 15, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 10) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 18, 60) : BV:8
62 : ite(51, 15, 61) : BV:8
63 : bvadd(21, 11) : BV:32
64 : eq(63, 13) : BOOL
65 : eq(63, 16) : BOOL
66 : eq(63, 10) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : ite(69, 29, 30) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 23, 71) : BV:8
73 : ite(66, 20, 72) : BV:8
74 : ite(65, 18, 73) : BV:8
75 : ite(64, 15, 74) : BV:8
76 : bvconcat(36, 49, 62, 75) : BV:32
77 : bvadd(7, 9, 76) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 16) : BOOL
80 : eq(77, 10) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : ite(83, 29, 30) : BV:8
85 : ite(82, 26, 84) : BV:8
86 : ite(81, 23, 85) : BV:8
87 : ite(80, 20, 86) : BV:8
88 : ite(79, 18, 87) : BV:8
89 : ite(78, 15, 88) : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : bvadd(90, 9, 76) : BV:32
92 : eq(91, 13) : BOOL
93 : eq(91, 16) : BOOL
94 : eq(91, 10) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : eq(91, 27) : BOOL
98 : ite(97, 29, 30) : BV:8
99 : ite(96, 26, 98) : BV:8
100 : ite(95, 23, 99) : BV:8
101 : ite(94, 20, 100) : BV:8
102 : ite(93, 18, 101) : BV:8
103 : ite(92, 15, 102) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 9, 76) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 10) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 27) : BOOL
112 : ite(111, 29, 30) : BV:8
113 : ite(110, 26, 112) : BV:8
114 : ite(109, 23, 113) : BV:8
115 : ite(108, 20, 114) : BV:8
116 : ite(107, 18, 115) : BV:8
117 : ite(106, 15, 116) : BV:8
118 : bvadd(9, 76) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 10) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : ite(124, 29, 30) : BV:8
126 : ite(123, 26, 125) : BV:8
127 : ite(122, 23, 126) : BV:8
128 : ite(121, 20, 127) : BV:8
129 : ite(120, 18, 128) : BV:8
130 : ite(119, 15, 129) : BV:8
131 : bvconcat(89, 103, 117, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda41898Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda41902Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda41903Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
791670935
=counter_example_end
=global nodece 50 num_edges_traversed 1
=global nodece 50 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 51
=global nodece 51 nodece z3.ce4518.num_edges_traversed2
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3.ce4518 5f87dc99f663e6f146e14f2e7d560
=input.spec-%var-x-1
1 : Lambda41985Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda41986Var : BV:32
18 : Lambda41987Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 15 { 0xf +1.178e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16 { 0x10 +1.190e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 17 { 0x11 +1.202e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda41988Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
82 : eq(80, 81) : BOOL
83 : 236 { 0xec -20 } : BV:8
84 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
85 : eq(80, 84) : BOOL
86 : 84 { 0x54 } : BV:8
87 : eq(80, 78) : BOOL
88 : 255 { 0xff -1 } : BV:8
89 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
90 : eq(80, 89) : BOOL
91 : 212 { 0xd4 -44 } : BV:8
92 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
93 : eq(80, 92) : BOOL
94 : 191 { 0xbf -65 } : BV:8
95 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
96 : eq(80, 95) : BOOL
97 : 92 { 0x5c } : BV:8
98 : 0 { 0x0 } : BV:8
99 : ite(96, 97, 98) : BV:8
100 : ite(93, 94, 99) : BV:8
101 : ite(90, 91, 100) : BV:8
102 : ite(87, 88, 101) : BV:8
103 : ite(85, 86, 102) : BV:8
104 : ite(82, 83, 103) : BV:8
105 : bvadd(92, 79) : BV:32
106 : eq(105, 81) : BOOL
107 : eq(105, 84) : BOOL
108 : eq(105, 78) : BOOL
109 : eq(105, 89) : BOOL
110 : eq(105, 92) : BOOL
111 : eq(105, 95) : BOOL
112 : ite(111, 97, 98) : BV:8
113 : ite(110, 94, 112) : BV:8
114 : ite(109, 91, 113) : BV:8
115 : ite(108, 88, 114) : BV:8
116 : ite(107, 86, 115) : BV:8
117 : ite(106, 83, 116) : BV:8
118 : bvadd(95, 79) : BV:32
119 : eq(118, 81) : BOOL
120 : eq(118, 84) : BOOL
121 : eq(118, 78) : BOOL
122 : eq(118, 89) : BOOL
123 : eq(118, 92) : BOOL
124 : eq(118, 95) : BOOL
125 : ite(124, 97, 98) : BV:8
126 : ite(123, 94, 125) : BV:8
127 : ite(122, 91, 126) : BV:8
128 : ite(121, 88, 127) : BV:8
129 : ite(120, 86, 128) : BV:8
130 : ite(119, 83, 129) : BV:8
131 : bvadd(89, 79) : BV:32
132 : eq(131, 81) : BOOL
133 : eq(131, 84) : BOOL
134 : eq(131, 78) : BOOL
135 : eq(131, 89) : BOOL
136 : eq(131, 92) : BOOL
137 : eq(131, 95) : BOOL
138 : ite(137, 97, 98) : BV:8
139 : ite(136, 94, 138) : BV:8
140 : ite(135, 91, 139) : BV:8
141 : ite(134, 88, 140) : BV:8
142 : ite(133, 86, 141) : BV:8
143 : ite(132, 83, 142) : BV:8
144 : bvconcat(104, 117, 130, 143) : BV:32
145 : bvadd(75, 77, 144) : BV:32
146 : eq(145, 81) : BOOL
147 : eq(145, 84) : BOOL
148 : eq(145, 78) : BOOL
149 : eq(145, 89) : BOOL
150 : eq(145, 92) : BOOL
151 : eq(145, 95) : BOOL
152 : ite(151, 97, 98) : BV:8
153 : ite(150, 94, 152) : BV:8
154 : ite(149, 91, 153) : BV:8
155 : ite(148, 88, 154) : BV:8
156 : ite(147, 86, 155) : BV:8
157 : ite(146, 83, 156) : BV:8
158 : 2 { 0x2 +1.23e129 } : BV:32
159 : bvadd(158, 77, 144) : BV:32
160 : eq(159, 81) : BOOL
161 : eq(159, 84) : BOOL
162 : eq(159, 78) : BOOL
163 : eq(159, 89) : BOOL
164 : eq(159, 92) : BOOL
165 : eq(159, 95) : BOOL
166 : ite(165, 97, 98) : BV:8
167 : ite(164, 94, 166) : BV:8
168 : ite(163, 91, 167) : BV:8
169 : ite(162, 88, 168) : BV:8
170 : ite(161, 86, 169) : BV:8
171 : ite(160, 83, 170) : BV:8
172 : 1 { 0x1 +1.11e129 } : BV:32
173 : bvadd(172, 77, 144) : BV:32
174 : eq(173, 81) : BOOL
175 : eq(173, 84) : BOOL
176 : eq(173, 78) : BOOL
177 : eq(173, 89) : BOOL
178 : eq(173, 92) : BOOL
179 : eq(173, 95) : BOOL
180 : ite(179, 97, 98) : BV:8
181 : ite(178, 94, 180) : BV:8
182 : ite(177, 91, 181) : BV:8
183 : ite(176, 88, 182) : BV:8
184 : ite(175, 86, 183) : BV:8
185 : ite(174, 83, 184) : BV:8
186 : bvadd(77, 144) : BV:32
187 : eq(186, 81) : BOOL
188 : eq(186, 84) : BOOL
189 : eq(186, 78) : BOOL
190 : eq(186, 89) : BOOL
191 : eq(186, 92) : BOOL
192 : eq(186, 95) : BOOL
193 : ite(192, 97, 98) : BV:8
194 : ite(191, 94, 193) : BV:8
195 : ite(190, 91, 194) : BV:8
196 : ite(189, 88, 195) : BV:8
197 : ite(188, 86, 196) : BV:8
198 : ite(187, 83, 197) : BV:8
199 : bvconcat(157, 171, 185, 198) : BV:32
200 : ite(55, 2, 199) : BV:32
201 : ite(74, 199, 200) : BV:32
202 : ite(55, 2, 201) : BV:32
203 : lambda(52, 202) : FUNCTION[BV:32 -> BV:32]
204 : map(51, 203) : MAP[BV:32 -> BV:32]
205 : lambda(17, 204) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
206 : map(16, 205) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
207 : sym_const(206) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda42012Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42013Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
25 : eq(23, 24) : BOOL
26 : 236 { 0xec -20 } : BV:8
27 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
28 : eq(23, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
34 : eq(23, 33) : BOOL
35 : 212 { 0xd4 -44 } : BV:8
36 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
40 : eq(23, 39) : BOOL
41 : 92 { 0x5c } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1405091841 ] -> 0, [ 1405091842; 1405091842 ] -> 84, [ 1405091843; 1405091843 ] -> 236, [ 1405091844; 3417309187 ] -> 0, [ 3417309188; 3417309188 ] -> 212, [ 3417309189; 3417309189 ] -> 92, [ 3417309190; 3417309190 ] -> 191, [ 3417309191; 3417309191 ] -> 255, [ 3417309192; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 780824503 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 780824504; 780824507 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 780824508; 927891459 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 927891460; 927891463 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 927891464; 1847329835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1847329836; 1847329839 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1847329840; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1847329836 { 0x6e1c042c +1.21887731e93 } : BV:32
=input.dst.llvm-%m
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 780824504 { 0x2e8a6fb8 +1.8153438e222 } : BV:32
=input.dst.llvm-%n
1 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 927891460 { 0x374e8004 +1.61328172e239 } : BV:32
=input.dst.llvm-%x
1 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda42005Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42006Var : BV:32
18 : Lambda42007Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 15 { 0xf +1.178e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 16 { 0x10 +1.190e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 17 { 0x11 +1.202e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda42008Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
63 : eq(61, 62) : BOOL
64 : 236 { 0xec -20 } : BV:8
65 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
66 : eq(61, 65) : BOOL
67 : 84 { 0x54 } : BV:8
68 : eq(61, 59) : BOOL
69 : 255 { 0xff -1 } : BV:8
70 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
71 : eq(61, 70) : BOOL
72 : 212 { 0xd4 -44 } : BV:8
73 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
74 : eq(61, 73) : BOOL
75 : 191 { 0xbf -65 } : BV:8
76 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
77 : eq(61, 76) : BOOL
78 : 92 { 0x5c } : BV:8
79 : 0 { 0x0 } : BV:8
80 : ite(77, 78, 79) : BV:8
81 : ite(74, 75, 80) : BV:8
82 : ite(71, 72, 81) : BV:8
83 : ite(68, 69, 82) : BV:8
84 : ite(66, 67, 83) : BV:8
85 : ite(63, 64, 84) : BV:8
86 : bvadd(73, 60) : BV:32
87 : eq(86, 62) : BOOL
88 : eq(86, 65) : BOOL
89 : eq(86, 59) : BOOL
90 : eq(86, 70) : BOOL
91 : eq(86, 73) : BOOL
92 : eq(86, 76) : BOOL
93 : ite(92, 78, 79) : BV:8
94 : ite(91, 75, 93) : BV:8
95 : ite(90, 72, 94) : BV:8
96 : ite(89, 69, 95) : BV:8
97 : ite(88, 67, 96) : BV:8
98 : ite(87, 64, 97) : BV:8
99 : bvadd(76, 60) : BV:32
100 : eq(99, 62) : BOOL
101 : eq(99, 65) : BOOL
102 : eq(99, 59) : BOOL
103 : eq(99, 70) : BOOL
104 : eq(99, 73) : BOOL
105 : eq(99, 76) : BOOL
106 : ite(105, 78, 79) : BV:8
107 : ite(104, 75, 106) : BV:8
108 : ite(103, 72, 107) : BV:8
109 : ite(102, 69, 108) : BV:8
110 : ite(101, 67, 109) : BV:8
111 : ite(100, 64, 110) : BV:8
112 : bvadd(70, 60) : BV:32
113 : eq(112, 62) : BOOL
114 : eq(112, 65) : BOOL
115 : eq(112, 59) : BOOL
116 : eq(112, 70) : BOOL
117 : eq(112, 73) : BOOL
118 : eq(112, 76) : BOOL
119 : ite(118, 78, 79) : BV:8
120 : ite(117, 75, 119) : BV:8
121 : ite(116, 72, 120) : BV:8
122 : ite(115, 69, 121) : BV:8
123 : ite(114, 67, 122) : BV:8
124 : ite(113, 64, 123) : BV:8
125 : bvconcat(85, 98, 111, 124) : BV:32
126 : bvadd(56, 58, 125) : BV:32
127 : eq(126, 62) : BOOL
128 : eq(126, 65) : BOOL
129 : eq(126, 59) : BOOL
130 : eq(126, 70) : BOOL
131 : eq(126, 73) : BOOL
132 : eq(126, 76) : BOOL
133 : ite(132, 78, 79) : BV:8
134 : ite(131, 75, 133) : BV:8
135 : ite(130, 72, 134) : BV:8
136 : ite(129, 69, 135) : BV:8
137 : ite(128, 67, 136) : BV:8
138 : ite(127, 64, 137) : BV:8
139 : 2 { 0x2 +1.23e129 } : BV:32
140 : bvadd(139, 58, 125) : BV:32
141 : eq(140, 62) : BOOL
142 : eq(140, 65) : BOOL
143 : eq(140, 59) : BOOL
144 : eq(140, 70) : BOOL
145 : eq(140, 73) : BOOL
146 : eq(140, 76) : BOOL
147 : ite(146, 78, 79) : BV:8
148 : ite(145, 75, 147) : BV:8
149 : ite(144, 72, 148) : BV:8
150 : ite(143, 69, 149) : BV:8
151 : ite(142, 67, 150) : BV:8
152 : ite(141, 64, 151) : BV:8
153 : 1 { 0x1 +1.11e129 } : BV:32
154 : bvadd(153, 58, 125) : BV:32
155 : eq(154, 62) : BOOL
156 : eq(154, 65) : BOOL
157 : eq(154, 59) : BOOL
158 : eq(154, 70) : BOOL
159 : eq(154, 73) : BOOL
160 : eq(154, 76) : BOOL
161 : ite(160, 78, 79) : BV:8
162 : ite(159, 75, 161) : BV:8
163 : ite(158, 72, 162) : BV:8
164 : ite(157, 69, 163) : BV:8
165 : ite(156, 67, 164) : BV:8
166 : ite(155, 64, 165) : BV:8
167 : bvadd(58, 125) : BV:32
168 : eq(167, 62) : BOOL
169 : eq(167, 65) : BOOL
170 : eq(167, 59) : BOOL
171 : eq(167, 70) : BOOL
172 : eq(167, 73) : BOOL
173 : eq(167, 76) : BOOL
174 : ite(173, 78, 79) : BV:8
175 : ite(172, 75, 174) : BV:8
176 : ite(171, 72, 175) : BV:8
177 : ite(170, 69, 176) : BV:8
178 : ite(169, 67, 177) : BV:8
179 : ite(168, 64, 178) : BV:8
180 : bvconcat(138, 152, 166, 179) : BV:32
181 : ite(55, 2, 180) : BV:32
182 : lambda(52, 181) : FUNCTION[BV:32 -> BV:32]
183 : map(51, 182) : MAP[BV:32 -> BV:32]
184 : lambda(17, 183) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
185 : map(16, 184) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
186 : sym_const(185) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
2 : unit : UNIT
3 : Lambda41994Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda41995Var : BV:32
20 : eq(19, 4) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 19) : BV:32
24 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
27 : eq(25, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
30 : eq(25, 29) : BOOL
31 : 84 { 0x54 } : BV:8
32 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
33 : eq(25, 32) : BOOL
34 : 255 { 0xff -1 } : BV:8
35 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
36 : eq(25, 35) : BOOL
37 : 212 { 0xd4 -44 } : BV:8
38 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
39 : eq(25, 38) : BOOL
40 : 191 { 0xbf -65 } : BV:8
41 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
42 : eq(25, 41) : BOOL
43 : 92 { 0x5c } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 23, 24) : BV:32
53 : eq(52, 26) : BOOL
54 : eq(52, 29) : BOOL
55 : eq(52, 32) : BOOL
56 : eq(52, 35) : BOOL
57 : eq(52, 38) : BOOL
58 : eq(52, 41) : BOOL
59 : ite(58, 43, 44) : BV:8
60 : ite(57, 40, 59) : BV:8
61 : ite(56, 37, 60) : BV:8
62 : ite(55, 34, 61) : BV:8
63 : ite(54, 31, 62) : BV:8
64 : ite(53, 28, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 23, 24) : BV:32
67 : eq(66, 26) : BOOL
68 : eq(66, 29) : BOOL
69 : eq(66, 32) : BOOL
70 : eq(66, 35) : BOOL
71 : eq(66, 38) : BOOL
72 : eq(66, 41) : BOOL
73 : ite(72, 43, 44) : BV:8
74 : ite(71, 40, 73) : BV:8
75 : ite(70, 37, 74) : BV:8
76 : ite(69, 34, 75) : BV:8
77 : ite(68, 31, 76) : BV:8
78 : ite(67, 28, 77) : BV:8
79 : bvadd(23, 24) : BV:32
80 : eq(79, 26) : BOOL
81 : eq(79, 29) : BOOL
82 : eq(79, 32) : BOOL
83 : eq(79, 35) : BOOL
84 : eq(79, 38) : BOOL
85 : eq(79, 41) : BOOL
86 : ite(85, 43, 44) : BV:8
87 : ite(84, 40, 86) : BV:8
88 : ite(83, 37, 87) : BV:8
89 : ite(82, 34, 88) : BV:8
90 : ite(81, 31, 89) : BV:8
91 : ite(80, 28, 90) : BV:8
92 : bvconcat(50, 64, 78, 91) : BV:32
93 : ite(20, 4, 92) : BV:32
94 : lambda(19, 93) : FUNCTION[BV:32 -> BV:32]
95 : map(18, 94) : MAP[BV:32 -> BV:32]
96 : sum(1, 2, 95) : SUM[UNIT,MAP[BV:32 -> BV:32]]
97 : sym_const(96) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 570687488 { 0x22040000 +1.3125000e197 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1324678470 { 0x4ef4fd46 +1.91397929e30 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda42017Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42018Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
25 : eq(23, 24) : BOOL
26 : 236 { 0xec -20 } : BV:8
27 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
28 : eq(23, 27) : BOOL
29 : 84 { 0x54 } : BV:8
30 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
34 : eq(23, 33) : BOOL
35 : 212 { 0xd4 -44 } : BV:8
36 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
37 : eq(23, 36) : BOOL
38 : 191 { 0xbf -65 } : BV:8
39 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
40 : eq(23, 39) : BOOL
41 : 92 { 0x5c } : BV:8
42 : 0 { 0x0 } : BV:8
43 : ite(40, 41, 42) : BV:8
44 : ite(37, 38, 43) : BV:8
45 : ite(34, 35, 44) : BV:8
46 : ite(31, 32, 45) : BV:8
47 : ite(28, 29, 46) : BV:8
48 : ite(25, 26, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 24) : BOOL
52 : eq(50, 27) : BOOL
53 : eq(50, 30) : BOOL
54 : eq(50, 33) : BOOL
55 : eq(50, 36) : BOOL
56 : eq(50, 39) : BOOL
57 : ite(56, 41, 42) : BV:8
58 : ite(55, 38, 57) : BV:8
59 : ite(54, 35, 58) : BV:8
60 : ite(53, 32, 59) : BV:8
61 : ite(52, 29, 60) : BV:8
62 : ite(51, 26, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 21, 22) : BV:32
65 : eq(64, 24) : BOOL
66 : eq(64, 27) : BOOL
67 : eq(64, 30) : BOOL
68 : eq(64, 33) : BOOL
69 : eq(64, 36) : BOOL
70 : eq(64, 39) : BOOL
71 : ite(70, 41, 42) : BV:8
72 : ite(69, 38, 71) : BV:8
73 : ite(68, 35, 72) : BV:8
74 : ite(67, 32, 73) : BV:8
75 : ite(66, 29, 74) : BV:8
76 : ite(65, 26, 75) : BV:8
77 : bvadd(21, 22) : BV:32
78 : eq(77, 24) : BOOL
79 : eq(77, 27) : BOOL
80 : eq(77, 30) : BOOL
81 : eq(77, 33) : BOOL
82 : eq(77, 36) : BOOL
83 : eq(77, 39) : BOOL
84 : ite(83, 41, 42) : BV:8
85 : ite(82, 38, 84) : BV:8
86 : ite(81, 35, 85) : BV:8
87 : ite(80, 32, 86) : BV:8
88 : ite(79, 29, 87) : BV:8
89 : ite(78, 26, 88) : BV:8
90 : bvconcat(48, 62, 76, 89) : BV:32
91 : ite(18, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 570687487 { 0x2203ffff +1.3124988e197 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 445857883 { 0x1a93405b +1.15040147e182 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 780824504 { 0x2e8a6fb8 +1.8153438e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 780824507 { 0x2e8a6fbb +1.8153474e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 927891460 { 0x374e8004 +1.61328172e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 927891463 { 0x374e8007 +1.61328208e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1847329836 { 0x6e1c042c +1.21887731e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1847329839 { 0x6e1c042f +1.21887767e93 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda41877Var : BV:32
2 : Lambda41878Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 15 { 0xf +1.178e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 16 { 0x10 +1.190e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 17 { 0x11 +1.202e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
55 : eq(53, 54) : BOOL
56 : 236 { 0xec -20 } : BV:8
57 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
58 : eq(53, 57) : BOOL
59 : 84 { 0x54 } : BV:8
60 : eq(53, 51) : BOOL
61 : 255 { 0xff -1 } : BV:8
62 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
63 : eq(53, 62) : BOOL
64 : 212 { 0xd4 -44 } : BV:8
65 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
66 : eq(53, 65) : BOOL
67 : 191 { 0xbf -65 } : BV:8
68 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
69 : eq(53, 68) : BOOL
70 : 92 { 0x5c } : BV:8
71 : 0 { 0x0 } : BV:8
72 : ite(69, 70, 71) : BV:8
73 : ite(66, 67, 72) : BV:8
74 : ite(63, 64, 73) : BV:8
75 : ite(60, 61, 74) : BV:8
76 : ite(58, 59, 75) : BV:8
77 : ite(55, 56, 76) : BV:8
78 : bvadd(65, 52) : BV:32
79 : eq(78, 54) : BOOL
80 : eq(78, 57) : BOOL
81 : eq(78, 51) : BOOL
82 : eq(78, 62) : BOOL
83 : eq(78, 65) : BOOL
84 : eq(78, 68) : BOOL
85 : ite(84, 70, 71) : BV:8
86 : ite(83, 67, 85) : BV:8
87 : ite(82, 64, 86) : BV:8
88 : ite(81, 61, 87) : BV:8
89 : ite(80, 59, 88) : BV:8
90 : ite(79, 56, 89) : BV:8
91 : bvadd(68, 52) : BV:32
92 : eq(91, 54) : BOOL
93 : eq(91, 57) : BOOL
94 : eq(91, 51) : BOOL
95 : eq(91, 62) : BOOL
96 : eq(91, 65) : BOOL
97 : eq(91, 68) : BOOL
98 : ite(97, 70, 71) : BV:8
99 : ite(96, 67, 98) : BV:8
100 : ite(95, 64, 99) : BV:8
101 : ite(94, 61, 100) : BV:8
102 : ite(93, 59, 101) : BV:8
103 : ite(92, 56, 102) : BV:8
104 : bvadd(62, 52) : BV:32
105 : eq(104, 54) : BOOL
106 : eq(104, 57) : BOOL
107 : eq(104, 51) : BOOL
108 : eq(104, 62) : BOOL
109 : eq(104, 65) : BOOL
110 : eq(104, 68) : BOOL
111 : ite(110, 70, 71) : BV:8
112 : ite(109, 67, 111) : BV:8
113 : ite(108, 64, 112) : BV:8
114 : ite(107, 61, 113) : BV:8
115 : ite(106, 59, 114) : BV:8
116 : ite(105, 56, 115) : BV:8
117 : bvconcat(77, 90, 103, 116) : BV:32
118 : bvadd(48, 50, 117) : BV:32
119 : eq(118, 54) : BOOL
120 : eq(118, 57) : BOOL
121 : eq(118, 51) : BOOL
122 : eq(118, 62) : BOOL
123 : eq(118, 65) : BOOL
124 : eq(118, 68) : BOOL
125 : ite(124, 70, 71) : BV:8
126 : ite(123, 67, 125) : BV:8
127 : ite(122, 64, 126) : BV:8
128 : ite(121, 61, 127) : BV:8
129 : ite(120, 59, 128) : BV:8
130 : ite(119, 56, 129) : BV:8
131 : 2 { 0x2 +1.23e129 } : BV:32
132 : bvadd(131, 50, 117) : BV:32
133 : eq(132, 54) : BOOL
134 : eq(132, 57) : BOOL
135 : eq(132, 51) : BOOL
136 : eq(132, 62) : BOOL
137 : eq(132, 65) : BOOL
138 : eq(132, 68) : BOOL
139 : ite(138, 70, 71) : BV:8
140 : ite(137, 67, 139) : BV:8
141 : ite(136, 64, 140) : BV:8
142 : ite(135, 61, 141) : BV:8
143 : ite(134, 59, 142) : BV:8
144 : ite(133, 56, 143) : BV:8
145 : 1 { 0x1 +1.11e129 } : BV:32
146 : bvadd(145, 50, 117) : BV:32
147 : eq(146, 54) : BOOL
148 : eq(146, 57) : BOOL
149 : eq(146, 51) : BOOL
150 : eq(146, 62) : BOOL
151 : eq(146, 65) : BOOL
152 : eq(146, 68) : BOOL
153 : ite(152, 70, 71) : BV:8
154 : ite(151, 67, 153) : BV:8
155 : ite(150, 64, 154) : BV:8
156 : ite(149, 61, 155) : BV:8
157 : ite(148, 59, 156) : BV:8
158 : ite(147, 56, 157) : BV:8
159 : bvadd(50, 117) : BV:32
160 : eq(159, 54) : BOOL
161 : eq(159, 57) : BOOL
162 : eq(159, 51) : BOOL
163 : eq(159, 62) : BOOL
164 : eq(159, 65) : BOOL
165 : eq(159, 68) : BOOL
166 : ite(165, 70, 71) : BV:8
167 : ite(164, 67, 166) : BV:8
168 : ite(163, 64, 167) : BV:8
169 : ite(162, 61, 168) : BV:8
170 : ite(161, 59, 169) : BV:8
171 : ite(160, 56, 170) : BV:8
172 : bvconcat(130, 144, 158, 171) : BV:32
173 : ite(6, 3, 172) : BV:32
174 : ite(47, 172, 173) : BV:32
175 : ite(6, 3, 174) : BV:32
176 : lambda(1, 2, 175) : FUNCTION[BV:32,BV:32 -> BV:32]
177 : sym_const(176) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda41882Var : BV:32
2 : Lambda41883Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 15 { 0xf +1.178e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 17 { 0x11 +1.202e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2215116795 ] -> true, [ 2215116796; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2215116795 ] -> true, [ 2215116796; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda41891Var : BV:32
2 : Lambda41892Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2215116795 { 0x8407fffb -2079850501 -1.6249940e137 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2215116796 { 0x8407fffc -2079850500 -1.6249952e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2215116797 { 0x8407fffd -2079850499 -1.6249964e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 15 { 0xf +1.178e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 16 { 0x10 +1.190e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 17 { 0x11 +1.202e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda41887Var : BV:32
2 : Lambda41888Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
14 : eq(12, 13) : BOOL
15 : 236 { 0xec -20 } : BV:8
16 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
17 : eq(12, 16) : BOOL
18 : 84 { 0x54 } : BV:8
19 : eq(12, 10) : BOOL
20 : 255 { 0xff -1 } : BV:8
21 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
22 : eq(12, 21) : BOOL
23 : 212 { 0xd4 -44 } : BV:8
24 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
25 : eq(12, 24) : BOOL
26 : 191 { 0xbf -65 } : BV:8
27 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
28 : eq(12, 27) : BOOL
29 : 92 { 0x5c } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(17, 18, 34) : BV:8
36 : ite(14, 15, 35) : BV:8
37 : bvadd(24, 11) : BV:32
38 : eq(37, 13) : BOOL
39 : eq(37, 16) : BOOL
40 : eq(37, 10) : BOOL
41 : eq(37, 21) : BOOL
42 : eq(37, 24) : BOOL
43 : eq(37, 27) : BOOL
44 : ite(43, 29, 30) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 23, 45) : BV:8
47 : ite(40, 20, 46) : BV:8
48 : ite(39, 18, 47) : BV:8
49 : ite(38, 15, 48) : BV:8
50 : bvadd(27, 11) : BV:32
51 : eq(50, 13) : BOOL
52 : eq(50, 16) : BOOL
53 : eq(50, 10) : BOOL
54 : eq(50, 21) : BOOL
55 : eq(50, 24) : BOOL
56 : eq(50, 27) : BOOL
57 : ite(56, 29, 30) : BV:8
58 : ite(55, 26, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 20, 59) : BV:8
61 : ite(52, 18, 60) : BV:8
62 : ite(51, 15, 61) : BV:8
63 : bvadd(21, 11) : BV:32
64 : eq(63, 13) : BOOL
65 : eq(63, 16) : BOOL
66 : eq(63, 10) : BOOL
67 : eq(63, 21) : BOOL
68 : eq(63, 24) : BOOL
69 : eq(63, 27) : BOOL
70 : ite(69, 29, 30) : BV:8
71 : ite(68, 26, 70) : BV:8
72 : ite(67, 23, 71) : BV:8
73 : ite(66, 20, 72) : BV:8
74 : ite(65, 18, 73) : BV:8
75 : ite(64, 15, 74) : BV:8
76 : bvconcat(36, 49, 62, 75) : BV:32
77 : bvadd(7, 9, 76) : BV:32
78 : eq(77, 13) : BOOL
79 : eq(77, 16) : BOOL
80 : eq(77, 10) : BOOL
81 : eq(77, 21) : BOOL
82 : eq(77, 24) : BOOL
83 : eq(77, 27) : BOOL
84 : ite(83, 29, 30) : BV:8
85 : ite(82, 26, 84) : BV:8
86 : ite(81, 23, 85) : BV:8
87 : ite(80, 20, 86) : BV:8
88 : ite(79, 18, 87) : BV:8
89 : ite(78, 15, 88) : BV:8
90 : 2 { 0x2 +1.23e129 } : BV:32
91 : bvadd(90, 9, 76) : BV:32
92 : eq(91, 13) : BOOL
93 : eq(91, 16) : BOOL
94 : eq(91, 10) : BOOL
95 : eq(91, 21) : BOOL
96 : eq(91, 24) : BOOL
97 : eq(91, 27) : BOOL
98 : ite(97, 29, 30) : BV:8
99 : ite(96, 26, 98) : BV:8
100 : ite(95, 23, 99) : BV:8
101 : ite(94, 20, 100) : BV:8
102 : ite(93, 18, 101) : BV:8
103 : ite(92, 15, 102) : BV:8
104 : 1 { 0x1 +1.11e129 } : BV:32
105 : bvadd(104, 9, 76) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 10) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 27) : BOOL
112 : ite(111, 29, 30) : BV:8
113 : ite(110, 26, 112) : BV:8
114 : ite(109, 23, 113) : BV:8
115 : ite(108, 20, 114) : BV:8
116 : ite(107, 18, 115) : BV:8
117 : ite(106, 15, 116) : BV:8
118 : bvadd(9, 76) : BV:32
119 : eq(118, 13) : BOOL
120 : eq(118, 16) : BOOL
121 : eq(118, 10) : BOOL
122 : eq(118, 21) : BOOL
123 : eq(118, 24) : BOOL
124 : eq(118, 27) : BOOL
125 : ite(124, 29, 30) : BV:8
126 : ite(123, 26, 125) : BV:8
127 : ite(122, 23, 126) : BV:8
128 : ite(121, 20, 127) : BV:8
129 : ite(120, 18, 128) : BV:8
130 : ite(119, 15, 129) : BV:8
131 : bvconcat(89, 103, 117, 130) : BV:32
132 : ite(6, 3, 131) : BV:32
133 : lambda(1, 2, 132) : FUNCTION[BV:32,BV:32 -> BV:32]
134 : sym_const(133) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda41898Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda41902Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda41903Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3964928000 { 0xec540000 -330039296 -1.65625000e89 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1405091843 { 0x53c00003 +1.50000035e40 } : BV:32
10 : eq(8, 9) : BOOL
11 : 236 { 0xec -20 } : BV:8
12 : 1405091842 { 0x53c00002 +1.50000023e40 } : BV:32
13 : eq(8, 12) : BOOL
14 : 84 { 0x54 } : BV:8
15 : 3417309191 { 0xcbb00007 -877658105 -1.37500083e24 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 3417309188 { 0xcbb00004 -877658108 -1.37500047e24 } : BV:32
19 : eq(8, 18) : BOOL
20 : 212 { 0xd4 -44 } : BV:8
21 : 3417309190 { 0xcbb00006 -877658106 -1.37500071e24 } : BV:32
22 : eq(8, 21) : BOOL
23 : 191 { 0xbf -65 } : BV:8
24 : 3417309189 { 0xcbb00005 -877658107 -1.37500059e24 } : BV:32
25 : eq(8, 24) : BOOL
26 : 92 { 0x5c } : BV:8
27 : 0 { 0x0 } : BV:8
28 : ite(25, 26, 27) : BV:8
29 : ite(22, 23, 28) : BV:8
30 : ite(19, 20, 29) : BV:8
31 : ite(16, 17, 30) : BV:8
32 : ite(13, 14, 31) : BV:8
33 : ite(10, 11, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 9) : BOOL
37 : eq(35, 12) : BOOL
38 : eq(35, 15) : BOOL
39 : eq(35, 18) : BOOL
40 : eq(35, 21) : BOOL
41 : eq(35, 24) : BOOL
42 : ite(41, 26, 27) : BV:8
43 : ite(40, 23, 42) : BV:8
44 : ite(39, 20, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 11, 46) : BV:8
48 : 1 { 0x1 +1.11e129 } : BV:32
49 : bvadd(48, 6, 7) : BV:32
50 : eq(49, 9) : BOOL
51 : eq(49, 12) : BOOL
52 : eq(49, 15) : BOOL
53 : eq(49, 18) : BOOL
54 : eq(49, 21) : BOOL
55 : eq(49, 24) : BOOL
56 : ite(55, 26, 27) : BV:8
57 : ite(54, 23, 56) : BV:8
58 : ite(53, 20, 57) : BV:8
59 : ite(52, 17, 58) : BV:8
60 : ite(51, 14, 59) : BV:8
61 : ite(50, 11, 60) : BV:8
62 : bvadd(6, 7) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 15) : BOOL
66 : eq(62, 18) : BOOL
67 : eq(62, 21) : BOOL
68 : eq(62, 24) : BOOL
69 : ite(68, 26, 27) : BV:8
70 : ite(67, 23, 69) : BV:8
71 : ite(66, 20, 70) : BV:8
72 : ite(65, 17, 71) : BV:8
73 : ite(64, 14, 72) : BV:8
74 : ite(63, 11, 73) : BV:8
75 : bvconcat(33, 47, 61, 74) : BV:32
76 : ite(3, 2, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
791670935
=counter_example_end
=global nodece 51 num_edges_traversed 2
=global nodece 51 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 52
=global nodece 52 nodece z3.ce4529.num_edges_traversed1
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3.ce4529 ac9a3955ff718e917b53eebba55016
=input.spec-%var-x-1
1 : Lambda43663Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43664Var : BV:32
18 : Lambda43665Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4096 { 0x1000 +1.48828e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4098 { 0x1002 +1.48851e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43666Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
82 : eq(80, 81) : BOOL
83 : 160 { 0xa0 -96 } : BV:8
84 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
85 : eq(80, 84) : BOOL
86 : 43 { 0x2b } : BV:8
87 : eq(80, 78) : BOOL
88 : 241 { 0xf1 -15 } : BV:8
89 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
90 : eq(80, 89) : BOOL
91 : 64 { 0x40 } : BV:8
92 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
93 : eq(80, 92) : BOOL
94 : 68 { 0x44 } : BV:8
95 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
96 : eq(80, 95) : BOOL
97 : 16 { 0x10 } : BV:8
98 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
99 : eq(80, 98) : BOOL
100 : 8 { 0x8 } : BV:8
101 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
102 : eq(80, 101) : BOOL
103 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
104 : eq(80, 103) : BOOL
105 : 4 { 0x4 } : BV:8
106 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
107 : eq(80, 106) : BOOL
108 : 159 { 0x9f -97 } : BV:8
109 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
110 : eq(80, 109) : BOOL
111 : 128 { 0x80 -128 } : BV:8
112 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
113 : eq(80, 112) : BOOL
114 : 1 { 0x1 } : BV:8
115 : 0 { 0x0 } : BV:8
116 : ite(113, 114, 115) : BV:8
117 : ite(110, 111, 116) : BV:8
118 : ite(107, 108, 117) : BV:8
119 : ite(104, 105, 118) : BV:8
120 : ite(102, 91, 119) : BV:8
121 : ite(99, 100, 120) : BV:8
122 : ite(96, 97, 121) : BV:8
123 : ite(93, 94, 122) : BV:8
124 : ite(90, 91, 123) : BV:8
125 : ite(87, 88, 124) : BV:8
126 : ite(85, 86, 125) : BV:8
127 : ite(82, 83, 126) : BV:8
128 : bvadd(106, 79) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 84) : BOOL
131 : eq(128, 78) : BOOL
132 : eq(128, 89) : BOOL
133 : eq(128, 92) : BOOL
134 : eq(128, 95) : BOOL
135 : eq(128, 98) : BOOL
136 : eq(128, 101) : BOOL
137 : eq(128, 103) : BOOL
138 : eq(128, 106) : BOOL
139 : eq(128, 109) : BOOL
140 : eq(128, 112) : BOOL
141 : ite(140, 114, 115) : BV:8
142 : ite(139, 111, 141) : BV:8
143 : ite(138, 108, 142) : BV:8
144 : ite(137, 105, 143) : BV:8
145 : ite(136, 91, 144) : BV:8
146 : ite(135, 100, 145) : BV:8
147 : ite(134, 97, 146) : BV:8
148 : ite(133, 94, 147) : BV:8
149 : ite(132, 91, 148) : BV:8
150 : ite(131, 88, 149) : BV:8
151 : ite(130, 86, 150) : BV:8
152 : ite(129, 83, 151) : BV:8
153 : bvadd(109, 79) : BV:32
154 : eq(153, 81) : BOOL
155 : eq(153, 84) : BOOL
156 : eq(153, 78) : BOOL
157 : eq(153, 89) : BOOL
158 : eq(153, 92) : BOOL
159 : eq(153, 95) : BOOL
160 : eq(153, 98) : BOOL
161 : eq(153, 101) : BOOL
162 : eq(153, 103) : BOOL
163 : eq(153, 106) : BOOL
164 : eq(153, 109) : BOOL
165 : eq(153, 112) : BOOL
166 : ite(165, 114, 115) : BV:8
167 : ite(164, 111, 166) : BV:8
168 : ite(163, 108, 167) : BV:8
169 : ite(162, 105, 168) : BV:8
170 : ite(161, 91, 169) : BV:8
171 : ite(160, 100, 170) : BV:8
172 : ite(159, 97, 171) : BV:8
173 : ite(158, 94, 172) : BV:8
174 : ite(157, 91, 173) : BV:8
175 : ite(156, 88, 174) : BV:8
176 : ite(155, 86, 175) : BV:8
177 : ite(154, 83, 176) : BV:8
178 : bvadd(98, 79) : BV:32
179 : eq(178, 81) : BOOL
180 : eq(178, 84) : BOOL
181 : eq(178, 78) : BOOL
182 : eq(178, 89) : BOOL
183 : eq(178, 92) : BOOL
184 : eq(178, 95) : BOOL
185 : eq(178, 98) : BOOL
186 : eq(178, 101) : BOOL
187 : eq(178, 103) : BOOL
188 : eq(178, 106) : BOOL
189 : eq(178, 109) : BOOL
190 : eq(178, 112) : BOOL
191 : ite(190, 114, 115) : BV:8
192 : ite(189, 111, 191) : BV:8
193 : ite(188, 108, 192) : BV:8
194 : ite(187, 105, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 100, 195) : BV:8
197 : ite(184, 97, 196) : BV:8
198 : ite(183, 94, 197) : BV:8
199 : ite(182, 91, 198) : BV:8
200 : ite(181, 88, 199) : BV:8
201 : ite(180, 86, 200) : BV:8
202 : ite(179, 83, 201) : BV:8
203 : bvconcat(127, 152, 177, 202) : BV:32
204 : bvadd(75, 77, 203) : BV:32
205 : eq(204, 81) : BOOL
206 : eq(204, 84) : BOOL
207 : eq(204, 78) : BOOL
208 : eq(204, 89) : BOOL
209 : eq(204, 92) : BOOL
210 : eq(204, 95) : BOOL
211 : eq(204, 98) : BOOL
212 : eq(204, 101) : BOOL
213 : eq(204, 103) : BOOL
214 : eq(204, 106) : BOOL
215 : eq(204, 109) : BOOL
216 : eq(204, 112) : BOOL
217 : ite(216, 114, 115) : BV:8
218 : ite(215, 111, 217) : BV:8
219 : ite(214, 108, 218) : BV:8
220 : ite(213, 105, 219) : BV:8
221 : ite(212, 91, 220) : BV:8
222 : ite(211, 100, 221) : BV:8
223 : ite(210, 97, 222) : BV:8
224 : ite(209, 94, 223) : BV:8
225 : ite(208, 91, 224) : BV:8
226 : ite(207, 88, 225) : BV:8
227 : ite(206, 86, 226) : BV:8
228 : ite(205, 83, 227) : BV:8
229 : 2 { 0x2 +1.23e129 } : BV:32
230 : bvadd(229, 77, 203) : BV:32
231 : eq(230, 81) : BOOL
232 : eq(230, 84) : BOOL
233 : eq(230, 78) : BOOL
234 : eq(230, 89) : BOOL
235 : eq(230, 92) : BOOL
236 : eq(230, 95) : BOOL
237 : eq(230, 98) : BOOL
238 : eq(230, 101) : BOOL
239 : eq(230, 103) : BOOL
240 : eq(230, 106) : BOOL
241 : eq(230, 109) : BOOL
242 : eq(230, 112) : BOOL
243 : ite(242, 114, 115) : BV:8
244 : ite(241, 111, 243) : BV:8
245 : ite(240, 108, 244) : BV:8
246 : ite(239, 105, 245) : BV:8
247 : ite(238, 91, 246) : BV:8
248 : ite(237, 100, 247) : BV:8
249 : ite(236, 97, 248) : BV:8
250 : ite(235, 94, 249) : BV:8
251 : ite(234, 91, 250) : BV:8
252 : ite(233, 88, 251) : BV:8
253 : ite(232, 86, 252) : BV:8
254 : ite(231, 83, 253) : BV:8
255 : 1 { 0x1 +1.11e129 } : BV:32
256 : bvadd(255, 77, 203) : BV:32
257 : eq(256, 81) : BOOL
258 : eq(256, 84) : BOOL
259 : eq(256, 78) : BOOL
260 : eq(256, 89) : BOOL
261 : eq(256, 92) : BOOL
262 : eq(256, 95) : BOOL
263 : eq(256, 98) : BOOL
264 : eq(256, 101) : BOOL
265 : eq(256, 103) : BOOL
266 : eq(256, 106) : BOOL
267 : eq(256, 109) : BOOL
268 : eq(256, 112) : BOOL
269 : ite(268, 114, 115) : BV:8
270 : ite(267, 111, 269) : BV:8
271 : ite(266, 108, 270) : BV:8
272 : ite(265, 105, 271) : BV:8
273 : ite(264, 91, 272) : BV:8
274 : ite(263, 100, 273) : BV:8
275 : ite(262, 97, 274) : BV:8
276 : ite(261, 94, 275) : BV:8
277 : ite(260, 91, 276) : BV:8
278 : ite(259, 88, 277) : BV:8
279 : ite(258, 86, 278) : BV:8
280 : ite(257, 83, 279) : BV:8
281 : bvadd(77, 203) : BV:32
282 : eq(281, 81) : BOOL
283 : eq(281, 84) : BOOL
284 : eq(281, 78) : BOOL
285 : eq(281, 89) : BOOL
286 : eq(281, 92) : BOOL
287 : eq(281, 95) : BOOL
288 : eq(281, 98) : BOOL
289 : eq(281, 101) : BOOL
290 : eq(281, 103) : BOOL
291 : eq(281, 106) : BOOL
292 : eq(281, 109) : BOOL
293 : eq(281, 112) : BOOL
294 : ite(293, 114, 115) : BV:8
295 : ite(292, 111, 294) : BV:8
296 : ite(291, 108, 295) : BV:8
297 : ite(290, 105, 296) : BV:8
298 : ite(289, 91, 297) : BV:8
299 : ite(288, 100, 298) : BV:8
300 : ite(287, 97, 299) : BV:8
301 : ite(286, 94, 300) : BV:8
302 : ite(285, 91, 301) : BV:8
303 : ite(284, 88, 302) : BV:8
304 : ite(283, 86, 303) : BV:8
305 : ite(282, 83, 304) : BV:8
306 : bvconcat(228, 254, 280, 305) : BV:32
307 : ite(55, 2, 306) : BV:32
308 : ite(74, 306, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43690Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4096 { 0x1000 +1.48828e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43691Var : BV:32
18 : eq(17, 2) : BOOL
19 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
26 : eq(24, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
29 : eq(24, 28) : BOOL
30 : 43 { 0x2b } : BV:8
31 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
32 : eq(24, 31) : BOOL
33 : 241 { 0xf1 -15 } : BV:8
34 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
35 : eq(24, 34) : BOOL
36 : 64 { 0x40 } : BV:8
37 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
38 : eq(24, 37) : BOOL
39 : 68 { 0x44 } : BV:8
40 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
41 : eq(24, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
44 : eq(24, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
47 : eq(24, 46) : BOOL
48 : eq(24, 23) : BOOL
49 : 4 { 0x4 } : BV:8
50 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
51 : eq(24, 50) : BOOL
52 : 159 { 0x9f -97 } : BV:8
53 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
54 : eq(24, 53) : BOOL
55 : 128 { 0x80 -128 } : BV:8
56 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
57 : eq(24, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(48, 49, 62) : BV:8
64 : ite(47, 36, 63) : BV:8
65 : ite(44, 45, 64) : BV:8
66 : ite(41, 42, 65) : BV:8
67 : ite(38, 39, 66) : BV:8
68 : ite(35, 36, 67) : BV:8
69 : ite(32, 33, 68) : BV:8
70 : ite(29, 30, 69) : BV:8
71 : ite(26, 27, 70) : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : bvadd(72, 22, 23) : BV:32
74 : eq(73, 25) : BOOL
75 : eq(73, 28) : BOOL
76 : eq(73, 31) : BOOL
77 : eq(73, 34) : BOOL
78 : eq(73, 37) : BOOL
79 : eq(73, 40) : BOOL
80 : eq(73, 43) : BOOL
81 : eq(73, 46) : BOOL
82 : eq(73, 23) : BOOL
83 : eq(73, 50) : BOOL
84 : eq(73, 53) : BOOL
85 : eq(73, 56) : BOOL
86 : ite(85, 58, 59) : BV:8
87 : ite(84, 55, 86) : BV:8
88 : ite(83, 52, 87) : BV:8
89 : ite(82, 49, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 45, 90) : BV:8
92 : ite(79, 42, 91) : BV:8
93 : ite(78, 39, 92) : BV:8
94 : ite(77, 36, 93) : BV:8
95 : ite(76, 33, 94) : BV:8
96 : ite(75, 30, 95) : BV:8
97 : ite(74, 27, 96) : BV:8
98 : 1 { 0x1 +1.11e129 } : BV:32
99 : bvadd(98, 22, 23) : BV:32
100 : eq(99, 25) : BOOL
101 : eq(99, 28) : BOOL
102 : eq(99, 31) : BOOL
103 : eq(99, 34) : BOOL
104 : eq(99, 37) : BOOL
105 : eq(99, 40) : BOOL
106 : eq(99, 43) : BOOL
107 : eq(99, 46) : BOOL
108 : eq(99, 23) : BOOL
109 : eq(99, 50) : BOOL
110 : eq(99, 53) : BOOL
111 : eq(99, 56) : BOOL
112 : ite(111, 58, 59) : BV:8
113 : ite(110, 55, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 49, 114) : BV:8
116 : ite(107, 36, 115) : BV:8
117 : ite(106, 45, 116) : BV:8
118 : ite(105, 42, 117) : BV:8
119 : ite(104, 39, 118) : BV:8
120 : ite(103, 36, 119) : BV:8
121 : ite(102, 33, 120) : BV:8
122 : ite(101, 30, 121) : BV:8
123 : ite(100, 27, 122) : BV:8
124 : bvadd(22, 23) : BV:32
125 : eq(124, 25) : BOOL
126 : eq(124, 28) : BOOL
127 : eq(124, 31) : BOOL
128 : eq(124, 34) : BOOL
129 : eq(124, 37) : BOOL
130 : eq(124, 40) : BOOL
131 : eq(124, 43) : BOOL
132 : eq(124, 46) : BOOL
133 : eq(124, 23) : BOOL
134 : eq(124, 50) : BOOL
135 : eq(124, 53) : BOOL
136 : eq(124, 56) : BOOL
137 : ite(136, 58, 59) : BV:8
138 : ite(135, 55, 137) : BV:8
139 : ite(134, 52, 138) : BV:8
140 : ite(133, 49, 139) : BV:8
141 : ite(132, 36, 140) : BV:8
142 : ite(131, 45, 141) : BV:8
143 : ite(130, 42, 142) : BV:8
144 : ite(129, 39, 143) : BV:8
145 : ite(128, 36, 144) : BV:8
146 : ite(127, 33, 145) : BV:8
147 : ite(126, 30, 146) : BV:8
148 : ite(125, 27, 147) : BV:8
149 : bvconcat(71, 97, 123, 148) : BV:32
150 : ite(18, 19, 149) : BV:32
151 : lambda(17, 150) : FUNCTION[BV:32 -> BV:32]
152 : map(16, 151) : MAP[BV:32 -> BV:32]
153 : sym_const(152) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2687190079 ] -> 0, [ 2687190080; 2687190080 ] -> 4, [ 2687190081; 2687190081 ] -> 64, [ 2687190082; 2687190082 ] -> 1, [ 2687190083; 2687190083 ] -> 16, [ 2687190084; 3221224991 ] -> 0, [ 3221224992; 3221224992 ] -> 8, [ 3221224993; 3221224993 ] -> 128, [ 3221224994; 3221224994 ] -> 159, [ 3221224995; 3221224995 ] -> 241, [ 3221224996; 3221225503 ] -> 0, [ 3221225504; 3221225504 ] -> 64, [ 3221225505; 3221225505 ] -> 68, [ 3221225506; 3221225506 ] -> 43, [ 3221225507; 3221225507 ] -> 160, [ 3221225508; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 739316063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 739316064; 739316067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 739316068; 772868387 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 772868388; 772868391 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 772868392; 2923075271 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2923075272; 2923075275 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2923075276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 772868388 { 0x2e110924 +1.13309144e221 } : BV:32
=input.dst.llvm-%m
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 739316064 { 0x2c111160 +1.13334274e217 } : BV:32
=input.dst.llvm-%n
1 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2923075272 { 0xae3a96c8 -1371892024 -1.45772647e221 } : BV:32
=input.dst.llvm-%x
1 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43683Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43684Var : BV:32
18 : Lambda43685Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4096 { 0x1000 +1.48828e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4098 { 0x1002 +1.48851e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43686Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
63 : eq(61, 62) : BOOL
64 : 160 { 0xa0 -96 } : BV:8
65 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
66 : eq(61, 65) : BOOL
67 : 43 { 0x2b } : BV:8
68 : eq(61, 59) : BOOL
69 : 241 { 0xf1 -15 } : BV:8
70 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
71 : eq(61, 70) : BOOL
72 : 64 { 0x40 } : BV:8
73 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
74 : eq(61, 73) : BOOL
75 : 68 { 0x44 } : BV:8
76 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
77 : eq(61, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
80 : eq(61, 79) : BOOL
81 : 8 { 0x8 } : BV:8
82 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
83 : eq(61, 82) : BOOL
84 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
85 : eq(61, 84) : BOOL
86 : 4 { 0x4 } : BV:8
87 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
88 : eq(61, 87) : BOOL
89 : 159 { 0x9f -97 } : BV:8
90 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
91 : eq(61, 90) : BOOL
92 : 128 { 0x80 -128 } : BV:8
93 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
94 : eq(61, 93) : BOOL
95 : 1 { 0x1 } : BV:8
96 : 0 { 0x0 } : BV:8
97 : ite(94, 95, 96) : BV:8
98 : ite(91, 92, 97) : BV:8
99 : ite(88, 89, 98) : BV:8
100 : ite(85, 86, 99) : BV:8
101 : ite(83, 72, 100) : BV:8
102 : ite(80, 81, 101) : BV:8
103 : ite(77, 78, 102) : BV:8
104 : ite(74, 75, 103) : BV:8
105 : ite(71, 72, 104) : BV:8
106 : ite(68, 69, 105) : BV:8
107 : ite(66, 67, 106) : BV:8
108 : ite(63, 64, 107) : BV:8
109 : bvadd(87, 60) : BV:32
110 : eq(109, 62) : BOOL
111 : eq(109, 65) : BOOL
112 : eq(109, 59) : BOOL
113 : eq(109, 70) : BOOL
114 : eq(109, 73) : BOOL
115 : eq(109, 76) : BOOL
116 : eq(109, 79) : BOOL
117 : eq(109, 82) : BOOL
118 : eq(109, 84) : BOOL
119 : eq(109, 87) : BOOL
120 : eq(109, 90) : BOOL
121 : eq(109, 93) : BOOL
122 : ite(121, 95, 96) : BV:8
123 : ite(120, 92, 122) : BV:8
124 : ite(119, 89, 123) : BV:8
125 : ite(118, 86, 124) : BV:8
126 : ite(117, 72, 125) : BV:8
127 : ite(116, 81, 126) : BV:8
128 : ite(115, 78, 127) : BV:8
129 : ite(114, 75, 128) : BV:8
130 : ite(113, 72, 129) : BV:8
131 : ite(112, 69, 130) : BV:8
132 : ite(111, 67, 131) : BV:8
133 : ite(110, 64, 132) : BV:8
134 : bvadd(90, 60) : BV:32
135 : eq(134, 62) : BOOL
136 : eq(134, 65) : BOOL
137 : eq(134, 59) : BOOL
138 : eq(134, 70) : BOOL
139 : eq(134, 73) : BOOL
140 : eq(134, 76) : BOOL
141 : eq(134, 79) : BOOL
142 : eq(134, 82) : BOOL
143 : eq(134, 84) : BOOL
144 : eq(134, 87) : BOOL
145 : eq(134, 90) : BOOL
146 : eq(134, 93) : BOOL
147 : ite(146, 95, 96) : BV:8
148 : ite(145, 92, 147) : BV:8
149 : ite(144, 89, 148) : BV:8
150 : ite(143, 86, 149) : BV:8
151 : ite(142, 72, 150) : BV:8
152 : ite(141, 81, 151) : BV:8
153 : ite(140, 78, 152) : BV:8
154 : ite(139, 75, 153) : BV:8
155 : ite(138, 72, 154) : BV:8
156 : ite(137, 69, 155) : BV:8
157 : ite(136, 67, 156) : BV:8
158 : ite(135, 64, 157) : BV:8
159 : bvadd(79, 60) : BV:32
160 : eq(159, 62) : BOOL
161 : eq(159, 65) : BOOL
162 : eq(159, 59) : BOOL
163 : eq(159, 70) : BOOL
164 : eq(159, 73) : BOOL
165 : eq(159, 76) : BOOL
166 : eq(159, 79) : BOOL
167 : eq(159, 82) : BOOL
168 : eq(159, 84) : BOOL
169 : eq(159, 87) : BOOL
170 : eq(159, 90) : BOOL
171 : eq(159, 93) : BOOL
172 : ite(171, 95, 96) : BV:8
173 : ite(170, 92, 172) : BV:8
174 : ite(169, 89, 173) : BV:8
175 : ite(168, 86, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 81, 176) : BV:8
178 : ite(165, 78, 177) : BV:8
179 : ite(164, 75, 178) : BV:8
180 : ite(163, 72, 179) : BV:8
181 : ite(162, 69, 180) : BV:8
182 : ite(161, 67, 181) : BV:8
183 : ite(160, 64, 182) : BV:8
184 : bvconcat(108, 133, 158, 183) : BV:32
185 : bvadd(56, 58, 184) : BV:32
186 : eq(185, 62) : BOOL
187 : eq(185, 65) : BOOL
188 : eq(185, 59) : BOOL
189 : eq(185, 70) : BOOL
190 : eq(185, 73) : BOOL
191 : eq(185, 76) : BOOL
192 : eq(185, 79) : BOOL
193 : eq(185, 82) : BOOL
194 : eq(185, 84) : BOOL
195 : eq(185, 87) : BOOL
196 : eq(185, 90) : BOOL
197 : eq(185, 93) : BOOL
198 : ite(197, 95, 96) : BV:8
199 : ite(196, 92, 198) : BV:8
200 : ite(195, 89, 199) : BV:8
201 : ite(194, 86, 200) : BV:8
202 : ite(193, 72, 201) : BV:8
203 : ite(192, 81, 202) : BV:8
204 : ite(191, 78, 203) : BV:8
205 : ite(190, 75, 204) : BV:8
206 : ite(189, 72, 205) : BV:8
207 : ite(188, 69, 206) : BV:8
208 : ite(187, 67, 207) : BV:8
209 : ite(186, 64, 208) : BV:8
210 : 2 { 0x2 +1.23e129 } : BV:32
211 : bvadd(210, 58, 184) : BV:32
212 : eq(211, 62) : BOOL
213 : eq(211, 65) : BOOL
214 : eq(211, 59) : BOOL
215 : eq(211, 70) : BOOL
216 : eq(211, 73) : BOOL
217 : eq(211, 76) : BOOL
218 : eq(211, 79) : BOOL
219 : eq(211, 82) : BOOL
220 : eq(211, 84) : BOOL
221 : eq(211, 87) : BOOL
222 : eq(211, 90) : BOOL
223 : eq(211, 93) : BOOL
224 : ite(223, 95, 96) : BV:8
225 : ite(222, 92, 224) : BV:8
226 : ite(221, 89, 225) : BV:8
227 : ite(220, 86, 226) : BV:8
228 : ite(219, 72, 227) : BV:8
229 : ite(218, 81, 228) : BV:8
230 : ite(217, 78, 229) : BV:8
231 : ite(216, 75, 230) : BV:8
232 : ite(215, 72, 231) : BV:8
233 : ite(214, 69, 232) : BV:8
234 : ite(213, 67, 233) : BV:8
235 : ite(212, 64, 234) : BV:8
236 : 1 { 0x1 +1.11e129 } : BV:32
237 : bvadd(236, 58, 184) : BV:32
238 : eq(237, 62) : BOOL
239 : eq(237, 65) : BOOL
240 : eq(237, 59) : BOOL
241 : eq(237, 70) : BOOL
242 : eq(237, 73) : BOOL
243 : eq(237, 76) : BOOL
244 : eq(237, 79) : BOOL
245 : eq(237, 82) : BOOL
246 : eq(237, 84) : BOOL
247 : eq(237, 87) : BOOL
248 : eq(237, 90) : BOOL
249 : eq(237, 93) : BOOL
250 : ite(249, 95, 96) : BV:8
251 : ite(248, 92, 250) : BV:8
252 : ite(247, 89, 251) : BV:8
253 : ite(246, 86, 252) : BV:8
254 : ite(245, 72, 253) : BV:8
255 : ite(244, 81, 254) : BV:8
256 : ite(243, 78, 255) : BV:8
257 : ite(242, 75, 256) : BV:8
258 : ite(241, 72, 257) : BV:8
259 : ite(240, 69, 258) : BV:8
260 : ite(239, 67, 259) : BV:8
261 : ite(238, 64, 260) : BV:8
262 : bvadd(58, 184) : BV:32
263 : eq(262, 62) : BOOL
264 : eq(262, 65) : BOOL
265 : eq(262, 59) : BOOL
266 : eq(262, 70) : BOOL
267 : eq(262, 73) : BOOL
268 : eq(262, 76) : BOOL
269 : eq(262, 79) : BOOL
270 : eq(262, 82) : BOOL
271 : eq(262, 84) : BOOL
272 : eq(262, 87) : BOOL
273 : eq(262, 90) : BOOL
274 : eq(262, 93) : BOOL
275 : ite(274, 95, 96) : BV:8
276 : ite(273, 92, 275) : BV:8
277 : ite(272, 89, 276) : BV:8
278 : ite(271, 86, 277) : BV:8
279 : ite(270, 72, 278) : BV:8
280 : ite(269, 81, 279) : BV:8
281 : ite(268, 78, 280) : BV:8
282 : ite(267, 75, 281) : BV:8
283 : ite(266, 72, 282) : BV:8
284 : ite(265, 69, 283) : BV:8
285 : ite(264, 67, 284) : BV:8
286 : ite(263, 64, 285) : BV:8
287 : bvconcat(209, 235, 261, 286) : BV:32
288 : ite(55, 2, 287) : BV:32
289 : lambda(52, 288) : FUNCTION[BV:32 -> BV:32]
290 : map(51, 289) : MAP[BV:32 -> BV:32]
291 : lambda(17, 290) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
292 : map(16, 291) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
293 : sym_const(292) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 128 { 0x80 +1.1525e129 } : BV:32
2 : unit : UNIT
3 : Lambda43672Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4096 { 0x1000 +1.48828e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4097 { 0x1001 +1.48840e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43673Var : BV:32
20 : eq(19, 4) : BOOL
21 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
28 : eq(26, 27) : BOOL
29 : 160 { 0xa0 -96 } : BV:8
30 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
31 : eq(26, 30) : BOOL
32 : 43 { 0x2b } : BV:8
33 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
34 : eq(26, 33) : BOOL
35 : 241 { 0xf1 -15 } : BV:8
36 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
37 : eq(26, 36) : BOOL
38 : 64 { 0x40 } : BV:8
39 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
40 : eq(26, 39) : BOOL
41 : 68 { 0x44 } : BV:8
42 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
43 : eq(26, 42) : BOOL
44 : 16 { 0x10 } : BV:8
45 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
46 : eq(26, 45) : BOOL
47 : 8 { 0x8 } : BV:8
48 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
49 : eq(26, 48) : BOOL
50 : eq(26, 25) : BOOL
51 : 4 { 0x4 } : BV:8
52 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
53 : eq(26, 52) : BOOL
54 : 159 { 0x9f -97 } : BV:8
55 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
56 : eq(26, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
59 : eq(26, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : ite(49, 38, 65) : BV:8
67 : ite(46, 47, 66) : BV:8
68 : ite(43, 44, 67) : BV:8
69 : ite(40, 41, 68) : BV:8
70 : ite(37, 38, 69) : BV:8
71 : ite(34, 35, 70) : BV:8
72 : ite(31, 32, 71) : BV:8
73 : ite(28, 29, 72) : BV:8
74 : 2 { 0x2 +1.23e129 } : BV:32
75 : bvadd(74, 24, 25) : BV:32
76 : eq(75, 27) : BOOL
77 : eq(75, 30) : BOOL
78 : eq(75, 33) : BOOL
79 : eq(75, 36) : BOOL
80 : eq(75, 39) : BOOL
81 : eq(75, 42) : BOOL
82 : eq(75, 45) : BOOL
83 : eq(75, 48) : BOOL
84 : eq(75, 25) : BOOL
85 : eq(75, 52) : BOOL
86 : eq(75, 55) : BOOL
87 : eq(75, 58) : BOOL
88 : ite(87, 60, 61) : BV:8
89 : ite(86, 57, 88) : BV:8
90 : ite(85, 54, 89) : BV:8
91 : ite(84, 51, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 47, 92) : BV:8
94 : ite(81, 44, 93) : BV:8
95 : ite(80, 41, 94) : BV:8
96 : ite(79, 38, 95) : BV:8
97 : ite(78, 35, 96) : BV:8
98 : ite(77, 32, 97) : BV:8
99 : ite(76, 29, 98) : BV:8
100 : 1 { 0x1 +1.11e129 } : BV:32
101 : bvadd(100, 24, 25) : BV:32
102 : eq(101, 27) : BOOL
103 : eq(101, 30) : BOOL
104 : eq(101, 33) : BOOL
105 : eq(101, 36) : BOOL
106 : eq(101, 39) : BOOL
107 : eq(101, 42) : BOOL
108 : eq(101, 45) : BOOL
109 : eq(101, 48) : BOOL
110 : eq(101, 25) : BOOL
111 : eq(101, 52) : BOOL
112 : eq(101, 55) : BOOL
113 : eq(101, 58) : BOOL
114 : ite(113, 60, 61) : BV:8
115 : ite(112, 57, 114) : BV:8
116 : ite(111, 54, 115) : BV:8
117 : ite(110, 51, 116) : BV:8
118 : ite(109, 38, 117) : BV:8
119 : ite(108, 47, 118) : BV:8
120 : ite(107, 44, 119) : BV:8
121 : ite(106, 41, 120) : BV:8
122 : ite(105, 38, 121) : BV:8
123 : ite(104, 35, 122) : BV:8
124 : ite(103, 32, 123) : BV:8
125 : ite(102, 29, 124) : BV:8
126 : bvadd(24, 25) : BV:32
127 : eq(126, 27) : BOOL
128 : eq(126, 30) : BOOL
129 : eq(126, 33) : BOOL
130 : eq(126, 36) : BOOL
131 : eq(126, 39) : BOOL
132 : eq(126, 42) : BOOL
133 : eq(126, 45) : BOOL
134 : eq(126, 48) : BOOL
135 : eq(126, 25) : BOOL
136 : eq(126, 52) : BOOL
137 : eq(126, 55) : BOOL
138 : eq(126, 58) : BOOL
139 : ite(138, 60, 61) : BV:8
140 : ite(137, 57, 139) : BV:8
141 : ite(136, 54, 140) : BV:8
142 : ite(135, 51, 141) : BV:8
143 : ite(134, 38, 142) : BV:8
144 : ite(133, 47, 143) : BV:8
145 : ite(132, 44, 144) : BV:8
146 : ite(131, 41, 145) : BV:8
147 : ite(130, 38, 146) : BV:8
148 : ite(129, 35, 147) : BV:8
149 : ite(128, 32, 148) : BV:8
150 : ite(127, 29, 149) : BV:8
151 : bvconcat(73, 99, 125, 150) : BV:32
152 : ite(20, 21, 151) : BV:32
153 : lambda(19, 152) : FUNCTION[BV:32 -> BV:32]
154 : map(18, 153) : MAP[BV:32 -> BV:32]
155 : sum(1, 2, 154) : SUM[UNIT,MAP[BV:32 -> BV:32]]
156 : sym_const(155) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 1 { 0x1 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4096 { 0x1000 +1.48828e129 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4097 { 0x1001 +1.48840e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(1, 1) : BOOL
19 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 1) : BV:32
23 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
26 : eq(24, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
29 : eq(24, 28) : BOOL
30 : 43 { 0x2b } : BV:8
31 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
32 : eq(24, 31) : BOOL
33 : 241 { 0xf1 -15 } : BV:8
34 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
35 : eq(24, 34) : BOOL
36 : 64 { 0x40 } : BV:8
37 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
38 : eq(24, 37) : BOOL
39 : 68 { 0x44 } : BV:8
40 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
41 : eq(24, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
44 : eq(24, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
47 : eq(24, 46) : BOOL
48 : eq(24, 23) : BOOL
49 : 4 { 0x4 } : BV:8
50 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
51 : eq(24, 50) : BOOL
52 : 159 { 0x9f -97 } : BV:8
53 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
54 : eq(24, 53) : BOOL
55 : 128 { 0x80 -128 } : BV:8
56 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
57 : eq(24, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(48, 49, 62) : BV:8
64 : ite(47, 36, 63) : BV:8
65 : ite(44, 45, 64) : BV:8
66 : ite(41, 42, 65) : BV:8
67 : ite(38, 39, 66) : BV:8
68 : ite(35, 36, 67) : BV:8
69 : ite(32, 33, 68) : BV:8
70 : ite(29, 30, 69) : BV:8
71 : ite(26, 27, 70) : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : bvadd(72, 22, 23) : BV:32
74 : eq(73, 25) : BOOL
75 : eq(73, 28) : BOOL
76 : eq(73, 31) : BOOL
77 : eq(73, 34) : BOOL
78 : eq(73, 37) : BOOL
79 : eq(73, 40) : BOOL
80 : eq(73, 43) : BOOL
81 : eq(73, 46) : BOOL
82 : eq(73, 23) : BOOL
83 : eq(73, 50) : BOOL
84 : eq(73, 53) : BOOL
85 : eq(73, 56) : BOOL
86 : ite(85, 58, 59) : BV:8
87 : ite(84, 55, 86) : BV:8
88 : ite(83, 52, 87) : BV:8
89 : ite(82, 49, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 45, 90) : BV:8
92 : ite(79, 42, 91) : BV:8
93 : ite(78, 39, 92) : BV:8
94 : ite(77, 36, 93) : BV:8
95 : ite(76, 33, 94) : BV:8
96 : ite(75, 30, 95) : BV:8
97 : ite(74, 27, 96) : BV:8
98 : bvadd(15, 22, 23) : BV:32
99 : eq(98, 25) : BOOL
100 : eq(98, 28) : BOOL
101 : eq(98, 31) : BOOL
102 : eq(98, 34) : BOOL
103 : eq(98, 37) : BOOL
104 : eq(98, 40) : BOOL
105 : eq(98, 43) : BOOL
106 : eq(98, 46) : BOOL
107 : eq(98, 23) : BOOL
108 : eq(98, 50) : BOOL
109 : eq(98, 53) : BOOL
110 : eq(98, 56) : BOOL
111 : ite(110, 58, 59) : BV:8
112 : ite(109, 55, 111) : BV:8
113 : ite(108, 52, 112) : BV:8
114 : ite(107, 49, 113) : BV:8
115 : ite(106, 36, 114) : BV:8
116 : ite(105, 45, 115) : BV:8
117 : ite(104, 42, 116) : BV:8
118 : ite(103, 39, 117) : BV:8
119 : ite(102, 36, 118) : BV:8
120 : ite(101, 33, 119) : BV:8
121 : ite(100, 30, 120) : BV:8
122 : ite(99, 27, 121) : BV:8
123 : bvadd(22, 23) : BV:32
124 : eq(123, 25) : BOOL
125 : eq(123, 28) : BOOL
126 : eq(123, 31) : BOOL
127 : eq(123, 34) : BOOL
128 : eq(123, 37) : BOOL
129 : eq(123, 40) : BOOL
130 : eq(123, 43) : BOOL
131 : eq(123, 46) : BOOL
132 : eq(123, 23) : BOOL
133 : eq(123, 50) : BOOL
134 : eq(123, 53) : BOOL
135 : eq(123, 56) : BOOL
136 : ite(135, 58, 59) : BV:8
137 : ite(134, 55, 136) : BV:8
138 : ite(133, 52, 137) : BV:8
139 : ite(132, 49, 138) : BV:8
140 : ite(131, 36, 139) : BV:8
141 : ite(130, 45, 140) : BV:8
142 : ite(129, 42, 141) : BV:8
143 : ite(128, 39, 142) : BV:8
144 : ite(127, 36, 143) : BV:8
145 : ite(126, 33, 144) : BV:8
146 : ite(125, 30, 145) : BV:8
147 : ite(124, 27, 146) : BV:8
148 : bvconcat(71, 97, 122, 147) : BV:32
149 : ite(18, 19, 148) : BV:32
150 : sum(16, 17, 149) : SUM[UNIT,BV:32]
151 : sym_const(150) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 726313869 { 0x2b4aab8d +1.58336031e215 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43695Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4096 { 0x1000 +1.48828e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43696Var : BV:32
18 : eq(17, 2) : BOOL
19 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
26 : eq(24, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
29 : eq(24, 28) : BOOL
30 : 43 { 0x2b } : BV:8
31 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
32 : eq(24, 31) : BOOL
33 : 241 { 0xf1 -15 } : BV:8
34 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
35 : eq(24, 34) : BOOL
36 : 64 { 0x40 } : BV:8
37 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
38 : eq(24, 37) : BOOL
39 : 68 { 0x44 } : BV:8
40 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
41 : eq(24, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
44 : eq(24, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
47 : eq(24, 46) : BOOL
48 : eq(24, 23) : BOOL
49 : 4 { 0x4 } : BV:8
50 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
51 : eq(24, 50) : BOOL
52 : 159 { 0x9f -97 } : BV:8
53 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
54 : eq(24, 53) : BOOL
55 : 128 { 0x80 -128 } : BV:8
56 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
57 : eq(24, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(48, 49, 62) : BV:8
64 : ite(47, 36, 63) : BV:8
65 : ite(44, 45, 64) : BV:8
66 : ite(41, 42, 65) : BV:8
67 : ite(38, 39, 66) : BV:8
68 : ite(35, 36, 67) : BV:8
69 : ite(32, 33, 68) : BV:8
70 : ite(29, 30, 69) : BV:8
71 : ite(26, 27, 70) : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : bvadd(72, 22, 23) : BV:32
74 : eq(73, 25) : BOOL
75 : eq(73, 28) : BOOL
76 : eq(73, 31) : BOOL
77 : eq(73, 34) : BOOL
78 : eq(73, 37) : BOOL
79 : eq(73, 40) : BOOL
80 : eq(73, 43) : BOOL
81 : eq(73, 46) : BOOL
82 : eq(73, 23) : BOOL
83 : eq(73, 50) : BOOL
84 : eq(73, 53) : BOOL
85 : eq(73, 56) : BOOL
86 : ite(85, 58, 59) : BV:8
87 : ite(84, 55, 86) : BV:8
88 : ite(83, 52, 87) : BV:8
89 : ite(82, 49, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 45, 90) : BV:8
92 : ite(79, 42, 91) : BV:8
93 : ite(78, 39, 92) : BV:8
94 : ite(77, 36, 93) : BV:8
95 : ite(76, 33, 94) : BV:8
96 : ite(75, 30, 95) : BV:8
97 : ite(74, 27, 96) : BV:8
98 : 1 { 0x1 +1.11e129 } : BV:32
99 : bvadd(98, 22, 23) : BV:32
100 : eq(99, 25) : BOOL
101 : eq(99, 28) : BOOL
102 : eq(99, 31) : BOOL
103 : eq(99, 34) : BOOL
104 : eq(99, 37) : BOOL
105 : eq(99, 40) : BOOL
106 : eq(99, 43) : BOOL
107 : eq(99, 46) : BOOL
108 : eq(99, 23) : BOOL
109 : eq(99, 50) : BOOL
110 : eq(99, 53) : BOOL
111 : eq(99, 56) : BOOL
112 : ite(111, 58, 59) : BV:8
113 : ite(110, 55, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 49, 114) : BV:8
116 : ite(107, 36, 115) : BV:8
117 : ite(106, 45, 116) : BV:8
118 : ite(105, 42, 117) : BV:8
119 : ite(104, 39, 118) : BV:8
120 : ite(103, 36, 119) : BV:8
121 : ite(102, 33, 120) : BV:8
122 : ite(101, 30, 121) : BV:8
123 : ite(100, 27, 122) : BV:8
124 : bvadd(22, 23) : BV:32
125 : eq(124, 25) : BOOL
126 : eq(124, 28) : BOOL
127 : eq(124, 31) : BOOL
128 : eq(124, 34) : BOOL
129 : eq(124, 37) : BOOL
130 : eq(124, 40) : BOOL
131 : eq(124, 43) : BOOL
132 : eq(124, 46) : BOOL
133 : eq(124, 23) : BOOL
134 : eq(124, 50) : BOOL
135 : eq(124, 53) : BOOL
136 : eq(124, 56) : BOOL
137 : ite(136, 58, 59) : BV:8
138 : ite(135, 55, 137) : BV:8
139 : ite(134, 52, 138) : BV:8
140 : ite(133, 49, 139) : BV:8
141 : ite(132, 36, 140) : BV:8
142 : ite(131, 45, 141) : BV:8
143 : ite(130, 42, 142) : BV:8
144 : ite(129, 39, 143) : BV:8
145 : ite(128, 36, 144) : BV:8
146 : ite(127, 33, 145) : BV:8
147 : ite(126, 30, 146) : BV:8
148 : ite(125, 27, 147) : BV:8
149 : bvconcat(71, 97, 123, 148) : BV:32
150 : ite(18, 19, 149) : BV:32
151 : lambda(17, 150) : FUNCTION[BV:32 -> BV:32]
152 : map(16, 151) : MAP[BV:32 -> BV:32]
153 : sym_const(152) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L3%32%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1310308063 { 0x4e19b6df +1.20089328e29 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 739316064 { 0x2c111160 +1.13334274e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 739316067 { 0x2c111163 +1.13334310e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2923075272 { 0xae3a96c8 -1371892024 -1.45772647e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2923075275 { 0xae3a96cb -1371892021 -1.45772683e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 772868388 { 0x2e110924 +1.13309144e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 772868391 { 0x2e110927 +1.13309180e221 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43555Var : BV:32
2 : Lambda43556Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4096 { 0x1000 +1.48828e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4097 { 0x1001 +1.48840e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4098 { 0x1002 +1.48851e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
55 : eq(53, 54) : BOOL
56 : 160 { 0xa0 -96 } : BV:8
57 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
58 : eq(53, 57) : BOOL
59 : 43 { 0x2b } : BV:8
60 : eq(53, 51) : BOOL
61 : 241 { 0xf1 -15 } : BV:8
62 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
63 : eq(53, 62) : BOOL
64 : 64 { 0x40 } : BV:8
65 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
66 : eq(53, 65) : BOOL
67 : 68 { 0x44 } : BV:8
68 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
69 : eq(53, 68) : BOOL
70 : 16 { 0x10 } : BV:8
71 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
72 : eq(53, 71) : BOOL
73 : 8 { 0x8 } : BV:8
74 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
75 : eq(53, 74) : BOOL
76 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
77 : eq(53, 76) : BOOL
78 : 4 { 0x4 } : BV:8
79 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
80 : eq(53, 79) : BOOL
81 : 159 { 0x9f -97 } : BV:8
82 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
83 : eq(53, 82) : BOOL
84 : 128 { 0x80 -128 } : BV:8
85 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
86 : eq(53, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(80, 81, 90) : BV:8
92 : ite(77, 78, 91) : BV:8
93 : ite(75, 64, 92) : BV:8
94 : ite(72, 73, 93) : BV:8
95 : ite(69, 70, 94) : BV:8
96 : ite(66, 67, 95) : BV:8
97 : ite(63, 64, 96) : BV:8
98 : ite(60, 61, 97) : BV:8
99 : ite(58, 59, 98) : BV:8
100 : ite(55, 56, 99) : BV:8
101 : bvadd(79, 52) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 57) : BOOL
104 : eq(101, 51) : BOOL
105 : eq(101, 62) : BOOL
106 : eq(101, 65) : BOOL
107 : eq(101, 68) : BOOL
108 : eq(101, 71) : BOOL
109 : eq(101, 74) : BOOL
110 : eq(101, 76) : BOOL
111 : eq(101, 79) : BOOL
112 : eq(101, 82) : BOOL
113 : eq(101, 85) : BOOL
114 : ite(113, 87, 88) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 81, 115) : BV:8
117 : ite(110, 78, 116) : BV:8
118 : ite(109, 64, 117) : BV:8
119 : ite(108, 73, 118) : BV:8
120 : ite(107, 70, 119) : BV:8
121 : ite(106, 67, 120) : BV:8
122 : ite(105, 64, 121) : BV:8
123 : ite(104, 61, 122) : BV:8
124 : ite(103, 59, 123) : BV:8
125 : ite(102, 56, 124) : BV:8
126 : bvadd(82, 52) : BV:32
127 : eq(126, 54) : BOOL
128 : eq(126, 57) : BOOL
129 : eq(126, 51) : BOOL
130 : eq(126, 62) : BOOL
131 : eq(126, 65) : BOOL
132 : eq(126, 68) : BOOL
133 : eq(126, 71) : BOOL
134 : eq(126, 74) : BOOL
135 : eq(126, 76) : BOOL
136 : eq(126, 79) : BOOL
137 : eq(126, 82) : BOOL
138 : eq(126, 85) : BOOL
139 : ite(138, 87, 88) : BV:8
140 : ite(137, 84, 139) : BV:8
141 : ite(136, 81, 140) : BV:8
142 : ite(135, 78, 141) : BV:8
143 : ite(134, 64, 142) : BV:8
144 : ite(133, 73, 143) : BV:8
145 : ite(132, 70, 144) : BV:8
146 : ite(131, 67, 145) : BV:8
147 : ite(130, 64, 146) : BV:8
148 : ite(129, 61, 147) : BV:8
149 : ite(128, 59, 148) : BV:8
150 : ite(127, 56, 149) : BV:8
151 : bvadd(71, 52) : BV:32
152 : eq(151, 54) : BOOL
153 : eq(151, 57) : BOOL
154 : eq(151, 51) : BOOL
155 : eq(151, 62) : BOOL
156 : eq(151, 65) : BOOL
157 : eq(151, 68) : BOOL
158 : eq(151, 71) : BOOL
159 : eq(151, 74) : BOOL
160 : eq(151, 76) : BOOL
161 : eq(151, 79) : BOOL
162 : eq(151, 82) : BOOL
163 : eq(151, 85) : BOOL
164 : ite(163, 87, 88) : BV:8
165 : ite(162, 84, 164) : BV:8
166 : ite(161, 81, 165) : BV:8
167 : ite(160, 78, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 73, 168) : BV:8
170 : ite(157, 70, 169) : BV:8
171 : ite(156, 67, 170) : BV:8
172 : ite(155, 64, 171) : BV:8
173 : ite(154, 61, 172) : BV:8
174 : ite(153, 59, 173) : BV:8
175 : ite(152, 56, 174) : BV:8
176 : bvconcat(100, 125, 150, 175) : BV:32
177 : bvadd(48, 50, 176) : BV:32
178 : eq(177, 54) : BOOL
179 : eq(177, 57) : BOOL
180 : eq(177, 51) : BOOL
181 : eq(177, 62) : BOOL
182 : eq(177, 65) : BOOL
183 : eq(177, 68) : BOOL
184 : eq(177, 71) : BOOL
185 : eq(177, 74) : BOOL
186 : eq(177, 76) : BOOL
187 : eq(177, 79) : BOOL
188 : eq(177, 82) : BOOL
189 : eq(177, 85) : BOOL
190 : ite(189, 87, 88) : BV:8
191 : ite(188, 84, 190) : BV:8
192 : ite(187, 81, 191) : BV:8
193 : ite(186, 78, 192) : BV:8
194 : ite(185, 64, 193) : BV:8
195 : ite(184, 73, 194) : BV:8
196 : ite(183, 70, 195) : BV:8
197 : ite(182, 67, 196) : BV:8
198 : ite(181, 64, 197) : BV:8
199 : ite(180, 61, 198) : BV:8
200 : ite(179, 59, 199) : BV:8
201 : ite(178, 56, 200) : BV:8
202 : 2 { 0x2 +1.23e129 } : BV:32
203 : bvadd(202, 50, 176) : BV:32
204 : eq(203, 54) : BOOL
205 : eq(203, 57) : BOOL
206 : eq(203, 51) : BOOL
207 : eq(203, 62) : BOOL
208 : eq(203, 65) : BOOL
209 : eq(203, 68) : BOOL
210 : eq(203, 71) : BOOL
211 : eq(203, 74) : BOOL
212 : eq(203, 76) : BOOL
213 : eq(203, 79) : BOOL
214 : eq(203, 82) : BOOL
215 : eq(203, 85) : BOOL
216 : ite(215, 87, 88) : BV:8
217 : ite(214, 84, 216) : BV:8
218 : ite(213, 81, 217) : BV:8
219 : ite(212, 78, 218) : BV:8
220 : ite(211, 64, 219) : BV:8
221 : ite(210, 73, 220) : BV:8
222 : ite(209, 70, 221) : BV:8
223 : ite(208, 67, 222) : BV:8
224 : ite(207, 64, 223) : BV:8
225 : ite(206, 61, 224) : BV:8
226 : ite(205, 59, 225) : BV:8
227 : ite(204, 56, 226) : BV:8
228 : 1 { 0x1 +1.11e129 } : BV:32
229 : bvadd(228, 50, 176) : BV:32
230 : eq(229, 54) : BOOL
231 : eq(229, 57) : BOOL
232 : eq(229, 51) : BOOL
233 : eq(229, 62) : BOOL
234 : eq(229, 65) : BOOL
235 : eq(229, 68) : BOOL
236 : eq(229, 71) : BOOL
237 : eq(229, 74) : BOOL
238 : eq(229, 76) : BOOL
239 : eq(229, 79) : BOOL
240 : eq(229, 82) : BOOL
241 : eq(229, 85) : BOOL
242 : ite(241, 87, 88) : BV:8
243 : ite(240, 84, 242) : BV:8
244 : ite(239, 81, 243) : BV:8
245 : ite(238, 78, 244) : BV:8
246 : ite(237, 64, 245) : BV:8
247 : ite(236, 73, 246) : BV:8
248 : ite(235, 70, 247) : BV:8
249 : ite(234, 67, 248) : BV:8
250 : ite(233, 64, 249) : BV:8
251 : ite(232, 61, 250) : BV:8
252 : ite(231, 59, 251) : BV:8
253 : ite(230, 56, 252) : BV:8
254 : bvadd(50, 176) : BV:32
255 : eq(254, 54) : BOOL
256 : eq(254, 57) : BOOL
257 : eq(254, 51) : BOOL
258 : eq(254, 62) : BOOL
259 : eq(254, 65) : BOOL
260 : eq(254, 68) : BOOL
261 : eq(254, 71) : BOOL
262 : eq(254, 74) : BOOL
263 : eq(254, 76) : BOOL
264 : eq(254, 79) : BOOL
265 : eq(254, 82) : BOOL
266 : eq(254, 85) : BOOL
267 : ite(266, 87, 88) : BV:8
268 : ite(265, 84, 267) : BV:8
269 : ite(264, 81, 268) : BV:8
270 : ite(263, 78, 269) : BV:8
271 : ite(262, 64, 270) : BV:8
272 : ite(261, 73, 271) : BV:8
273 : ite(260, 70, 272) : BV:8
274 : ite(259, 67, 273) : BV:8
275 : ite(258, 64, 274) : BV:8
276 : ite(257, 61, 275) : BV:8
277 : ite(256, 59, 276) : BV:8
278 : ite(255, 56, 277) : BV:8
279 : bvconcat(201, 227, 253, 278) : BV:32
280 : ite(6, 3, 279) : BV:32
281 : ite(47, 279, 280) : BV:32
282 : ite(6, 3, 281) : BV:32
283 : lambda(1, 2, 282) : FUNCTION[BV:32,BV:32 -> BV:32]
284 : sym_const(283) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43560Var : BV:32
2 : Lambda43561Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4096 { 0x1000 +1.48828e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4098 { 0x1002 +1.48851e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3221225600 ] -> true, [ 3221225601; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3221225600 ] -> true, [ 3221225601; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43569Var : BV:32
2 : Lambda43570Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4096 { 0x1000 +1.48828e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4098 { 0x1002 +1.48851e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43565Var : BV:32
2 : Lambda43566Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 160 { 0xa0 -96 } : BV:8
16 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
17 : eq(12, 16) : BOOL
18 : 43 { 0x2b } : BV:8
19 : eq(12, 10) : BOOL
20 : 241 { 0xf1 -15 } : BV:8
21 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
22 : eq(12, 21) : BOOL
23 : 64 { 0x40 } : BV:8
24 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
25 : eq(12, 24) : BOOL
26 : 68 { 0x44 } : BV:8
27 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
28 : eq(12, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
31 : eq(12, 30) : BOOL
32 : 8 { 0x8 } : BV:8
33 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
34 : eq(12, 33) : BOOL
35 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
36 : eq(12, 35) : BOOL
37 : 4 { 0x4 } : BV:8
38 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
39 : eq(12, 38) : BOOL
40 : 159 { 0x9f -97 } : BV:8
41 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
42 : eq(12, 41) : BOOL
43 : 128 { 0x80 -128 } : BV:8
44 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
45 : eq(12, 44) : BOOL
46 : 1 { 0x1 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(39, 40, 49) : BV:8
51 : ite(36, 37, 50) : BV:8
52 : ite(34, 23, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : ite(22, 23, 55) : BV:8
57 : ite(19, 20, 56) : BV:8
58 : ite(17, 18, 57) : BV:8
59 : ite(14, 15, 58) : BV:8
60 : bvadd(38, 11) : BV:32
61 : eq(60, 13) : BOOL
62 : eq(60, 16) : BOOL
63 : eq(60, 10) : BOOL
64 : eq(60, 21) : BOOL
65 : eq(60, 24) : BOOL
66 : eq(60, 27) : BOOL
67 : eq(60, 30) : BOOL
68 : eq(60, 33) : BOOL
69 : eq(60, 35) : BOOL
70 : eq(60, 38) : BOOL
71 : eq(60, 41) : BOOL
72 : eq(60, 44) : BOOL
73 : ite(72, 46, 47) : BV:8
74 : ite(71, 43, 73) : BV:8
75 : ite(70, 40, 74) : BV:8
76 : ite(69, 37, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 32, 77) : BV:8
79 : ite(66, 29, 78) : BV:8
80 : ite(65, 26, 79) : BV:8
81 : ite(64, 23, 80) : BV:8
82 : ite(63, 20, 81) : BV:8
83 : ite(62, 18, 82) : BV:8
84 : ite(61, 15, 83) : BV:8
85 : bvadd(41, 11) : BV:32
86 : eq(85, 13) : BOOL
87 : eq(85, 16) : BOOL
88 : eq(85, 10) : BOOL
89 : eq(85, 21) : BOOL
90 : eq(85, 24) : BOOL
91 : eq(85, 27) : BOOL
92 : eq(85, 30) : BOOL
93 : eq(85, 33) : BOOL
94 : eq(85, 35) : BOOL
95 : eq(85, 38) : BOOL
96 : eq(85, 41) : BOOL
97 : eq(85, 44) : BOOL
98 : ite(97, 46, 47) : BV:8
99 : ite(96, 43, 98) : BV:8
100 : ite(95, 40, 99) : BV:8
101 : ite(94, 37, 100) : BV:8
102 : ite(93, 23, 101) : BV:8
103 : ite(92, 32, 102) : BV:8
104 : ite(91, 29, 103) : BV:8
105 : ite(90, 26, 104) : BV:8
106 : ite(89, 23, 105) : BV:8
107 : ite(88, 20, 106) : BV:8
108 : ite(87, 18, 107) : BV:8
109 : ite(86, 15, 108) : BV:8
110 : bvadd(30, 11) : BV:32
111 : eq(110, 13) : BOOL
112 : eq(110, 16) : BOOL
113 : eq(110, 10) : BOOL
114 : eq(110, 21) : BOOL
115 : eq(110, 24) : BOOL
116 : eq(110, 27) : BOOL
117 : eq(110, 30) : BOOL
118 : eq(110, 33) : BOOL
119 : eq(110, 35) : BOOL
120 : eq(110, 38) : BOOL
121 : eq(110, 41) : BOOL
122 : eq(110, 44) : BOOL
123 : ite(122, 46, 47) : BV:8
124 : ite(121, 43, 123) : BV:8
125 : ite(120, 40, 124) : BV:8
126 : ite(119, 37, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 32, 127) : BV:8
129 : ite(116, 29, 128) : BV:8
130 : ite(115, 26, 129) : BV:8
131 : ite(114, 23, 130) : BV:8
132 : ite(113, 20, 131) : BV:8
133 : ite(112, 18, 132) : BV:8
134 : ite(111, 15, 133) : BV:8
135 : bvconcat(59, 84, 109, 134) : BV:32
136 : bvadd(7, 9, 135) : BV:32
137 : eq(136, 13) : BOOL
138 : eq(136, 16) : BOOL
139 : eq(136, 10) : BOOL
140 : eq(136, 21) : BOOL
141 : eq(136, 24) : BOOL
142 : eq(136, 27) : BOOL
143 : eq(136, 30) : BOOL
144 : eq(136, 33) : BOOL
145 : eq(136, 35) : BOOL
146 : eq(136, 38) : BOOL
147 : eq(136, 41) : BOOL
148 : eq(136, 44) : BOOL
149 : ite(148, 46, 47) : BV:8
150 : ite(147, 43, 149) : BV:8
151 : ite(146, 40, 150) : BV:8
152 : ite(145, 37, 151) : BV:8
153 : ite(144, 23, 152) : BV:8
154 : ite(143, 32, 153) : BV:8
155 : ite(142, 29, 154) : BV:8
156 : ite(141, 26, 155) : BV:8
157 : ite(140, 23, 156) : BV:8
158 : ite(139, 20, 157) : BV:8
159 : ite(138, 18, 158) : BV:8
160 : ite(137, 15, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 9, 135) : BV:32
163 : eq(162, 13) : BOOL
164 : eq(162, 16) : BOOL
165 : eq(162, 10) : BOOL
166 : eq(162, 21) : BOOL
167 : eq(162, 24) : BOOL
168 : eq(162, 27) : BOOL
169 : eq(162, 30) : BOOL
170 : eq(162, 33) : BOOL
171 : eq(162, 35) : BOOL
172 : eq(162, 38) : BOOL
173 : eq(162, 41) : BOOL
174 : eq(162, 44) : BOOL
175 : ite(174, 46, 47) : BV:8
176 : ite(173, 43, 175) : BV:8
177 : ite(172, 40, 176) : BV:8
178 : ite(171, 37, 177) : BV:8
179 : ite(170, 23, 178) : BV:8
180 : ite(169, 32, 179) : BV:8
181 : ite(168, 29, 180) : BV:8
182 : ite(167, 26, 181) : BV:8
183 : ite(166, 23, 182) : BV:8
184 : ite(165, 20, 183) : BV:8
185 : ite(164, 18, 184) : BV:8
186 : ite(163, 15, 185) : BV:8
187 : 1 { 0x1 +1.11e129 } : BV:32
188 : bvadd(187, 9, 135) : BV:32
189 : eq(188, 13) : BOOL
190 : eq(188, 16) : BOOL
191 : eq(188, 10) : BOOL
192 : eq(188, 21) : BOOL
193 : eq(188, 24) : BOOL
194 : eq(188, 27) : BOOL
195 : eq(188, 30) : BOOL
196 : eq(188, 33) : BOOL
197 : eq(188, 35) : BOOL
198 : eq(188, 38) : BOOL
199 : eq(188, 41) : BOOL
200 : eq(188, 44) : BOOL
201 : ite(200, 46, 47) : BV:8
202 : ite(199, 43, 201) : BV:8
203 : ite(198, 40, 202) : BV:8
204 : ite(197, 37, 203) : BV:8
205 : ite(196, 23, 204) : BV:8
206 : ite(195, 32, 205) : BV:8
207 : ite(194, 29, 206) : BV:8
208 : ite(193, 26, 207) : BV:8
209 : ite(192, 23, 208) : BV:8
210 : ite(191, 20, 209) : BV:8
211 : ite(190, 18, 210) : BV:8
212 : ite(189, 15, 211) : BV:8
213 : bvadd(9, 135) : BV:32
214 : eq(213, 13) : BOOL
215 : eq(213, 16) : BOOL
216 : eq(213, 10) : BOOL
217 : eq(213, 21) : BOOL
218 : eq(213, 24) : BOOL
219 : eq(213, 27) : BOOL
220 : eq(213, 30) : BOOL
221 : eq(213, 33) : BOOL
222 : eq(213, 35) : BOOL
223 : eq(213, 38) : BOOL
224 : eq(213, 41) : BOOL
225 : eq(213, 44) : BOOL
226 : ite(225, 46, 47) : BV:8
227 : ite(224, 43, 226) : BV:8
228 : ite(223, 40, 227) : BV:8
229 : ite(222, 37, 228) : BV:8
230 : ite(221, 23, 229) : BV:8
231 : ite(220, 32, 230) : BV:8
232 : ite(219, 29, 231) : BV:8
233 : ite(218, 26, 232) : BV:8
234 : ite(217, 23, 233) : BV:8
235 : ite(216, 20, 234) : BV:8
236 : ite(215, 18, 235) : BV:8
237 : ite(214, 15, 236) : BV:8
238 : bvconcat(160, 186, 212, 237) : BV:32
239 : ite(6, 3, 238) : BV:32
240 : lambda(1, 2, 239) : FUNCTION[BV:32,BV:32 -> BV:32]
241 : sym_const(240) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43576Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
11 : eq(9, 10) : BOOL
12 : 160 { 0xa0 -96 } : BV:8
13 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
14 : eq(9, 13) : BOOL
15 : 43 { 0x2b } : BV:8
16 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
17 : eq(9, 16) : BOOL
18 : 241 { 0xf1 -15 } : BV:8
19 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
20 : eq(9, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
23 : eq(9, 22) : BOOL
24 : 68 { 0x44 } : BV:8
25 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
26 : eq(9, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
29 : eq(9, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
32 : eq(9, 31) : BOOL
33 : eq(9, 8) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
36 : eq(9, 35) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
39 : eq(9, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
42 : eq(9, 41) : BOOL
43 : 1 { 0x1 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(32, 21, 48) : BV:8
50 : ite(29, 30, 49) : BV:8
51 : ite(26, 27, 50) : BV:8
52 : ite(23, 24, 51) : BV:8
53 : ite(20, 21, 52) : BV:8
54 : ite(17, 18, 53) : BV:8
55 : ite(14, 15, 54) : BV:8
56 : ite(11, 12, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 7, 8) : BV:32
59 : eq(58, 10) : BOOL
60 : eq(58, 13) : BOOL
61 : eq(58, 16) : BOOL
62 : eq(58, 19) : BOOL
63 : eq(58, 22) : BOOL
64 : eq(58, 25) : BOOL
65 : eq(58, 28) : BOOL
66 : eq(58, 31) : BOOL
67 : eq(58, 8) : BOOL
68 : eq(58, 35) : BOOL
69 : eq(58, 38) : BOOL
70 : eq(58, 41) : BOOL
71 : ite(70, 43, 44) : BV:8
72 : ite(69, 40, 71) : BV:8
73 : ite(68, 37, 72) : BV:8
74 : ite(67, 34, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 30, 75) : BV:8
77 : ite(64, 27, 76) : BV:8
78 : ite(63, 24, 77) : BV:8
79 : ite(62, 21, 78) : BV:8
80 : ite(61, 18, 79) : BV:8
81 : ite(60, 15, 80) : BV:8
82 : ite(59, 12, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 7, 8) : BV:32
85 : eq(84, 10) : BOOL
86 : eq(84, 13) : BOOL
87 : eq(84, 16) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : eq(84, 31) : BOOL
93 : eq(84, 8) : BOOL
94 : eq(84, 35) : BOOL
95 : eq(84, 38) : BOOL
96 : eq(84, 41) : BOOL
97 : ite(96, 43, 44) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 37, 98) : BV:8
100 : ite(93, 34, 99) : BV:8
101 : ite(92, 21, 100) : BV:8
102 : ite(91, 30, 101) : BV:8
103 : ite(90, 27, 102) : BV:8
104 : ite(89, 24, 103) : BV:8
105 : ite(88, 21, 104) : BV:8
106 : ite(87, 18, 105) : BV:8
107 : ite(86, 15, 106) : BV:8
108 : ite(85, 12, 107) : BV:8
109 : bvadd(7, 8) : BV:32
110 : eq(109, 10) : BOOL
111 : eq(109, 13) : BOOL
112 : eq(109, 16) : BOOL
113 : eq(109, 19) : BOOL
114 : eq(109, 22) : BOOL
115 : eq(109, 25) : BOOL
116 : eq(109, 28) : BOOL
117 : eq(109, 31) : BOOL
118 : eq(109, 8) : BOOL
119 : eq(109, 35) : BOOL
120 : eq(109, 38) : BOOL
121 : eq(109, 41) : BOOL
122 : ite(121, 43, 44) : BV:8
123 : ite(120, 40, 122) : BV:8
124 : ite(119, 37, 123) : BV:8
125 : ite(118, 34, 124) : BV:8
126 : ite(117, 21, 125) : BV:8
127 : ite(116, 30, 126) : BV:8
128 : ite(115, 27, 127) : BV:8
129 : ite(114, 24, 128) : BV:8
130 : ite(113, 21, 129) : BV:8
131 : ite(112, 18, 130) : BV:8
132 : ite(111, 15, 131) : BV:8
133 : ite(110, 12, 132) : BV:8
134 : bvconcat(56, 82, 108, 133) : BV:32
135 : ite(3, 4, 134) : BV:32
136 : lambda(1, 135) : FUNCTION[BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43580Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
11 : eq(9, 10) : BOOL
12 : 160 { 0xa0 -96 } : BV:8
13 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
14 : eq(9, 13) : BOOL
15 : 43 { 0x2b } : BV:8
16 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
17 : eq(9, 16) : BOOL
18 : 241 { 0xf1 -15 } : BV:8
19 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
20 : eq(9, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
23 : eq(9, 22) : BOOL
24 : 68 { 0x44 } : BV:8
25 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
26 : eq(9, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
29 : eq(9, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
32 : eq(9, 31) : BOOL
33 : eq(9, 8) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
36 : eq(9, 35) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
39 : eq(9, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
42 : eq(9, 41) : BOOL
43 : 1 { 0x1 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(32, 21, 48) : BV:8
50 : ite(29, 30, 49) : BV:8
51 : ite(26, 27, 50) : BV:8
52 : ite(23, 24, 51) : BV:8
53 : ite(20, 21, 52) : BV:8
54 : ite(17, 18, 53) : BV:8
55 : ite(14, 15, 54) : BV:8
56 : ite(11, 12, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 7, 8) : BV:32
59 : eq(58, 10) : BOOL
60 : eq(58, 13) : BOOL
61 : eq(58, 16) : BOOL
62 : eq(58, 19) : BOOL
63 : eq(58, 22) : BOOL
64 : eq(58, 25) : BOOL
65 : eq(58, 28) : BOOL
66 : eq(58, 31) : BOOL
67 : eq(58, 8) : BOOL
68 : eq(58, 35) : BOOL
69 : eq(58, 38) : BOOL
70 : eq(58, 41) : BOOL
71 : ite(70, 43, 44) : BV:8
72 : ite(69, 40, 71) : BV:8
73 : ite(68, 37, 72) : BV:8
74 : ite(67, 34, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 30, 75) : BV:8
77 : ite(64, 27, 76) : BV:8
78 : ite(63, 24, 77) : BV:8
79 : ite(62, 21, 78) : BV:8
80 : ite(61, 18, 79) : BV:8
81 : ite(60, 15, 80) : BV:8
82 : ite(59, 12, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 7, 8) : BV:32
85 : eq(84, 10) : BOOL
86 : eq(84, 13) : BOOL
87 : eq(84, 16) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : eq(84, 31) : BOOL
93 : eq(84, 8) : BOOL
94 : eq(84, 35) : BOOL
95 : eq(84, 38) : BOOL
96 : eq(84, 41) : BOOL
97 : ite(96, 43, 44) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 37, 98) : BV:8
100 : ite(93, 34, 99) : BV:8
101 : ite(92, 21, 100) : BV:8
102 : ite(91, 30, 101) : BV:8
103 : ite(90, 27, 102) : BV:8
104 : ite(89, 24, 103) : BV:8
105 : ite(88, 21, 104) : BV:8
106 : ite(87, 18, 105) : BV:8
107 : ite(86, 15, 106) : BV:8
108 : ite(85, 12, 107) : BV:8
109 : bvadd(7, 8) : BV:32
110 : eq(109, 10) : BOOL
111 : eq(109, 13) : BOOL
112 : eq(109, 16) : BOOL
113 : eq(109, 19) : BOOL
114 : eq(109, 22) : BOOL
115 : eq(109, 25) : BOOL
116 : eq(109, 28) : BOOL
117 : eq(109, 31) : BOOL
118 : eq(109, 8) : BOOL
119 : eq(109, 35) : BOOL
120 : eq(109, 38) : BOOL
121 : eq(109, 41) : BOOL
122 : ite(121, 43, 44) : BV:8
123 : ite(120, 40, 122) : BV:8
124 : ite(119, 37, 123) : BV:8
125 : ite(118, 34, 124) : BV:8
126 : ite(117, 21, 125) : BV:8
127 : ite(116, 30, 126) : BV:8
128 : ite(115, 27, 127) : BV:8
129 : ite(114, 24, 128) : BV:8
130 : ite(113, 21, 129) : BV:8
131 : ite(112, 18, 130) : BV:8
132 : ite(111, 15, 131) : BV:8
133 : ite(110, 12, 132) : BV:8
134 : bvconcat(56, 82, 108, 133) : BV:32
135 : ite(3, 4, 134) : BV:32
136 : lambda(1, 135) : FUNCTION[BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda43581Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
11 : eq(9, 10) : BOOL
12 : 160 { 0xa0 -96 } : BV:8
13 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
14 : eq(9, 13) : BOOL
15 : 43 { 0x2b } : BV:8
16 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
17 : eq(9, 16) : BOOL
18 : 241 { 0xf1 -15 } : BV:8
19 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
20 : eq(9, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
23 : eq(9, 22) : BOOL
24 : 68 { 0x44 } : BV:8
25 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
26 : eq(9, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
29 : eq(9, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
32 : eq(9, 31) : BOOL
33 : eq(9, 8) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
36 : eq(9, 35) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
39 : eq(9, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
42 : eq(9, 41) : BOOL
43 : 1 { 0x1 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(32, 21, 48) : BV:8
50 : ite(29, 30, 49) : BV:8
51 : ite(26, 27, 50) : BV:8
52 : ite(23, 24, 51) : BV:8
53 : ite(20, 21, 52) : BV:8
54 : ite(17, 18, 53) : BV:8
55 : ite(14, 15, 54) : BV:8
56 : ite(11, 12, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 7, 8) : BV:32
59 : eq(58, 10) : BOOL
60 : eq(58, 13) : BOOL
61 : eq(58, 16) : BOOL
62 : eq(58, 19) : BOOL
63 : eq(58, 22) : BOOL
64 : eq(58, 25) : BOOL
65 : eq(58, 28) : BOOL
66 : eq(58, 31) : BOOL
67 : eq(58, 8) : BOOL
68 : eq(58, 35) : BOOL
69 : eq(58, 38) : BOOL
70 : eq(58, 41) : BOOL
71 : ite(70, 43, 44) : BV:8
72 : ite(69, 40, 71) : BV:8
73 : ite(68, 37, 72) : BV:8
74 : ite(67, 34, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 30, 75) : BV:8
77 : ite(64, 27, 76) : BV:8
78 : ite(63, 24, 77) : BV:8
79 : ite(62, 21, 78) : BV:8
80 : ite(61, 18, 79) : BV:8
81 : ite(60, 15, 80) : BV:8
82 : ite(59, 12, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 7, 8) : BV:32
85 : eq(84, 10) : BOOL
86 : eq(84, 13) : BOOL
87 : eq(84, 16) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : eq(84, 31) : BOOL
93 : eq(84, 8) : BOOL
94 : eq(84, 35) : BOOL
95 : eq(84, 38) : BOOL
96 : eq(84, 41) : BOOL
97 : ite(96, 43, 44) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 37, 98) : BV:8
100 : ite(93, 34, 99) : BV:8
101 : ite(92, 21, 100) : BV:8
102 : ite(91, 30, 101) : BV:8
103 : ite(90, 27, 102) : BV:8
104 : ite(89, 24, 103) : BV:8
105 : ite(88, 21, 104) : BV:8
106 : ite(87, 18, 105) : BV:8
107 : ite(86, 15, 106) : BV:8
108 : ite(85, 12, 107) : BV:8
109 : bvadd(7, 8) : BV:32
110 : eq(109, 10) : BOOL
111 : eq(109, 13) : BOOL
112 : eq(109, 16) : BOOL
113 : eq(109, 19) : BOOL
114 : eq(109, 22) : BOOL
115 : eq(109, 25) : BOOL
116 : eq(109, 28) : BOOL
117 : eq(109, 31) : BOOL
118 : eq(109, 8) : BOOL
119 : eq(109, 35) : BOOL
120 : eq(109, 38) : BOOL
121 : eq(109, 41) : BOOL
122 : ite(121, 43, 44) : BV:8
123 : ite(120, 40, 122) : BV:8
124 : ite(119, 37, 123) : BV:8
125 : ite(118, 34, 124) : BV:8
126 : ite(117, 21, 125) : BV:8
127 : ite(116, 30, 126) : BV:8
128 : ite(115, 27, 127) : BV:8
129 : ite(114, 24, 128) : BV:8
130 : ite(113, 21, 129) : BV:8
131 : ite(112, 18, 130) : BV:8
132 : ite(111, 15, 131) : BV:8
133 : ite(110, 12, 132) : BV:8
134 : bvconcat(56, 82, 108, 133) : BV:32
135 : ite(3, 4, 134) : BV:32
136 : lambda(1, 135) : FUNCTION[BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1118817681
=counter_example_end
=global nodece 52 num_edges_traversed 1
=global nodece 52 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 53
=global nodece 53 nodece z3.ce4582.num_edges_traversed2
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3.ce4582 a83fa6ad476e34f1a89128bdbac874
=input.spec-%var-x-1
1 : Lambda43663Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43664Var : BV:32
18 : Lambda43665Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4096 { 0x1000 +1.48828e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4098 { 0x1002 +1.48851e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43666Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
82 : eq(80, 81) : BOOL
83 : 160 { 0xa0 -96 } : BV:8
84 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
85 : eq(80, 84) : BOOL
86 : 43 { 0x2b } : BV:8
87 : eq(80, 78) : BOOL
88 : 241 { 0xf1 -15 } : BV:8
89 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
90 : eq(80, 89) : BOOL
91 : 64 { 0x40 } : BV:8
92 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
93 : eq(80, 92) : BOOL
94 : 68 { 0x44 } : BV:8
95 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
96 : eq(80, 95) : BOOL
97 : 16 { 0x10 } : BV:8
98 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
99 : eq(80, 98) : BOOL
100 : 8 { 0x8 } : BV:8
101 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
102 : eq(80, 101) : BOOL
103 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
104 : eq(80, 103) : BOOL
105 : 4 { 0x4 } : BV:8
106 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
107 : eq(80, 106) : BOOL
108 : 159 { 0x9f -97 } : BV:8
109 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
110 : eq(80, 109) : BOOL
111 : 128 { 0x80 -128 } : BV:8
112 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
113 : eq(80, 112) : BOOL
114 : 1 { 0x1 } : BV:8
115 : 0 { 0x0 } : BV:8
116 : ite(113, 114, 115) : BV:8
117 : ite(110, 111, 116) : BV:8
118 : ite(107, 108, 117) : BV:8
119 : ite(104, 105, 118) : BV:8
120 : ite(102, 91, 119) : BV:8
121 : ite(99, 100, 120) : BV:8
122 : ite(96, 97, 121) : BV:8
123 : ite(93, 94, 122) : BV:8
124 : ite(90, 91, 123) : BV:8
125 : ite(87, 88, 124) : BV:8
126 : ite(85, 86, 125) : BV:8
127 : ite(82, 83, 126) : BV:8
128 : bvadd(106, 79) : BV:32
129 : eq(128, 81) : BOOL
130 : eq(128, 84) : BOOL
131 : eq(128, 78) : BOOL
132 : eq(128, 89) : BOOL
133 : eq(128, 92) : BOOL
134 : eq(128, 95) : BOOL
135 : eq(128, 98) : BOOL
136 : eq(128, 101) : BOOL
137 : eq(128, 103) : BOOL
138 : eq(128, 106) : BOOL
139 : eq(128, 109) : BOOL
140 : eq(128, 112) : BOOL
141 : ite(140, 114, 115) : BV:8
142 : ite(139, 111, 141) : BV:8
143 : ite(138, 108, 142) : BV:8
144 : ite(137, 105, 143) : BV:8
145 : ite(136, 91, 144) : BV:8
146 : ite(135, 100, 145) : BV:8
147 : ite(134, 97, 146) : BV:8
148 : ite(133, 94, 147) : BV:8
149 : ite(132, 91, 148) : BV:8
150 : ite(131, 88, 149) : BV:8
151 : ite(130, 86, 150) : BV:8
152 : ite(129, 83, 151) : BV:8
153 : bvadd(109, 79) : BV:32
154 : eq(153, 81) : BOOL
155 : eq(153, 84) : BOOL
156 : eq(153, 78) : BOOL
157 : eq(153, 89) : BOOL
158 : eq(153, 92) : BOOL
159 : eq(153, 95) : BOOL
160 : eq(153, 98) : BOOL
161 : eq(153, 101) : BOOL
162 : eq(153, 103) : BOOL
163 : eq(153, 106) : BOOL
164 : eq(153, 109) : BOOL
165 : eq(153, 112) : BOOL
166 : ite(165, 114, 115) : BV:8
167 : ite(164, 111, 166) : BV:8
168 : ite(163, 108, 167) : BV:8
169 : ite(162, 105, 168) : BV:8
170 : ite(161, 91, 169) : BV:8
171 : ite(160, 100, 170) : BV:8
172 : ite(159, 97, 171) : BV:8
173 : ite(158, 94, 172) : BV:8
174 : ite(157, 91, 173) : BV:8
175 : ite(156, 88, 174) : BV:8
176 : ite(155, 86, 175) : BV:8
177 : ite(154, 83, 176) : BV:8
178 : bvadd(98, 79) : BV:32
179 : eq(178, 81) : BOOL
180 : eq(178, 84) : BOOL
181 : eq(178, 78) : BOOL
182 : eq(178, 89) : BOOL
183 : eq(178, 92) : BOOL
184 : eq(178, 95) : BOOL
185 : eq(178, 98) : BOOL
186 : eq(178, 101) : BOOL
187 : eq(178, 103) : BOOL
188 : eq(178, 106) : BOOL
189 : eq(178, 109) : BOOL
190 : eq(178, 112) : BOOL
191 : ite(190, 114, 115) : BV:8
192 : ite(189, 111, 191) : BV:8
193 : ite(188, 108, 192) : BV:8
194 : ite(187, 105, 193) : BV:8
195 : ite(186, 91, 194) : BV:8
196 : ite(185, 100, 195) : BV:8
197 : ite(184, 97, 196) : BV:8
198 : ite(183, 94, 197) : BV:8
199 : ite(182, 91, 198) : BV:8
200 : ite(181, 88, 199) : BV:8
201 : ite(180, 86, 200) : BV:8
202 : ite(179, 83, 201) : BV:8
203 : bvconcat(127, 152, 177, 202) : BV:32
204 : bvadd(75, 77, 203) : BV:32
205 : eq(204, 81) : BOOL
206 : eq(204, 84) : BOOL
207 : eq(204, 78) : BOOL
208 : eq(204, 89) : BOOL
209 : eq(204, 92) : BOOL
210 : eq(204, 95) : BOOL
211 : eq(204, 98) : BOOL
212 : eq(204, 101) : BOOL
213 : eq(204, 103) : BOOL
214 : eq(204, 106) : BOOL
215 : eq(204, 109) : BOOL
216 : eq(204, 112) : BOOL
217 : ite(216, 114, 115) : BV:8
218 : ite(215, 111, 217) : BV:8
219 : ite(214, 108, 218) : BV:8
220 : ite(213, 105, 219) : BV:8
221 : ite(212, 91, 220) : BV:8
222 : ite(211, 100, 221) : BV:8
223 : ite(210, 97, 222) : BV:8
224 : ite(209, 94, 223) : BV:8
225 : ite(208, 91, 224) : BV:8
226 : ite(207, 88, 225) : BV:8
227 : ite(206, 86, 226) : BV:8
228 : ite(205, 83, 227) : BV:8
229 : 2 { 0x2 +1.23e129 } : BV:32
230 : bvadd(229, 77, 203) : BV:32
231 : eq(230, 81) : BOOL
232 : eq(230, 84) : BOOL
233 : eq(230, 78) : BOOL
234 : eq(230, 89) : BOOL
235 : eq(230, 92) : BOOL
236 : eq(230, 95) : BOOL
237 : eq(230, 98) : BOOL
238 : eq(230, 101) : BOOL
239 : eq(230, 103) : BOOL
240 : eq(230, 106) : BOOL
241 : eq(230, 109) : BOOL
242 : eq(230, 112) : BOOL
243 : ite(242, 114, 115) : BV:8
244 : ite(241, 111, 243) : BV:8
245 : ite(240, 108, 244) : BV:8
246 : ite(239, 105, 245) : BV:8
247 : ite(238, 91, 246) : BV:8
248 : ite(237, 100, 247) : BV:8
249 : ite(236, 97, 248) : BV:8
250 : ite(235, 94, 249) : BV:8
251 : ite(234, 91, 250) : BV:8
252 : ite(233, 88, 251) : BV:8
253 : ite(232, 86, 252) : BV:8
254 : ite(231, 83, 253) : BV:8
255 : 1 { 0x1 +1.11e129 } : BV:32
256 : bvadd(255, 77, 203) : BV:32
257 : eq(256, 81) : BOOL
258 : eq(256, 84) : BOOL
259 : eq(256, 78) : BOOL
260 : eq(256, 89) : BOOL
261 : eq(256, 92) : BOOL
262 : eq(256, 95) : BOOL
263 : eq(256, 98) : BOOL
264 : eq(256, 101) : BOOL
265 : eq(256, 103) : BOOL
266 : eq(256, 106) : BOOL
267 : eq(256, 109) : BOOL
268 : eq(256, 112) : BOOL
269 : ite(268, 114, 115) : BV:8
270 : ite(267, 111, 269) : BV:8
271 : ite(266, 108, 270) : BV:8
272 : ite(265, 105, 271) : BV:8
273 : ite(264, 91, 272) : BV:8
274 : ite(263, 100, 273) : BV:8
275 : ite(262, 97, 274) : BV:8
276 : ite(261, 94, 275) : BV:8
277 : ite(260, 91, 276) : BV:8
278 : ite(259, 88, 277) : BV:8
279 : ite(258, 86, 278) : BV:8
280 : ite(257, 83, 279) : BV:8
281 : bvadd(77, 203) : BV:32
282 : eq(281, 81) : BOOL
283 : eq(281, 84) : BOOL
284 : eq(281, 78) : BOOL
285 : eq(281, 89) : BOOL
286 : eq(281, 92) : BOOL
287 : eq(281, 95) : BOOL
288 : eq(281, 98) : BOOL
289 : eq(281, 101) : BOOL
290 : eq(281, 103) : BOOL
291 : eq(281, 106) : BOOL
292 : eq(281, 109) : BOOL
293 : eq(281, 112) : BOOL
294 : ite(293, 114, 115) : BV:8
295 : ite(292, 111, 294) : BV:8
296 : ite(291, 108, 295) : BV:8
297 : ite(290, 105, 296) : BV:8
298 : ite(289, 91, 297) : BV:8
299 : ite(288, 100, 298) : BV:8
300 : ite(287, 97, 299) : BV:8
301 : ite(286, 94, 300) : BV:8
302 : ite(285, 91, 301) : BV:8
303 : ite(284, 88, 302) : BV:8
304 : ite(283, 86, 303) : BV:8
305 : ite(282, 83, 304) : BV:8
306 : bvconcat(228, 254, 280, 305) : BV:32
307 : ite(55, 2, 306) : BV:32
308 : ite(74, 306, 307) : BV:32
309 : ite(55, 2, 308) : BV:32
310 : lambda(52, 309) : FUNCTION[BV:32 -> BV:32]
311 : map(51, 310) : MAP[BV:32 -> BV:32]
312 : lambda(17, 311) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
313 : map(16, 312) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
314 : sym_const(313) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda43690Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4096 { 0x1000 +1.48828e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43691Var : BV:32
18 : eq(17, 2) : BOOL
19 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
26 : eq(24, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
29 : eq(24, 28) : BOOL
30 : 43 { 0x2b } : BV:8
31 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
32 : eq(24, 31) : BOOL
33 : 241 { 0xf1 -15 } : BV:8
34 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
35 : eq(24, 34) : BOOL
36 : 64 { 0x40 } : BV:8
37 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
38 : eq(24, 37) : BOOL
39 : 68 { 0x44 } : BV:8
40 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
41 : eq(24, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
44 : eq(24, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
47 : eq(24, 46) : BOOL
48 : eq(24, 23) : BOOL
49 : 4 { 0x4 } : BV:8
50 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
51 : eq(24, 50) : BOOL
52 : 159 { 0x9f -97 } : BV:8
53 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
54 : eq(24, 53) : BOOL
55 : 128 { 0x80 -128 } : BV:8
56 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
57 : eq(24, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(48, 49, 62) : BV:8
64 : ite(47, 36, 63) : BV:8
65 : ite(44, 45, 64) : BV:8
66 : ite(41, 42, 65) : BV:8
67 : ite(38, 39, 66) : BV:8
68 : ite(35, 36, 67) : BV:8
69 : ite(32, 33, 68) : BV:8
70 : ite(29, 30, 69) : BV:8
71 : ite(26, 27, 70) : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : bvadd(72, 22, 23) : BV:32
74 : eq(73, 25) : BOOL
75 : eq(73, 28) : BOOL
76 : eq(73, 31) : BOOL
77 : eq(73, 34) : BOOL
78 : eq(73, 37) : BOOL
79 : eq(73, 40) : BOOL
80 : eq(73, 43) : BOOL
81 : eq(73, 46) : BOOL
82 : eq(73, 23) : BOOL
83 : eq(73, 50) : BOOL
84 : eq(73, 53) : BOOL
85 : eq(73, 56) : BOOL
86 : ite(85, 58, 59) : BV:8
87 : ite(84, 55, 86) : BV:8
88 : ite(83, 52, 87) : BV:8
89 : ite(82, 49, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 45, 90) : BV:8
92 : ite(79, 42, 91) : BV:8
93 : ite(78, 39, 92) : BV:8
94 : ite(77, 36, 93) : BV:8
95 : ite(76, 33, 94) : BV:8
96 : ite(75, 30, 95) : BV:8
97 : ite(74, 27, 96) : BV:8
98 : 1 { 0x1 +1.11e129 } : BV:32
99 : bvadd(98, 22, 23) : BV:32
100 : eq(99, 25) : BOOL
101 : eq(99, 28) : BOOL
102 : eq(99, 31) : BOOL
103 : eq(99, 34) : BOOL
104 : eq(99, 37) : BOOL
105 : eq(99, 40) : BOOL
106 : eq(99, 43) : BOOL
107 : eq(99, 46) : BOOL
108 : eq(99, 23) : BOOL
109 : eq(99, 50) : BOOL
110 : eq(99, 53) : BOOL
111 : eq(99, 56) : BOOL
112 : ite(111, 58, 59) : BV:8
113 : ite(110, 55, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 49, 114) : BV:8
116 : ite(107, 36, 115) : BV:8
117 : ite(106, 45, 116) : BV:8
118 : ite(105, 42, 117) : BV:8
119 : ite(104, 39, 118) : BV:8
120 : ite(103, 36, 119) : BV:8
121 : ite(102, 33, 120) : BV:8
122 : ite(101, 30, 121) : BV:8
123 : ite(100, 27, 122) : BV:8
124 : bvadd(22, 23) : BV:32
125 : eq(124, 25) : BOOL
126 : eq(124, 28) : BOOL
127 : eq(124, 31) : BOOL
128 : eq(124, 34) : BOOL
129 : eq(124, 37) : BOOL
130 : eq(124, 40) : BOOL
131 : eq(124, 43) : BOOL
132 : eq(124, 46) : BOOL
133 : eq(124, 23) : BOOL
134 : eq(124, 50) : BOOL
135 : eq(124, 53) : BOOL
136 : eq(124, 56) : BOOL
137 : ite(136, 58, 59) : BV:8
138 : ite(135, 55, 137) : BV:8
139 : ite(134, 52, 138) : BV:8
140 : ite(133, 49, 139) : BV:8
141 : ite(132, 36, 140) : BV:8
142 : ite(131, 45, 141) : BV:8
143 : ite(130, 42, 142) : BV:8
144 : ite(129, 39, 143) : BV:8
145 : ite(128, 36, 144) : BV:8
146 : ite(127, 33, 145) : BV:8
147 : ite(126, 30, 146) : BV:8
148 : ite(125, 27, 147) : BV:8
149 : bvconcat(71, 97, 123, 148) : BV:32
150 : ite(18, 19, 149) : BV:32
151 : lambda(17, 150) : FUNCTION[BV:32 -> BV:32]
152 : map(16, 151) : MAP[BV:32 -> BV:32]
153 : sym_const(152) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2687190079 ] -> 0, [ 2687190080; 2687190080 ] -> 4, [ 2687190081; 2687190081 ] -> 64, [ 2687190082; 2687190082 ] -> 1, [ 2687190083; 2687190083 ] -> 16, [ 2687190084; 3221224991 ] -> 0, [ 3221224992; 3221224992 ] -> 8, [ 3221224993; 3221224993 ] -> 128, [ 3221224994; 3221224994 ] -> 159, [ 3221224995; 3221224995 ] -> 241, [ 3221224996; 3221225503 ] -> 0, [ 3221225504; 3221225504 ] -> 64, [ 3221225505; 3221225505 ] -> 68, [ 3221225506; 3221225506 ] -> 43, [ 3221225507; 3221225507 ] -> 160, [ 3221225508; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 739316063 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 739316064; 739316067 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 739316068; 772868387 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 772868388; 772868391 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 772868392; 2923075271 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2923075272; 2923075275 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2923075276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 772868388 { 0x2e110924 +1.13309144e221 } : BV:32
=input.dst.llvm-%m
1 : 4097 { 0x1001 +1.48840e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 739316064 { 0x2c111160 +1.13334274e217 } : BV:32
=input.dst.llvm-%n
1 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2923075272 { 0xae3a96c8 -1371892024 -1.45772647e221 } : BV:32
=input.dst.llvm-%x
1 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda43683Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43684Var : BV:32
18 : Lambda43685Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 4096 { 0x1000 +1.48828e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4097 { 0x1001 +1.48840e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 4098 { 0x1002 +1.48851e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda43686Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
63 : eq(61, 62) : BOOL
64 : 160 { 0xa0 -96 } : BV:8
65 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
66 : eq(61, 65) : BOOL
67 : 43 { 0x2b } : BV:8
68 : eq(61, 59) : BOOL
69 : 241 { 0xf1 -15 } : BV:8
70 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
71 : eq(61, 70) : BOOL
72 : 64 { 0x40 } : BV:8
73 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
74 : eq(61, 73) : BOOL
75 : 68 { 0x44 } : BV:8
76 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
77 : eq(61, 76) : BOOL
78 : 16 { 0x10 } : BV:8
79 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
80 : eq(61, 79) : BOOL
81 : 8 { 0x8 } : BV:8
82 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
83 : eq(61, 82) : BOOL
84 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
85 : eq(61, 84) : BOOL
86 : 4 { 0x4 } : BV:8
87 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
88 : eq(61, 87) : BOOL
89 : 159 { 0x9f -97 } : BV:8
90 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
91 : eq(61, 90) : BOOL
92 : 128 { 0x80 -128 } : BV:8
93 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
94 : eq(61, 93) : BOOL
95 : 1 { 0x1 } : BV:8
96 : 0 { 0x0 } : BV:8
97 : ite(94, 95, 96) : BV:8
98 : ite(91, 92, 97) : BV:8
99 : ite(88, 89, 98) : BV:8
100 : ite(85, 86, 99) : BV:8
101 : ite(83, 72, 100) : BV:8
102 : ite(80, 81, 101) : BV:8
103 : ite(77, 78, 102) : BV:8
104 : ite(74, 75, 103) : BV:8
105 : ite(71, 72, 104) : BV:8
106 : ite(68, 69, 105) : BV:8
107 : ite(66, 67, 106) : BV:8
108 : ite(63, 64, 107) : BV:8
109 : bvadd(87, 60) : BV:32
110 : eq(109, 62) : BOOL
111 : eq(109, 65) : BOOL
112 : eq(109, 59) : BOOL
113 : eq(109, 70) : BOOL
114 : eq(109, 73) : BOOL
115 : eq(109, 76) : BOOL
116 : eq(109, 79) : BOOL
117 : eq(109, 82) : BOOL
118 : eq(109, 84) : BOOL
119 : eq(109, 87) : BOOL
120 : eq(109, 90) : BOOL
121 : eq(109, 93) : BOOL
122 : ite(121, 95, 96) : BV:8
123 : ite(120, 92, 122) : BV:8
124 : ite(119, 89, 123) : BV:8
125 : ite(118, 86, 124) : BV:8
126 : ite(117, 72, 125) : BV:8
127 : ite(116, 81, 126) : BV:8
128 : ite(115, 78, 127) : BV:8
129 : ite(114, 75, 128) : BV:8
130 : ite(113, 72, 129) : BV:8
131 : ite(112, 69, 130) : BV:8
132 : ite(111, 67, 131) : BV:8
133 : ite(110, 64, 132) : BV:8
134 : bvadd(90, 60) : BV:32
135 : eq(134, 62) : BOOL
136 : eq(134, 65) : BOOL
137 : eq(134, 59) : BOOL
138 : eq(134, 70) : BOOL
139 : eq(134, 73) : BOOL
140 : eq(134, 76) : BOOL
141 : eq(134, 79) : BOOL
142 : eq(134, 82) : BOOL
143 : eq(134, 84) : BOOL
144 : eq(134, 87) : BOOL
145 : eq(134, 90) : BOOL
146 : eq(134, 93) : BOOL
147 : ite(146, 95, 96) : BV:8
148 : ite(145, 92, 147) : BV:8
149 : ite(144, 89, 148) : BV:8
150 : ite(143, 86, 149) : BV:8
151 : ite(142, 72, 150) : BV:8
152 : ite(141, 81, 151) : BV:8
153 : ite(140, 78, 152) : BV:8
154 : ite(139, 75, 153) : BV:8
155 : ite(138, 72, 154) : BV:8
156 : ite(137, 69, 155) : BV:8
157 : ite(136, 67, 156) : BV:8
158 : ite(135, 64, 157) : BV:8
159 : bvadd(79, 60) : BV:32
160 : eq(159, 62) : BOOL
161 : eq(159, 65) : BOOL
162 : eq(159, 59) : BOOL
163 : eq(159, 70) : BOOL
164 : eq(159, 73) : BOOL
165 : eq(159, 76) : BOOL
166 : eq(159, 79) : BOOL
167 : eq(159, 82) : BOOL
168 : eq(159, 84) : BOOL
169 : eq(159, 87) : BOOL
170 : eq(159, 90) : BOOL
171 : eq(159, 93) : BOOL
172 : ite(171, 95, 96) : BV:8
173 : ite(170, 92, 172) : BV:8
174 : ite(169, 89, 173) : BV:8
175 : ite(168, 86, 174) : BV:8
176 : ite(167, 72, 175) : BV:8
177 : ite(166, 81, 176) : BV:8
178 : ite(165, 78, 177) : BV:8
179 : ite(164, 75, 178) : BV:8
180 : ite(163, 72, 179) : BV:8
181 : ite(162, 69, 180) : BV:8
182 : ite(161, 67, 181) : BV:8
183 : ite(160, 64, 182) : BV:8
184 : bvconcat(108, 133, 158, 183) : BV:32
185 : bvadd(56, 58, 184) : BV:32
186 : eq(185, 62) : BOOL
187 : eq(185, 65) : BOOL
188 : eq(185, 59) : BOOL
189 : eq(185, 70) : BOOL
190 : eq(185, 73) : BOOL
191 : eq(185, 76) : BOOL
192 : eq(185, 79) : BOOL
193 : eq(185, 82) : BOOL
194 : eq(185, 84) : BOOL
195 : eq(185, 87) : BOOL
196 : eq(185, 90) : BOOL
197 : eq(185, 93) : BOOL
198 : ite(197, 95, 96) : BV:8
199 : ite(196, 92, 198) : BV:8
200 : ite(195, 89, 199) : BV:8
201 : ite(194, 86, 200) : BV:8
202 : ite(193, 72, 201) : BV:8
203 : ite(192, 81, 202) : BV:8
204 : ite(191, 78, 203) : BV:8
205 : ite(190, 75, 204) : BV:8
206 : ite(189, 72, 205) : BV:8
207 : ite(188, 69, 206) : BV:8
208 : ite(187, 67, 207) : BV:8
209 : ite(186, 64, 208) : BV:8
210 : 2 { 0x2 +1.23e129 } : BV:32
211 : bvadd(210, 58, 184) : BV:32
212 : eq(211, 62) : BOOL
213 : eq(211, 65) : BOOL
214 : eq(211, 59) : BOOL
215 : eq(211, 70) : BOOL
216 : eq(211, 73) : BOOL
217 : eq(211, 76) : BOOL
218 : eq(211, 79) : BOOL
219 : eq(211, 82) : BOOL
220 : eq(211, 84) : BOOL
221 : eq(211, 87) : BOOL
222 : eq(211, 90) : BOOL
223 : eq(211, 93) : BOOL
224 : ite(223, 95, 96) : BV:8
225 : ite(222, 92, 224) : BV:8
226 : ite(221, 89, 225) : BV:8
227 : ite(220, 86, 226) : BV:8
228 : ite(219, 72, 227) : BV:8
229 : ite(218, 81, 228) : BV:8
230 : ite(217, 78, 229) : BV:8
231 : ite(216, 75, 230) : BV:8
232 : ite(215, 72, 231) : BV:8
233 : ite(214, 69, 232) : BV:8
234 : ite(213, 67, 233) : BV:8
235 : ite(212, 64, 234) : BV:8
236 : 1 { 0x1 +1.11e129 } : BV:32
237 : bvadd(236, 58, 184) : BV:32
238 : eq(237, 62) : BOOL
239 : eq(237, 65) : BOOL
240 : eq(237, 59) : BOOL
241 : eq(237, 70) : BOOL
242 : eq(237, 73) : BOOL
243 : eq(237, 76) : BOOL
244 : eq(237, 79) : BOOL
245 : eq(237, 82) : BOOL
246 : eq(237, 84) : BOOL
247 : eq(237, 87) : BOOL
248 : eq(237, 90) : BOOL
249 : eq(237, 93) : BOOL
250 : ite(249, 95, 96) : BV:8
251 : ite(248, 92, 250) : BV:8
252 : ite(247, 89, 251) : BV:8
253 : ite(246, 86, 252) : BV:8
254 : ite(245, 72, 253) : BV:8
255 : ite(244, 81, 254) : BV:8
256 : ite(243, 78, 255) : BV:8
257 : ite(242, 75, 256) : BV:8
258 : ite(241, 72, 257) : BV:8
259 : ite(240, 69, 258) : BV:8
260 : ite(239, 67, 259) : BV:8
261 : ite(238, 64, 260) : BV:8
262 : bvadd(58, 184) : BV:32
263 : eq(262, 62) : BOOL
264 : eq(262, 65) : BOOL
265 : eq(262, 59) : BOOL
266 : eq(262, 70) : BOOL
267 : eq(262, 73) : BOOL
268 : eq(262, 76) : BOOL
269 : eq(262, 79) : BOOL
270 : eq(262, 82) : BOOL
271 : eq(262, 84) : BOOL
272 : eq(262, 87) : BOOL
273 : eq(262, 90) : BOOL
274 : eq(262, 93) : BOOL
275 : ite(274, 95, 96) : BV:8
276 : ite(273, 92, 275) : BV:8
277 : ite(272, 89, 276) : BV:8
278 : ite(271, 86, 277) : BV:8
279 : ite(270, 72, 278) : BV:8
280 : ite(269, 81, 279) : BV:8
281 : ite(268, 78, 280) : BV:8
282 : ite(267, 75, 281) : BV:8
283 : ite(266, 72, 282) : BV:8
284 : ite(265, 69, 283) : BV:8
285 : ite(264, 67, 284) : BV:8
286 : ite(263, 64, 285) : BV:8
287 : bvconcat(209, 235, 261, 286) : BV:32
288 : ite(55, 2, 287) : BV:32
289 : lambda(52, 288) : FUNCTION[BV:32 -> BV:32]
290 : map(51, 289) : MAP[BV:32 -> BV:32]
291 : lambda(17, 290) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
292 : map(16, 291) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
293 : sym_const(292) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 128 { 0x80 +1.1525e129 } : BV:32
2 : unit : UNIT
3 : Lambda43672Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 4096 { 0x1000 +1.48828e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4097 { 0x1001 +1.48840e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda43673Var : BV:32
20 : eq(19, 4) : BOOL
21 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 19) : BV:32
25 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
28 : eq(26, 27) : BOOL
29 : 160 { 0xa0 -96 } : BV:8
30 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
31 : eq(26, 30) : BOOL
32 : 43 { 0x2b } : BV:8
33 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
34 : eq(26, 33) : BOOL
35 : 241 { 0xf1 -15 } : BV:8
36 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
37 : eq(26, 36) : BOOL
38 : 64 { 0x40 } : BV:8
39 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
40 : eq(26, 39) : BOOL
41 : 68 { 0x44 } : BV:8
42 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
43 : eq(26, 42) : BOOL
44 : 16 { 0x10 } : BV:8
45 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
46 : eq(26, 45) : BOOL
47 : 8 { 0x8 } : BV:8
48 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
49 : eq(26, 48) : BOOL
50 : eq(26, 25) : BOOL
51 : 4 { 0x4 } : BV:8
52 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
53 : eq(26, 52) : BOOL
54 : 159 { 0x9f -97 } : BV:8
55 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
56 : eq(26, 55) : BOOL
57 : 128 { 0x80 -128 } : BV:8
58 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
59 : eq(26, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 0 { 0x0 } : BV:8
62 : ite(59, 60, 61) : BV:8
63 : ite(56, 57, 62) : BV:8
64 : ite(53, 54, 63) : BV:8
65 : ite(50, 51, 64) : BV:8
66 : ite(49, 38, 65) : BV:8
67 : ite(46, 47, 66) : BV:8
68 : ite(43, 44, 67) : BV:8
69 : ite(40, 41, 68) : BV:8
70 : ite(37, 38, 69) : BV:8
71 : ite(34, 35, 70) : BV:8
72 : ite(31, 32, 71) : BV:8
73 : ite(28, 29, 72) : BV:8
74 : 2 { 0x2 +1.23e129 } : BV:32
75 : bvadd(74, 24, 25) : BV:32
76 : eq(75, 27) : BOOL
77 : eq(75, 30) : BOOL
78 : eq(75, 33) : BOOL
79 : eq(75, 36) : BOOL
80 : eq(75, 39) : BOOL
81 : eq(75, 42) : BOOL
82 : eq(75, 45) : BOOL
83 : eq(75, 48) : BOOL
84 : eq(75, 25) : BOOL
85 : eq(75, 52) : BOOL
86 : eq(75, 55) : BOOL
87 : eq(75, 58) : BOOL
88 : ite(87, 60, 61) : BV:8
89 : ite(86, 57, 88) : BV:8
90 : ite(85, 54, 89) : BV:8
91 : ite(84, 51, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 47, 92) : BV:8
94 : ite(81, 44, 93) : BV:8
95 : ite(80, 41, 94) : BV:8
96 : ite(79, 38, 95) : BV:8
97 : ite(78, 35, 96) : BV:8
98 : ite(77, 32, 97) : BV:8
99 : ite(76, 29, 98) : BV:8
100 : 1 { 0x1 +1.11e129 } : BV:32
101 : bvadd(100, 24, 25) : BV:32
102 : eq(101, 27) : BOOL
103 : eq(101, 30) : BOOL
104 : eq(101, 33) : BOOL
105 : eq(101, 36) : BOOL
106 : eq(101, 39) : BOOL
107 : eq(101, 42) : BOOL
108 : eq(101, 45) : BOOL
109 : eq(101, 48) : BOOL
110 : eq(101, 25) : BOOL
111 : eq(101, 52) : BOOL
112 : eq(101, 55) : BOOL
113 : eq(101, 58) : BOOL
114 : ite(113, 60, 61) : BV:8
115 : ite(112, 57, 114) : BV:8
116 : ite(111, 54, 115) : BV:8
117 : ite(110, 51, 116) : BV:8
118 : ite(109, 38, 117) : BV:8
119 : ite(108, 47, 118) : BV:8
120 : ite(107, 44, 119) : BV:8
121 : ite(106, 41, 120) : BV:8
122 : ite(105, 38, 121) : BV:8
123 : ite(104, 35, 122) : BV:8
124 : ite(103, 32, 123) : BV:8
125 : ite(102, 29, 124) : BV:8
126 : bvadd(24, 25) : BV:32
127 : eq(126, 27) : BOOL
128 : eq(126, 30) : BOOL
129 : eq(126, 33) : BOOL
130 : eq(126, 36) : BOOL
131 : eq(126, 39) : BOOL
132 : eq(126, 42) : BOOL
133 : eq(126, 45) : BOOL
134 : eq(126, 48) : BOOL
135 : eq(126, 25) : BOOL
136 : eq(126, 52) : BOOL
137 : eq(126, 55) : BOOL
138 : eq(126, 58) : BOOL
139 : ite(138, 60, 61) : BV:8
140 : ite(137, 57, 139) : BV:8
141 : ite(136, 54, 140) : BV:8
142 : ite(135, 51, 141) : BV:8
143 : ite(134, 38, 142) : BV:8
144 : ite(133, 47, 143) : BV:8
145 : ite(132, 44, 144) : BV:8
146 : ite(131, 41, 145) : BV:8
147 : ite(130, 38, 146) : BV:8
148 : ite(129, 35, 147) : BV:8
149 : ite(128, 32, 148) : BV:8
150 : ite(127, 29, 149) : BV:8
151 : bvconcat(73, 99, 125, 150) : BV:32
152 : ite(20, 21, 151) : BV:32
153 : lambda(19, 152) : FUNCTION[BV:32 -> BV:32]
154 : map(18, 153) : MAP[BV:32 -> BV:32]
155 : sum(1, 2, 154) : SUM[UNIT,MAP[BV:32 -> BV:32]]
156 : sym_const(155) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 726313870 { 0x2b4aab8e +1.58336043e215 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda43695Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4096 { 0x1000 +1.48828e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4097 { 0x1001 +1.48840e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda43696Var : BV:32
18 : eq(17, 2) : BOOL
19 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
26 : eq(24, 25) : BOOL
27 : 160 { 0xa0 -96 } : BV:8
28 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
29 : eq(24, 28) : BOOL
30 : 43 { 0x2b } : BV:8
31 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
32 : eq(24, 31) : BOOL
33 : 241 { 0xf1 -15 } : BV:8
34 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
35 : eq(24, 34) : BOOL
36 : 64 { 0x40 } : BV:8
37 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
38 : eq(24, 37) : BOOL
39 : 68 { 0x44 } : BV:8
40 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
41 : eq(24, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
44 : eq(24, 43) : BOOL
45 : 8 { 0x8 } : BV:8
46 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
47 : eq(24, 46) : BOOL
48 : eq(24, 23) : BOOL
49 : 4 { 0x4 } : BV:8
50 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
51 : eq(24, 50) : BOOL
52 : 159 { 0x9f -97 } : BV:8
53 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
54 : eq(24, 53) : BOOL
55 : 128 { 0x80 -128 } : BV:8
56 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
57 : eq(24, 56) : BOOL
58 : 1 { 0x1 } : BV:8
59 : 0 { 0x0 } : BV:8
60 : ite(57, 58, 59) : BV:8
61 : ite(54, 55, 60) : BV:8
62 : ite(51, 52, 61) : BV:8
63 : ite(48, 49, 62) : BV:8
64 : ite(47, 36, 63) : BV:8
65 : ite(44, 45, 64) : BV:8
66 : ite(41, 42, 65) : BV:8
67 : ite(38, 39, 66) : BV:8
68 : ite(35, 36, 67) : BV:8
69 : ite(32, 33, 68) : BV:8
70 : ite(29, 30, 69) : BV:8
71 : ite(26, 27, 70) : BV:8
72 : 2 { 0x2 +1.23e129 } : BV:32
73 : bvadd(72, 22, 23) : BV:32
74 : eq(73, 25) : BOOL
75 : eq(73, 28) : BOOL
76 : eq(73, 31) : BOOL
77 : eq(73, 34) : BOOL
78 : eq(73, 37) : BOOL
79 : eq(73, 40) : BOOL
80 : eq(73, 43) : BOOL
81 : eq(73, 46) : BOOL
82 : eq(73, 23) : BOOL
83 : eq(73, 50) : BOOL
84 : eq(73, 53) : BOOL
85 : eq(73, 56) : BOOL
86 : ite(85, 58, 59) : BV:8
87 : ite(84, 55, 86) : BV:8
88 : ite(83, 52, 87) : BV:8
89 : ite(82, 49, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 45, 90) : BV:8
92 : ite(79, 42, 91) : BV:8
93 : ite(78, 39, 92) : BV:8
94 : ite(77, 36, 93) : BV:8
95 : ite(76, 33, 94) : BV:8
96 : ite(75, 30, 95) : BV:8
97 : ite(74, 27, 96) : BV:8
98 : 1 { 0x1 +1.11e129 } : BV:32
99 : bvadd(98, 22, 23) : BV:32
100 : eq(99, 25) : BOOL
101 : eq(99, 28) : BOOL
102 : eq(99, 31) : BOOL
103 : eq(99, 34) : BOOL
104 : eq(99, 37) : BOOL
105 : eq(99, 40) : BOOL
106 : eq(99, 43) : BOOL
107 : eq(99, 46) : BOOL
108 : eq(99, 23) : BOOL
109 : eq(99, 50) : BOOL
110 : eq(99, 53) : BOOL
111 : eq(99, 56) : BOOL
112 : ite(111, 58, 59) : BV:8
113 : ite(110, 55, 112) : BV:8
114 : ite(109, 52, 113) : BV:8
115 : ite(108, 49, 114) : BV:8
116 : ite(107, 36, 115) : BV:8
117 : ite(106, 45, 116) : BV:8
118 : ite(105, 42, 117) : BV:8
119 : ite(104, 39, 118) : BV:8
120 : ite(103, 36, 119) : BV:8
121 : ite(102, 33, 120) : BV:8
122 : ite(101, 30, 121) : BV:8
123 : ite(100, 27, 122) : BV:8
124 : bvadd(22, 23) : BV:32
125 : eq(124, 25) : BOOL
126 : eq(124, 28) : BOOL
127 : eq(124, 31) : BOOL
128 : eq(124, 34) : BOOL
129 : eq(124, 37) : BOOL
130 : eq(124, 40) : BOOL
131 : eq(124, 43) : BOOL
132 : eq(124, 46) : BOOL
133 : eq(124, 23) : BOOL
134 : eq(124, 50) : BOOL
135 : eq(124, 53) : BOOL
136 : eq(124, 56) : BOOL
137 : ite(136, 58, 59) : BV:8
138 : ite(135, 55, 137) : BV:8
139 : ite(134, 52, 138) : BV:8
140 : ite(133, 49, 139) : BV:8
141 : ite(132, 36, 140) : BV:8
142 : ite(131, 45, 141) : BV:8
143 : ite(130, 42, 142) : BV:8
144 : ite(129, 39, 143) : BV:8
145 : ite(128, 36, 144) : BV:8
146 : ite(127, 33, 145) : BV:8
147 : ite(126, 30, 146) : BV:8
148 : ite(125, 27, 147) : BV:8
149 : bvconcat(71, 97, 123, 148) : BV:32
150 : ite(18, 19, 149) : BV:32
151 : lambda(17, 150) : FUNCTION[BV:32 -> BV:32]
152 : map(16, 151) : MAP[BV:32 -> BV:32]
153 : sym_const(152) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1310308064 { 0x4e19b6e0 +1.20089340e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 739316064 { 0x2c111160 +1.13334274e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 739316067 { 0x2c111163 +1.13334310e217 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2923075272 { 0xae3a96c8 -1371892024 -1.45772647e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2923075275 { 0xae3a96cb -1371892021 -1.45772683e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 772868388 { 0x2e110924 +1.13309144e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 772868391 { 0x2e110927 +1.13309180e221 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda43555Var : BV:32
2 : Lambda43556Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 4096 { 0x1000 +1.48828e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4097 { 0x1001 +1.48840e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 4098 { 0x1002 +1.48851e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
55 : eq(53, 54) : BOOL
56 : 160 { 0xa0 -96 } : BV:8
57 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
58 : eq(53, 57) : BOOL
59 : 43 { 0x2b } : BV:8
60 : eq(53, 51) : BOOL
61 : 241 { 0xf1 -15 } : BV:8
62 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
63 : eq(53, 62) : BOOL
64 : 64 { 0x40 } : BV:8
65 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
66 : eq(53, 65) : BOOL
67 : 68 { 0x44 } : BV:8
68 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
69 : eq(53, 68) : BOOL
70 : 16 { 0x10 } : BV:8
71 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
72 : eq(53, 71) : BOOL
73 : 8 { 0x8 } : BV:8
74 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
75 : eq(53, 74) : BOOL
76 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
77 : eq(53, 76) : BOOL
78 : 4 { 0x4 } : BV:8
79 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
80 : eq(53, 79) : BOOL
81 : 159 { 0x9f -97 } : BV:8
82 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
83 : eq(53, 82) : BOOL
84 : 128 { 0x80 -128 } : BV:8
85 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
86 : eq(53, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 0 { 0x0 } : BV:8
89 : ite(86, 87, 88) : BV:8
90 : ite(83, 84, 89) : BV:8
91 : ite(80, 81, 90) : BV:8
92 : ite(77, 78, 91) : BV:8
93 : ite(75, 64, 92) : BV:8
94 : ite(72, 73, 93) : BV:8
95 : ite(69, 70, 94) : BV:8
96 : ite(66, 67, 95) : BV:8
97 : ite(63, 64, 96) : BV:8
98 : ite(60, 61, 97) : BV:8
99 : ite(58, 59, 98) : BV:8
100 : ite(55, 56, 99) : BV:8
101 : bvadd(79, 52) : BV:32
102 : eq(101, 54) : BOOL
103 : eq(101, 57) : BOOL
104 : eq(101, 51) : BOOL
105 : eq(101, 62) : BOOL
106 : eq(101, 65) : BOOL
107 : eq(101, 68) : BOOL
108 : eq(101, 71) : BOOL
109 : eq(101, 74) : BOOL
110 : eq(101, 76) : BOOL
111 : eq(101, 79) : BOOL
112 : eq(101, 82) : BOOL
113 : eq(101, 85) : BOOL
114 : ite(113, 87, 88) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 81, 115) : BV:8
117 : ite(110, 78, 116) : BV:8
118 : ite(109, 64, 117) : BV:8
119 : ite(108, 73, 118) : BV:8
120 : ite(107, 70, 119) : BV:8
121 : ite(106, 67, 120) : BV:8
122 : ite(105, 64, 121) : BV:8
123 : ite(104, 61, 122) : BV:8
124 : ite(103, 59, 123) : BV:8
125 : ite(102, 56, 124) : BV:8
126 : bvadd(82, 52) : BV:32
127 : eq(126, 54) : BOOL
128 : eq(126, 57) : BOOL
129 : eq(126, 51) : BOOL
130 : eq(126, 62) : BOOL
131 : eq(126, 65) : BOOL
132 : eq(126, 68) : BOOL
133 : eq(126, 71) : BOOL
134 : eq(126, 74) : BOOL
135 : eq(126, 76) : BOOL
136 : eq(126, 79) : BOOL
137 : eq(126, 82) : BOOL
138 : eq(126, 85) : BOOL
139 : ite(138, 87, 88) : BV:8
140 : ite(137, 84, 139) : BV:8
141 : ite(136, 81, 140) : BV:8
142 : ite(135, 78, 141) : BV:8
143 : ite(134, 64, 142) : BV:8
144 : ite(133, 73, 143) : BV:8
145 : ite(132, 70, 144) : BV:8
146 : ite(131, 67, 145) : BV:8
147 : ite(130, 64, 146) : BV:8
148 : ite(129, 61, 147) : BV:8
149 : ite(128, 59, 148) : BV:8
150 : ite(127, 56, 149) : BV:8
151 : bvadd(71, 52) : BV:32
152 : eq(151, 54) : BOOL
153 : eq(151, 57) : BOOL
154 : eq(151, 51) : BOOL
155 : eq(151, 62) : BOOL
156 : eq(151, 65) : BOOL
157 : eq(151, 68) : BOOL
158 : eq(151, 71) : BOOL
159 : eq(151, 74) : BOOL
160 : eq(151, 76) : BOOL
161 : eq(151, 79) : BOOL
162 : eq(151, 82) : BOOL
163 : eq(151, 85) : BOOL
164 : ite(163, 87, 88) : BV:8
165 : ite(162, 84, 164) : BV:8
166 : ite(161, 81, 165) : BV:8
167 : ite(160, 78, 166) : BV:8
168 : ite(159, 64, 167) : BV:8
169 : ite(158, 73, 168) : BV:8
170 : ite(157, 70, 169) : BV:8
171 : ite(156, 67, 170) : BV:8
172 : ite(155, 64, 171) : BV:8
173 : ite(154, 61, 172) : BV:8
174 : ite(153, 59, 173) : BV:8
175 : ite(152, 56, 174) : BV:8
176 : bvconcat(100, 125, 150, 175) : BV:32
177 : bvadd(48, 50, 176) : BV:32
178 : eq(177, 54) : BOOL
179 : eq(177, 57) : BOOL
180 : eq(177, 51) : BOOL
181 : eq(177, 62) : BOOL
182 : eq(177, 65) : BOOL
183 : eq(177, 68) : BOOL
184 : eq(177, 71) : BOOL
185 : eq(177, 74) : BOOL
186 : eq(177, 76) : BOOL
187 : eq(177, 79) : BOOL
188 : eq(177, 82) : BOOL
189 : eq(177, 85) : BOOL
190 : ite(189, 87, 88) : BV:8
191 : ite(188, 84, 190) : BV:8
192 : ite(187, 81, 191) : BV:8
193 : ite(186, 78, 192) : BV:8
194 : ite(185, 64, 193) : BV:8
195 : ite(184, 73, 194) : BV:8
196 : ite(183, 70, 195) : BV:8
197 : ite(182, 67, 196) : BV:8
198 : ite(181, 64, 197) : BV:8
199 : ite(180, 61, 198) : BV:8
200 : ite(179, 59, 199) : BV:8
201 : ite(178, 56, 200) : BV:8
202 : 2 { 0x2 +1.23e129 } : BV:32
203 : bvadd(202, 50, 176) : BV:32
204 : eq(203, 54) : BOOL
205 : eq(203, 57) : BOOL
206 : eq(203, 51) : BOOL
207 : eq(203, 62) : BOOL
208 : eq(203, 65) : BOOL
209 : eq(203, 68) : BOOL
210 : eq(203, 71) : BOOL
211 : eq(203, 74) : BOOL
212 : eq(203, 76) : BOOL
213 : eq(203, 79) : BOOL
214 : eq(203, 82) : BOOL
215 : eq(203, 85) : BOOL
216 : ite(215, 87, 88) : BV:8
217 : ite(214, 84, 216) : BV:8
218 : ite(213, 81, 217) : BV:8
219 : ite(212, 78, 218) : BV:8
220 : ite(211, 64, 219) : BV:8
221 : ite(210, 73, 220) : BV:8
222 : ite(209, 70, 221) : BV:8
223 : ite(208, 67, 222) : BV:8
224 : ite(207, 64, 223) : BV:8
225 : ite(206, 61, 224) : BV:8
226 : ite(205, 59, 225) : BV:8
227 : ite(204, 56, 226) : BV:8
228 : 1 { 0x1 +1.11e129 } : BV:32
229 : bvadd(228, 50, 176) : BV:32
230 : eq(229, 54) : BOOL
231 : eq(229, 57) : BOOL
232 : eq(229, 51) : BOOL
233 : eq(229, 62) : BOOL
234 : eq(229, 65) : BOOL
235 : eq(229, 68) : BOOL
236 : eq(229, 71) : BOOL
237 : eq(229, 74) : BOOL
238 : eq(229, 76) : BOOL
239 : eq(229, 79) : BOOL
240 : eq(229, 82) : BOOL
241 : eq(229, 85) : BOOL
242 : ite(241, 87, 88) : BV:8
243 : ite(240, 84, 242) : BV:8
244 : ite(239, 81, 243) : BV:8
245 : ite(238, 78, 244) : BV:8
246 : ite(237, 64, 245) : BV:8
247 : ite(236, 73, 246) : BV:8
248 : ite(235, 70, 247) : BV:8
249 : ite(234, 67, 248) : BV:8
250 : ite(233, 64, 249) : BV:8
251 : ite(232, 61, 250) : BV:8
252 : ite(231, 59, 251) : BV:8
253 : ite(230, 56, 252) : BV:8
254 : bvadd(50, 176) : BV:32
255 : eq(254, 54) : BOOL
256 : eq(254, 57) : BOOL
257 : eq(254, 51) : BOOL
258 : eq(254, 62) : BOOL
259 : eq(254, 65) : BOOL
260 : eq(254, 68) : BOOL
261 : eq(254, 71) : BOOL
262 : eq(254, 74) : BOOL
263 : eq(254, 76) : BOOL
264 : eq(254, 79) : BOOL
265 : eq(254, 82) : BOOL
266 : eq(254, 85) : BOOL
267 : ite(266, 87, 88) : BV:8
268 : ite(265, 84, 267) : BV:8
269 : ite(264, 81, 268) : BV:8
270 : ite(263, 78, 269) : BV:8
271 : ite(262, 64, 270) : BV:8
272 : ite(261, 73, 271) : BV:8
273 : ite(260, 70, 272) : BV:8
274 : ite(259, 67, 273) : BV:8
275 : ite(258, 64, 274) : BV:8
276 : ite(257, 61, 275) : BV:8
277 : ite(256, 59, 276) : BV:8
278 : ite(255, 56, 277) : BV:8
279 : bvconcat(201, 227, 253, 278) : BV:32
280 : ite(6, 3, 279) : BV:32
281 : ite(47, 279, 280) : BV:32
282 : ite(6, 3, 281) : BV:32
283 : lambda(1, 2, 282) : FUNCTION[BV:32,BV:32 -> BV:32]
284 : sym_const(283) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda43560Var : BV:32
2 : Lambda43561Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4096 { 0x1000 +1.48828e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4098 { 0x1002 +1.48851e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3221225600 ] -> true, [ 3221225601; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3221225600 ] -> true, [ 3221225601; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda43569Var : BV:32
2 : Lambda43570Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3221225600 { 0xc0000080 -1073741696 -1.1525e1 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3221225601 { 0xc0000081 -1073741695 -1.1537e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3221225602 { 0xc0000082 -1073741694 -1.1549e1 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 4096 { 0x1000 +1.48828e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4097 { 0x1001 +1.48840e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 4098 { 0x1002 +1.48851e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda43565Var : BV:32
2 : Lambda43566Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
14 : eq(12, 13) : BOOL
15 : 160 { 0xa0 -96 } : BV:8
16 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
17 : eq(12, 16) : BOOL
18 : 43 { 0x2b } : BV:8
19 : eq(12, 10) : BOOL
20 : 241 { 0xf1 -15 } : BV:8
21 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
22 : eq(12, 21) : BOOL
23 : 64 { 0x40 } : BV:8
24 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
25 : eq(12, 24) : BOOL
26 : 68 { 0x44 } : BV:8
27 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
28 : eq(12, 27) : BOOL
29 : 16 { 0x10 } : BV:8
30 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
31 : eq(12, 30) : BOOL
32 : 8 { 0x8 } : BV:8
33 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
34 : eq(12, 33) : BOOL
35 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
36 : eq(12, 35) : BOOL
37 : 4 { 0x4 } : BV:8
38 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
39 : eq(12, 38) : BOOL
40 : 159 { 0x9f -97 } : BV:8
41 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
42 : eq(12, 41) : BOOL
43 : 128 { 0x80 -128 } : BV:8
44 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
45 : eq(12, 44) : BOOL
46 : 1 { 0x1 } : BV:8
47 : 0 { 0x0 } : BV:8
48 : ite(45, 46, 47) : BV:8
49 : ite(42, 43, 48) : BV:8
50 : ite(39, 40, 49) : BV:8
51 : ite(36, 37, 50) : BV:8
52 : ite(34, 23, 51) : BV:8
53 : ite(31, 32, 52) : BV:8
54 : ite(28, 29, 53) : BV:8
55 : ite(25, 26, 54) : BV:8
56 : ite(22, 23, 55) : BV:8
57 : ite(19, 20, 56) : BV:8
58 : ite(17, 18, 57) : BV:8
59 : ite(14, 15, 58) : BV:8
60 : bvadd(38, 11) : BV:32
61 : eq(60, 13) : BOOL
62 : eq(60, 16) : BOOL
63 : eq(60, 10) : BOOL
64 : eq(60, 21) : BOOL
65 : eq(60, 24) : BOOL
66 : eq(60, 27) : BOOL
67 : eq(60, 30) : BOOL
68 : eq(60, 33) : BOOL
69 : eq(60, 35) : BOOL
70 : eq(60, 38) : BOOL
71 : eq(60, 41) : BOOL
72 : eq(60, 44) : BOOL
73 : ite(72, 46, 47) : BV:8
74 : ite(71, 43, 73) : BV:8
75 : ite(70, 40, 74) : BV:8
76 : ite(69, 37, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 32, 77) : BV:8
79 : ite(66, 29, 78) : BV:8
80 : ite(65, 26, 79) : BV:8
81 : ite(64, 23, 80) : BV:8
82 : ite(63, 20, 81) : BV:8
83 : ite(62, 18, 82) : BV:8
84 : ite(61, 15, 83) : BV:8
85 : bvadd(41, 11) : BV:32
86 : eq(85, 13) : BOOL
87 : eq(85, 16) : BOOL
88 : eq(85, 10) : BOOL
89 : eq(85, 21) : BOOL
90 : eq(85, 24) : BOOL
91 : eq(85, 27) : BOOL
92 : eq(85, 30) : BOOL
93 : eq(85, 33) : BOOL
94 : eq(85, 35) : BOOL
95 : eq(85, 38) : BOOL
96 : eq(85, 41) : BOOL
97 : eq(85, 44) : BOOL
98 : ite(97, 46, 47) : BV:8
99 : ite(96, 43, 98) : BV:8
100 : ite(95, 40, 99) : BV:8
101 : ite(94, 37, 100) : BV:8
102 : ite(93, 23, 101) : BV:8
103 : ite(92, 32, 102) : BV:8
104 : ite(91, 29, 103) : BV:8
105 : ite(90, 26, 104) : BV:8
106 : ite(89, 23, 105) : BV:8
107 : ite(88, 20, 106) : BV:8
108 : ite(87, 18, 107) : BV:8
109 : ite(86, 15, 108) : BV:8
110 : bvadd(30, 11) : BV:32
111 : eq(110, 13) : BOOL
112 : eq(110, 16) : BOOL
113 : eq(110, 10) : BOOL
114 : eq(110, 21) : BOOL
115 : eq(110, 24) : BOOL
116 : eq(110, 27) : BOOL
117 : eq(110, 30) : BOOL
118 : eq(110, 33) : BOOL
119 : eq(110, 35) : BOOL
120 : eq(110, 38) : BOOL
121 : eq(110, 41) : BOOL
122 : eq(110, 44) : BOOL
123 : ite(122, 46, 47) : BV:8
124 : ite(121, 43, 123) : BV:8
125 : ite(120, 40, 124) : BV:8
126 : ite(119, 37, 125) : BV:8
127 : ite(118, 23, 126) : BV:8
128 : ite(117, 32, 127) : BV:8
129 : ite(116, 29, 128) : BV:8
130 : ite(115, 26, 129) : BV:8
131 : ite(114, 23, 130) : BV:8
132 : ite(113, 20, 131) : BV:8
133 : ite(112, 18, 132) : BV:8
134 : ite(111, 15, 133) : BV:8
135 : bvconcat(59, 84, 109, 134) : BV:32
136 : bvadd(7, 9, 135) : BV:32
137 : eq(136, 13) : BOOL
138 : eq(136, 16) : BOOL
139 : eq(136, 10) : BOOL
140 : eq(136, 21) : BOOL
141 : eq(136, 24) : BOOL
142 : eq(136, 27) : BOOL
143 : eq(136, 30) : BOOL
144 : eq(136, 33) : BOOL
145 : eq(136, 35) : BOOL
146 : eq(136, 38) : BOOL
147 : eq(136, 41) : BOOL
148 : eq(136, 44) : BOOL
149 : ite(148, 46, 47) : BV:8
150 : ite(147, 43, 149) : BV:8
151 : ite(146, 40, 150) : BV:8
152 : ite(145, 37, 151) : BV:8
153 : ite(144, 23, 152) : BV:8
154 : ite(143, 32, 153) : BV:8
155 : ite(142, 29, 154) : BV:8
156 : ite(141, 26, 155) : BV:8
157 : ite(140, 23, 156) : BV:8
158 : ite(139, 20, 157) : BV:8
159 : ite(138, 18, 158) : BV:8
160 : ite(137, 15, 159) : BV:8
161 : 2 { 0x2 +1.23e129 } : BV:32
162 : bvadd(161, 9, 135) : BV:32
163 : eq(162, 13) : BOOL
164 : eq(162, 16) : BOOL
165 : eq(162, 10) : BOOL
166 : eq(162, 21) : BOOL
167 : eq(162, 24) : BOOL
168 : eq(162, 27) : BOOL
169 : eq(162, 30) : BOOL
170 : eq(162, 33) : BOOL
171 : eq(162, 35) : BOOL
172 : eq(162, 38) : BOOL
173 : eq(162, 41) : BOOL
174 : eq(162, 44) : BOOL
175 : ite(174, 46, 47) : BV:8
176 : ite(173, 43, 175) : BV:8
177 : ite(172, 40, 176) : BV:8
178 : ite(171, 37, 177) : BV:8
179 : ite(170, 23, 178) : BV:8
180 : ite(169, 32, 179) : BV:8
181 : ite(168, 29, 180) : BV:8
182 : ite(167, 26, 181) : BV:8
183 : ite(166, 23, 182) : BV:8
184 : ite(165, 20, 183) : BV:8
185 : ite(164, 18, 184) : BV:8
186 : ite(163, 15, 185) : BV:8
187 : 1 { 0x1 +1.11e129 } : BV:32
188 : bvadd(187, 9, 135) : BV:32
189 : eq(188, 13) : BOOL
190 : eq(188, 16) : BOOL
191 : eq(188, 10) : BOOL
192 : eq(188, 21) : BOOL
193 : eq(188, 24) : BOOL
194 : eq(188, 27) : BOOL
195 : eq(188, 30) : BOOL
196 : eq(188, 33) : BOOL
197 : eq(188, 35) : BOOL
198 : eq(188, 38) : BOOL
199 : eq(188, 41) : BOOL
200 : eq(188, 44) : BOOL
201 : ite(200, 46, 47) : BV:8
202 : ite(199, 43, 201) : BV:8
203 : ite(198, 40, 202) : BV:8
204 : ite(197, 37, 203) : BV:8
205 : ite(196, 23, 204) : BV:8
206 : ite(195, 32, 205) : BV:8
207 : ite(194, 29, 206) : BV:8
208 : ite(193, 26, 207) : BV:8
209 : ite(192, 23, 208) : BV:8
210 : ite(191, 20, 209) : BV:8
211 : ite(190, 18, 210) : BV:8
212 : ite(189, 15, 211) : BV:8
213 : bvadd(9, 135) : BV:32
214 : eq(213, 13) : BOOL
215 : eq(213, 16) : BOOL
216 : eq(213, 10) : BOOL
217 : eq(213, 21) : BOOL
218 : eq(213, 24) : BOOL
219 : eq(213, 27) : BOOL
220 : eq(213, 30) : BOOL
221 : eq(213, 33) : BOOL
222 : eq(213, 35) : BOOL
223 : eq(213, 38) : BOOL
224 : eq(213, 41) : BOOL
225 : eq(213, 44) : BOOL
226 : ite(225, 46, 47) : BV:8
227 : ite(224, 43, 226) : BV:8
228 : ite(223, 40, 227) : BV:8
229 : ite(222, 37, 228) : BV:8
230 : ite(221, 23, 229) : BV:8
231 : ite(220, 32, 230) : BV:8
232 : ite(219, 29, 231) : BV:8
233 : ite(218, 26, 232) : BV:8
234 : ite(217, 23, 233) : BV:8
235 : ite(216, 20, 234) : BV:8
236 : ite(215, 18, 235) : BV:8
237 : ite(214, 15, 236) : BV:8
238 : bvconcat(160, 186, 212, 237) : BV:32
239 : ite(6, 3, 238) : BV:32
240 : lambda(1, 2, 239) : FUNCTION[BV:32,BV:32 -> BV:32]
241 : sym_const(240) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda43576Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
11 : eq(9, 10) : BOOL
12 : 160 { 0xa0 -96 } : BV:8
13 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
14 : eq(9, 13) : BOOL
15 : 43 { 0x2b } : BV:8
16 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
17 : eq(9, 16) : BOOL
18 : 241 { 0xf1 -15 } : BV:8
19 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
20 : eq(9, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
23 : eq(9, 22) : BOOL
24 : 68 { 0x44 } : BV:8
25 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
26 : eq(9, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
29 : eq(9, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
32 : eq(9, 31) : BOOL
33 : eq(9, 8) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
36 : eq(9, 35) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
39 : eq(9, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
42 : eq(9, 41) : BOOL
43 : 1 { 0x1 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(32, 21, 48) : BV:8
50 : ite(29, 30, 49) : BV:8
51 : ite(26, 27, 50) : BV:8
52 : ite(23, 24, 51) : BV:8
53 : ite(20, 21, 52) : BV:8
54 : ite(17, 18, 53) : BV:8
55 : ite(14, 15, 54) : BV:8
56 : ite(11, 12, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 7, 8) : BV:32
59 : eq(58, 10) : BOOL
60 : eq(58, 13) : BOOL
61 : eq(58, 16) : BOOL
62 : eq(58, 19) : BOOL
63 : eq(58, 22) : BOOL
64 : eq(58, 25) : BOOL
65 : eq(58, 28) : BOOL
66 : eq(58, 31) : BOOL
67 : eq(58, 8) : BOOL
68 : eq(58, 35) : BOOL
69 : eq(58, 38) : BOOL
70 : eq(58, 41) : BOOL
71 : ite(70, 43, 44) : BV:8
72 : ite(69, 40, 71) : BV:8
73 : ite(68, 37, 72) : BV:8
74 : ite(67, 34, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 30, 75) : BV:8
77 : ite(64, 27, 76) : BV:8
78 : ite(63, 24, 77) : BV:8
79 : ite(62, 21, 78) : BV:8
80 : ite(61, 18, 79) : BV:8
81 : ite(60, 15, 80) : BV:8
82 : ite(59, 12, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 7, 8) : BV:32
85 : eq(84, 10) : BOOL
86 : eq(84, 13) : BOOL
87 : eq(84, 16) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : eq(84, 31) : BOOL
93 : eq(84, 8) : BOOL
94 : eq(84, 35) : BOOL
95 : eq(84, 38) : BOOL
96 : eq(84, 41) : BOOL
97 : ite(96, 43, 44) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 37, 98) : BV:8
100 : ite(93, 34, 99) : BV:8
101 : ite(92, 21, 100) : BV:8
102 : ite(91, 30, 101) : BV:8
103 : ite(90, 27, 102) : BV:8
104 : ite(89, 24, 103) : BV:8
105 : ite(88, 21, 104) : BV:8
106 : ite(87, 18, 105) : BV:8
107 : ite(86, 15, 106) : BV:8
108 : ite(85, 12, 107) : BV:8
109 : bvadd(7, 8) : BV:32
110 : eq(109, 10) : BOOL
111 : eq(109, 13) : BOOL
112 : eq(109, 16) : BOOL
113 : eq(109, 19) : BOOL
114 : eq(109, 22) : BOOL
115 : eq(109, 25) : BOOL
116 : eq(109, 28) : BOOL
117 : eq(109, 31) : BOOL
118 : eq(109, 8) : BOOL
119 : eq(109, 35) : BOOL
120 : eq(109, 38) : BOOL
121 : eq(109, 41) : BOOL
122 : ite(121, 43, 44) : BV:8
123 : ite(120, 40, 122) : BV:8
124 : ite(119, 37, 123) : BV:8
125 : ite(118, 34, 124) : BV:8
126 : ite(117, 21, 125) : BV:8
127 : ite(116, 30, 126) : BV:8
128 : ite(115, 27, 127) : BV:8
129 : ite(114, 24, 128) : BV:8
130 : ite(113, 21, 129) : BV:8
131 : ite(112, 18, 130) : BV:8
132 : ite(111, 15, 131) : BV:8
133 : ite(110, 12, 132) : BV:8
134 : bvconcat(56, 82, 108, 133) : BV:32
135 : ite(3, 4, 134) : BV:32
136 : lambda(1, 135) : FUNCTION[BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda43580Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
11 : eq(9, 10) : BOOL
12 : 160 { 0xa0 -96 } : BV:8
13 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
14 : eq(9, 13) : BOOL
15 : 43 { 0x2b } : BV:8
16 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
17 : eq(9, 16) : BOOL
18 : 241 { 0xf1 -15 } : BV:8
19 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
20 : eq(9, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
23 : eq(9, 22) : BOOL
24 : 68 { 0x44 } : BV:8
25 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
26 : eq(9, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
29 : eq(9, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
32 : eq(9, 31) : BOOL
33 : eq(9, 8) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
36 : eq(9, 35) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
39 : eq(9, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
42 : eq(9, 41) : BOOL
43 : 1 { 0x1 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(32, 21, 48) : BV:8
50 : ite(29, 30, 49) : BV:8
51 : ite(26, 27, 50) : BV:8
52 : ite(23, 24, 51) : BV:8
53 : ite(20, 21, 52) : BV:8
54 : ite(17, 18, 53) : BV:8
55 : ite(14, 15, 54) : BV:8
56 : ite(11, 12, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 7, 8) : BV:32
59 : eq(58, 10) : BOOL
60 : eq(58, 13) : BOOL
61 : eq(58, 16) : BOOL
62 : eq(58, 19) : BOOL
63 : eq(58, 22) : BOOL
64 : eq(58, 25) : BOOL
65 : eq(58, 28) : BOOL
66 : eq(58, 31) : BOOL
67 : eq(58, 8) : BOOL
68 : eq(58, 35) : BOOL
69 : eq(58, 38) : BOOL
70 : eq(58, 41) : BOOL
71 : ite(70, 43, 44) : BV:8
72 : ite(69, 40, 71) : BV:8
73 : ite(68, 37, 72) : BV:8
74 : ite(67, 34, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 30, 75) : BV:8
77 : ite(64, 27, 76) : BV:8
78 : ite(63, 24, 77) : BV:8
79 : ite(62, 21, 78) : BV:8
80 : ite(61, 18, 79) : BV:8
81 : ite(60, 15, 80) : BV:8
82 : ite(59, 12, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 7, 8) : BV:32
85 : eq(84, 10) : BOOL
86 : eq(84, 13) : BOOL
87 : eq(84, 16) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : eq(84, 31) : BOOL
93 : eq(84, 8) : BOOL
94 : eq(84, 35) : BOOL
95 : eq(84, 38) : BOOL
96 : eq(84, 41) : BOOL
97 : ite(96, 43, 44) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 37, 98) : BV:8
100 : ite(93, 34, 99) : BV:8
101 : ite(92, 21, 100) : BV:8
102 : ite(91, 30, 101) : BV:8
103 : ite(90, 27, 102) : BV:8
104 : ite(89, 24, 103) : BV:8
105 : ite(88, 21, 104) : BV:8
106 : ite(87, 18, 105) : BV:8
107 : ite(86, 15, 106) : BV:8
108 : ite(85, 12, 107) : BV:8
109 : bvadd(7, 8) : BV:32
110 : eq(109, 10) : BOOL
111 : eq(109, 13) : BOOL
112 : eq(109, 16) : BOOL
113 : eq(109, 19) : BOOL
114 : eq(109, 22) : BOOL
115 : eq(109, 25) : BOOL
116 : eq(109, 28) : BOOL
117 : eq(109, 31) : BOOL
118 : eq(109, 8) : BOOL
119 : eq(109, 35) : BOOL
120 : eq(109, 38) : BOOL
121 : eq(109, 41) : BOOL
122 : ite(121, 43, 44) : BV:8
123 : ite(120, 40, 122) : BV:8
124 : ite(119, 37, 123) : BV:8
125 : ite(118, 34, 124) : BV:8
126 : ite(117, 21, 125) : BV:8
127 : ite(116, 30, 126) : BV:8
128 : ite(115, 27, 127) : BV:8
129 : ite(114, 24, 128) : BV:8
130 : ite(113, 21, 129) : BV:8
131 : ite(112, 18, 130) : BV:8
132 : ite(111, 15, 131) : BV:8
133 : ite(110, 12, 132) : BV:8
134 : bvconcat(56, 82, 108, 133) : BV:32
135 : ite(3, 4, 134) : BV:32
136 : lambda(1, 135) : FUNCTION[BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda43581Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 268517380 { 0x10014004 +1.976610e161 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2687190080 { 0xa02b4440 -1607777216 -1.33802032e193 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 3221225507 { 0xc0000023 -1073741789 -1.417e1 } : BV:32
11 : eq(9, 10) : BOOL
12 : 160 { 0xa0 -96 } : BV:8
13 : 3221225506 { 0xc0000022 -1073741790 -1.405e1 } : BV:32
14 : eq(9, 13) : BOOL
15 : 43 { 0x2b } : BV:8
16 : 3221224995 { 0xbffffe23 -1073742301 -1.99994313e0 } : BV:32
17 : eq(9, 16) : BOOL
18 : 241 { 0xf1 -15 } : BV:8
19 : 3221225504 { 0xc0000020 -1073741792 -1.381e1 } : BV:32
20 : eq(9, 19) : BOOL
21 : 64 { 0x40 } : BV:8
22 : 3221225505 { 0xc0000021 -1073741791 -1.393e1 } : BV:32
23 : eq(9, 22) : BOOL
24 : 68 { 0x44 } : BV:8
25 : 2687190083 { 0xa02b4443 -1607777213 -1.33802068e193 } : BV:32
26 : eq(9, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 3221224992 { 0xbffffe20 -1073742304 -1.99994277e0 } : BV:32
29 : eq(9, 28) : BOOL
30 : 8 { 0x8 } : BV:8
31 : 2687190081 { 0xa02b4441 -1607777215 -1.33802044e193 } : BV:32
32 : eq(9, 31) : BOOL
33 : eq(9, 8) : BOOL
34 : 4 { 0x4 } : BV:8
35 : 3221224994 { 0xbffffe22 -1073742302 -1.99994301e0 } : BV:32
36 : eq(9, 35) : BOOL
37 : 159 { 0x9f -97 } : BV:8
38 : 3221224993 { 0xbffffe21 -1073742303 -1.99994289e0 } : BV:32
39 : eq(9, 38) : BOOL
40 : 128 { 0x80 -128 } : BV:8
41 : 2687190082 { 0xa02b4442 -1607777214 -1.33802056e193 } : BV:32
42 : eq(9, 41) : BOOL
43 : 1 { 0x1 } : BV:8
44 : 0 { 0x0 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(39, 40, 45) : BV:8
47 : ite(36, 37, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(32, 21, 48) : BV:8
50 : ite(29, 30, 49) : BV:8
51 : ite(26, 27, 50) : BV:8
52 : ite(23, 24, 51) : BV:8
53 : ite(20, 21, 52) : BV:8
54 : ite(17, 18, 53) : BV:8
55 : ite(14, 15, 54) : BV:8
56 : ite(11, 12, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 7, 8) : BV:32
59 : eq(58, 10) : BOOL
60 : eq(58, 13) : BOOL
61 : eq(58, 16) : BOOL
62 : eq(58, 19) : BOOL
63 : eq(58, 22) : BOOL
64 : eq(58, 25) : BOOL
65 : eq(58, 28) : BOOL
66 : eq(58, 31) : BOOL
67 : eq(58, 8) : BOOL
68 : eq(58, 35) : BOOL
69 : eq(58, 38) : BOOL
70 : eq(58, 41) : BOOL
71 : ite(70, 43, 44) : BV:8
72 : ite(69, 40, 71) : BV:8
73 : ite(68, 37, 72) : BV:8
74 : ite(67, 34, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 30, 75) : BV:8
77 : ite(64, 27, 76) : BV:8
78 : ite(63, 24, 77) : BV:8
79 : ite(62, 21, 78) : BV:8
80 : ite(61, 18, 79) : BV:8
81 : ite(60, 15, 80) : BV:8
82 : ite(59, 12, 81) : BV:8
83 : 1 { 0x1 +1.11e129 } : BV:32
84 : bvadd(83, 7, 8) : BV:32
85 : eq(84, 10) : BOOL
86 : eq(84, 13) : BOOL
87 : eq(84, 16) : BOOL
88 : eq(84, 19) : BOOL
89 : eq(84, 22) : BOOL
90 : eq(84, 25) : BOOL
91 : eq(84, 28) : BOOL
92 : eq(84, 31) : BOOL
93 : eq(84, 8) : BOOL
94 : eq(84, 35) : BOOL
95 : eq(84, 38) : BOOL
96 : eq(84, 41) : BOOL
97 : ite(96, 43, 44) : BV:8
98 : ite(95, 40, 97) : BV:8
99 : ite(94, 37, 98) : BV:8
100 : ite(93, 34, 99) : BV:8
101 : ite(92, 21, 100) : BV:8
102 : ite(91, 30, 101) : BV:8
103 : ite(90, 27, 102) : BV:8
104 : ite(89, 24, 103) : BV:8
105 : ite(88, 21, 104) : BV:8
106 : ite(87, 18, 105) : BV:8
107 : ite(86, 15, 106) : BV:8
108 : ite(85, 12, 107) : BV:8
109 : bvadd(7, 8) : BV:32
110 : eq(109, 10) : BOOL
111 : eq(109, 13) : BOOL
112 : eq(109, 16) : BOOL
113 : eq(109, 19) : BOOL
114 : eq(109, 22) : BOOL
115 : eq(109, 25) : BOOL
116 : eq(109, 28) : BOOL
117 : eq(109, 31) : BOOL
118 : eq(109, 8) : BOOL
119 : eq(109, 35) : BOOL
120 : eq(109, 38) : BOOL
121 : eq(109, 41) : BOOL
122 : ite(121, 43, 44) : BV:8
123 : ite(120, 40, 122) : BV:8
124 : ite(119, 37, 123) : BV:8
125 : ite(118, 34, 124) : BV:8
126 : ite(117, 21, 125) : BV:8
127 : ite(116, 30, 126) : BV:8
128 : ite(115, 27, 127) : BV:8
129 : ite(114, 24, 128) : BV:8
130 : ite(113, 21, 129) : BV:8
131 : ite(112, 18, 130) : BV:8
132 : ite(111, 15, 131) : BV:8
133 : ite(110, 12, 132) : BV:8
134 : bvconcat(56, 82, 108, 133) : BV:32
135 : ite(3, 4, 134) : BV:32
136 : lambda(1, 135) : FUNCTION[BV:32 -> BV:32]
137 : sym_const(136) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4096 ] -> true, [ 4097; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1118817681
=counter_example_end
=global nodece 53 num_edges_traversed 2
=global nodece 53 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 54
=global nodece 54 nodece z3.ce4625.num_edges_traversed1
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3.ce4625 393bf387a802c5e2691a04ecd127b
=input.spec-%var-x-1
1 : Lambda45225Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45226Var : BV:32
18 : Lambda45227Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45228Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 134217731 { 0x8000003 +1.35e145 } : BV:32
80 : eq(78, 79) : BOOL
81 : 127 { 0x7f } : BV:8
82 : 134217730 { 0x8000002 +1.23e145 } : BV:32
83 : eq(78, 82) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : eq(78, 76) : BOOL
86 : 253 { 0xfd -3 } : BV:8
87 : 134217728 { 0x8000000 +1.0e145 } : BV:32
88 : eq(78, 87) : BOOL
89 : 244 { 0xf4 -12 } : BV:8
90 : 134217729 { 0x8000001 +1.11e145 } : BV:32
91 : eq(78, 90) : BOOL
92 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
93 : eq(78, 92) : BOOL
94 : 188 { 0xbc -68 } : BV:8
95 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
96 : eq(78, 95) : BOOL
97 : 2 { 0x2 } : BV:8
98 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
99 : eq(78, 98) : BOOL
100 : 119 { 0x77 } : BV:8
101 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
102 : eq(78, 101) : BOOL
103 : 0 { 0x0 } : BV:8
104 : ite(102, 81, 103) : BV:8
105 : ite(99, 100, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(91, 84, 107) : BV:8
109 : ite(88, 89, 108) : BV:8
110 : ite(85, 86, 109) : BV:8
111 : ite(83, 84, 110) : BV:8
112 : ite(80, 81, 111) : BV:8
113 : bvadd(98, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 76) : BOOL
117 : eq(113, 87) : BOOL
118 : eq(113, 90) : BOOL
119 : eq(113, 92) : BOOL
120 : eq(113, 95) : BOOL
121 : eq(113, 98) : BOOL
122 : eq(113, 101) : BOOL
123 : ite(122, 81, 103) : BV:8
124 : ite(121, 100, 123) : BV:8
125 : ite(120, 97, 124) : BV:8
126 : ite(119, 94, 125) : BV:8
127 : ite(118, 84, 126) : BV:8
128 : ite(117, 89, 127) : BV:8
129 : ite(116, 86, 128) : BV:8
130 : ite(115, 84, 129) : BV:8
131 : ite(114, 81, 130) : BV:8
132 : bvadd(101, 77) : BV:32
133 : eq(132, 79) : BOOL
134 : eq(132, 82) : BOOL
135 : eq(132, 76) : BOOL
136 : eq(132, 87) : BOOL
137 : eq(132, 90) : BOOL
138 : eq(132, 92) : BOOL
139 : eq(132, 95) : BOOL
140 : eq(132, 98) : BOOL
141 : eq(132, 101) : BOOL
142 : ite(141, 81, 103) : BV:8
143 : ite(140, 100, 142) : BV:8
144 : ite(139, 97, 143) : BV:8
145 : ite(138, 94, 144) : BV:8
146 : ite(137, 84, 145) : BV:8
147 : ite(136, 89, 146) : BV:8
148 : ite(135, 86, 147) : BV:8
149 : ite(134, 84, 148) : BV:8
150 : ite(133, 81, 149) : BV:8
151 : bvadd(92, 77) : BV:32
152 : eq(151, 79) : BOOL
153 : eq(151, 82) : BOOL
154 : eq(151, 76) : BOOL
155 : eq(151, 87) : BOOL
156 : eq(151, 90) : BOOL
157 : eq(151, 92) : BOOL
158 : eq(151, 95) : BOOL
159 : eq(151, 98) : BOOL
160 : eq(151, 101) : BOOL
161 : ite(160, 81, 103) : BV:8
162 : ite(159, 100, 161) : BV:8
163 : ite(158, 97, 162) : BV:8
164 : ite(157, 94, 163) : BV:8
165 : ite(156, 84, 164) : BV:8
166 : ite(155, 89, 165) : BV:8
167 : ite(154, 86, 166) : BV:8
168 : ite(153, 84, 167) : BV:8
169 : ite(152, 81, 168) : BV:8
170 : bvconcat(112, 131, 150, 169) : BV:32
171 : bvadd(34, 75, 170) : BV:32
172 : eq(171, 79) : BOOL
173 : eq(171, 82) : BOOL
174 : eq(171, 76) : BOOL
175 : eq(171, 87) : BOOL
176 : eq(171, 90) : BOOL
177 : eq(171, 92) : BOOL
178 : eq(171, 95) : BOOL
179 : eq(171, 98) : BOOL
180 : eq(171, 101) : BOOL
181 : ite(180, 81, 103) : BV:8
182 : ite(179, 100, 181) : BV:8
183 : ite(178, 97, 182) : BV:8
184 : ite(177, 94, 183) : BV:8
185 : ite(176, 84, 184) : BV:8
186 : ite(175, 89, 185) : BV:8
187 : ite(174, 86, 186) : BV:8
188 : ite(173, 84, 187) : BV:8
189 : ite(172, 81, 188) : BV:8
190 : 2 { 0x2 +1.23e129 } : BV:32
191 : bvadd(190, 75, 170) : BV:32
192 : eq(191, 79) : BOOL
193 : eq(191, 82) : BOOL
194 : eq(191, 76) : BOOL
195 : eq(191, 87) : BOOL
196 : eq(191, 90) : BOOL
197 : eq(191, 92) : BOOL
198 : eq(191, 95) : BOOL
199 : eq(191, 98) : BOOL
200 : eq(191, 101) : BOOL
201 : ite(200, 81, 103) : BV:8
202 : ite(199, 100, 201) : BV:8
203 : ite(198, 97, 202) : BV:8
204 : ite(197, 94, 203) : BV:8
205 : ite(196, 84, 204) : BV:8
206 : ite(195, 89, 205) : BV:8
207 : ite(194, 86, 206) : BV:8
208 : ite(193, 84, 207) : BV:8
209 : ite(192, 81, 208) : BV:8
210 : 1 { 0x1 +1.11e129 } : BV:32
211 : bvadd(210, 75, 170) : BV:32
212 : eq(211, 79) : BOOL
213 : eq(211, 82) : BOOL
214 : eq(211, 76) : BOOL
215 : eq(211, 87) : BOOL
216 : eq(211, 90) : BOOL
217 : eq(211, 92) : BOOL
218 : eq(211, 95) : BOOL
219 : eq(211, 98) : BOOL
220 : eq(211, 101) : BOOL
221 : ite(220, 81, 103) : BV:8
222 : ite(219, 100, 221) : BV:8
223 : ite(218, 97, 222) : BV:8
224 : ite(217, 94, 223) : BV:8
225 : ite(216, 84, 224) : BV:8
226 : ite(215, 89, 225) : BV:8
227 : ite(214, 86, 226) : BV:8
228 : ite(213, 84, 227) : BV:8
229 : ite(212, 81, 228) : BV:8
230 : bvadd(75, 170) : BV:32
231 : eq(230, 79) : BOOL
232 : eq(230, 82) : BOOL
233 : eq(230, 76) : BOOL
234 : eq(230, 87) : BOOL
235 : eq(230, 90) : BOOL
236 : eq(230, 92) : BOOL
237 : eq(230, 95) : BOOL
238 : eq(230, 98) : BOOL
239 : eq(230, 101) : BOOL
240 : ite(239, 81, 103) : BV:8
241 : ite(238, 100, 240) : BV:8
242 : ite(237, 97, 241) : BV:8
243 : ite(236, 94, 242) : BV:8
244 : ite(235, 84, 243) : BV:8
245 : ite(234, 89, 244) : BV:8
246 : ite(233, 86, 245) : BV:8
247 : ite(232, 84, 246) : BV:8
248 : ite(231, 81, 247) : BV:8
249 : bvconcat(189, 209, 229, 248) : BV:32
250 : ite(55, 2, 249) : BV:32
251 : ite(74, 249, 250) : BV:32
252 : ite(55, 2, 251) : BV:32
253 : lambda(52, 252) : FUNCTION[BV:32 -> BV:32]
254 : map(51, 253) : MAP[BV:32 -> BV:32]
255 : lambda(17, 254) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
256 : map(16, 255) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
257 : sym_const(256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda45252Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45253Var : BV:32
18 : eq(17, 4) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
22 : bvadd(4, 20, 21) : BV:32
23 : 134217731 { 0x8000003 +1.35e145 } : BV:32
24 : eq(22, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 134217730 { 0x8000002 +1.23e145 } : BV:32
27 : eq(22, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
30 : eq(22, 29) : BOOL
31 : 253 { 0xfd -3 } : BV:8
32 : 134217728 { 0x8000000 +1.0e145 } : BV:32
33 : eq(22, 32) : BOOL
34 : 244 { 0xf4 -12 } : BV:8
35 : 134217729 { 0x8000001 +1.11e145 } : BV:32
36 : eq(22, 35) : BOOL
37 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
38 : eq(22, 37) : BOOL
39 : 188 { 0xbc -68 } : BV:8
40 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
41 : eq(22, 40) : BOOL
42 : 2 { 0x2 } : BV:8
43 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
44 : eq(22, 43) : BOOL
45 : 119 { 0x77 } : BV:8
46 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
47 : eq(22, 46) : BOOL
48 : 0 { 0x0 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(41, 42, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 28, 52) : BV:8
54 : ite(33, 34, 53) : BV:8
55 : ite(30, 31, 54) : BV:8
56 : ite(27, 28, 55) : BV:8
57 : ite(24, 25, 56) : BV:8
58 : bvadd(19, 20, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 29) : BOOL
62 : eq(58, 32) : BOOL
63 : eq(58, 35) : BOOL
64 : eq(58, 37) : BOOL
65 : eq(58, 40) : BOOL
66 : eq(58, 43) : BOOL
67 : eq(58, 46) : BOOL
68 : ite(67, 25, 48) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 28, 71) : BV:8
73 : ite(62, 34, 72) : BV:8
74 : ite(61, 31, 73) : BV:8
75 : ite(60, 28, 74) : BV:8
76 : ite(59, 25, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 20, 21) : BV:32
79 : eq(78, 23) : BOOL
80 : eq(78, 26) : BOOL
81 : eq(78, 29) : BOOL
82 : eq(78, 32) : BOOL
83 : eq(78, 35) : BOOL
84 : eq(78, 37) : BOOL
85 : eq(78, 40) : BOOL
86 : eq(78, 43) : BOOL
87 : eq(78, 46) : BOOL
88 : ite(87, 25, 48) : BV:8
89 : ite(86, 45, 88) : BV:8
90 : ite(85, 42, 89) : BV:8
91 : ite(84, 39, 90) : BV:8
92 : ite(83, 28, 91) : BV:8
93 : ite(82, 34, 92) : BV:8
94 : ite(81, 31, 93) : BV:8
95 : ite(80, 28, 94) : BV:8
96 : ite(79, 25, 95) : BV:8
97 : bvadd(20, 21) : BV:32
98 : eq(97, 23) : BOOL
99 : eq(97, 26) : BOOL
100 : eq(97, 29) : BOOL
101 : eq(97, 32) : BOOL
102 : eq(97, 35) : BOOL
103 : eq(97, 37) : BOOL
104 : eq(97, 40) : BOOL
105 : eq(97, 43) : BOOL
106 : eq(97, 46) : BOOL
107 : ite(106, 25, 48) : BV:8
108 : ite(105, 45, 107) : BV:8
109 : ite(104, 42, 108) : BV:8
110 : ite(103, 39, 109) : BV:8
111 : ite(102, 28, 110) : BV:8
112 : ite(101, 34, 111) : BV:8
113 : ite(100, 31, 112) : BV:8
114 : ite(99, 28, 113) : BV:8
115 : ite(98, 25, 114) : BV:8
116 : bvconcat(57, 76, 96, 115) : BV:32
117 : ite(18, 19, 116) : BV:32
118 : lambda(17, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(16, 118) : MAP[BV:32 -> BV:32]
120 : sym_const(119) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 134217715 ] -> 0, [ 134217716; 134217716 ] -> 188, [ 134217717; 134217717 ] -> 127, [ 134217718; 134217718 ] -> 119, [ 134217719; 134217719 ] -> 253, [ 134217720; 134217727 ] -> 0, [ 134217728; 134217728 ] -> 244, [ 134217729; 134217730 ] -> 255, [ 134217731; 134217731 ] -> 127, [ 134217732; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 2, [ 2147483649; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 786497559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 786497560; 786497563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 786497564; 1222123511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1222123512; 1222123515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1222123516; 2141941723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2141941724; 2141941727 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2141941728; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2141941724 { 0x7fab6fdc +1.33935117e128 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 786497560 { 0x2ee10018 +1.75781536e222 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1222123512 { 0x48d81ff8 +1.68847560e18 } : BV:32
=input.dst.llvm-%x
1 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45245Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45246Var : BV:32
18 : Lambda45247Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45248Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 134217731 { 0x8000003 +1.35e145 } : BV:32
61 : eq(59, 60) : BOOL
62 : 127 { 0x7f } : BV:8
63 : 134217730 { 0x8000002 +1.23e145 } : BV:32
64 : eq(59, 63) : BOOL
65 : 255 { 0xff -1 } : BV:8
66 : eq(59, 57) : BOOL
67 : 253 { 0xfd -3 } : BV:8
68 : 134217728 { 0x8000000 +1.0e145 } : BV:32
69 : eq(59, 68) : BOOL
70 : 244 { 0xf4 -12 } : BV:8
71 : 134217729 { 0x8000001 +1.11e145 } : BV:32
72 : eq(59, 71) : BOOL
73 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
74 : eq(59, 73) : BOOL
75 : 188 { 0xbc -68 } : BV:8
76 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
77 : eq(59, 76) : BOOL
78 : 2 { 0x2 } : BV:8
79 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
80 : eq(59, 79) : BOOL
81 : 119 { 0x77 } : BV:8
82 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
83 : eq(59, 82) : BOOL
84 : 0 { 0x0 } : BV:8
85 : ite(83, 62, 84) : BV:8
86 : ite(80, 81, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(72, 65, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(66, 67, 90) : BV:8
92 : ite(64, 65, 91) : BV:8
93 : ite(61, 62, 92) : BV:8
94 : bvadd(79, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 57) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 71) : BOOL
100 : eq(94, 73) : BOOL
101 : eq(94, 76) : BOOL
102 : eq(94, 79) : BOOL
103 : eq(94, 82) : BOOL
104 : ite(103, 62, 84) : BV:8
105 : ite(102, 81, 104) : BV:8
106 : ite(101, 78, 105) : BV:8
107 : ite(100, 75, 106) : BV:8
108 : ite(99, 65, 107) : BV:8
109 : ite(98, 70, 108) : BV:8
110 : ite(97, 67, 109) : BV:8
111 : ite(96, 65, 110) : BV:8
112 : ite(95, 62, 111) : BV:8
113 : bvadd(82, 58) : BV:32
114 : eq(113, 60) : BOOL
115 : eq(113, 63) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 68) : BOOL
118 : eq(113, 71) : BOOL
119 : eq(113, 73) : BOOL
120 : eq(113, 76) : BOOL
121 : eq(113, 79) : BOOL
122 : eq(113, 82) : BOOL
123 : ite(122, 62, 84) : BV:8
124 : ite(121, 81, 123) : BV:8
125 : ite(120, 78, 124) : BV:8
126 : ite(119, 75, 125) : BV:8
127 : ite(118, 65, 126) : BV:8
128 : ite(117, 70, 127) : BV:8
129 : ite(116, 67, 128) : BV:8
130 : ite(115, 65, 129) : BV:8
131 : ite(114, 62, 130) : BV:8
132 : bvadd(73, 58) : BV:32
133 : eq(132, 60) : BOOL
134 : eq(132, 63) : BOOL
135 : eq(132, 57) : BOOL
136 : eq(132, 68) : BOOL
137 : eq(132, 71) : BOOL
138 : eq(132, 73) : BOOL
139 : eq(132, 76) : BOOL
140 : eq(132, 79) : BOOL
141 : eq(132, 82) : BOOL
142 : ite(141, 62, 84) : BV:8
143 : ite(140, 81, 142) : BV:8
144 : ite(139, 78, 143) : BV:8
145 : ite(138, 75, 144) : BV:8
146 : ite(137, 65, 145) : BV:8
147 : ite(136, 70, 146) : BV:8
148 : ite(135, 67, 147) : BV:8
149 : ite(134, 65, 148) : BV:8
150 : ite(133, 62, 149) : BV:8
151 : bvconcat(93, 112, 131, 150) : BV:32
152 : bvadd(34, 56, 151) : BV:32
153 : eq(152, 60) : BOOL
154 : eq(152, 63) : BOOL
155 : eq(152, 57) : BOOL
156 : eq(152, 68) : BOOL
157 : eq(152, 71) : BOOL
158 : eq(152, 73) : BOOL
159 : eq(152, 76) : BOOL
160 : eq(152, 79) : BOOL
161 : eq(152, 82) : BOOL
162 : ite(161, 62, 84) : BV:8
163 : ite(160, 81, 162) : BV:8
164 : ite(159, 78, 163) : BV:8
165 : ite(158, 75, 164) : BV:8
166 : ite(157, 65, 165) : BV:8
167 : ite(156, 70, 166) : BV:8
168 : ite(155, 67, 167) : BV:8
169 : ite(154, 65, 168) : BV:8
170 : ite(153, 62, 169) : BV:8
171 : 2 { 0x2 +1.23e129 } : BV:32
172 : bvadd(171, 56, 151) : BV:32
173 : eq(172, 60) : BOOL
174 : eq(172, 63) : BOOL
175 : eq(172, 57) : BOOL
176 : eq(172, 68) : BOOL
177 : eq(172, 71) : BOOL
178 : eq(172, 73) : BOOL
179 : eq(172, 76) : BOOL
180 : eq(172, 79) : BOOL
181 : eq(172, 82) : BOOL
182 : ite(181, 62, 84) : BV:8
183 : ite(180, 81, 182) : BV:8
184 : ite(179, 78, 183) : BV:8
185 : ite(178, 75, 184) : BV:8
186 : ite(177, 65, 185) : BV:8
187 : ite(176, 70, 186) : BV:8
188 : ite(175, 67, 187) : BV:8
189 : ite(174, 65, 188) : BV:8
190 : ite(173, 62, 189) : BV:8
191 : 1 { 0x1 +1.11e129 } : BV:32
192 : bvadd(191, 56, 151) : BV:32
193 : eq(192, 60) : BOOL
194 : eq(192, 63) : BOOL
195 : eq(192, 57) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 71) : BOOL
198 : eq(192, 73) : BOOL
199 : eq(192, 76) : BOOL
200 : eq(192, 79) : BOOL
201 : eq(192, 82) : BOOL
202 : ite(201, 62, 84) : BV:8
203 : ite(200, 81, 202) : BV:8
204 : ite(199, 78, 203) : BV:8
205 : ite(198, 75, 204) : BV:8
206 : ite(197, 65, 205) : BV:8
207 : ite(196, 70, 206) : BV:8
208 : ite(195, 67, 207) : BV:8
209 : ite(194, 65, 208) : BV:8
210 : ite(193, 62, 209) : BV:8
211 : bvadd(56, 151) : BV:32
212 : eq(211, 60) : BOOL
213 : eq(211, 63) : BOOL
214 : eq(211, 57) : BOOL
215 : eq(211, 68) : BOOL
216 : eq(211, 71) : BOOL
217 : eq(211, 73) : BOOL
218 : eq(211, 76) : BOOL
219 : eq(211, 79) : BOOL
220 : eq(211, 82) : BOOL
221 : ite(220, 62, 84) : BV:8
222 : ite(219, 81, 221) : BV:8
223 : ite(218, 78, 222) : BV:8
224 : ite(217, 75, 223) : BV:8
225 : ite(216, 65, 224) : BV:8
226 : ite(215, 70, 225) : BV:8
227 : ite(214, 67, 226) : BV:8
228 : ite(213, 65, 227) : BV:8
229 : ite(212, 62, 228) : BV:8
230 : bvconcat(170, 190, 210, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : lambda(52, 231) : FUNCTION[BV:32 -> BV:32]
233 : map(51, 232) : MAP[BV:32 -> BV:32]
234 : lambda(17, 233) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
235 : map(16, 234) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
236 : sym_const(235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 64 { 0x40 +1.762e129 } : BV:32
2 : unit : UNIT
3 : Lambda45234Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda45235Var : BV:32
20 : eq(19, 6) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(19, 4) : BOOL
23 : bvmul(10, 19) : BV:32
24 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
25 : bvadd(6, 23, 24) : BV:32
26 : 134217731 { 0x8000003 +1.35e145 } : BV:32
27 : eq(25, 26) : BOOL
28 : 127 { 0x7f } : BV:8
29 : 134217730 { 0x8000002 +1.23e145 } : BV:32
30 : eq(25, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
33 : eq(25, 32) : BOOL
34 : 253 { 0xfd -3 } : BV:8
35 : 134217728 { 0x8000000 +1.0e145 } : BV:32
36 : eq(25, 35) : BOOL
37 : 244 { 0xf4 -12 } : BV:8
38 : 134217729 { 0x8000001 +1.11e145 } : BV:32
39 : eq(25, 38) : BOOL
40 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
41 : eq(25, 40) : BOOL
42 : 188 { 0xbc -68 } : BV:8
43 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
44 : eq(25, 43) : BOOL
45 : 2 { 0x2 } : BV:8
46 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
47 : eq(25, 46) : BOOL
48 : 119 { 0x77 } : BV:8
49 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
50 : eq(25, 49) : BOOL
51 : 0 { 0x0 } : BV:8
52 : ite(50, 28, 51) : BV:8
53 : ite(47, 48, 52) : BV:8
54 : ite(44, 45, 53) : BV:8
55 : ite(41, 42, 54) : BV:8
56 : ite(39, 31, 55) : BV:8
57 : ite(36, 37, 56) : BV:8
58 : ite(33, 34, 57) : BV:8
59 : ite(30, 31, 58) : BV:8
60 : ite(27, 28, 59) : BV:8
61 : bvadd(21, 23, 24) : BV:32
62 : eq(61, 26) : BOOL
63 : eq(61, 29) : BOOL
64 : eq(61, 32) : BOOL
65 : eq(61, 35) : BOOL
66 : eq(61, 38) : BOOL
67 : eq(61, 40) : BOOL
68 : eq(61, 43) : BOOL
69 : eq(61, 46) : BOOL
70 : eq(61, 49) : BOOL
71 : ite(70, 28, 51) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 31, 74) : BV:8
76 : ite(65, 37, 75) : BV:8
77 : ite(64, 34, 76) : BV:8
78 : ite(63, 31, 77) : BV:8
79 : ite(62, 28, 78) : BV:8
80 : 1 { 0x1 +1.11e129 } : BV:32
81 : bvadd(80, 23, 24) : BV:32
82 : eq(81, 26) : BOOL
83 : eq(81, 29) : BOOL
84 : eq(81, 32) : BOOL
85 : eq(81, 35) : BOOL
86 : eq(81, 38) : BOOL
87 : eq(81, 40) : BOOL
88 : eq(81, 43) : BOOL
89 : eq(81, 46) : BOOL
90 : eq(81, 49) : BOOL
91 : ite(90, 28, 51) : BV:8
92 : ite(89, 48, 91) : BV:8
93 : ite(88, 45, 92) : BV:8
94 : ite(87, 42, 93) : BV:8
95 : ite(86, 31, 94) : BV:8
96 : ite(85, 37, 95) : BV:8
97 : ite(84, 34, 96) : BV:8
98 : ite(83, 31, 97) : BV:8
99 : ite(82, 28, 98) : BV:8
100 : bvadd(23, 24) : BV:32
101 : eq(100, 26) : BOOL
102 : eq(100, 29) : BOOL
103 : eq(100, 32) : BOOL
104 : eq(100, 35) : BOOL
105 : eq(100, 38) : BOOL
106 : eq(100, 40) : BOOL
107 : eq(100, 43) : BOOL
108 : eq(100, 46) : BOOL
109 : eq(100, 49) : BOOL
110 : ite(109, 28, 51) : BV:8
111 : ite(108, 48, 110) : BV:8
112 : ite(107, 45, 111) : BV:8
113 : ite(106, 42, 112) : BV:8
114 : ite(105, 31, 113) : BV:8
115 : ite(104, 37, 114) : BV:8
116 : ite(103, 34, 115) : BV:8
117 : ite(102, 31, 116) : BV:8
118 : ite(101, 28, 117) : BV:8
119 : bvconcat(60, 79, 99, 118) : BV:32
120 : ite(22, 4, 119) : BV:32
121 : ite(20, 21, 120) : BV:32
122 : lambda(19, 121) : FUNCTION[BV:32 -> BV:32]
123 : map(18, 122) : MAP[BV:32 -> BV:32]
124 : sum(1, 2, 123) : SUM[UNIT,MAP[BV:32 -> BV:32]]
125 : sym_const(124) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : bvule(2, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvule(7, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(2, 2) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : bvmul(7, 2) : BV:32
21 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
22 : bvadd(2, 20, 21) : BV:32
23 : 134217731 { 0x8000003 +1.35e145 } : BV:32
24 : eq(22, 23) : BOOL
25 : 127 { 0x7f } : BV:8
26 : 134217730 { 0x8000002 +1.23e145 } : BV:32
27 : eq(22, 26) : BOOL
28 : 255 { 0xff -1 } : BV:8
29 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
30 : eq(22, 29) : BOOL
31 : 253 { 0xfd -3 } : BV:8
32 : 134217728 { 0x8000000 +1.0e145 } : BV:32
33 : eq(22, 32) : BOOL
34 : 244 { 0xf4 -12 } : BV:8
35 : 134217729 { 0x8000001 +1.11e145 } : BV:32
36 : eq(22, 35) : BOOL
37 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
38 : eq(22, 37) : BOOL
39 : 188 { 0xbc -68 } : BV:8
40 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
41 : eq(22, 40) : BOOL
42 : 2 { 0x2 } : BV:8
43 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
44 : eq(22, 43) : BOOL
45 : 119 { 0x77 } : BV:8
46 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
47 : eq(22, 46) : BOOL
48 : 0 { 0x0 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(44, 45, 49) : BV:8
51 : ite(41, 42, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(36, 28, 52) : BV:8
54 : ite(33, 34, 53) : BV:8
55 : ite(30, 31, 54) : BV:8
56 : ite(27, 28, 55) : BV:8
57 : ite(24, 25, 56) : BV:8
58 : bvadd(19, 20, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 29) : BOOL
62 : eq(58, 32) : BOOL
63 : eq(58, 35) : BOOL
64 : eq(58, 37) : BOOL
65 : eq(58, 40) : BOOL
66 : eq(58, 43) : BOOL
67 : eq(58, 46) : BOOL
68 : ite(67, 25, 48) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 28, 71) : BV:8
73 : ite(62, 34, 72) : BV:8
74 : ite(61, 31, 73) : BV:8
75 : ite(60, 28, 74) : BV:8
76 : ite(59, 25, 75) : BV:8
77 : bvadd(15, 20, 21) : BV:32
78 : eq(77, 23) : BOOL
79 : eq(77, 26) : BOOL
80 : eq(77, 29) : BOOL
81 : eq(77, 32) : BOOL
82 : eq(77, 35) : BOOL
83 : eq(77, 37) : BOOL
84 : eq(77, 40) : BOOL
85 : eq(77, 43) : BOOL
86 : eq(77, 46) : BOOL
87 : ite(86, 25, 48) : BV:8
88 : ite(85, 45, 87) : BV:8
89 : ite(84, 42, 88) : BV:8
90 : ite(83, 39, 89) : BV:8
91 : ite(82, 28, 90) : BV:8
92 : ite(81, 34, 91) : BV:8
93 : ite(80, 31, 92) : BV:8
94 : ite(79, 28, 93) : BV:8
95 : ite(78, 25, 94) : BV:8
96 : bvadd(20, 21) : BV:32
97 : eq(96, 23) : BOOL
98 : eq(96, 26) : BOOL
99 : eq(96, 29) : BOOL
100 : eq(96, 32) : BOOL
101 : eq(96, 35) : BOOL
102 : eq(96, 37) : BOOL
103 : eq(96, 40) : BOOL
104 : eq(96, 43) : BOOL
105 : eq(96, 46) : BOOL
106 : ite(105, 25, 48) : BV:8
107 : ite(104, 45, 106) : BV:8
108 : ite(103, 42, 107) : BV:8
109 : ite(102, 39, 108) : BV:8
110 : ite(101, 28, 109) : BV:8
111 : ite(100, 34, 110) : BV:8
112 : ite(99, 31, 111) : BV:8
113 : ite(98, 28, 112) : BV:8
114 : ite(97, 25, 113) : BV:8
115 : bvconcat(57, 76, 95, 114) : BV:32
116 : ite(18, 19, 115) : BV:32
117 : sum(16, 17, 116) : SUM[UNIT,BV:32]
118 : sym_const(117) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 234647505 { 0xdfc6fd1 +1.97216236e156 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda45257Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45258Var : BV:32
18 : eq(17, 4) : BOOL
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(17, 2) : BOOL
21 : bvmul(8, 17) : BV:32
22 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
23 : bvadd(4, 21, 22) : BV:32
24 : 134217731 { 0x8000003 +1.35e145 } : BV:32
25 : eq(23, 24) : BOOL
26 : 127 { 0x7f } : BV:8
27 : 134217730 { 0x8000002 +1.23e145 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 134217728 { 0x8000000 +1.0e145 } : BV:32
34 : eq(23, 33) : BOOL
35 : 244 { 0xf4 -12 } : BV:8
36 : 134217729 { 0x8000001 +1.11e145 } : BV:32
37 : eq(23, 36) : BOOL
38 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
39 : eq(23, 38) : BOOL
40 : 188 { 0xbc -68 } : BV:8
41 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
42 : eq(23, 41) : BOOL
43 : 2 { 0x2 } : BV:8
44 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
45 : eq(23, 44) : BOOL
46 : 119 { 0x77 } : BV:8
47 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
48 : eq(23, 47) : BOOL
49 : 0 { 0x0 } : BV:8
50 : ite(48, 26, 49) : BV:8
51 : ite(45, 46, 50) : BV:8
52 : ite(42, 43, 51) : BV:8
53 : ite(39, 40, 52) : BV:8
54 : ite(37, 29, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(31, 32, 55) : BV:8
57 : ite(28, 29, 56) : BV:8
58 : ite(25, 26, 57) : BV:8
59 : bvadd(19, 21, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 30) : BOOL
63 : eq(59, 33) : BOOL
64 : eq(59, 36) : BOOL
65 : eq(59, 38) : BOOL
66 : eq(59, 41) : BOOL
67 : eq(59, 44) : BOOL
68 : eq(59, 47) : BOOL
69 : ite(68, 26, 49) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 29, 72) : BV:8
74 : ite(63, 35, 73) : BV:8
75 : ite(62, 32, 74) : BV:8
76 : ite(61, 29, 75) : BV:8
77 : ite(60, 26, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 21, 22) : BV:32
80 : eq(79, 24) : BOOL
81 : eq(79, 27) : BOOL
82 : eq(79, 30) : BOOL
83 : eq(79, 33) : BOOL
84 : eq(79, 36) : BOOL
85 : eq(79, 38) : BOOL
86 : eq(79, 41) : BOOL
87 : eq(79, 44) : BOOL
88 : eq(79, 47) : BOOL
89 : ite(88, 26, 49) : BV:8
90 : ite(87, 46, 89) : BV:8
91 : ite(86, 43, 90) : BV:8
92 : ite(85, 40, 91) : BV:8
93 : ite(84, 29, 92) : BV:8
94 : ite(83, 35, 93) : BV:8
95 : ite(82, 32, 94) : BV:8
96 : ite(81, 29, 95) : BV:8
97 : ite(80, 26, 96) : BV:8
98 : bvadd(21, 22) : BV:32
99 : eq(98, 24) : BOOL
100 : eq(98, 27) : BOOL
101 : eq(98, 30) : BOOL
102 : eq(98, 33) : BOOL
103 : eq(98, 36) : BOOL
104 : eq(98, 38) : BOOL
105 : eq(98, 41) : BOOL
106 : eq(98, 44) : BOOL
107 : eq(98, 47) : BOOL
108 : ite(107, 26, 49) : BV:8
109 : ite(106, 46, 108) : BV:8
110 : ite(105, 43, 109) : BV:8
111 : ite(104, 40, 110) : BV:8
112 : ite(103, 29, 111) : BV:8
113 : ite(102, 35, 112) : BV:8
114 : ite(101, 32, 113) : BV:8
115 : ite(100, 29, 114) : BV:8
116 : ite(99, 26, 115) : BV:8
117 : bvconcat(58, 77, 97, 116) : BV:32
118 : ite(20, 2, 117) : BV:32
119 : ite(18, 19, 118) : BV:32
120 : lambda(17, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(16, 120) : MAP[BV:32 -> BV:32]
122 : sym_const(121) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 602953306 { 0x23f0565a +1.87763524e200 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 786497560 { 0x2ee10018 +1.75781536e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 786497563 { 0x2ee1001b +1.75781571e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1222123512 { 0x48d81ff8 +1.68847560e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1222123515 { 0x48d81ffb +1.68847596e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2141941724 { 0x7fab6fdc +1.33935117e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2141941727 { 0x7fab6fdf +1.33935153e128 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45117Var : BV:32
2 : Lambda45118Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 134217731 { 0x8000003 +1.35e145 } : BV:32
53 : eq(51, 52) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 134217730 { 0x8000002 +1.23e145 } : BV:32
56 : eq(51, 55) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : eq(51, 49) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 134217728 { 0x8000000 +1.0e145 } : BV:32
61 : eq(51, 60) : BOOL
62 : 244 { 0xf4 -12 } : BV:8
63 : 134217729 { 0x8000001 +1.11e145 } : BV:32
64 : eq(51, 63) : BOOL
65 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
66 : eq(51, 65) : BOOL
67 : 188 { 0xbc -68 } : BV:8
68 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
69 : eq(51, 68) : BOOL
70 : 2 { 0x2 } : BV:8
71 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
72 : eq(51, 71) : BOOL
73 : 119 { 0x77 } : BV:8
74 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
75 : eq(51, 74) : BOOL
76 : 0 { 0x0 } : BV:8
77 : ite(75, 54, 76) : BV:8
78 : ite(72, 73, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(64, 57, 80) : BV:8
82 : ite(61, 62, 81) : BV:8
83 : ite(58, 59, 82) : BV:8
84 : ite(56, 57, 83) : BV:8
85 : ite(53, 54, 84) : BV:8
86 : bvadd(71, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 49) : BOOL
90 : eq(86, 60) : BOOL
91 : eq(86, 63) : BOOL
92 : eq(86, 65) : BOOL
93 : eq(86, 68) : BOOL
94 : eq(86, 71) : BOOL
95 : eq(86, 74) : BOOL
96 : ite(95, 54, 76) : BV:8
97 : ite(94, 73, 96) : BV:8
98 : ite(93, 70, 97) : BV:8
99 : ite(92, 67, 98) : BV:8
100 : ite(91, 57, 99) : BV:8
101 : ite(90, 62, 100) : BV:8
102 : ite(89, 59, 101) : BV:8
103 : ite(88, 57, 102) : BV:8
104 : ite(87, 54, 103) : BV:8
105 : bvadd(74, 50) : BV:32
106 : eq(105, 52) : BOOL
107 : eq(105, 55) : BOOL
108 : eq(105, 49) : BOOL
109 : eq(105, 60) : BOOL
110 : eq(105, 63) : BOOL
111 : eq(105, 65) : BOOL
112 : eq(105, 68) : BOOL
113 : eq(105, 71) : BOOL
114 : eq(105, 74) : BOOL
115 : ite(114, 54, 76) : BV:8
116 : ite(113, 73, 115) : BV:8
117 : ite(112, 70, 116) : BV:8
118 : ite(111, 67, 117) : BV:8
119 : ite(110, 57, 118) : BV:8
120 : ite(109, 62, 119) : BV:8
121 : ite(108, 59, 120) : BV:8
122 : ite(107, 57, 121) : BV:8
123 : ite(106, 54, 122) : BV:8
124 : bvadd(65, 50) : BV:32
125 : eq(124, 52) : BOOL
126 : eq(124, 55) : BOOL
127 : eq(124, 49) : BOOL
128 : eq(124, 60) : BOOL
129 : eq(124, 63) : BOOL
130 : eq(124, 65) : BOOL
131 : eq(124, 68) : BOOL
132 : eq(124, 71) : BOOL
133 : eq(124, 74) : BOOL
134 : ite(133, 54, 76) : BV:8
135 : ite(132, 73, 134) : BV:8
136 : ite(131, 70, 135) : BV:8
137 : ite(130, 67, 136) : BV:8
138 : ite(129, 57, 137) : BV:8
139 : ite(128, 62, 138) : BV:8
140 : ite(127, 59, 139) : BV:8
141 : ite(126, 57, 140) : BV:8
142 : ite(125, 54, 141) : BV:8
143 : bvconcat(85, 104, 123, 142) : BV:32
144 : bvadd(30, 48, 143) : BV:32
145 : eq(144, 52) : BOOL
146 : eq(144, 55) : BOOL
147 : eq(144, 49) : BOOL
148 : eq(144, 60) : BOOL
149 : eq(144, 63) : BOOL
150 : eq(144, 65) : BOOL
151 : eq(144, 68) : BOOL
152 : eq(144, 71) : BOOL
153 : eq(144, 74) : BOOL
154 : ite(153, 54, 76) : BV:8
155 : ite(152, 73, 154) : BV:8
156 : ite(151, 70, 155) : BV:8
157 : ite(150, 67, 156) : BV:8
158 : ite(149, 57, 157) : BV:8
159 : ite(148, 62, 158) : BV:8
160 : ite(147, 59, 159) : BV:8
161 : ite(146, 57, 160) : BV:8
162 : ite(145, 54, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 48, 143) : BV:32
165 : eq(164, 52) : BOOL
166 : eq(164, 55) : BOOL
167 : eq(164, 49) : BOOL
168 : eq(164, 60) : BOOL
169 : eq(164, 63) : BOOL
170 : eq(164, 65) : BOOL
171 : eq(164, 68) : BOOL
172 : eq(164, 71) : BOOL
173 : eq(164, 74) : BOOL
174 : ite(173, 54, 76) : BV:8
175 : ite(172, 73, 174) : BV:8
176 : ite(171, 70, 175) : BV:8
177 : ite(170, 67, 176) : BV:8
178 : ite(169, 57, 177) : BV:8
179 : ite(168, 62, 178) : BV:8
180 : ite(167, 59, 179) : BV:8
181 : ite(166, 57, 180) : BV:8
182 : ite(165, 54, 181) : BV:8
183 : 1 { 0x1 +1.11e129 } : BV:32
184 : bvadd(183, 48, 143) : BV:32
185 : eq(184, 52) : BOOL
186 : eq(184, 55) : BOOL
187 : eq(184, 49) : BOOL
188 : eq(184, 60) : BOOL
189 : eq(184, 63) : BOOL
190 : eq(184, 65) : BOOL
191 : eq(184, 68) : BOOL
192 : eq(184, 71) : BOOL
193 : eq(184, 74) : BOOL
194 : ite(193, 54, 76) : BV:8
195 : ite(192, 73, 194) : BV:8
196 : ite(191, 70, 195) : BV:8
197 : ite(190, 67, 196) : BV:8
198 : ite(189, 57, 197) : BV:8
199 : ite(188, 62, 198) : BV:8
200 : ite(187, 59, 199) : BV:8
201 : ite(186, 57, 200) : BV:8
202 : ite(185, 54, 201) : BV:8
203 : bvadd(48, 143) : BV:32
204 : eq(203, 52) : BOOL
205 : eq(203, 55) : BOOL
206 : eq(203, 49) : BOOL
207 : eq(203, 60) : BOOL
208 : eq(203, 63) : BOOL
209 : eq(203, 65) : BOOL
210 : eq(203, 68) : BOOL
211 : eq(203, 71) : BOOL
212 : eq(203, 74) : BOOL
213 : ite(212, 54, 76) : BV:8
214 : ite(211, 73, 213) : BV:8
215 : ite(210, 70, 214) : BV:8
216 : ite(209, 67, 215) : BV:8
217 : ite(208, 57, 216) : BV:8
218 : ite(207, 62, 217) : BV:8
219 : ite(206, 59, 218) : BV:8
220 : ite(205, 57, 219) : BV:8
221 : ite(204, 54, 220) : BV:8
222 : bvconcat(162, 182, 202, 221) : BV:32
223 : ite(6, 3, 222) : BV:32
224 : ite(47, 222, 223) : BV:32
225 : ite(6, 3, 224) : BV:32
226 : lambda(1, 2, 225) : FUNCTION[BV:32,BV:32 -> BV:32]
227 : sym_const(226) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45122Var : BV:32
2 : Lambda45123Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45131Var : BV:32
2 : Lambda45132Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45127Var : BV:32
2 : Lambda45128Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 134217731 { 0x8000003 +1.35e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 134217730 { 0x8000002 +1.23e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : eq(12, 10) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 134217728 { 0x8000000 +1.0e145 } : BV:32
22 : eq(12, 21) : BOOL
23 : 244 { 0xf4 -12 } : BV:8
24 : 134217729 { 0x8000001 +1.11e145 } : BV:32
25 : eq(12, 24) : BOOL
26 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
27 : eq(12, 26) : BOOL
28 : 188 { 0xbc -68 } : BV:8
29 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
30 : eq(12, 29) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
33 : eq(12, 32) : BOOL
34 : 119 { 0x77 } : BV:8
35 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
36 : eq(12, 35) : BOOL
37 : 0 { 0x0 } : BV:8
38 : ite(36, 15, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(25, 18, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(19, 20, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : ite(14, 15, 45) : BV:8
47 : bvadd(32, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 10) : BOOL
51 : eq(47, 21) : BOOL
52 : eq(47, 24) : BOOL
53 : eq(47, 26) : BOOL
54 : eq(47, 29) : BOOL
55 : eq(47, 32) : BOOL
56 : eq(47, 35) : BOOL
57 : ite(56, 15, 37) : BV:8
58 : ite(55, 34, 57) : BV:8
59 : ite(54, 31, 58) : BV:8
60 : ite(53, 28, 59) : BV:8
61 : ite(52, 18, 60) : BV:8
62 : ite(51, 23, 61) : BV:8
63 : ite(50, 20, 62) : BV:8
64 : ite(49, 18, 63) : BV:8
65 : ite(48, 15, 64) : BV:8
66 : bvadd(35, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 10) : BOOL
70 : eq(66, 21) : BOOL
71 : eq(66, 24) : BOOL
72 : eq(66, 26) : BOOL
73 : eq(66, 29) : BOOL
74 : eq(66, 32) : BOOL
75 : eq(66, 35) : BOOL
76 : ite(75, 15, 37) : BV:8
77 : ite(74, 34, 76) : BV:8
78 : ite(73, 31, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 18, 79) : BV:8
81 : ite(70, 23, 80) : BV:8
82 : ite(69, 20, 81) : BV:8
83 : ite(68, 18, 82) : BV:8
84 : ite(67, 15, 83) : BV:8
85 : bvadd(26, 11) : BV:32
86 : eq(85, 13) : BOOL
87 : eq(85, 16) : BOOL
88 : eq(85, 10) : BOOL
89 : eq(85, 21) : BOOL
90 : eq(85, 24) : BOOL
91 : eq(85, 26) : BOOL
92 : eq(85, 29) : BOOL
93 : eq(85, 32) : BOOL
94 : eq(85, 35) : BOOL
95 : ite(94, 15, 37) : BV:8
96 : ite(93, 34, 95) : BV:8
97 : ite(92, 31, 96) : BV:8
98 : ite(91, 28, 97) : BV:8
99 : ite(90, 18, 98) : BV:8
100 : ite(89, 23, 99) : BV:8
101 : ite(88, 20, 100) : BV:8
102 : ite(87, 18, 101) : BV:8
103 : ite(86, 15, 102) : BV:8
104 : bvconcat(46, 65, 84, 103) : BV:32
105 : bvadd(7, 9, 104) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 10) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 26) : BOOL
112 : eq(105, 29) : BOOL
113 : eq(105, 32) : BOOL
114 : eq(105, 35) : BOOL
115 : ite(114, 15, 37) : BV:8
116 : ite(113, 34, 115) : BV:8
117 : ite(112, 31, 116) : BV:8
118 : ite(111, 28, 117) : BV:8
119 : ite(110, 18, 118) : BV:8
120 : ite(109, 23, 119) : BV:8
121 : ite(108, 20, 120) : BV:8
122 : ite(107, 18, 121) : BV:8
123 : ite(106, 15, 122) : BV:8
124 : 2 { 0x2 +1.23e129 } : BV:32
125 : bvadd(124, 9, 104) : BV:32
126 : eq(125, 13) : BOOL
127 : eq(125, 16) : BOOL
128 : eq(125, 10) : BOOL
129 : eq(125, 21) : BOOL
130 : eq(125, 24) : BOOL
131 : eq(125, 26) : BOOL
132 : eq(125, 29) : BOOL
133 : eq(125, 32) : BOOL
134 : eq(125, 35) : BOOL
135 : ite(134, 15, 37) : BV:8
136 : ite(133, 34, 135) : BV:8
137 : ite(132, 31, 136) : BV:8
138 : ite(131, 28, 137) : BV:8
139 : ite(130, 18, 138) : BV:8
140 : ite(129, 23, 139) : BV:8
141 : ite(128, 20, 140) : BV:8
142 : ite(127, 18, 141) : BV:8
143 : ite(126, 15, 142) : BV:8
144 : 1 { 0x1 +1.11e129 } : BV:32
145 : bvadd(144, 9, 104) : BV:32
146 : eq(145, 13) : BOOL
147 : eq(145, 16) : BOOL
148 : eq(145, 10) : BOOL
149 : eq(145, 21) : BOOL
150 : eq(145, 24) : BOOL
151 : eq(145, 26) : BOOL
152 : eq(145, 29) : BOOL
153 : eq(145, 32) : BOOL
154 : eq(145, 35) : BOOL
155 : ite(154, 15, 37) : BV:8
156 : ite(153, 34, 155) : BV:8
157 : ite(152, 31, 156) : BV:8
158 : ite(151, 28, 157) : BV:8
159 : ite(150, 18, 158) : BV:8
160 : ite(149, 23, 159) : BV:8
161 : ite(148, 20, 160) : BV:8
162 : ite(147, 18, 161) : BV:8
163 : ite(146, 15, 162) : BV:8
164 : bvadd(9, 104) : BV:32
165 : eq(164, 13) : BOOL
166 : eq(164, 16) : BOOL
167 : eq(164, 10) : BOOL
168 : eq(164, 21) : BOOL
169 : eq(164, 24) : BOOL
170 : eq(164, 26) : BOOL
171 : eq(164, 29) : BOOL
172 : eq(164, 32) : BOOL
173 : eq(164, 35) : BOOL
174 : ite(173, 15, 37) : BV:8
175 : ite(172, 34, 174) : BV:8
176 : ite(171, 31, 175) : BV:8
177 : ite(170, 28, 176) : BV:8
178 : ite(169, 18, 177) : BV:8
179 : ite(168, 23, 178) : BV:8
180 : ite(167, 20, 179) : BV:8
181 : ite(166, 18, 180) : BV:8
182 : ite(165, 15, 181) : BV:8
183 : bvconcat(123, 143, 163, 182) : BV:32
184 : ite(6, 3, 183) : BV:32
185 : lambda(1, 2, 184) : FUNCTION[BV:32,BV:32 -> BV:32]
186 : sym_const(185) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45138Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 134217731 { 0x8000003 +1.35e145 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 134217730 { 0x8000002 +1.23e145 } : BV:32
15 : eq(10, 14) : BOOL
16 : 255 { 0xff -1 } : BV:8
17 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
18 : eq(10, 17) : BOOL
19 : 253 { 0xfd -3 } : BV:8
20 : 134217728 { 0x8000000 +1.0e145 } : BV:32
21 : eq(10, 20) : BOOL
22 : 244 { 0xf4 -12 } : BV:8
23 : 134217729 { 0x8000001 +1.11e145 } : BV:32
24 : eq(10, 23) : BOOL
25 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
26 : eq(10, 25) : BOOL
27 : 188 { 0xbc -68 } : BV:8
28 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
29 : eq(10, 28) : BOOL
30 : 2 { 0x2 } : BV:8
31 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
32 : eq(10, 31) : BOOL
33 : 119 { 0x77 } : BV:8
34 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
35 : eq(10, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(24, 16, 40) : BV:8
42 : ite(21, 22, 41) : BV:8
43 : ite(18, 19, 42) : BV:8
44 : ite(15, 16, 43) : BV:8
45 : ite(12, 13, 44) : BV:8
46 : bvadd(4, 8, 9) : BV:32
47 : eq(46, 11) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 20) : BOOL
51 : eq(46, 23) : BOOL
52 : eq(46, 25) : BOOL
53 : eq(46, 28) : BOOL
54 : eq(46, 31) : BOOL
55 : eq(46, 34) : BOOL
56 : ite(55, 13, 36) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 16, 59) : BV:8
61 : ite(50, 22, 60) : BV:8
62 : ite(49, 19, 61) : BV:8
63 : ite(48, 16, 62) : BV:8
64 : ite(47, 13, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 8, 9) : BV:32
67 : eq(66, 11) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : eq(66, 20) : BOOL
71 : eq(66, 23) : BOOL
72 : eq(66, 25) : BOOL
73 : eq(66, 28) : BOOL
74 : eq(66, 31) : BOOL
75 : eq(66, 34) : BOOL
76 : ite(75, 13, 36) : BV:8
77 : ite(74, 33, 76) : BV:8
78 : ite(73, 30, 77) : BV:8
79 : ite(72, 27, 78) : BV:8
80 : ite(71, 16, 79) : BV:8
81 : ite(70, 22, 80) : BV:8
82 : ite(69, 19, 81) : BV:8
83 : ite(68, 16, 82) : BV:8
84 : ite(67, 13, 83) : BV:8
85 : bvadd(8, 9) : BV:32
86 : eq(85, 11) : BOOL
87 : eq(85, 14) : BOOL
88 : eq(85, 17) : BOOL
89 : eq(85, 20) : BOOL
90 : eq(85, 23) : BOOL
91 : eq(85, 25) : BOOL
92 : eq(85, 28) : BOOL
93 : eq(85, 31) : BOOL
94 : eq(85, 34) : BOOL
95 : ite(94, 13, 36) : BV:8
96 : ite(93, 33, 95) : BV:8
97 : ite(92, 30, 96) : BV:8
98 : ite(91, 27, 97) : BV:8
99 : ite(90, 16, 98) : BV:8
100 : ite(89, 22, 99) : BV:8
101 : ite(88, 19, 100) : BV:8
102 : ite(87, 16, 101) : BV:8
103 : ite(86, 13, 102) : BV:8
104 : bvconcat(45, 64, 84, 103) : BV:32
105 : ite(6, 5, 104) : BV:32
106 : ite(3, 4, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45142Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 134217731 { 0x8000003 +1.35e145 } : BV:32
10 : eq(8, 9) : BOOL
11 : 127 { 0x7f } : BV:8
12 : 134217730 { 0x8000002 +1.23e145 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 134217728 { 0x8000000 +1.0e145 } : BV:32
19 : eq(8, 18) : BOOL
20 : 244 { 0xf4 -12 } : BV:8
21 : 134217729 { 0x8000001 +1.11e145 } : BV:32
22 : eq(8, 21) : BOOL
23 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
24 : eq(8, 23) : BOOL
25 : 188 { 0xbc -68 } : BV:8
26 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
30 : eq(8, 29) : BOOL
31 : 119 { 0x77 } : BV:8
32 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
33 : eq(8, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(27, 28, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 14, 38) : BV:8
40 : ite(19, 20, 39) : BV:8
41 : ite(16, 17, 40) : BV:8
42 : ite(13, 14, 41) : BV:8
43 : ite(10, 11, 42) : BV:8
44 : bvadd(4, 6, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 18) : BOOL
49 : eq(44, 21) : BOOL
50 : eq(44, 23) : BOOL
51 : eq(44, 26) : BOOL
52 : eq(44, 29) : BOOL
53 : eq(44, 32) : BOOL
54 : ite(53, 11, 34) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 14, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : ite(45, 11, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 6, 7) : BV:32
65 : eq(64, 9) : BOOL
66 : eq(64, 12) : BOOL
67 : eq(64, 15) : BOOL
68 : eq(64, 18) : BOOL
69 : eq(64, 21) : BOOL
70 : eq(64, 23) : BOOL
71 : eq(64, 26) : BOOL
72 : eq(64, 29) : BOOL
73 : eq(64, 32) : BOOL
74 : ite(73, 11, 34) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 14, 77) : BV:8
79 : ite(68, 20, 78) : BV:8
80 : ite(67, 17, 79) : BV:8
81 : ite(66, 14, 80) : BV:8
82 : ite(65, 11, 81) : BV:8
83 : bvadd(6, 7) : BV:32
84 : eq(83, 9) : BOOL
85 : eq(83, 12) : BOOL
86 : eq(83, 15) : BOOL
87 : eq(83, 18) : BOOL
88 : eq(83, 21) : BOOL
89 : eq(83, 23) : BOOL
90 : eq(83, 26) : BOOL
91 : eq(83, 29) : BOOL
92 : eq(83, 32) : BOOL
93 : ite(92, 11, 34) : BV:8
94 : ite(91, 31, 93) : BV:8
95 : ite(90, 28, 94) : BV:8
96 : ite(89, 25, 95) : BV:8
97 : ite(88, 14, 96) : BV:8
98 : ite(87, 20, 97) : BV:8
99 : ite(86, 17, 98) : BV:8
100 : ite(85, 14, 99) : BV:8
101 : ite(84, 11, 100) : BV:8
102 : bvconcat(43, 62, 82, 101) : BV:32
103 : ite(3, 4, 102) : BV:32
104 : lambda(1, 103) : FUNCTION[BV:32 -> BV:32]
105 : sym_const(104) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45143Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 134217731 { 0x8000003 +1.35e145 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 134217730 { 0x8000002 +1.23e145 } : BV:32
15 : eq(10, 14) : BOOL
16 : 255 { 0xff -1 } : BV:8
17 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
18 : eq(10, 17) : BOOL
19 : 253 { 0xfd -3 } : BV:8
20 : 134217728 { 0x8000000 +1.0e145 } : BV:32
21 : eq(10, 20) : BOOL
22 : 244 { 0xf4 -12 } : BV:8
23 : 134217729 { 0x8000001 +1.11e145 } : BV:32
24 : eq(10, 23) : BOOL
25 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
26 : eq(10, 25) : BOOL
27 : 188 { 0xbc -68 } : BV:8
28 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
29 : eq(10, 28) : BOOL
30 : 2 { 0x2 } : BV:8
31 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
32 : eq(10, 31) : BOOL
33 : 119 { 0x77 } : BV:8
34 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
35 : eq(10, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(24, 16, 40) : BV:8
42 : ite(21, 22, 41) : BV:8
43 : ite(18, 19, 42) : BV:8
44 : ite(15, 16, 43) : BV:8
45 : ite(12, 13, 44) : BV:8
46 : bvadd(4, 8, 9) : BV:32
47 : eq(46, 11) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 20) : BOOL
51 : eq(46, 23) : BOOL
52 : eq(46, 25) : BOOL
53 : eq(46, 28) : BOOL
54 : eq(46, 31) : BOOL
55 : eq(46, 34) : BOOL
56 : ite(55, 13, 36) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 16, 59) : BV:8
61 : ite(50, 22, 60) : BV:8
62 : ite(49, 19, 61) : BV:8
63 : ite(48, 16, 62) : BV:8
64 : ite(47, 13, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 8, 9) : BV:32
67 : eq(66, 11) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : eq(66, 20) : BOOL
71 : eq(66, 23) : BOOL
72 : eq(66, 25) : BOOL
73 : eq(66, 28) : BOOL
74 : eq(66, 31) : BOOL
75 : eq(66, 34) : BOOL
76 : ite(75, 13, 36) : BV:8
77 : ite(74, 33, 76) : BV:8
78 : ite(73, 30, 77) : BV:8
79 : ite(72, 27, 78) : BV:8
80 : ite(71, 16, 79) : BV:8
81 : ite(70, 22, 80) : BV:8
82 : ite(69, 19, 81) : BV:8
83 : ite(68, 16, 82) : BV:8
84 : ite(67, 13, 83) : BV:8
85 : bvadd(8, 9) : BV:32
86 : eq(85, 11) : BOOL
87 : eq(85, 14) : BOOL
88 : eq(85, 17) : BOOL
89 : eq(85, 20) : BOOL
90 : eq(85, 23) : BOOL
91 : eq(85, 25) : BOOL
92 : eq(85, 28) : BOOL
93 : eq(85, 31) : BOOL
94 : eq(85, 34) : BOOL
95 : ite(94, 13, 36) : BV:8
96 : ite(93, 33, 95) : BV:8
97 : ite(92, 30, 96) : BV:8
98 : ite(91, 27, 97) : BV:8
99 : ite(90, 16, 98) : BV:8
100 : ite(89, 22, 99) : BV:8
101 : ite(88, 19, 100) : BV:8
102 : ite(87, 16, 101) : BV:8
103 : ite(86, 13, 102) : BV:8
104 : bvconcat(45, 64, 84, 103) : BV:32
105 : ite(6, 5, 104) : BV:32
106 : ite(3, 4, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3506958359
=counter_example_end
=global nodece 54 num_edges_traversed 1
=global nodece 54 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 55
=global nodece 55 nodece z3.ce4668.num_edges_traversed3
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce4668 881261446d679db6cfebb6661d480
=input.spec-%var-x-1
1 : Lambda45225Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45226Var : BV:32
18 : Lambda45227Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45228Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 134217731 { 0x8000003 +1.35e145 } : BV:32
80 : eq(78, 79) : BOOL
81 : 127 { 0x7f } : BV:8
82 : 134217730 { 0x8000002 +1.23e145 } : BV:32
83 : eq(78, 82) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : eq(78, 76) : BOOL
86 : 253 { 0xfd -3 } : BV:8
87 : 134217728 { 0x8000000 +1.0e145 } : BV:32
88 : eq(78, 87) : BOOL
89 : 244 { 0xf4 -12 } : BV:8
90 : 134217729 { 0x8000001 +1.11e145 } : BV:32
91 : eq(78, 90) : BOOL
92 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
93 : eq(78, 92) : BOOL
94 : 188 { 0xbc -68 } : BV:8
95 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
96 : eq(78, 95) : BOOL
97 : 2 { 0x2 } : BV:8
98 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
99 : eq(78, 98) : BOOL
100 : 119 { 0x77 } : BV:8
101 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
102 : eq(78, 101) : BOOL
103 : 0 { 0x0 } : BV:8
104 : ite(102, 81, 103) : BV:8
105 : ite(99, 100, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(91, 84, 107) : BV:8
109 : ite(88, 89, 108) : BV:8
110 : ite(85, 86, 109) : BV:8
111 : ite(83, 84, 110) : BV:8
112 : ite(80, 81, 111) : BV:8
113 : bvadd(98, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 76) : BOOL
117 : eq(113, 87) : BOOL
118 : eq(113, 90) : BOOL
119 : eq(113, 92) : BOOL
120 : eq(113, 95) : BOOL
121 : eq(113, 98) : BOOL
122 : eq(113, 101) : BOOL
123 : ite(122, 81, 103) : BV:8
124 : ite(121, 100, 123) : BV:8
125 : ite(120, 97, 124) : BV:8
126 : ite(119, 94, 125) : BV:8
127 : ite(118, 84, 126) : BV:8
128 : ite(117, 89, 127) : BV:8
129 : ite(116, 86, 128) : BV:8
130 : ite(115, 84, 129) : BV:8
131 : ite(114, 81, 130) : BV:8
132 : bvadd(101, 77) : BV:32
133 : eq(132, 79) : BOOL
134 : eq(132, 82) : BOOL
135 : eq(132, 76) : BOOL
136 : eq(132, 87) : BOOL
137 : eq(132, 90) : BOOL
138 : eq(132, 92) : BOOL
139 : eq(132, 95) : BOOL
140 : eq(132, 98) : BOOL
141 : eq(132, 101) : BOOL
142 : ite(141, 81, 103) : BV:8
143 : ite(140, 100, 142) : BV:8
144 : ite(139, 97, 143) : BV:8
145 : ite(138, 94, 144) : BV:8
146 : ite(137, 84, 145) : BV:8
147 : ite(136, 89, 146) : BV:8
148 : ite(135, 86, 147) : BV:8
149 : ite(134, 84, 148) : BV:8
150 : ite(133, 81, 149) : BV:8
151 : bvadd(92, 77) : BV:32
152 : eq(151, 79) : BOOL
153 : eq(151, 82) : BOOL
154 : eq(151, 76) : BOOL
155 : eq(151, 87) : BOOL
156 : eq(151, 90) : BOOL
157 : eq(151, 92) : BOOL
158 : eq(151, 95) : BOOL
159 : eq(151, 98) : BOOL
160 : eq(151, 101) : BOOL
161 : ite(160, 81, 103) : BV:8
162 : ite(159, 100, 161) : BV:8
163 : ite(158, 97, 162) : BV:8
164 : ite(157, 94, 163) : BV:8
165 : ite(156, 84, 164) : BV:8
166 : ite(155, 89, 165) : BV:8
167 : ite(154, 86, 166) : BV:8
168 : ite(153, 84, 167) : BV:8
169 : ite(152, 81, 168) : BV:8
170 : bvconcat(112, 131, 150, 169) : BV:32
171 : bvadd(34, 75, 170) : BV:32
172 : eq(171, 79) : BOOL
173 : eq(171, 82) : BOOL
174 : eq(171, 76) : BOOL
175 : eq(171, 87) : BOOL
176 : eq(171, 90) : BOOL
177 : eq(171, 92) : BOOL
178 : eq(171, 95) : BOOL
179 : eq(171, 98) : BOOL
180 : eq(171, 101) : BOOL
181 : ite(180, 81, 103) : BV:8
182 : ite(179, 100, 181) : BV:8
183 : ite(178, 97, 182) : BV:8
184 : ite(177, 94, 183) : BV:8
185 : ite(176, 84, 184) : BV:8
186 : ite(175, 89, 185) : BV:8
187 : ite(174, 86, 186) : BV:8
188 : ite(173, 84, 187) : BV:8
189 : ite(172, 81, 188) : BV:8
190 : 2 { 0x2 +1.23e129 } : BV:32
191 : bvadd(190, 75, 170) : BV:32
192 : eq(191, 79) : BOOL
193 : eq(191, 82) : BOOL
194 : eq(191, 76) : BOOL
195 : eq(191, 87) : BOOL
196 : eq(191, 90) : BOOL
197 : eq(191, 92) : BOOL
198 : eq(191, 95) : BOOL
199 : eq(191, 98) : BOOL
200 : eq(191, 101) : BOOL
201 : ite(200, 81, 103) : BV:8
202 : ite(199, 100, 201) : BV:8
203 : ite(198, 97, 202) : BV:8
204 : ite(197, 94, 203) : BV:8
205 : ite(196, 84, 204) : BV:8
206 : ite(195, 89, 205) : BV:8
207 : ite(194, 86, 206) : BV:8
208 : ite(193, 84, 207) : BV:8
209 : ite(192, 81, 208) : BV:8
210 : 1 { 0x1 +1.11e129 } : BV:32
211 : bvadd(210, 75, 170) : BV:32
212 : eq(211, 79) : BOOL
213 : eq(211, 82) : BOOL
214 : eq(211, 76) : BOOL
215 : eq(211, 87) : BOOL
216 : eq(211, 90) : BOOL
217 : eq(211, 92) : BOOL
218 : eq(211, 95) : BOOL
219 : eq(211, 98) : BOOL
220 : eq(211, 101) : BOOL
221 : ite(220, 81, 103) : BV:8
222 : ite(219, 100, 221) : BV:8
223 : ite(218, 97, 222) : BV:8
224 : ite(217, 94, 223) : BV:8
225 : ite(216, 84, 224) : BV:8
226 : ite(215, 89, 225) : BV:8
227 : ite(214, 86, 226) : BV:8
228 : ite(213, 84, 227) : BV:8
229 : ite(212, 81, 228) : BV:8
230 : bvadd(75, 170) : BV:32
231 : eq(230, 79) : BOOL
232 : eq(230, 82) : BOOL
233 : eq(230, 76) : BOOL
234 : eq(230, 87) : BOOL
235 : eq(230, 90) : BOOL
236 : eq(230, 92) : BOOL
237 : eq(230, 95) : BOOL
238 : eq(230, 98) : BOOL
239 : eq(230, 101) : BOOL
240 : ite(239, 81, 103) : BV:8
241 : ite(238, 100, 240) : BV:8
242 : ite(237, 97, 241) : BV:8
243 : ite(236, 94, 242) : BV:8
244 : ite(235, 84, 243) : BV:8
245 : ite(234, 89, 244) : BV:8
246 : ite(233, 86, 245) : BV:8
247 : ite(232, 84, 246) : BV:8
248 : ite(231, 81, 247) : BV:8
249 : bvconcat(189, 209, 229, 248) : BV:32
250 : ite(55, 2, 249) : BV:32
251 : ite(74, 249, 250) : BV:32
252 : ite(55, 2, 251) : BV:32
253 : lambda(52, 252) : FUNCTION[BV:32 -> BV:32]
254 : map(51, 253) : MAP[BV:32 -> BV:32]
255 : lambda(17, 254) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
256 : map(16, 255) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
257 : sym_const(256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda45458Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(3, 1) : BOOL
26 : bvule(1, 3) : BOOL
27 : and(25, 26) : BOOL
28 : 5 { 0x5 +1.59e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 3, 32) : BV:32
34 : ite(24, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda45459Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : bvmul(3, 41) : BV:32
46 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
47 : bvmul(3, 3) : BV:32
48 : bvadd(46, 47) : BV:32
49 : 134217731 { 0x8000003 +1.35e145 } : BV:32
50 : eq(48, 49) : BOOL
51 : 127 { 0x7f } : BV:8
52 : 134217730 { 0x8000002 +1.23e145 } : BV:32
53 : eq(48, 52) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : eq(48, 46) : BOOL
56 : 253 { 0xfd -3 } : BV:8
57 : 134217728 { 0x8000000 +1.0e145 } : BV:32
58 : eq(48, 57) : BOOL
59 : 244 { 0xf4 -12 } : BV:8
60 : 134217729 { 0x8000001 +1.11e145 } : BV:32
61 : eq(48, 60) : BOOL
62 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
63 : eq(48, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
66 : eq(48, 65) : BOOL
67 : 2 { 0x2 } : BV:8
68 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
69 : eq(48, 68) : BOOL
70 : 119 { 0x77 } : BV:8
71 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
72 : eq(48, 71) : BOOL
73 : 0 { 0x0 } : BV:8
74 : ite(72, 51, 73) : BV:8
75 : ite(69, 70, 74) : BV:8
76 : ite(66, 67, 75) : BV:8
77 : ite(63, 64, 76) : BV:8
78 : ite(61, 54, 77) : BV:8
79 : ite(58, 59, 78) : BV:8
80 : ite(55, 56, 79) : BV:8
81 : ite(53, 54, 80) : BV:8
82 : ite(50, 51, 81) : BV:8
83 : bvadd(68, 47) : BV:32
84 : eq(83, 49) : BOOL
85 : eq(83, 52) : BOOL
86 : eq(83, 46) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 60) : BOOL
89 : eq(83, 62) : BOOL
90 : eq(83, 65) : BOOL
91 : eq(83, 68) : BOOL
92 : eq(83, 71) : BOOL
93 : ite(92, 51, 73) : BV:8
94 : ite(91, 70, 93) : BV:8
95 : ite(90, 67, 94) : BV:8
96 : ite(89, 64, 95) : BV:8
97 : ite(88, 54, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 56, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : ite(84, 51, 100) : BV:8
102 : bvadd(71, 47) : BV:32
103 : eq(102, 49) : BOOL
104 : eq(102, 52) : BOOL
105 : eq(102, 46) : BOOL
106 : eq(102, 57) : BOOL
107 : eq(102, 60) : BOOL
108 : eq(102, 62) : BOOL
109 : eq(102, 65) : BOOL
110 : eq(102, 68) : BOOL
111 : eq(102, 71) : BOOL
112 : ite(111, 51, 73) : BV:8
113 : ite(110, 70, 112) : BV:8
114 : ite(109, 67, 113) : BV:8
115 : ite(108, 64, 114) : BV:8
116 : ite(107, 54, 115) : BV:8
117 : ite(106, 59, 116) : BV:8
118 : ite(105, 56, 117) : BV:8
119 : ite(104, 54, 118) : BV:8
120 : ite(103, 51, 119) : BV:8
121 : bvadd(62, 47) : BV:32
122 : eq(121, 49) : BOOL
123 : eq(121, 52) : BOOL
124 : eq(121, 46) : BOOL
125 : eq(121, 57) : BOOL
126 : eq(121, 60) : BOOL
127 : eq(121, 62) : BOOL
128 : eq(121, 65) : BOOL
129 : eq(121, 68) : BOOL
130 : eq(121, 71) : BOOL
131 : ite(130, 51, 73) : BV:8
132 : ite(129, 70, 131) : BV:8
133 : ite(128, 67, 132) : BV:8
134 : ite(127, 64, 133) : BV:8
135 : ite(126, 54, 134) : BV:8
136 : ite(125, 59, 135) : BV:8
137 : ite(124, 56, 136) : BV:8
138 : ite(123, 54, 137) : BV:8
139 : ite(122, 51, 138) : BV:8
140 : bvconcat(82, 101, 120, 139) : BV:32
141 : bvadd(22, 45, 140) : BV:32
142 : eq(141, 49) : BOOL
143 : eq(141, 52) : BOOL
144 : eq(141, 46) : BOOL
145 : eq(141, 57) : BOOL
146 : eq(141, 60) : BOOL
147 : eq(141, 62) : BOOL
148 : eq(141, 65) : BOOL
149 : eq(141, 68) : BOOL
150 : eq(141, 71) : BOOL
151 : ite(150, 51, 73) : BV:8
152 : ite(149, 70, 151) : BV:8
153 : ite(148, 67, 152) : BV:8
154 : ite(147, 64, 153) : BV:8
155 : ite(146, 54, 154) : BV:8
156 : ite(145, 59, 155) : BV:8
157 : ite(144, 56, 156) : BV:8
158 : ite(143, 54, 157) : BV:8
159 : ite(142, 51, 158) : BV:8
160 : 2 { 0x2 +1.23e129 } : BV:32
161 : bvadd(160, 45, 140) : BV:32
162 : eq(161, 49) : BOOL
163 : eq(161, 52) : BOOL
164 : eq(161, 46) : BOOL
165 : eq(161, 57) : BOOL
166 : eq(161, 60) : BOOL
167 : eq(161, 62) : BOOL
168 : eq(161, 65) : BOOL
169 : eq(161, 68) : BOOL
170 : eq(161, 71) : BOOL
171 : ite(170, 51, 73) : BV:8
172 : ite(169, 70, 171) : BV:8
173 : ite(168, 67, 172) : BV:8
174 : ite(167, 64, 173) : BV:8
175 : ite(166, 54, 174) : BV:8
176 : ite(165, 59, 175) : BV:8
177 : ite(164, 56, 176) : BV:8
178 : ite(163, 54, 177) : BV:8
179 : ite(162, 51, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 45, 140) : BV:32
182 : eq(181, 49) : BOOL
183 : eq(181, 52) : BOOL
184 : eq(181, 46) : BOOL
185 : eq(181, 57) : BOOL
186 : eq(181, 60) : BOOL
187 : eq(181, 62) : BOOL
188 : eq(181, 65) : BOOL
189 : eq(181, 68) : BOOL
190 : eq(181, 71) : BOOL
191 : ite(190, 51, 73) : BV:8
192 : ite(189, 70, 191) : BV:8
193 : ite(188, 67, 192) : BV:8
194 : ite(187, 64, 193) : BV:8
195 : ite(186, 54, 194) : BV:8
196 : ite(185, 59, 195) : BV:8
197 : ite(184, 56, 196) : BV:8
198 : ite(183, 54, 197) : BV:8
199 : ite(182, 51, 198) : BV:8
200 : bvadd(45, 140) : BV:32
201 : eq(200, 49) : BOOL
202 : eq(200, 52) : BOOL
203 : eq(200, 46) : BOOL
204 : eq(200, 57) : BOOL
205 : eq(200, 60) : BOOL
206 : eq(200, 62) : BOOL
207 : eq(200, 65) : BOOL
208 : eq(200, 68) : BOOL
209 : eq(200, 71) : BOOL
210 : ite(209, 51, 73) : BV:8
211 : ite(208, 70, 210) : BV:8
212 : ite(207, 67, 211) : BV:8
213 : ite(206, 64, 212) : BV:8
214 : ite(205, 54, 213) : BV:8
215 : ite(204, 59, 214) : BV:8
216 : ite(203, 56, 215) : BV:8
217 : ite(202, 54, 216) : BV:8
218 : ite(201, 51, 217) : BV:8
219 : bvconcat(159, 179, 199, 218) : BV:32
220 : ite(44, 2, 219) : BV:32
221 : lambda(41, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(40, 221) : MAP[BV:32 -> BV:32]
223 : sym_const(222) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 134217715 ] -> 0, [ 134217716; 134217716 ] -> 188, [ 134217717; 134217717 ] -> 127, [ 134217718; 134217718 ] -> 119, [ 134217719; 134217719 ] -> 253, [ 134217720; 134217727 ] -> 0, [ 134217728; 134217728 ] -> 244, [ 134217729; 134217730 ] -> 255, [ 134217731; 134217731 ] -> 127, [ 134217732; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 2, [ 2147483649; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 786497559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 786497560; 786497563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 786497564; 1222123511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1222123512; 1222123515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1222123516; 2141941723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2141941724; 2141941727 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2141941728; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2141941724 { 0x7fab6fdc +1.33935117e128 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 786497560 { 0x2ee10018 +1.75781536e222 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1222123512 { 0x48d81ff8 +1.68847560e18 } : BV:32
=input.dst.llvm-%x
1 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45245Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45246Var : BV:32
18 : Lambda45247Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45248Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 134217731 { 0x8000003 +1.35e145 } : BV:32
61 : eq(59, 60) : BOOL
62 : 127 { 0x7f } : BV:8
63 : 134217730 { 0x8000002 +1.23e145 } : BV:32
64 : eq(59, 63) : BOOL
65 : 255 { 0xff -1 } : BV:8
66 : eq(59, 57) : BOOL
67 : 253 { 0xfd -3 } : BV:8
68 : 134217728 { 0x8000000 +1.0e145 } : BV:32
69 : eq(59, 68) : BOOL
70 : 244 { 0xf4 -12 } : BV:8
71 : 134217729 { 0x8000001 +1.11e145 } : BV:32
72 : eq(59, 71) : BOOL
73 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
74 : eq(59, 73) : BOOL
75 : 188 { 0xbc -68 } : BV:8
76 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
77 : eq(59, 76) : BOOL
78 : 2 { 0x2 } : BV:8
79 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
80 : eq(59, 79) : BOOL
81 : 119 { 0x77 } : BV:8
82 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
83 : eq(59, 82) : BOOL
84 : 0 { 0x0 } : BV:8
85 : ite(83, 62, 84) : BV:8
86 : ite(80, 81, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(72, 65, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(66, 67, 90) : BV:8
92 : ite(64, 65, 91) : BV:8
93 : ite(61, 62, 92) : BV:8
94 : bvadd(79, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 57) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 71) : BOOL
100 : eq(94, 73) : BOOL
101 : eq(94, 76) : BOOL
102 : eq(94, 79) : BOOL
103 : eq(94, 82) : BOOL
104 : ite(103, 62, 84) : BV:8
105 : ite(102, 81, 104) : BV:8
106 : ite(101, 78, 105) : BV:8
107 : ite(100, 75, 106) : BV:8
108 : ite(99, 65, 107) : BV:8
109 : ite(98, 70, 108) : BV:8
110 : ite(97, 67, 109) : BV:8
111 : ite(96, 65, 110) : BV:8
112 : ite(95, 62, 111) : BV:8
113 : bvadd(82, 58) : BV:32
114 : eq(113, 60) : BOOL
115 : eq(113, 63) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 68) : BOOL
118 : eq(113, 71) : BOOL
119 : eq(113, 73) : BOOL
120 : eq(113, 76) : BOOL
121 : eq(113, 79) : BOOL
122 : eq(113, 82) : BOOL
123 : ite(122, 62, 84) : BV:8
124 : ite(121, 81, 123) : BV:8
125 : ite(120, 78, 124) : BV:8
126 : ite(119, 75, 125) : BV:8
127 : ite(118, 65, 126) : BV:8
128 : ite(117, 70, 127) : BV:8
129 : ite(116, 67, 128) : BV:8
130 : ite(115, 65, 129) : BV:8
131 : ite(114, 62, 130) : BV:8
132 : bvadd(73, 58) : BV:32
133 : eq(132, 60) : BOOL
134 : eq(132, 63) : BOOL
135 : eq(132, 57) : BOOL
136 : eq(132, 68) : BOOL
137 : eq(132, 71) : BOOL
138 : eq(132, 73) : BOOL
139 : eq(132, 76) : BOOL
140 : eq(132, 79) : BOOL
141 : eq(132, 82) : BOOL
142 : ite(141, 62, 84) : BV:8
143 : ite(140, 81, 142) : BV:8
144 : ite(139, 78, 143) : BV:8
145 : ite(138, 75, 144) : BV:8
146 : ite(137, 65, 145) : BV:8
147 : ite(136, 70, 146) : BV:8
148 : ite(135, 67, 147) : BV:8
149 : ite(134, 65, 148) : BV:8
150 : ite(133, 62, 149) : BV:8
151 : bvconcat(93, 112, 131, 150) : BV:32
152 : bvadd(34, 56, 151) : BV:32
153 : eq(152, 60) : BOOL
154 : eq(152, 63) : BOOL
155 : eq(152, 57) : BOOL
156 : eq(152, 68) : BOOL
157 : eq(152, 71) : BOOL
158 : eq(152, 73) : BOOL
159 : eq(152, 76) : BOOL
160 : eq(152, 79) : BOOL
161 : eq(152, 82) : BOOL
162 : ite(161, 62, 84) : BV:8
163 : ite(160, 81, 162) : BV:8
164 : ite(159, 78, 163) : BV:8
165 : ite(158, 75, 164) : BV:8
166 : ite(157, 65, 165) : BV:8
167 : ite(156, 70, 166) : BV:8
168 : ite(155, 67, 167) : BV:8
169 : ite(154, 65, 168) : BV:8
170 : ite(153, 62, 169) : BV:8
171 : 2 { 0x2 +1.23e129 } : BV:32
172 : bvadd(171, 56, 151) : BV:32
173 : eq(172, 60) : BOOL
174 : eq(172, 63) : BOOL
175 : eq(172, 57) : BOOL
176 : eq(172, 68) : BOOL
177 : eq(172, 71) : BOOL
178 : eq(172, 73) : BOOL
179 : eq(172, 76) : BOOL
180 : eq(172, 79) : BOOL
181 : eq(172, 82) : BOOL
182 : ite(181, 62, 84) : BV:8
183 : ite(180, 81, 182) : BV:8
184 : ite(179, 78, 183) : BV:8
185 : ite(178, 75, 184) : BV:8
186 : ite(177, 65, 185) : BV:8
187 : ite(176, 70, 186) : BV:8
188 : ite(175, 67, 187) : BV:8
189 : ite(174, 65, 188) : BV:8
190 : ite(173, 62, 189) : BV:8
191 : 1 { 0x1 +1.11e129 } : BV:32
192 : bvadd(191, 56, 151) : BV:32
193 : eq(192, 60) : BOOL
194 : eq(192, 63) : BOOL
195 : eq(192, 57) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 71) : BOOL
198 : eq(192, 73) : BOOL
199 : eq(192, 76) : BOOL
200 : eq(192, 79) : BOOL
201 : eq(192, 82) : BOOL
202 : ite(201, 62, 84) : BV:8
203 : ite(200, 81, 202) : BV:8
204 : ite(199, 78, 203) : BV:8
205 : ite(198, 75, 204) : BV:8
206 : ite(197, 65, 205) : BV:8
207 : ite(196, 70, 206) : BV:8
208 : ite(195, 67, 207) : BV:8
209 : ite(194, 65, 208) : BV:8
210 : ite(193, 62, 209) : BV:8
211 : bvadd(56, 151) : BV:32
212 : eq(211, 60) : BOOL
213 : eq(211, 63) : BOOL
214 : eq(211, 57) : BOOL
215 : eq(211, 68) : BOOL
216 : eq(211, 71) : BOOL
217 : eq(211, 73) : BOOL
218 : eq(211, 76) : BOOL
219 : eq(211, 79) : BOOL
220 : eq(211, 82) : BOOL
221 : ite(220, 62, 84) : BV:8
222 : ite(219, 81, 221) : BV:8
223 : ite(218, 78, 222) : BV:8
224 : ite(217, 75, 223) : BV:8
225 : ite(216, 65, 224) : BV:8
226 : ite(215, 70, 225) : BV:8
227 : ite(214, 67, 226) : BV:8
228 : ite(213, 65, 227) : BV:8
229 : ite(212, 62, 228) : BV:8
230 : bvconcat(170, 190, 210, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : lambda(52, 231) : FUNCTION[BV:32 -> BV:32]
233 : map(51, 232) : MAP[BV:32 -> BV:32]
234 : lambda(17, 233) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
235 : map(16, 234) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
236 : sym_const(235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda45448Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(19, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(2, 19) : BOOL
34 : bvule(19, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 5 { 0x5 +1.59e129 } : BV:32
37 : bvule(36, 19) : BOOL
38 : bvule(19, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 2, 40) : BV:32
42 : ite(32, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 7, 13) : BOOL
46 : lambda(19, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda45449Var : BV:32
48 : eq(2, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvmul(2, 47) : BV:32
52 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
53 : bvmul(2, 2) : BV:32
54 : bvadd(52, 53) : BV:32
55 : 134217731 { 0x8000003 +1.35e145 } : BV:32
56 : eq(54, 55) : BOOL
57 : 127 { 0x7f } : BV:8
58 : 134217730 { 0x8000002 +1.23e145 } : BV:32
59 : eq(54, 58) : BOOL
60 : 255 { 0xff -1 } : BV:8
61 : eq(54, 52) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 134217728 { 0x8000000 +1.0e145 } : BV:32
64 : eq(54, 63) : BOOL
65 : 244 { 0xf4 -12 } : BV:8
66 : 134217729 { 0x8000001 +1.11e145 } : BV:32
67 : eq(54, 66) : BOOL
68 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
69 : eq(54, 68) : BOOL
70 : 188 { 0xbc -68 } : BV:8
71 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
72 : eq(54, 71) : BOOL
73 : 2 { 0x2 } : BV:8
74 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
75 : eq(54, 74) : BOOL
76 : 119 { 0x77 } : BV:8
77 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
78 : eq(54, 77) : BOOL
79 : 0 { 0x0 } : BV:8
80 : ite(78, 57, 79) : BV:8
81 : ite(75, 76, 80) : BV:8
82 : ite(72, 73, 81) : BV:8
83 : ite(69, 70, 82) : BV:8
84 : ite(67, 60, 83) : BV:8
85 : ite(64, 65, 84) : BV:8
86 : ite(61, 62, 85) : BV:8
87 : ite(59, 60, 86) : BV:8
88 : ite(56, 57, 87) : BV:8
89 : bvadd(74, 53) : BV:32
90 : eq(89, 55) : BOOL
91 : eq(89, 58) : BOOL
92 : eq(89, 52) : BOOL
93 : eq(89, 63) : BOOL
94 : eq(89, 66) : BOOL
95 : eq(89, 68) : BOOL
96 : eq(89, 71) : BOOL
97 : eq(89, 74) : BOOL
98 : eq(89, 77) : BOOL
99 : ite(98, 57, 79) : BV:8
100 : ite(97, 76, 99) : BV:8
101 : ite(96, 73, 100) : BV:8
102 : ite(95, 70, 101) : BV:8
103 : ite(94, 60, 102) : BV:8
104 : ite(93, 65, 103) : BV:8
105 : ite(92, 62, 104) : BV:8
106 : ite(91, 60, 105) : BV:8
107 : ite(90, 57, 106) : BV:8
108 : bvadd(77, 53) : BV:32
109 : eq(108, 55) : BOOL
110 : eq(108, 58) : BOOL
111 : eq(108, 52) : BOOL
112 : eq(108, 63) : BOOL
113 : eq(108, 66) : BOOL
114 : eq(108, 68) : BOOL
115 : eq(108, 71) : BOOL
116 : eq(108, 74) : BOOL
117 : eq(108, 77) : BOOL
118 : ite(117, 57, 79) : BV:8
119 : ite(116, 76, 118) : BV:8
120 : ite(115, 73, 119) : BV:8
121 : ite(114, 70, 120) : BV:8
122 : ite(113, 60, 121) : BV:8
123 : ite(112, 65, 122) : BV:8
124 : ite(111, 62, 123) : BV:8
125 : ite(110, 60, 124) : BV:8
126 : ite(109, 57, 125) : BV:8
127 : bvadd(68, 53) : BV:32
128 : eq(127, 55) : BOOL
129 : eq(127, 58) : BOOL
130 : eq(127, 52) : BOOL
131 : eq(127, 63) : BOOL
132 : eq(127, 66) : BOOL
133 : eq(127, 68) : BOOL
134 : eq(127, 71) : BOOL
135 : eq(127, 74) : BOOL
136 : eq(127, 77) : BOOL
137 : ite(136, 57, 79) : BV:8
138 : ite(135, 76, 137) : BV:8
139 : ite(134, 73, 138) : BV:8
140 : ite(133, 70, 139) : BV:8
141 : ite(132, 60, 140) : BV:8
142 : ite(131, 65, 141) : BV:8
143 : ite(130, 62, 142) : BV:8
144 : ite(129, 60, 143) : BV:8
145 : ite(128, 57, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(30, 51, 146) : BV:32
148 : eq(147, 55) : BOOL
149 : eq(147, 58) : BOOL
150 : eq(147, 52) : BOOL
151 : eq(147, 63) : BOOL
152 : eq(147, 66) : BOOL
153 : eq(147, 68) : BOOL
154 : eq(147, 71) : BOOL
155 : eq(147, 74) : BOOL
156 : eq(147, 77) : BOOL
157 : ite(156, 57, 79) : BV:8
158 : ite(155, 76, 157) : BV:8
159 : ite(154, 73, 158) : BV:8
160 : ite(153, 70, 159) : BV:8
161 : ite(152, 60, 160) : BV:8
162 : ite(151, 65, 161) : BV:8
163 : ite(150, 62, 162) : BV:8
164 : ite(149, 60, 163) : BV:8
165 : ite(148, 57, 164) : BV:8
166 : 2 { 0x2 +1.23e129 } : BV:32
167 : bvadd(166, 51, 146) : BV:32
168 : eq(167, 55) : BOOL
169 : eq(167, 58) : BOOL
170 : eq(167, 52) : BOOL
171 : eq(167, 63) : BOOL
172 : eq(167, 66) : BOOL
173 : eq(167, 68) : BOOL
174 : eq(167, 71) : BOOL
175 : eq(167, 74) : BOOL
176 : eq(167, 77) : BOOL
177 : ite(176, 57, 79) : BV:8
178 : ite(175, 76, 177) : BV:8
179 : ite(174, 73, 178) : BV:8
180 : ite(173, 70, 179) : BV:8
181 : ite(172, 60, 180) : BV:8
182 : ite(171, 65, 181) : BV:8
183 : ite(170, 62, 182) : BV:8
184 : ite(169, 60, 183) : BV:8
185 : ite(168, 57, 184) : BV:8
186 : bvadd(16, 51, 146) : BV:32
187 : eq(186, 55) : BOOL
188 : eq(186, 58) : BOOL
189 : eq(186, 52) : BOOL
190 : eq(186, 63) : BOOL
191 : eq(186, 66) : BOOL
192 : eq(186, 68) : BOOL
193 : eq(186, 71) : BOOL
194 : eq(186, 74) : BOOL
195 : eq(186, 77) : BOOL
196 : ite(195, 57, 79) : BV:8
197 : ite(194, 76, 196) : BV:8
198 : ite(193, 73, 197) : BV:8
199 : ite(192, 70, 198) : BV:8
200 : ite(191, 60, 199) : BV:8
201 : ite(190, 65, 200) : BV:8
202 : ite(189, 62, 201) : BV:8
203 : ite(188, 60, 202) : BV:8
204 : ite(187, 57, 203) : BV:8
205 : bvadd(51, 146) : BV:32
206 : eq(205, 55) : BOOL
207 : eq(205, 58) : BOOL
208 : eq(205, 52) : BOOL
209 : eq(205, 63) : BOOL
210 : eq(205, 66) : BOOL
211 : eq(205, 68) : BOOL
212 : eq(205, 71) : BOOL
213 : eq(205, 74) : BOOL
214 : eq(205, 77) : BOOL
215 : ite(214, 57, 79) : BV:8
216 : ite(213, 76, 215) : BV:8
217 : ite(212, 73, 216) : BV:8
218 : ite(211, 70, 217) : BV:8
219 : ite(210, 60, 218) : BV:8
220 : ite(209, 65, 219) : BV:8
221 : ite(208, 62, 220) : BV:8
222 : ite(207, 60, 221) : BV:8
223 : ite(206, 57, 222) : BV:8
224 : bvconcat(165, 185, 204, 223) : BV:32
225 : ite(50, 1, 224) : BV:32
226 : lambda(47, 225) : FUNCTION[BV:32 -> BV:32]
227 : map(46, 226) : MAP[BV:32 -> BV:32]
228 : sum(17, 18, 227) : SUM[UNIT,MAP[BV:32 -> BV:32]]
229 : sym_const(228) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1745580109 { 0x680b704d +1.8936464e81 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda45464Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(3, 1) : BOOL
26 : bvule(1, 3) : BOOL
27 : and(25, 26) : BOOL
28 : 5 { 0x5 +1.59e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 3, 32) : BV:32
34 : ite(24, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda45465Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : bvmul(3, 41) : BV:32
46 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
47 : bvmul(3, 3) : BV:32
48 : bvadd(46, 47) : BV:32
49 : 134217731 { 0x8000003 +1.35e145 } : BV:32
50 : eq(48, 49) : BOOL
51 : 127 { 0x7f } : BV:8
52 : 134217730 { 0x8000002 +1.23e145 } : BV:32
53 : eq(48, 52) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : eq(48, 46) : BOOL
56 : 253 { 0xfd -3 } : BV:8
57 : 134217728 { 0x8000000 +1.0e145 } : BV:32
58 : eq(48, 57) : BOOL
59 : 244 { 0xf4 -12 } : BV:8
60 : 134217729 { 0x8000001 +1.11e145 } : BV:32
61 : eq(48, 60) : BOOL
62 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
63 : eq(48, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
66 : eq(48, 65) : BOOL
67 : 2 { 0x2 } : BV:8
68 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
69 : eq(48, 68) : BOOL
70 : 119 { 0x77 } : BV:8
71 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
72 : eq(48, 71) : BOOL
73 : 0 { 0x0 } : BV:8
74 : ite(72, 51, 73) : BV:8
75 : ite(69, 70, 74) : BV:8
76 : ite(66, 67, 75) : BV:8
77 : ite(63, 64, 76) : BV:8
78 : ite(61, 54, 77) : BV:8
79 : ite(58, 59, 78) : BV:8
80 : ite(55, 56, 79) : BV:8
81 : ite(53, 54, 80) : BV:8
82 : ite(50, 51, 81) : BV:8
83 : bvadd(68, 47) : BV:32
84 : eq(83, 49) : BOOL
85 : eq(83, 52) : BOOL
86 : eq(83, 46) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 60) : BOOL
89 : eq(83, 62) : BOOL
90 : eq(83, 65) : BOOL
91 : eq(83, 68) : BOOL
92 : eq(83, 71) : BOOL
93 : ite(92, 51, 73) : BV:8
94 : ite(91, 70, 93) : BV:8
95 : ite(90, 67, 94) : BV:8
96 : ite(89, 64, 95) : BV:8
97 : ite(88, 54, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 56, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : ite(84, 51, 100) : BV:8
102 : bvadd(71, 47) : BV:32
103 : eq(102, 49) : BOOL
104 : eq(102, 52) : BOOL
105 : eq(102, 46) : BOOL
106 : eq(102, 57) : BOOL
107 : eq(102, 60) : BOOL
108 : eq(102, 62) : BOOL
109 : eq(102, 65) : BOOL
110 : eq(102, 68) : BOOL
111 : eq(102, 71) : BOOL
112 : ite(111, 51, 73) : BV:8
113 : ite(110, 70, 112) : BV:8
114 : ite(109, 67, 113) : BV:8
115 : ite(108, 64, 114) : BV:8
116 : ite(107, 54, 115) : BV:8
117 : ite(106, 59, 116) : BV:8
118 : ite(105, 56, 117) : BV:8
119 : ite(104, 54, 118) : BV:8
120 : ite(103, 51, 119) : BV:8
121 : bvadd(62, 47) : BV:32
122 : eq(121, 49) : BOOL
123 : eq(121, 52) : BOOL
124 : eq(121, 46) : BOOL
125 : eq(121, 57) : BOOL
126 : eq(121, 60) : BOOL
127 : eq(121, 62) : BOOL
128 : eq(121, 65) : BOOL
129 : eq(121, 68) : BOOL
130 : eq(121, 71) : BOOL
131 : ite(130, 51, 73) : BV:8
132 : ite(129, 70, 131) : BV:8
133 : ite(128, 67, 132) : BV:8
134 : ite(127, 64, 133) : BV:8
135 : ite(126, 54, 134) : BV:8
136 : ite(125, 59, 135) : BV:8
137 : ite(124, 56, 136) : BV:8
138 : ite(123, 54, 137) : BV:8
139 : ite(122, 51, 138) : BV:8
140 : bvconcat(82, 101, 120, 139) : BV:32
141 : bvadd(22, 45, 140) : BV:32
142 : eq(141, 49) : BOOL
143 : eq(141, 52) : BOOL
144 : eq(141, 46) : BOOL
145 : eq(141, 57) : BOOL
146 : eq(141, 60) : BOOL
147 : eq(141, 62) : BOOL
148 : eq(141, 65) : BOOL
149 : eq(141, 68) : BOOL
150 : eq(141, 71) : BOOL
151 : ite(150, 51, 73) : BV:8
152 : ite(149, 70, 151) : BV:8
153 : ite(148, 67, 152) : BV:8
154 : ite(147, 64, 153) : BV:8
155 : ite(146, 54, 154) : BV:8
156 : ite(145, 59, 155) : BV:8
157 : ite(144, 56, 156) : BV:8
158 : ite(143, 54, 157) : BV:8
159 : ite(142, 51, 158) : BV:8
160 : 2 { 0x2 +1.23e129 } : BV:32
161 : bvadd(160, 45, 140) : BV:32
162 : eq(161, 49) : BOOL
163 : eq(161, 52) : BOOL
164 : eq(161, 46) : BOOL
165 : eq(161, 57) : BOOL
166 : eq(161, 60) : BOOL
167 : eq(161, 62) : BOOL
168 : eq(161, 65) : BOOL
169 : eq(161, 68) : BOOL
170 : eq(161, 71) : BOOL
171 : ite(170, 51, 73) : BV:8
172 : ite(169, 70, 171) : BV:8
173 : ite(168, 67, 172) : BV:8
174 : ite(167, 64, 173) : BV:8
175 : ite(166, 54, 174) : BV:8
176 : ite(165, 59, 175) : BV:8
177 : ite(164, 56, 176) : BV:8
178 : ite(163, 54, 177) : BV:8
179 : ite(162, 51, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 45, 140) : BV:32
182 : eq(181, 49) : BOOL
183 : eq(181, 52) : BOOL
184 : eq(181, 46) : BOOL
185 : eq(181, 57) : BOOL
186 : eq(181, 60) : BOOL
187 : eq(181, 62) : BOOL
188 : eq(181, 65) : BOOL
189 : eq(181, 68) : BOOL
190 : eq(181, 71) : BOOL
191 : ite(190, 51, 73) : BV:8
192 : ite(189, 70, 191) : BV:8
193 : ite(188, 67, 192) : BV:8
194 : ite(187, 64, 193) : BV:8
195 : ite(186, 54, 194) : BV:8
196 : ite(185, 59, 195) : BV:8
197 : ite(184, 56, 196) : BV:8
198 : ite(183, 54, 197) : BV:8
199 : ite(182, 51, 198) : BV:8
200 : bvadd(45, 140) : BV:32
201 : eq(200, 49) : BOOL
202 : eq(200, 52) : BOOL
203 : eq(200, 46) : BOOL
204 : eq(200, 57) : BOOL
205 : eq(200, 60) : BOOL
206 : eq(200, 62) : BOOL
207 : eq(200, 65) : BOOL
208 : eq(200, 68) : BOOL
209 : eq(200, 71) : BOOL
210 : ite(209, 51, 73) : BV:8
211 : ite(208, 70, 210) : BV:8
212 : ite(207, 67, 211) : BV:8
213 : ite(206, 64, 212) : BV:8
214 : ite(205, 54, 213) : BV:8
215 : ite(204, 59, 214) : BV:8
216 : ite(203, 56, 215) : BV:8
217 : ite(202, 54, 216) : BV:8
218 : ite(201, 51, 217) : BV:8
219 : bvconcat(159, 179, 199, 218) : BV:32
220 : ite(44, 2, 219) : BV:32
221 : lambda(41, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(40, 221) : MAP[BV:32 -> BV:32]
223 : sym_const(222) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1160537389 { 0x452c652d +1.34683763e11 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 786497560 { 0x2ee10018 +1.75781536e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 786497563 { 0x2ee1001b +1.75781571e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1222123512 { 0x48d81ff8 +1.68847560e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1222123515 { 0x48d81ffb +1.68847596e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2141941724 { 0x7fab6fdc +1.33935117e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2141941727 { 0x7fab6fdf +1.33935153e128 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45117Var : BV:32
2 : Lambda45118Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 134217731 { 0x8000003 +1.35e145 } : BV:32
53 : eq(51, 52) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 134217730 { 0x8000002 +1.23e145 } : BV:32
56 : eq(51, 55) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : eq(51, 49) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 134217728 { 0x8000000 +1.0e145 } : BV:32
61 : eq(51, 60) : BOOL
62 : 244 { 0xf4 -12 } : BV:8
63 : 134217729 { 0x8000001 +1.11e145 } : BV:32
64 : eq(51, 63) : BOOL
65 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
66 : eq(51, 65) : BOOL
67 : 188 { 0xbc -68 } : BV:8
68 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
69 : eq(51, 68) : BOOL
70 : 2 { 0x2 } : BV:8
71 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
72 : eq(51, 71) : BOOL
73 : 119 { 0x77 } : BV:8
74 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
75 : eq(51, 74) : BOOL
76 : 0 { 0x0 } : BV:8
77 : ite(75, 54, 76) : BV:8
78 : ite(72, 73, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(64, 57, 80) : BV:8
82 : ite(61, 62, 81) : BV:8
83 : ite(58, 59, 82) : BV:8
84 : ite(56, 57, 83) : BV:8
85 : ite(53, 54, 84) : BV:8
86 : bvadd(71, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 49) : BOOL
90 : eq(86, 60) : BOOL
91 : eq(86, 63) : BOOL
92 : eq(86, 65) : BOOL
93 : eq(86, 68) : BOOL
94 : eq(86, 71) : BOOL
95 : eq(86, 74) : BOOL
96 : ite(95, 54, 76) : BV:8
97 : ite(94, 73, 96) : BV:8
98 : ite(93, 70, 97) : BV:8
99 : ite(92, 67, 98) : BV:8
100 : ite(91, 57, 99) : BV:8
101 : ite(90, 62, 100) : BV:8
102 : ite(89, 59, 101) : BV:8
103 : ite(88, 57, 102) : BV:8
104 : ite(87, 54, 103) : BV:8
105 : bvadd(74, 50) : BV:32
106 : eq(105, 52) : BOOL
107 : eq(105, 55) : BOOL
108 : eq(105, 49) : BOOL
109 : eq(105, 60) : BOOL
110 : eq(105, 63) : BOOL
111 : eq(105, 65) : BOOL
112 : eq(105, 68) : BOOL
113 : eq(105, 71) : BOOL
114 : eq(105, 74) : BOOL
115 : ite(114, 54, 76) : BV:8
116 : ite(113, 73, 115) : BV:8
117 : ite(112, 70, 116) : BV:8
118 : ite(111, 67, 117) : BV:8
119 : ite(110, 57, 118) : BV:8
120 : ite(109, 62, 119) : BV:8
121 : ite(108, 59, 120) : BV:8
122 : ite(107, 57, 121) : BV:8
123 : ite(106, 54, 122) : BV:8
124 : bvadd(65, 50) : BV:32
125 : eq(124, 52) : BOOL
126 : eq(124, 55) : BOOL
127 : eq(124, 49) : BOOL
128 : eq(124, 60) : BOOL
129 : eq(124, 63) : BOOL
130 : eq(124, 65) : BOOL
131 : eq(124, 68) : BOOL
132 : eq(124, 71) : BOOL
133 : eq(124, 74) : BOOL
134 : ite(133, 54, 76) : BV:8
135 : ite(132, 73, 134) : BV:8
136 : ite(131, 70, 135) : BV:8
137 : ite(130, 67, 136) : BV:8
138 : ite(129, 57, 137) : BV:8
139 : ite(128, 62, 138) : BV:8
140 : ite(127, 59, 139) : BV:8
141 : ite(126, 57, 140) : BV:8
142 : ite(125, 54, 141) : BV:8
143 : bvconcat(85, 104, 123, 142) : BV:32
144 : bvadd(30, 48, 143) : BV:32
145 : eq(144, 52) : BOOL
146 : eq(144, 55) : BOOL
147 : eq(144, 49) : BOOL
148 : eq(144, 60) : BOOL
149 : eq(144, 63) : BOOL
150 : eq(144, 65) : BOOL
151 : eq(144, 68) : BOOL
152 : eq(144, 71) : BOOL
153 : eq(144, 74) : BOOL
154 : ite(153, 54, 76) : BV:8
155 : ite(152, 73, 154) : BV:8
156 : ite(151, 70, 155) : BV:8
157 : ite(150, 67, 156) : BV:8
158 : ite(149, 57, 157) : BV:8
159 : ite(148, 62, 158) : BV:8
160 : ite(147, 59, 159) : BV:8
161 : ite(146, 57, 160) : BV:8
162 : ite(145, 54, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 48, 143) : BV:32
165 : eq(164, 52) : BOOL
166 : eq(164, 55) : BOOL
167 : eq(164, 49) : BOOL
168 : eq(164, 60) : BOOL
169 : eq(164, 63) : BOOL
170 : eq(164, 65) : BOOL
171 : eq(164, 68) : BOOL
172 : eq(164, 71) : BOOL
173 : eq(164, 74) : BOOL
174 : ite(173, 54, 76) : BV:8
175 : ite(172, 73, 174) : BV:8
176 : ite(171, 70, 175) : BV:8
177 : ite(170, 67, 176) : BV:8
178 : ite(169, 57, 177) : BV:8
179 : ite(168, 62, 178) : BV:8
180 : ite(167, 59, 179) : BV:8
181 : ite(166, 57, 180) : BV:8
182 : ite(165, 54, 181) : BV:8
183 : 1 { 0x1 +1.11e129 } : BV:32
184 : bvadd(183, 48, 143) : BV:32
185 : eq(184, 52) : BOOL
186 : eq(184, 55) : BOOL
187 : eq(184, 49) : BOOL
188 : eq(184, 60) : BOOL
189 : eq(184, 63) : BOOL
190 : eq(184, 65) : BOOL
191 : eq(184, 68) : BOOL
192 : eq(184, 71) : BOOL
193 : eq(184, 74) : BOOL
194 : ite(193, 54, 76) : BV:8
195 : ite(192, 73, 194) : BV:8
196 : ite(191, 70, 195) : BV:8
197 : ite(190, 67, 196) : BV:8
198 : ite(189, 57, 197) : BV:8
199 : ite(188, 62, 198) : BV:8
200 : ite(187, 59, 199) : BV:8
201 : ite(186, 57, 200) : BV:8
202 : ite(185, 54, 201) : BV:8
203 : bvadd(48, 143) : BV:32
204 : eq(203, 52) : BOOL
205 : eq(203, 55) : BOOL
206 : eq(203, 49) : BOOL
207 : eq(203, 60) : BOOL
208 : eq(203, 63) : BOOL
209 : eq(203, 65) : BOOL
210 : eq(203, 68) : BOOL
211 : eq(203, 71) : BOOL
212 : eq(203, 74) : BOOL
213 : ite(212, 54, 76) : BV:8
214 : ite(211, 73, 213) : BV:8
215 : ite(210, 70, 214) : BV:8
216 : ite(209, 67, 215) : BV:8
217 : ite(208, 57, 216) : BV:8
218 : ite(207, 62, 217) : BV:8
219 : ite(206, 59, 218) : BV:8
220 : ite(205, 57, 219) : BV:8
221 : ite(204, 54, 220) : BV:8
222 : bvconcat(162, 182, 202, 221) : BV:32
223 : ite(6, 3, 222) : BV:32
224 : ite(47, 222, 223) : BV:32
225 : ite(6, 3, 224) : BV:32
226 : lambda(1, 2, 225) : FUNCTION[BV:32,BV:32 -> BV:32]
227 : sym_const(226) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45122Var : BV:32
2 : Lambda45123Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45131Var : BV:32
2 : Lambda45132Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45127Var : BV:32
2 : Lambda45128Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 134217731 { 0x8000003 +1.35e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 134217730 { 0x8000002 +1.23e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : eq(12, 10) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 134217728 { 0x8000000 +1.0e145 } : BV:32
22 : eq(12, 21) : BOOL
23 : 244 { 0xf4 -12 } : BV:8
24 : 134217729 { 0x8000001 +1.11e145 } : BV:32
25 : eq(12, 24) : BOOL
26 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
27 : eq(12, 26) : BOOL
28 : 188 { 0xbc -68 } : BV:8
29 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
30 : eq(12, 29) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
33 : eq(12, 32) : BOOL
34 : 119 { 0x77 } : BV:8
35 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
36 : eq(12, 35) : BOOL
37 : 0 { 0x0 } : BV:8
38 : ite(36, 15, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(25, 18, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(19, 20, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : ite(14, 15, 45) : BV:8
47 : bvadd(32, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 10) : BOOL
51 : eq(47, 21) : BOOL
52 : eq(47, 24) : BOOL
53 : eq(47, 26) : BOOL
54 : eq(47, 29) : BOOL
55 : eq(47, 32) : BOOL
56 : eq(47, 35) : BOOL
57 : ite(56, 15, 37) : BV:8
58 : ite(55, 34, 57) : BV:8
59 : ite(54, 31, 58) : BV:8
60 : ite(53, 28, 59) : BV:8
61 : ite(52, 18, 60) : BV:8
62 : ite(51, 23, 61) : BV:8
63 : ite(50, 20, 62) : BV:8
64 : ite(49, 18, 63) : BV:8
65 : ite(48, 15, 64) : BV:8
66 : bvadd(35, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 10) : BOOL
70 : eq(66, 21) : BOOL
71 : eq(66, 24) : BOOL
72 : eq(66, 26) : BOOL
73 : eq(66, 29) : BOOL
74 : eq(66, 32) : BOOL
75 : eq(66, 35) : BOOL
76 : ite(75, 15, 37) : BV:8
77 : ite(74, 34, 76) : BV:8
78 : ite(73, 31, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 18, 79) : BV:8
81 : ite(70, 23, 80) : BV:8
82 : ite(69, 20, 81) : BV:8
83 : ite(68, 18, 82) : BV:8
84 : ite(67, 15, 83) : BV:8
85 : bvadd(26, 11) : BV:32
86 : eq(85, 13) : BOOL
87 : eq(85, 16) : BOOL
88 : eq(85, 10) : BOOL
89 : eq(85, 21) : BOOL
90 : eq(85, 24) : BOOL
91 : eq(85, 26) : BOOL
92 : eq(85, 29) : BOOL
93 : eq(85, 32) : BOOL
94 : eq(85, 35) : BOOL
95 : ite(94, 15, 37) : BV:8
96 : ite(93, 34, 95) : BV:8
97 : ite(92, 31, 96) : BV:8
98 : ite(91, 28, 97) : BV:8
99 : ite(90, 18, 98) : BV:8
100 : ite(89, 23, 99) : BV:8
101 : ite(88, 20, 100) : BV:8
102 : ite(87, 18, 101) : BV:8
103 : ite(86, 15, 102) : BV:8
104 : bvconcat(46, 65, 84, 103) : BV:32
105 : bvadd(7, 9, 104) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 10) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 26) : BOOL
112 : eq(105, 29) : BOOL
113 : eq(105, 32) : BOOL
114 : eq(105, 35) : BOOL
115 : ite(114, 15, 37) : BV:8
116 : ite(113, 34, 115) : BV:8
117 : ite(112, 31, 116) : BV:8
118 : ite(111, 28, 117) : BV:8
119 : ite(110, 18, 118) : BV:8
120 : ite(109, 23, 119) : BV:8
121 : ite(108, 20, 120) : BV:8
122 : ite(107, 18, 121) : BV:8
123 : ite(106, 15, 122) : BV:8
124 : 2 { 0x2 +1.23e129 } : BV:32
125 : bvadd(124, 9, 104) : BV:32
126 : eq(125, 13) : BOOL
127 : eq(125, 16) : BOOL
128 : eq(125, 10) : BOOL
129 : eq(125, 21) : BOOL
130 : eq(125, 24) : BOOL
131 : eq(125, 26) : BOOL
132 : eq(125, 29) : BOOL
133 : eq(125, 32) : BOOL
134 : eq(125, 35) : BOOL
135 : ite(134, 15, 37) : BV:8
136 : ite(133, 34, 135) : BV:8
137 : ite(132, 31, 136) : BV:8
138 : ite(131, 28, 137) : BV:8
139 : ite(130, 18, 138) : BV:8
140 : ite(129, 23, 139) : BV:8
141 : ite(128, 20, 140) : BV:8
142 : ite(127, 18, 141) : BV:8
143 : ite(126, 15, 142) : BV:8
144 : 1 { 0x1 +1.11e129 } : BV:32
145 : bvadd(144, 9, 104) : BV:32
146 : eq(145, 13) : BOOL
147 : eq(145, 16) : BOOL
148 : eq(145, 10) : BOOL
149 : eq(145, 21) : BOOL
150 : eq(145, 24) : BOOL
151 : eq(145, 26) : BOOL
152 : eq(145, 29) : BOOL
153 : eq(145, 32) : BOOL
154 : eq(145, 35) : BOOL
155 : ite(154, 15, 37) : BV:8
156 : ite(153, 34, 155) : BV:8
157 : ite(152, 31, 156) : BV:8
158 : ite(151, 28, 157) : BV:8
159 : ite(150, 18, 158) : BV:8
160 : ite(149, 23, 159) : BV:8
161 : ite(148, 20, 160) : BV:8
162 : ite(147, 18, 161) : BV:8
163 : ite(146, 15, 162) : BV:8
164 : bvadd(9, 104) : BV:32
165 : eq(164, 13) : BOOL
166 : eq(164, 16) : BOOL
167 : eq(164, 10) : BOOL
168 : eq(164, 21) : BOOL
169 : eq(164, 24) : BOOL
170 : eq(164, 26) : BOOL
171 : eq(164, 29) : BOOL
172 : eq(164, 32) : BOOL
173 : eq(164, 35) : BOOL
174 : ite(173, 15, 37) : BV:8
175 : ite(172, 34, 174) : BV:8
176 : ite(171, 31, 175) : BV:8
177 : ite(170, 28, 176) : BV:8
178 : ite(169, 18, 177) : BV:8
179 : ite(168, 23, 178) : BV:8
180 : ite(167, 20, 179) : BV:8
181 : ite(166, 18, 180) : BV:8
182 : ite(165, 15, 181) : BV:8
183 : bvconcat(123, 143, 163, 182) : BV:32
184 : ite(6, 3, 183) : BV:32
185 : lambda(1, 2, 184) : FUNCTION[BV:32,BV:32 -> BV:32]
186 : sym_const(185) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45138Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 134217731 { 0x8000003 +1.35e145 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 134217730 { 0x8000002 +1.23e145 } : BV:32
15 : eq(10, 14) : BOOL
16 : 255 { 0xff -1 } : BV:8
17 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
18 : eq(10, 17) : BOOL
19 : 253 { 0xfd -3 } : BV:8
20 : 134217728 { 0x8000000 +1.0e145 } : BV:32
21 : eq(10, 20) : BOOL
22 : 244 { 0xf4 -12 } : BV:8
23 : 134217729 { 0x8000001 +1.11e145 } : BV:32
24 : eq(10, 23) : BOOL
25 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
26 : eq(10, 25) : BOOL
27 : 188 { 0xbc -68 } : BV:8
28 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
29 : eq(10, 28) : BOOL
30 : 2 { 0x2 } : BV:8
31 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
32 : eq(10, 31) : BOOL
33 : 119 { 0x77 } : BV:8
34 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
35 : eq(10, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(24, 16, 40) : BV:8
42 : ite(21, 22, 41) : BV:8
43 : ite(18, 19, 42) : BV:8
44 : ite(15, 16, 43) : BV:8
45 : ite(12, 13, 44) : BV:8
46 : bvadd(4, 8, 9) : BV:32
47 : eq(46, 11) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 20) : BOOL
51 : eq(46, 23) : BOOL
52 : eq(46, 25) : BOOL
53 : eq(46, 28) : BOOL
54 : eq(46, 31) : BOOL
55 : eq(46, 34) : BOOL
56 : ite(55, 13, 36) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 16, 59) : BV:8
61 : ite(50, 22, 60) : BV:8
62 : ite(49, 19, 61) : BV:8
63 : ite(48, 16, 62) : BV:8
64 : ite(47, 13, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 8, 9) : BV:32
67 : eq(66, 11) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : eq(66, 20) : BOOL
71 : eq(66, 23) : BOOL
72 : eq(66, 25) : BOOL
73 : eq(66, 28) : BOOL
74 : eq(66, 31) : BOOL
75 : eq(66, 34) : BOOL
76 : ite(75, 13, 36) : BV:8
77 : ite(74, 33, 76) : BV:8
78 : ite(73, 30, 77) : BV:8
79 : ite(72, 27, 78) : BV:8
80 : ite(71, 16, 79) : BV:8
81 : ite(70, 22, 80) : BV:8
82 : ite(69, 19, 81) : BV:8
83 : ite(68, 16, 82) : BV:8
84 : ite(67, 13, 83) : BV:8
85 : bvadd(8, 9) : BV:32
86 : eq(85, 11) : BOOL
87 : eq(85, 14) : BOOL
88 : eq(85, 17) : BOOL
89 : eq(85, 20) : BOOL
90 : eq(85, 23) : BOOL
91 : eq(85, 25) : BOOL
92 : eq(85, 28) : BOOL
93 : eq(85, 31) : BOOL
94 : eq(85, 34) : BOOL
95 : ite(94, 13, 36) : BV:8
96 : ite(93, 33, 95) : BV:8
97 : ite(92, 30, 96) : BV:8
98 : ite(91, 27, 97) : BV:8
99 : ite(90, 16, 98) : BV:8
100 : ite(89, 22, 99) : BV:8
101 : ite(88, 19, 100) : BV:8
102 : ite(87, 16, 101) : BV:8
103 : ite(86, 13, 102) : BV:8
104 : bvconcat(45, 64, 84, 103) : BV:32
105 : ite(6, 5, 104) : BV:32
106 : ite(3, 4, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45142Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 134217731 { 0x8000003 +1.35e145 } : BV:32
10 : eq(8, 9) : BOOL
11 : 127 { 0x7f } : BV:8
12 : 134217730 { 0x8000002 +1.23e145 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 134217728 { 0x8000000 +1.0e145 } : BV:32
19 : eq(8, 18) : BOOL
20 : 244 { 0xf4 -12 } : BV:8
21 : 134217729 { 0x8000001 +1.11e145 } : BV:32
22 : eq(8, 21) : BOOL
23 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
24 : eq(8, 23) : BOOL
25 : 188 { 0xbc -68 } : BV:8
26 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
30 : eq(8, 29) : BOOL
31 : 119 { 0x77 } : BV:8
32 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
33 : eq(8, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(27, 28, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 14, 38) : BV:8
40 : ite(19, 20, 39) : BV:8
41 : ite(16, 17, 40) : BV:8
42 : ite(13, 14, 41) : BV:8
43 : ite(10, 11, 42) : BV:8
44 : bvadd(4, 6, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 18) : BOOL
49 : eq(44, 21) : BOOL
50 : eq(44, 23) : BOOL
51 : eq(44, 26) : BOOL
52 : eq(44, 29) : BOOL
53 : eq(44, 32) : BOOL
54 : ite(53, 11, 34) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 14, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : ite(45, 11, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 6, 7) : BV:32
65 : eq(64, 9) : BOOL
66 : eq(64, 12) : BOOL
67 : eq(64, 15) : BOOL
68 : eq(64, 18) : BOOL
69 : eq(64, 21) : BOOL
70 : eq(64, 23) : BOOL
71 : eq(64, 26) : BOOL
72 : eq(64, 29) : BOOL
73 : eq(64, 32) : BOOL
74 : ite(73, 11, 34) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 14, 77) : BV:8
79 : ite(68, 20, 78) : BV:8
80 : ite(67, 17, 79) : BV:8
81 : ite(66, 14, 80) : BV:8
82 : ite(65, 11, 81) : BV:8
83 : bvadd(6, 7) : BV:32
84 : eq(83, 9) : BOOL
85 : eq(83, 12) : BOOL
86 : eq(83, 15) : BOOL
87 : eq(83, 18) : BOOL
88 : eq(83, 21) : BOOL
89 : eq(83, 23) : BOOL
90 : eq(83, 26) : BOOL
91 : eq(83, 29) : BOOL
92 : eq(83, 32) : BOOL
93 : ite(92, 11, 34) : BV:8
94 : ite(91, 31, 93) : BV:8
95 : ite(90, 28, 94) : BV:8
96 : ite(89, 25, 95) : BV:8
97 : ite(88, 14, 96) : BV:8
98 : ite(87, 20, 97) : BV:8
99 : ite(86, 17, 98) : BV:8
100 : ite(85, 14, 99) : BV:8
101 : ite(84, 11, 100) : BV:8
102 : bvconcat(43, 62, 82, 101) : BV:32
103 : ite(3, 4, 102) : BV:32
104 : lambda(1, 103) : FUNCTION[BV:32 -> BV:32]
105 : sym_const(104) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45143Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 134217731 { 0x8000003 +1.35e145 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 134217730 { 0x8000002 +1.23e145 } : BV:32
15 : eq(10, 14) : BOOL
16 : 255 { 0xff -1 } : BV:8
17 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
18 : eq(10, 17) : BOOL
19 : 253 { 0xfd -3 } : BV:8
20 : 134217728 { 0x8000000 +1.0e145 } : BV:32
21 : eq(10, 20) : BOOL
22 : 244 { 0xf4 -12 } : BV:8
23 : 134217729 { 0x8000001 +1.11e145 } : BV:32
24 : eq(10, 23) : BOOL
25 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
26 : eq(10, 25) : BOOL
27 : 188 { 0xbc -68 } : BV:8
28 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
29 : eq(10, 28) : BOOL
30 : 2 { 0x2 } : BV:8
31 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
32 : eq(10, 31) : BOOL
33 : 119 { 0x77 } : BV:8
34 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
35 : eq(10, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(24, 16, 40) : BV:8
42 : ite(21, 22, 41) : BV:8
43 : ite(18, 19, 42) : BV:8
44 : ite(15, 16, 43) : BV:8
45 : ite(12, 13, 44) : BV:8
46 : bvadd(4, 8, 9) : BV:32
47 : eq(46, 11) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 20) : BOOL
51 : eq(46, 23) : BOOL
52 : eq(46, 25) : BOOL
53 : eq(46, 28) : BOOL
54 : eq(46, 31) : BOOL
55 : eq(46, 34) : BOOL
56 : ite(55, 13, 36) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 16, 59) : BV:8
61 : ite(50, 22, 60) : BV:8
62 : ite(49, 19, 61) : BV:8
63 : ite(48, 16, 62) : BV:8
64 : ite(47, 13, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 8, 9) : BV:32
67 : eq(66, 11) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : eq(66, 20) : BOOL
71 : eq(66, 23) : BOOL
72 : eq(66, 25) : BOOL
73 : eq(66, 28) : BOOL
74 : eq(66, 31) : BOOL
75 : eq(66, 34) : BOOL
76 : ite(75, 13, 36) : BV:8
77 : ite(74, 33, 76) : BV:8
78 : ite(73, 30, 77) : BV:8
79 : ite(72, 27, 78) : BV:8
80 : ite(71, 16, 79) : BV:8
81 : ite(70, 22, 80) : BV:8
82 : ite(69, 19, 81) : BV:8
83 : ite(68, 16, 82) : BV:8
84 : ite(67, 13, 83) : BV:8
85 : bvadd(8, 9) : BV:32
86 : eq(85, 11) : BOOL
87 : eq(85, 14) : BOOL
88 : eq(85, 17) : BOOL
89 : eq(85, 20) : BOOL
90 : eq(85, 23) : BOOL
91 : eq(85, 25) : BOOL
92 : eq(85, 28) : BOOL
93 : eq(85, 31) : BOOL
94 : eq(85, 34) : BOOL
95 : ite(94, 13, 36) : BV:8
96 : ite(93, 33, 95) : BV:8
97 : ite(92, 30, 96) : BV:8
98 : ite(91, 27, 97) : BV:8
99 : ite(90, 16, 98) : BV:8
100 : ite(89, 22, 99) : BV:8
101 : ite(88, 19, 100) : BV:8
102 : ite(87, 16, 101) : BV:8
103 : ite(86, 13, 102) : BV:8
104 : bvconcat(45, 64, 84, 103) : BV:32
105 : ite(6, 5, 104) : BV:32
106 : ite(3, 4, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3000145407
=counter_example_end
=global nodece 55 num_edges_traversed 3
=global nodece 55 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry -> L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 56
=global nodece 56 nodece z3.ce4717.num_edges_traversed4
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce4717 4f62a93277fec29b2a4255a7b29198
=input.spec-%var-x-1
1 : Lambda45225Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45226Var : BV:32
18 : Lambda45227Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45228Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : bvmul(37, 52) : BV:32
76 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
77 : bvmul(37, 17) : BV:32
78 : bvadd(76, 77) : BV:32
79 : 134217731 { 0x8000003 +1.35e145 } : BV:32
80 : eq(78, 79) : BOOL
81 : 127 { 0x7f } : BV:8
82 : 134217730 { 0x8000002 +1.23e145 } : BV:32
83 : eq(78, 82) : BOOL
84 : 255 { 0xff -1 } : BV:8
85 : eq(78, 76) : BOOL
86 : 253 { 0xfd -3 } : BV:8
87 : 134217728 { 0x8000000 +1.0e145 } : BV:32
88 : eq(78, 87) : BOOL
89 : 244 { 0xf4 -12 } : BV:8
90 : 134217729 { 0x8000001 +1.11e145 } : BV:32
91 : eq(78, 90) : BOOL
92 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
93 : eq(78, 92) : BOOL
94 : 188 { 0xbc -68 } : BV:8
95 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
96 : eq(78, 95) : BOOL
97 : 2 { 0x2 } : BV:8
98 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
99 : eq(78, 98) : BOOL
100 : 119 { 0x77 } : BV:8
101 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
102 : eq(78, 101) : BOOL
103 : 0 { 0x0 } : BV:8
104 : ite(102, 81, 103) : BV:8
105 : ite(99, 100, 104) : BV:8
106 : ite(96, 97, 105) : BV:8
107 : ite(93, 94, 106) : BV:8
108 : ite(91, 84, 107) : BV:8
109 : ite(88, 89, 108) : BV:8
110 : ite(85, 86, 109) : BV:8
111 : ite(83, 84, 110) : BV:8
112 : ite(80, 81, 111) : BV:8
113 : bvadd(98, 77) : BV:32
114 : eq(113, 79) : BOOL
115 : eq(113, 82) : BOOL
116 : eq(113, 76) : BOOL
117 : eq(113, 87) : BOOL
118 : eq(113, 90) : BOOL
119 : eq(113, 92) : BOOL
120 : eq(113, 95) : BOOL
121 : eq(113, 98) : BOOL
122 : eq(113, 101) : BOOL
123 : ite(122, 81, 103) : BV:8
124 : ite(121, 100, 123) : BV:8
125 : ite(120, 97, 124) : BV:8
126 : ite(119, 94, 125) : BV:8
127 : ite(118, 84, 126) : BV:8
128 : ite(117, 89, 127) : BV:8
129 : ite(116, 86, 128) : BV:8
130 : ite(115, 84, 129) : BV:8
131 : ite(114, 81, 130) : BV:8
132 : bvadd(101, 77) : BV:32
133 : eq(132, 79) : BOOL
134 : eq(132, 82) : BOOL
135 : eq(132, 76) : BOOL
136 : eq(132, 87) : BOOL
137 : eq(132, 90) : BOOL
138 : eq(132, 92) : BOOL
139 : eq(132, 95) : BOOL
140 : eq(132, 98) : BOOL
141 : eq(132, 101) : BOOL
142 : ite(141, 81, 103) : BV:8
143 : ite(140, 100, 142) : BV:8
144 : ite(139, 97, 143) : BV:8
145 : ite(138, 94, 144) : BV:8
146 : ite(137, 84, 145) : BV:8
147 : ite(136, 89, 146) : BV:8
148 : ite(135, 86, 147) : BV:8
149 : ite(134, 84, 148) : BV:8
150 : ite(133, 81, 149) : BV:8
151 : bvadd(92, 77) : BV:32
152 : eq(151, 79) : BOOL
153 : eq(151, 82) : BOOL
154 : eq(151, 76) : BOOL
155 : eq(151, 87) : BOOL
156 : eq(151, 90) : BOOL
157 : eq(151, 92) : BOOL
158 : eq(151, 95) : BOOL
159 : eq(151, 98) : BOOL
160 : eq(151, 101) : BOOL
161 : ite(160, 81, 103) : BV:8
162 : ite(159, 100, 161) : BV:8
163 : ite(158, 97, 162) : BV:8
164 : ite(157, 94, 163) : BV:8
165 : ite(156, 84, 164) : BV:8
166 : ite(155, 89, 165) : BV:8
167 : ite(154, 86, 166) : BV:8
168 : ite(153, 84, 167) : BV:8
169 : ite(152, 81, 168) : BV:8
170 : bvconcat(112, 131, 150, 169) : BV:32
171 : bvadd(34, 75, 170) : BV:32
172 : eq(171, 79) : BOOL
173 : eq(171, 82) : BOOL
174 : eq(171, 76) : BOOL
175 : eq(171, 87) : BOOL
176 : eq(171, 90) : BOOL
177 : eq(171, 92) : BOOL
178 : eq(171, 95) : BOOL
179 : eq(171, 98) : BOOL
180 : eq(171, 101) : BOOL
181 : ite(180, 81, 103) : BV:8
182 : ite(179, 100, 181) : BV:8
183 : ite(178, 97, 182) : BV:8
184 : ite(177, 94, 183) : BV:8
185 : ite(176, 84, 184) : BV:8
186 : ite(175, 89, 185) : BV:8
187 : ite(174, 86, 186) : BV:8
188 : ite(173, 84, 187) : BV:8
189 : ite(172, 81, 188) : BV:8
190 : 2 { 0x2 +1.23e129 } : BV:32
191 : bvadd(190, 75, 170) : BV:32
192 : eq(191, 79) : BOOL
193 : eq(191, 82) : BOOL
194 : eq(191, 76) : BOOL
195 : eq(191, 87) : BOOL
196 : eq(191, 90) : BOOL
197 : eq(191, 92) : BOOL
198 : eq(191, 95) : BOOL
199 : eq(191, 98) : BOOL
200 : eq(191, 101) : BOOL
201 : ite(200, 81, 103) : BV:8
202 : ite(199, 100, 201) : BV:8
203 : ite(198, 97, 202) : BV:8
204 : ite(197, 94, 203) : BV:8
205 : ite(196, 84, 204) : BV:8
206 : ite(195, 89, 205) : BV:8
207 : ite(194, 86, 206) : BV:8
208 : ite(193, 84, 207) : BV:8
209 : ite(192, 81, 208) : BV:8
210 : 1 { 0x1 +1.11e129 } : BV:32
211 : bvadd(210, 75, 170) : BV:32
212 : eq(211, 79) : BOOL
213 : eq(211, 82) : BOOL
214 : eq(211, 76) : BOOL
215 : eq(211, 87) : BOOL
216 : eq(211, 90) : BOOL
217 : eq(211, 92) : BOOL
218 : eq(211, 95) : BOOL
219 : eq(211, 98) : BOOL
220 : eq(211, 101) : BOOL
221 : ite(220, 81, 103) : BV:8
222 : ite(219, 100, 221) : BV:8
223 : ite(218, 97, 222) : BV:8
224 : ite(217, 94, 223) : BV:8
225 : ite(216, 84, 224) : BV:8
226 : ite(215, 89, 225) : BV:8
227 : ite(214, 86, 226) : BV:8
228 : ite(213, 84, 227) : BV:8
229 : ite(212, 81, 228) : BV:8
230 : bvadd(75, 170) : BV:32
231 : eq(230, 79) : BOOL
232 : eq(230, 82) : BOOL
233 : eq(230, 76) : BOOL
234 : eq(230, 87) : BOOL
235 : eq(230, 90) : BOOL
236 : eq(230, 92) : BOOL
237 : eq(230, 95) : BOOL
238 : eq(230, 98) : BOOL
239 : eq(230, 101) : BOOL
240 : ite(239, 81, 103) : BV:8
241 : ite(238, 100, 240) : BV:8
242 : ite(237, 97, 241) : BV:8
243 : ite(236, 94, 242) : BV:8
244 : ite(235, 84, 243) : BV:8
245 : ite(234, 89, 244) : BV:8
246 : ite(233, 86, 245) : BV:8
247 : ite(232, 84, 246) : BV:8
248 : ite(231, 81, 247) : BV:8
249 : bvconcat(189, 209, 229, 248) : BV:32
250 : ite(55, 2, 249) : BV:32
251 : ite(74, 249, 250) : BV:32
252 : ite(55, 2, 251) : BV:32
253 : lambda(52, 252) : FUNCTION[BV:32 -> BV:32]
254 : map(51, 253) : MAP[BV:32 -> BV:32]
255 : lambda(17, 254) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
256 : map(16, 255) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
257 : sym_const(256) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda45458Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(3, 1) : BOOL
26 : bvule(1, 3) : BOOL
27 : and(25, 26) : BOOL
28 : 5 { 0x5 +1.59e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 3, 32) : BV:32
34 : ite(24, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda45459Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : bvmul(3, 41) : BV:32
46 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
47 : bvmul(3, 3) : BV:32
48 : bvadd(46, 47) : BV:32
49 : 134217731 { 0x8000003 +1.35e145 } : BV:32
50 : eq(48, 49) : BOOL
51 : 127 { 0x7f } : BV:8
52 : 134217730 { 0x8000002 +1.23e145 } : BV:32
53 : eq(48, 52) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : eq(48, 46) : BOOL
56 : 253 { 0xfd -3 } : BV:8
57 : 134217728 { 0x8000000 +1.0e145 } : BV:32
58 : eq(48, 57) : BOOL
59 : 244 { 0xf4 -12 } : BV:8
60 : 134217729 { 0x8000001 +1.11e145 } : BV:32
61 : eq(48, 60) : BOOL
62 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
63 : eq(48, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
66 : eq(48, 65) : BOOL
67 : 2 { 0x2 } : BV:8
68 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
69 : eq(48, 68) : BOOL
70 : 119 { 0x77 } : BV:8
71 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
72 : eq(48, 71) : BOOL
73 : 0 { 0x0 } : BV:8
74 : ite(72, 51, 73) : BV:8
75 : ite(69, 70, 74) : BV:8
76 : ite(66, 67, 75) : BV:8
77 : ite(63, 64, 76) : BV:8
78 : ite(61, 54, 77) : BV:8
79 : ite(58, 59, 78) : BV:8
80 : ite(55, 56, 79) : BV:8
81 : ite(53, 54, 80) : BV:8
82 : ite(50, 51, 81) : BV:8
83 : bvadd(68, 47) : BV:32
84 : eq(83, 49) : BOOL
85 : eq(83, 52) : BOOL
86 : eq(83, 46) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 60) : BOOL
89 : eq(83, 62) : BOOL
90 : eq(83, 65) : BOOL
91 : eq(83, 68) : BOOL
92 : eq(83, 71) : BOOL
93 : ite(92, 51, 73) : BV:8
94 : ite(91, 70, 93) : BV:8
95 : ite(90, 67, 94) : BV:8
96 : ite(89, 64, 95) : BV:8
97 : ite(88, 54, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 56, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : ite(84, 51, 100) : BV:8
102 : bvadd(71, 47) : BV:32
103 : eq(102, 49) : BOOL
104 : eq(102, 52) : BOOL
105 : eq(102, 46) : BOOL
106 : eq(102, 57) : BOOL
107 : eq(102, 60) : BOOL
108 : eq(102, 62) : BOOL
109 : eq(102, 65) : BOOL
110 : eq(102, 68) : BOOL
111 : eq(102, 71) : BOOL
112 : ite(111, 51, 73) : BV:8
113 : ite(110, 70, 112) : BV:8
114 : ite(109, 67, 113) : BV:8
115 : ite(108, 64, 114) : BV:8
116 : ite(107, 54, 115) : BV:8
117 : ite(106, 59, 116) : BV:8
118 : ite(105, 56, 117) : BV:8
119 : ite(104, 54, 118) : BV:8
120 : ite(103, 51, 119) : BV:8
121 : bvadd(62, 47) : BV:32
122 : eq(121, 49) : BOOL
123 : eq(121, 52) : BOOL
124 : eq(121, 46) : BOOL
125 : eq(121, 57) : BOOL
126 : eq(121, 60) : BOOL
127 : eq(121, 62) : BOOL
128 : eq(121, 65) : BOOL
129 : eq(121, 68) : BOOL
130 : eq(121, 71) : BOOL
131 : ite(130, 51, 73) : BV:8
132 : ite(129, 70, 131) : BV:8
133 : ite(128, 67, 132) : BV:8
134 : ite(127, 64, 133) : BV:8
135 : ite(126, 54, 134) : BV:8
136 : ite(125, 59, 135) : BV:8
137 : ite(124, 56, 136) : BV:8
138 : ite(123, 54, 137) : BV:8
139 : ite(122, 51, 138) : BV:8
140 : bvconcat(82, 101, 120, 139) : BV:32
141 : bvadd(22, 45, 140) : BV:32
142 : eq(141, 49) : BOOL
143 : eq(141, 52) : BOOL
144 : eq(141, 46) : BOOL
145 : eq(141, 57) : BOOL
146 : eq(141, 60) : BOOL
147 : eq(141, 62) : BOOL
148 : eq(141, 65) : BOOL
149 : eq(141, 68) : BOOL
150 : eq(141, 71) : BOOL
151 : ite(150, 51, 73) : BV:8
152 : ite(149, 70, 151) : BV:8
153 : ite(148, 67, 152) : BV:8
154 : ite(147, 64, 153) : BV:8
155 : ite(146, 54, 154) : BV:8
156 : ite(145, 59, 155) : BV:8
157 : ite(144, 56, 156) : BV:8
158 : ite(143, 54, 157) : BV:8
159 : ite(142, 51, 158) : BV:8
160 : 2 { 0x2 +1.23e129 } : BV:32
161 : bvadd(160, 45, 140) : BV:32
162 : eq(161, 49) : BOOL
163 : eq(161, 52) : BOOL
164 : eq(161, 46) : BOOL
165 : eq(161, 57) : BOOL
166 : eq(161, 60) : BOOL
167 : eq(161, 62) : BOOL
168 : eq(161, 65) : BOOL
169 : eq(161, 68) : BOOL
170 : eq(161, 71) : BOOL
171 : ite(170, 51, 73) : BV:8
172 : ite(169, 70, 171) : BV:8
173 : ite(168, 67, 172) : BV:8
174 : ite(167, 64, 173) : BV:8
175 : ite(166, 54, 174) : BV:8
176 : ite(165, 59, 175) : BV:8
177 : ite(164, 56, 176) : BV:8
178 : ite(163, 54, 177) : BV:8
179 : ite(162, 51, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 45, 140) : BV:32
182 : eq(181, 49) : BOOL
183 : eq(181, 52) : BOOL
184 : eq(181, 46) : BOOL
185 : eq(181, 57) : BOOL
186 : eq(181, 60) : BOOL
187 : eq(181, 62) : BOOL
188 : eq(181, 65) : BOOL
189 : eq(181, 68) : BOOL
190 : eq(181, 71) : BOOL
191 : ite(190, 51, 73) : BV:8
192 : ite(189, 70, 191) : BV:8
193 : ite(188, 67, 192) : BV:8
194 : ite(187, 64, 193) : BV:8
195 : ite(186, 54, 194) : BV:8
196 : ite(185, 59, 195) : BV:8
197 : ite(184, 56, 196) : BV:8
198 : ite(183, 54, 197) : BV:8
199 : ite(182, 51, 198) : BV:8
200 : bvadd(45, 140) : BV:32
201 : eq(200, 49) : BOOL
202 : eq(200, 52) : BOOL
203 : eq(200, 46) : BOOL
204 : eq(200, 57) : BOOL
205 : eq(200, 60) : BOOL
206 : eq(200, 62) : BOOL
207 : eq(200, 65) : BOOL
208 : eq(200, 68) : BOOL
209 : eq(200, 71) : BOOL
210 : ite(209, 51, 73) : BV:8
211 : ite(208, 70, 210) : BV:8
212 : ite(207, 67, 211) : BV:8
213 : ite(206, 64, 212) : BV:8
214 : ite(205, 54, 213) : BV:8
215 : ite(204, 59, 214) : BV:8
216 : ite(203, 56, 215) : BV:8
217 : ite(202, 54, 216) : BV:8
218 : ite(201, 51, 217) : BV:8
219 : bvconcat(159, 179, 199, 218) : BV:32
220 : ite(44, 2, 219) : BV:32
221 : lambda(41, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(40, 221) : MAP[BV:32 -> BV:32]
223 : sym_const(222) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 134217715 ] -> 0, [ 134217716; 134217716 ] -> 188, [ 134217717; 134217717 ] -> 127, [ 134217718; 134217718 ] -> 119, [ 134217719; 134217719 ] -> 253, [ 134217720; 134217727 ] -> 0, [ 134217728; 134217728 ] -> 244, [ 134217729; 134217730 ] -> 255, [ 134217731; 134217731 ] -> 127, [ 134217732; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 2, [ 2147483649; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 786497559 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 786497560; 786497563 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 786497564; 1222123511 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1222123512; 1222123515 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1222123516; 2141941723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2141941724; 2141941727 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2141941728; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2141941724 { 0x7fab6fdc +1.33935117e128 } : BV:32
=input.dst.llvm-%m
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 786497560 { 0x2ee10018 +1.75781536e222 } : BV:32
=input.dst.llvm-%n
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1222123512 { 0x48d81ff8 +1.68847560e18 } : BV:32
=input.dst.llvm-%x
1 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45245Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45246Var : BV:32
18 : Lambda45247Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 67108865 { 0x4000001 +1.11e137 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 3 { 0x3 +1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 4 { 0x4 +1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 5 { 0x5 +1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda45248Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : bvmul(37, 52) : BV:32
57 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
58 : bvmul(37, 17) : BV:32
59 : bvadd(57, 58) : BV:32
60 : 134217731 { 0x8000003 +1.35e145 } : BV:32
61 : eq(59, 60) : BOOL
62 : 127 { 0x7f } : BV:8
63 : 134217730 { 0x8000002 +1.23e145 } : BV:32
64 : eq(59, 63) : BOOL
65 : 255 { 0xff -1 } : BV:8
66 : eq(59, 57) : BOOL
67 : 253 { 0xfd -3 } : BV:8
68 : 134217728 { 0x8000000 +1.0e145 } : BV:32
69 : eq(59, 68) : BOOL
70 : 244 { 0xf4 -12 } : BV:8
71 : 134217729 { 0x8000001 +1.11e145 } : BV:32
72 : eq(59, 71) : BOOL
73 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
74 : eq(59, 73) : BOOL
75 : 188 { 0xbc -68 } : BV:8
76 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
77 : eq(59, 76) : BOOL
78 : 2 { 0x2 } : BV:8
79 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
80 : eq(59, 79) : BOOL
81 : 119 { 0x77 } : BV:8
82 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
83 : eq(59, 82) : BOOL
84 : 0 { 0x0 } : BV:8
85 : ite(83, 62, 84) : BV:8
86 : ite(80, 81, 85) : BV:8
87 : ite(77, 78, 86) : BV:8
88 : ite(74, 75, 87) : BV:8
89 : ite(72, 65, 88) : BV:8
90 : ite(69, 70, 89) : BV:8
91 : ite(66, 67, 90) : BV:8
92 : ite(64, 65, 91) : BV:8
93 : ite(61, 62, 92) : BV:8
94 : bvadd(79, 58) : BV:32
95 : eq(94, 60) : BOOL
96 : eq(94, 63) : BOOL
97 : eq(94, 57) : BOOL
98 : eq(94, 68) : BOOL
99 : eq(94, 71) : BOOL
100 : eq(94, 73) : BOOL
101 : eq(94, 76) : BOOL
102 : eq(94, 79) : BOOL
103 : eq(94, 82) : BOOL
104 : ite(103, 62, 84) : BV:8
105 : ite(102, 81, 104) : BV:8
106 : ite(101, 78, 105) : BV:8
107 : ite(100, 75, 106) : BV:8
108 : ite(99, 65, 107) : BV:8
109 : ite(98, 70, 108) : BV:8
110 : ite(97, 67, 109) : BV:8
111 : ite(96, 65, 110) : BV:8
112 : ite(95, 62, 111) : BV:8
113 : bvadd(82, 58) : BV:32
114 : eq(113, 60) : BOOL
115 : eq(113, 63) : BOOL
116 : eq(113, 57) : BOOL
117 : eq(113, 68) : BOOL
118 : eq(113, 71) : BOOL
119 : eq(113, 73) : BOOL
120 : eq(113, 76) : BOOL
121 : eq(113, 79) : BOOL
122 : eq(113, 82) : BOOL
123 : ite(122, 62, 84) : BV:8
124 : ite(121, 81, 123) : BV:8
125 : ite(120, 78, 124) : BV:8
126 : ite(119, 75, 125) : BV:8
127 : ite(118, 65, 126) : BV:8
128 : ite(117, 70, 127) : BV:8
129 : ite(116, 67, 128) : BV:8
130 : ite(115, 65, 129) : BV:8
131 : ite(114, 62, 130) : BV:8
132 : bvadd(73, 58) : BV:32
133 : eq(132, 60) : BOOL
134 : eq(132, 63) : BOOL
135 : eq(132, 57) : BOOL
136 : eq(132, 68) : BOOL
137 : eq(132, 71) : BOOL
138 : eq(132, 73) : BOOL
139 : eq(132, 76) : BOOL
140 : eq(132, 79) : BOOL
141 : eq(132, 82) : BOOL
142 : ite(141, 62, 84) : BV:8
143 : ite(140, 81, 142) : BV:8
144 : ite(139, 78, 143) : BV:8
145 : ite(138, 75, 144) : BV:8
146 : ite(137, 65, 145) : BV:8
147 : ite(136, 70, 146) : BV:8
148 : ite(135, 67, 147) : BV:8
149 : ite(134, 65, 148) : BV:8
150 : ite(133, 62, 149) : BV:8
151 : bvconcat(93, 112, 131, 150) : BV:32
152 : bvadd(34, 56, 151) : BV:32
153 : eq(152, 60) : BOOL
154 : eq(152, 63) : BOOL
155 : eq(152, 57) : BOOL
156 : eq(152, 68) : BOOL
157 : eq(152, 71) : BOOL
158 : eq(152, 73) : BOOL
159 : eq(152, 76) : BOOL
160 : eq(152, 79) : BOOL
161 : eq(152, 82) : BOOL
162 : ite(161, 62, 84) : BV:8
163 : ite(160, 81, 162) : BV:8
164 : ite(159, 78, 163) : BV:8
165 : ite(158, 75, 164) : BV:8
166 : ite(157, 65, 165) : BV:8
167 : ite(156, 70, 166) : BV:8
168 : ite(155, 67, 167) : BV:8
169 : ite(154, 65, 168) : BV:8
170 : ite(153, 62, 169) : BV:8
171 : 2 { 0x2 +1.23e129 } : BV:32
172 : bvadd(171, 56, 151) : BV:32
173 : eq(172, 60) : BOOL
174 : eq(172, 63) : BOOL
175 : eq(172, 57) : BOOL
176 : eq(172, 68) : BOOL
177 : eq(172, 71) : BOOL
178 : eq(172, 73) : BOOL
179 : eq(172, 76) : BOOL
180 : eq(172, 79) : BOOL
181 : eq(172, 82) : BOOL
182 : ite(181, 62, 84) : BV:8
183 : ite(180, 81, 182) : BV:8
184 : ite(179, 78, 183) : BV:8
185 : ite(178, 75, 184) : BV:8
186 : ite(177, 65, 185) : BV:8
187 : ite(176, 70, 186) : BV:8
188 : ite(175, 67, 187) : BV:8
189 : ite(174, 65, 188) : BV:8
190 : ite(173, 62, 189) : BV:8
191 : 1 { 0x1 +1.11e129 } : BV:32
192 : bvadd(191, 56, 151) : BV:32
193 : eq(192, 60) : BOOL
194 : eq(192, 63) : BOOL
195 : eq(192, 57) : BOOL
196 : eq(192, 68) : BOOL
197 : eq(192, 71) : BOOL
198 : eq(192, 73) : BOOL
199 : eq(192, 76) : BOOL
200 : eq(192, 79) : BOOL
201 : eq(192, 82) : BOOL
202 : ite(201, 62, 84) : BV:8
203 : ite(200, 81, 202) : BV:8
204 : ite(199, 78, 203) : BV:8
205 : ite(198, 75, 204) : BV:8
206 : ite(197, 65, 205) : BV:8
207 : ite(196, 70, 206) : BV:8
208 : ite(195, 67, 207) : BV:8
209 : ite(194, 65, 208) : BV:8
210 : ite(193, 62, 209) : BV:8
211 : bvadd(56, 151) : BV:32
212 : eq(211, 60) : BOOL
213 : eq(211, 63) : BOOL
214 : eq(211, 57) : BOOL
215 : eq(211, 68) : BOOL
216 : eq(211, 71) : BOOL
217 : eq(211, 73) : BOOL
218 : eq(211, 76) : BOOL
219 : eq(211, 79) : BOOL
220 : eq(211, 82) : BOOL
221 : ite(220, 62, 84) : BV:8
222 : ite(219, 81, 221) : BV:8
223 : ite(218, 78, 222) : BV:8
224 : ite(217, 75, 223) : BV:8
225 : ite(216, 65, 224) : BV:8
226 : ite(215, 70, 225) : BV:8
227 : ite(214, 67, 226) : BV:8
228 : ite(213, 65, 227) : BV:8
229 : ite(212, 62, 228) : BV:8
230 : bvconcat(170, 190, 210, 229) : BV:32
231 : ite(55, 2, 230) : BV:32
232 : lambda(52, 231) : FUNCTION[BV:32 -> BV:32]
233 : map(51, 232) : MAP[BV:32 -> BV:32]
234 : lambda(17, 233) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
235 : map(16, 234) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
236 : sym_const(235) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda45448Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(19, 30) : BOOL
32 : and(29, 31) : BOOL
33 : bvule(2, 19) : BOOL
34 : bvule(19, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 5 { 0x5 +1.59e129 } : BV:32
37 : bvule(36, 19) : BOOL
38 : bvule(19, 10) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 2, 40) : BV:32
42 : ite(32, 1, 41) : BV:32
43 : eq(42, 1) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 7, 13) : BOOL
46 : lambda(19, 45) : FUNCTION[BV:32 -> BOOL]
47 : Lambda45449Var : BV:32
48 : eq(2, 1) : BOOL
49 : eq(47, 1) : BOOL
50 : and(48, 49) : BOOL
51 : bvmul(2, 47) : BV:32
52 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
53 : bvmul(2, 2) : BV:32
54 : bvadd(52, 53) : BV:32
55 : 134217731 { 0x8000003 +1.35e145 } : BV:32
56 : eq(54, 55) : BOOL
57 : 127 { 0x7f } : BV:8
58 : 134217730 { 0x8000002 +1.23e145 } : BV:32
59 : eq(54, 58) : BOOL
60 : 255 { 0xff -1 } : BV:8
61 : eq(54, 52) : BOOL
62 : 253 { 0xfd -3 } : BV:8
63 : 134217728 { 0x8000000 +1.0e145 } : BV:32
64 : eq(54, 63) : BOOL
65 : 244 { 0xf4 -12 } : BV:8
66 : 134217729 { 0x8000001 +1.11e145 } : BV:32
67 : eq(54, 66) : BOOL
68 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
69 : eq(54, 68) : BOOL
70 : 188 { 0xbc -68 } : BV:8
71 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
72 : eq(54, 71) : BOOL
73 : 2 { 0x2 } : BV:8
74 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
75 : eq(54, 74) : BOOL
76 : 119 { 0x77 } : BV:8
77 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
78 : eq(54, 77) : BOOL
79 : 0 { 0x0 } : BV:8
80 : ite(78, 57, 79) : BV:8
81 : ite(75, 76, 80) : BV:8
82 : ite(72, 73, 81) : BV:8
83 : ite(69, 70, 82) : BV:8
84 : ite(67, 60, 83) : BV:8
85 : ite(64, 65, 84) : BV:8
86 : ite(61, 62, 85) : BV:8
87 : ite(59, 60, 86) : BV:8
88 : ite(56, 57, 87) : BV:8
89 : bvadd(74, 53) : BV:32
90 : eq(89, 55) : BOOL
91 : eq(89, 58) : BOOL
92 : eq(89, 52) : BOOL
93 : eq(89, 63) : BOOL
94 : eq(89, 66) : BOOL
95 : eq(89, 68) : BOOL
96 : eq(89, 71) : BOOL
97 : eq(89, 74) : BOOL
98 : eq(89, 77) : BOOL
99 : ite(98, 57, 79) : BV:8
100 : ite(97, 76, 99) : BV:8
101 : ite(96, 73, 100) : BV:8
102 : ite(95, 70, 101) : BV:8
103 : ite(94, 60, 102) : BV:8
104 : ite(93, 65, 103) : BV:8
105 : ite(92, 62, 104) : BV:8
106 : ite(91, 60, 105) : BV:8
107 : ite(90, 57, 106) : BV:8
108 : bvadd(77, 53) : BV:32
109 : eq(108, 55) : BOOL
110 : eq(108, 58) : BOOL
111 : eq(108, 52) : BOOL
112 : eq(108, 63) : BOOL
113 : eq(108, 66) : BOOL
114 : eq(108, 68) : BOOL
115 : eq(108, 71) : BOOL
116 : eq(108, 74) : BOOL
117 : eq(108, 77) : BOOL
118 : ite(117, 57, 79) : BV:8
119 : ite(116, 76, 118) : BV:8
120 : ite(115, 73, 119) : BV:8
121 : ite(114, 70, 120) : BV:8
122 : ite(113, 60, 121) : BV:8
123 : ite(112, 65, 122) : BV:8
124 : ite(111, 62, 123) : BV:8
125 : ite(110, 60, 124) : BV:8
126 : ite(109, 57, 125) : BV:8
127 : bvadd(68, 53) : BV:32
128 : eq(127, 55) : BOOL
129 : eq(127, 58) : BOOL
130 : eq(127, 52) : BOOL
131 : eq(127, 63) : BOOL
132 : eq(127, 66) : BOOL
133 : eq(127, 68) : BOOL
134 : eq(127, 71) : BOOL
135 : eq(127, 74) : BOOL
136 : eq(127, 77) : BOOL
137 : ite(136, 57, 79) : BV:8
138 : ite(135, 76, 137) : BV:8
139 : ite(134, 73, 138) : BV:8
140 : ite(133, 70, 139) : BV:8
141 : ite(132, 60, 140) : BV:8
142 : ite(131, 65, 141) : BV:8
143 : ite(130, 62, 142) : BV:8
144 : ite(129, 60, 143) : BV:8
145 : ite(128, 57, 144) : BV:8
146 : bvconcat(88, 107, 126, 145) : BV:32
147 : bvadd(30, 51, 146) : BV:32
148 : eq(147, 55) : BOOL
149 : eq(147, 58) : BOOL
150 : eq(147, 52) : BOOL
151 : eq(147, 63) : BOOL
152 : eq(147, 66) : BOOL
153 : eq(147, 68) : BOOL
154 : eq(147, 71) : BOOL
155 : eq(147, 74) : BOOL
156 : eq(147, 77) : BOOL
157 : ite(156, 57, 79) : BV:8
158 : ite(155, 76, 157) : BV:8
159 : ite(154, 73, 158) : BV:8
160 : ite(153, 70, 159) : BV:8
161 : ite(152, 60, 160) : BV:8
162 : ite(151, 65, 161) : BV:8
163 : ite(150, 62, 162) : BV:8
164 : ite(149, 60, 163) : BV:8
165 : ite(148, 57, 164) : BV:8
166 : 2 { 0x2 +1.23e129 } : BV:32
167 : bvadd(166, 51, 146) : BV:32
168 : eq(167, 55) : BOOL
169 : eq(167, 58) : BOOL
170 : eq(167, 52) : BOOL
171 : eq(167, 63) : BOOL
172 : eq(167, 66) : BOOL
173 : eq(167, 68) : BOOL
174 : eq(167, 71) : BOOL
175 : eq(167, 74) : BOOL
176 : eq(167, 77) : BOOL
177 : ite(176, 57, 79) : BV:8
178 : ite(175, 76, 177) : BV:8
179 : ite(174, 73, 178) : BV:8
180 : ite(173, 70, 179) : BV:8
181 : ite(172, 60, 180) : BV:8
182 : ite(171, 65, 181) : BV:8
183 : ite(170, 62, 182) : BV:8
184 : ite(169, 60, 183) : BV:8
185 : ite(168, 57, 184) : BV:8
186 : bvadd(16, 51, 146) : BV:32
187 : eq(186, 55) : BOOL
188 : eq(186, 58) : BOOL
189 : eq(186, 52) : BOOL
190 : eq(186, 63) : BOOL
191 : eq(186, 66) : BOOL
192 : eq(186, 68) : BOOL
193 : eq(186, 71) : BOOL
194 : eq(186, 74) : BOOL
195 : eq(186, 77) : BOOL
196 : ite(195, 57, 79) : BV:8
197 : ite(194, 76, 196) : BV:8
198 : ite(193, 73, 197) : BV:8
199 : ite(192, 70, 198) : BV:8
200 : ite(191, 60, 199) : BV:8
201 : ite(190, 65, 200) : BV:8
202 : ite(189, 62, 201) : BV:8
203 : ite(188, 60, 202) : BV:8
204 : ite(187, 57, 203) : BV:8
205 : bvadd(51, 146) : BV:32
206 : eq(205, 55) : BOOL
207 : eq(205, 58) : BOOL
208 : eq(205, 52) : BOOL
209 : eq(205, 63) : BOOL
210 : eq(205, 66) : BOOL
211 : eq(205, 68) : BOOL
212 : eq(205, 71) : BOOL
213 : eq(205, 74) : BOOL
214 : eq(205, 77) : BOOL
215 : ite(214, 57, 79) : BV:8
216 : ite(213, 76, 215) : BV:8
217 : ite(212, 73, 216) : BV:8
218 : ite(211, 70, 217) : BV:8
219 : ite(210, 60, 218) : BV:8
220 : ite(209, 65, 219) : BV:8
221 : ite(208, 62, 220) : BV:8
222 : ite(207, 60, 221) : BV:8
223 : ite(206, 57, 222) : BV:8
224 : bvconcat(165, 185, 204, 223) : BV:32
225 : ite(50, 1, 224) : BV:32
226 : lambda(47, 225) : FUNCTION[BV:32 -> BV:32]
227 : map(46, 226) : MAP[BV:32 -> BV:32]
228 : sum(17, 18, 227) : SUM[UNIT,MAP[BV:32 -> BV:32]]
229 : sym_const(228) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1745580109 { 0x680b704d +1.8936464e81 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda45464Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : bvule(3, 1) : BOOL
26 : bvule(1, 3) : BOOL
27 : and(25, 26) : BOOL
28 : 5 { 0x5 +1.59e129 } : BV:32
29 : bvule(28, 1) : BOOL
30 : bvule(1, 14) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 3, 32) : BV:32
34 : ite(24, 2, 33) : BV:32
35 : eq(34, 2) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 39) : FUNCTION[BV:32 -> BOOL]
41 : Lambda45465Var : BV:32
42 : eq(3, 2) : BOOL
43 : eq(41, 2) : BOOL
44 : and(42, 43) : BOOL
45 : bvmul(3, 41) : BV:32
46 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
47 : bvmul(3, 3) : BV:32
48 : bvadd(46, 47) : BV:32
49 : 134217731 { 0x8000003 +1.35e145 } : BV:32
50 : eq(48, 49) : BOOL
51 : 127 { 0x7f } : BV:8
52 : 134217730 { 0x8000002 +1.23e145 } : BV:32
53 : eq(48, 52) : BOOL
54 : 255 { 0xff -1 } : BV:8
55 : eq(48, 46) : BOOL
56 : 253 { 0xfd -3 } : BV:8
57 : 134217728 { 0x8000000 +1.0e145 } : BV:32
58 : eq(48, 57) : BOOL
59 : 244 { 0xf4 -12 } : BV:8
60 : 134217729 { 0x8000001 +1.11e145 } : BV:32
61 : eq(48, 60) : BOOL
62 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
63 : eq(48, 62) : BOOL
64 : 188 { 0xbc -68 } : BV:8
65 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
66 : eq(48, 65) : BOOL
67 : 2 { 0x2 } : BV:8
68 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
69 : eq(48, 68) : BOOL
70 : 119 { 0x77 } : BV:8
71 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
72 : eq(48, 71) : BOOL
73 : 0 { 0x0 } : BV:8
74 : ite(72, 51, 73) : BV:8
75 : ite(69, 70, 74) : BV:8
76 : ite(66, 67, 75) : BV:8
77 : ite(63, 64, 76) : BV:8
78 : ite(61, 54, 77) : BV:8
79 : ite(58, 59, 78) : BV:8
80 : ite(55, 56, 79) : BV:8
81 : ite(53, 54, 80) : BV:8
82 : ite(50, 51, 81) : BV:8
83 : bvadd(68, 47) : BV:32
84 : eq(83, 49) : BOOL
85 : eq(83, 52) : BOOL
86 : eq(83, 46) : BOOL
87 : eq(83, 57) : BOOL
88 : eq(83, 60) : BOOL
89 : eq(83, 62) : BOOL
90 : eq(83, 65) : BOOL
91 : eq(83, 68) : BOOL
92 : eq(83, 71) : BOOL
93 : ite(92, 51, 73) : BV:8
94 : ite(91, 70, 93) : BV:8
95 : ite(90, 67, 94) : BV:8
96 : ite(89, 64, 95) : BV:8
97 : ite(88, 54, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 56, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : ite(84, 51, 100) : BV:8
102 : bvadd(71, 47) : BV:32
103 : eq(102, 49) : BOOL
104 : eq(102, 52) : BOOL
105 : eq(102, 46) : BOOL
106 : eq(102, 57) : BOOL
107 : eq(102, 60) : BOOL
108 : eq(102, 62) : BOOL
109 : eq(102, 65) : BOOL
110 : eq(102, 68) : BOOL
111 : eq(102, 71) : BOOL
112 : ite(111, 51, 73) : BV:8
113 : ite(110, 70, 112) : BV:8
114 : ite(109, 67, 113) : BV:8
115 : ite(108, 64, 114) : BV:8
116 : ite(107, 54, 115) : BV:8
117 : ite(106, 59, 116) : BV:8
118 : ite(105, 56, 117) : BV:8
119 : ite(104, 54, 118) : BV:8
120 : ite(103, 51, 119) : BV:8
121 : bvadd(62, 47) : BV:32
122 : eq(121, 49) : BOOL
123 : eq(121, 52) : BOOL
124 : eq(121, 46) : BOOL
125 : eq(121, 57) : BOOL
126 : eq(121, 60) : BOOL
127 : eq(121, 62) : BOOL
128 : eq(121, 65) : BOOL
129 : eq(121, 68) : BOOL
130 : eq(121, 71) : BOOL
131 : ite(130, 51, 73) : BV:8
132 : ite(129, 70, 131) : BV:8
133 : ite(128, 67, 132) : BV:8
134 : ite(127, 64, 133) : BV:8
135 : ite(126, 54, 134) : BV:8
136 : ite(125, 59, 135) : BV:8
137 : ite(124, 56, 136) : BV:8
138 : ite(123, 54, 137) : BV:8
139 : ite(122, 51, 138) : BV:8
140 : bvconcat(82, 101, 120, 139) : BV:32
141 : bvadd(22, 45, 140) : BV:32
142 : eq(141, 49) : BOOL
143 : eq(141, 52) : BOOL
144 : eq(141, 46) : BOOL
145 : eq(141, 57) : BOOL
146 : eq(141, 60) : BOOL
147 : eq(141, 62) : BOOL
148 : eq(141, 65) : BOOL
149 : eq(141, 68) : BOOL
150 : eq(141, 71) : BOOL
151 : ite(150, 51, 73) : BV:8
152 : ite(149, 70, 151) : BV:8
153 : ite(148, 67, 152) : BV:8
154 : ite(147, 64, 153) : BV:8
155 : ite(146, 54, 154) : BV:8
156 : ite(145, 59, 155) : BV:8
157 : ite(144, 56, 156) : BV:8
158 : ite(143, 54, 157) : BV:8
159 : ite(142, 51, 158) : BV:8
160 : 2 { 0x2 +1.23e129 } : BV:32
161 : bvadd(160, 45, 140) : BV:32
162 : eq(161, 49) : BOOL
163 : eq(161, 52) : BOOL
164 : eq(161, 46) : BOOL
165 : eq(161, 57) : BOOL
166 : eq(161, 60) : BOOL
167 : eq(161, 62) : BOOL
168 : eq(161, 65) : BOOL
169 : eq(161, 68) : BOOL
170 : eq(161, 71) : BOOL
171 : ite(170, 51, 73) : BV:8
172 : ite(169, 70, 171) : BV:8
173 : ite(168, 67, 172) : BV:8
174 : ite(167, 64, 173) : BV:8
175 : ite(166, 54, 174) : BV:8
176 : ite(165, 59, 175) : BV:8
177 : ite(164, 56, 176) : BV:8
178 : ite(163, 54, 177) : BV:8
179 : ite(162, 51, 178) : BV:8
180 : 1 { 0x1 +1.11e129 } : BV:32
181 : bvadd(180, 45, 140) : BV:32
182 : eq(181, 49) : BOOL
183 : eq(181, 52) : BOOL
184 : eq(181, 46) : BOOL
185 : eq(181, 57) : BOOL
186 : eq(181, 60) : BOOL
187 : eq(181, 62) : BOOL
188 : eq(181, 65) : BOOL
189 : eq(181, 68) : BOOL
190 : eq(181, 71) : BOOL
191 : ite(190, 51, 73) : BV:8
192 : ite(189, 70, 191) : BV:8
193 : ite(188, 67, 192) : BV:8
194 : ite(187, 64, 193) : BV:8
195 : ite(186, 54, 194) : BV:8
196 : ite(185, 59, 195) : BV:8
197 : ite(184, 56, 196) : BV:8
198 : ite(183, 54, 197) : BV:8
199 : ite(182, 51, 198) : BV:8
200 : bvadd(45, 140) : BV:32
201 : eq(200, 49) : BOOL
202 : eq(200, 52) : BOOL
203 : eq(200, 46) : BOOL
204 : eq(200, 57) : BOOL
205 : eq(200, 60) : BOOL
206 : eq(200, 62) : BOOL
207 : eq(200, 65) : BOOL
208 : eq(200, 68) : BOOL
209 : eq(200, 71) : BOOL
210 : ite(209, 51, 73) : BV:8
211 : ite(208, 70, 210) : BV:8
212 : ite(207, 67, 211) : BV:8
213 : ite(206, 64, 212) : BV:8
214 : ite(205, 54, 213) : BV:8
215 : ite(204, 59, 214) : BV:8
216 : ite(203, 56, 215) : BV:8
217 : ite(202, 54, 216) : BV:8
218 : ite(201, 51, 217) : BV:8
219 : bvconcat(159, 179, 199, 218) : BV:32
220 : ite(44, 2, 219) : BV:32
221 : lambda(41, 220) : FUNCTION[BV:32 -> BV:32]
222 : map(40, 221) : MAP[BV:32 -> BV:32]
223 : sym_const(222) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1160537389 { 0x452c652d +1.34683763e11 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 786497560 { 0x2ee10018 +1.75781536e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 786497563 { 0x2ee1001b +1.75781571e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1222123512 { 0x48d81ff8 +1.68847560e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1222123515 { 0x48d81ffb +1.68847596e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2141941724 { 0x7fab6fdc +1.33935117e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2141941727 { 0x7fab6fdf +1.33935153e128 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45117Var : BV:32
2 : Lambda45118Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 67108864 { 0x4000000 +1.0e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 67108865 { 0x4000001 +1.11e137 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 3 { 0x3 +1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 +1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 5 { 0x5 +1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : bvmul(33, 2) : BV:32
49 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
50 : bvmul(33, 1) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 134217731 { 0x8000003 +1.35e145 } : BV:32
53 : eq(51, 52) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 134217730 { 0x8000002 +1.23e145 } : BV:32
56 : eq(51, 55) : BOOL
57 : 255 { 0xff -1 } : BV:8
58 : eq(51, 49) : BOOL
59 : 253 { 0xfd -3 } : BV:8
60 : 134217728 { 0x8000000 +1.0e145 } : BV:32
61 : eq(51, 60) : BOOL
62 : 244 { 0xf4 -12 } : BV:8
63 : 134217729 { 0x8000001 +1.11e145 } : BV:32
64 : eq(51, 63) : BOOL
65 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
66 : eq(51, 65) : BOOL
67 : 188 { 0xbc -68 } : BV:8
68 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
69 : eq(51, 68) : BOOL
70 : 2 { 0x2 } : BV:8
71 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
72 : eq(51, 71) : BOOL
73 : 119 { 0x77 } : BV:8
74 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
75 : eq(51, 74) : BOOL
76 : 0 { 0x0 } : BV:8
77 : ite(75, 54, 76) : BV:8
78 : ite(72, 73, 77) : BV:8
79 : ite(69, 70, 78) : BV:8
80 : ite(66, 67, 79) : BV:8
81 : ite(64, 57, 80) : BV:8
82 : ite(61, 62, 81) : BV:8
83 : ite(58, 59, 82) : BV:8
84 : ite(56, 57, 83) : BV:8
85 : ite(53, 54, 84) : BV:8
86 : bvadd(71, 50) : BV:32
87 : eq(86, 52) : BOOL
88 : eq(86, 55) : BOOL
89 : eq(86, 49) : BOOL
90 : eq(86, 60) : BOOL
91 : eq(86, 63) : BOOL
92 : eq(86, 65) : BOOL
93 : eq(86, 68) : BOOL
94 : eq(86, 71) : BOOL
95 : eq(86, 74) : BOOL
96 : ite(95, 54, 76) : BV:8
97 : ite(94, 73, 96) : BV:8
98 : ite(93, 70, 97) : BV:8
99 : ite(92, 67, 98) : BV:8
100 : ite(91, 57, 99) : BV:8
101 : ite(90, 62, 100) : BV:8
102 : ite(89, 59, 101) : BV:8
103 : ite(88, 57, 102) : BV:8
104 : ite(87, 54, 103) : BV:8
105 : bvadd(74, 50) : BV:32
106 : eq(105, 52) : BOOL
107 : eq(105, 55) : BOOL
108 : eq(105, 49) : BOOL
109 : eq(105, 60) : BOOL
110 : eq(105, 63) : BOOL
111 : eq(105, 65) : BOOL
112 : eq(105, 68) : BOOL
113 : eq(105, 71) : BOOL
114 : eq(105, 74) : BOOL
115 : ite(114, 54, 76) : BV:8
116 : ite(113, 73, 115) : BV:8
117 : ite(112, 70, 116) : BV:8
118 : ite(111, 67, 117) : BV:8
119 : ite(110, 57, 118) : BV:8
120 : ite(109, 62, 119) : BV:8
121 : ite(108, 59, 120) : BV:8
122 : ite(107, 57, 121) : BV:8
123 : ite(106, 54, 122) : BV:8
124 : bvadd(65, 50) : BV:32
125 : eq(124, 52) : BOOL
126 : eq(124, 55) : BOOL
127 : eq(124, 49) : BOOL
128 : eq(124, 60) : BOOL
129 : eq(124, 63) : BOOL
130 : eq(124, 65) : BOOL
131 : eq(124, 68) : BOOL
132 : eq(124, 71) : BOOL
133 : eq(124, 74) : BOOL
134 : ite(133, 54, 76) : BV:8
135 : ite(132, 73, 134) : BV:8
136 : ite(131, 70, 135) : BV:8
137 : ite(130, 67, 136) : BV:8
138 : ite(129, 57, 137) : BV:8
139 : ite(128, 62, 138) : BV:8
140 : ite(127, 59, 139) : BV:8
141 : ite(126, 57, 140) : BV:8
142 : ite(125, 54, 141) : BV:8
143 : bvconcat(85, 104, 123, 142) : BV:32
144 : bvadd(30, 48, 143) : BV:32
145 : eq(144, 52) : BOOL
146 : eq(144, 55) : BOOL
147 : eq(144, 49) : BOOL
148 : eq(144, 60) : BOOL
149 : eq(144, 63) : BOOL
150 : eq(144, 65) : BOOL
151 : eq(144, 68) : BOOL
152 : eq(144, 71) : BOOL
153 : eq(144, 74) : BOOL
154 : ite(153, 54, 76) : BV:8
155 : ite(152, 73, 154) : BV:8
156 : ite(151, 70, 155) : BV:8
157 : ite(150, 67, 156) : BV:8
158 : ite(149, 57, 157) : BV:8
159 : ite(148, 62, 158) : BV:8
160 : ite(147, 59, 159) : BV:8
161 : ite(146, 57, 160) : BV:8
162 : ite(145, 54, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 48, 143) : BV:32
165 : eq(164, 52) : BOOL
166 : eq(164, 55) : BOOL
167 : eq(164, 49) : BOOL
168 : eq(164, 60) : BOOL
169 : eq(164, 63) : BOOL
170 : eq(164, 65) : BOOL
171 : eq(164, 68) : BOOL
172 : eq(164, 71) : BOOL
173 : eq(164, 74) : BOOL
174 : ite(173, 54, 76) : BV:8
175 : ite(172, 73, 174) : BV:8
176 : ite(171, 70, 175) : BV:8
177 : ite(170, 67, 176) : BV:8
178 : ite(169, 57, 177) : BV:8
179 : ite(168, 62, 178) : BV:8
180 : ite(167, 59, 179) : BV:8
181 : ite(166, 57, 180) : BV:8
182 : ite(165, 54, 181) : BV:8
183 : 1 { 0x1 +1.11e129 } : BV:32
184 : bvadd(183, 48, 143) : BV:32
185 : eq(184, 52) : BOOL
186 : eq(184, 55) : BOOL
187 : eq(184, 49) : BOOL
188 : eq(184, 60) : BOOL
189 : eq(184, 63) : BOOL
190 : eq(184, 65) : BOOL
191 : eq(184, 68) : BOOL
192 : eq(184, 71) : BOOL
193 : eq(184, 74) : BOOL
194 : ite(193, 54, 76) : BV:8
195 : ite(192, 73, 194) : BV:8
196 : ite(191, 70, 195) : BV:8
197 : ite(190, 67, 196) : BV:8
198 : ite(189, 57, 197) : BV:8
199 : ite(188, 62, 198) : BV:8
200 : ite(187, 59, 199) : BV:8
201 : ite(186, 57, 200) : BV:8
202 : ite(185, 54, 201) : BV:8
203 : bvadd(48, 143) : BV:32
204 : eq(203, 52) : BOOL
205 : eq(203, 55) : BOOL
206 : eq(203, 49) : BOOL
207 : eq(203, 60) : BOOL
208 : eq(203, 63) : BOOL
209 : eq(203, 65) : BOOL
210 : eq(203, 68) : BOOL
211 : eq(203, 71) : BOOL
212 : eq(203, 74) : BOOL
213 : ite(212, 54, 76) : BV:8
214 : ite(211, 73, 213) : BV:8
215 : ite(210, 70, 214) : BV:8
216 : ite(209, 67, 215) : BV:8
217 : ite(208, 57, 216) : BV:8
218 : ite(207, 62, 217) : BV:8
219 : ite(206, 59, 218) : BV:8
220 : ite(205, 57, 219) : BV:8
221 : ite(204, 54, 220) : BV:8
222 : bvconcat(162, 182, 202, 221) : BV:32
223 : ite(6, 3, 222) : BV:32
224 : ite(47, 222, 223) : BV:32
225 : ite(6, 3, 224) : BV:32
226 : lambda(1, 2, 225) : FUNCTION[BV:32,BV:32 -> BV:32]
227 : sym_const(226) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45122Var : BV:32
2 : Lambda45123Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 67108863 ] -> true, [ 67108864; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45131Var : BV:32
2 : Lambda45132Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 67108863 { 0x3ffffff +1.99999988e136 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 67108864 { 0x4000000 +1.0e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 67108865 { 0x4000001 +1.11e137 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 5 { 0x5 +1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45127Var : BV:32
2 : Lambda45128Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 134217731 { 0x8000003 +1.35e145 } : BV:32
14 : eq(12, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 134217730 { 0x8000002 +1.23e145 } : BV:32
17 : eq(12, 16) : BOOL
18 : 255 { 0xff -1 } : BV:8
19 : eq(12, 10) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 134217728 { 0x8000000 +1.0e145 } : BV:32
22 : eq(12, 21) : BOOL
23 : 244 { 0xf4 -12 } : BV:8
24 : 134217729 { 0x8000001 +1.11e145 } : BV:32
25 : eq(12, 24) : BOOL
26 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
27 : eq(12, 26) : BOOL
28 : 188 { 0xbc -68 } : BV:8
29 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
30 : eq(12, 29) : BOOL
31 : 2 { 0x2 } : BV:8
32 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
33 : eq(12, 32) : BOOL
34 : 119 { 0x77 } : BV:8
35 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
36 : eq(12, 35) : BOOL
37 : 0 { 0x0 } : BV:8
38 : ite(36, 15, 37) : BV:8
39 : ite(33, 34, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(25, 18, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(19, 20, 43) : BV:8
45 : ite(17, 18, 44) : BV:8
46 : ite(14, 15, 45) : BV:8
47 : bvadd(32, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 10) : BOOL
51 : eq(47, 21) : BOOL
52 : eq(47, 24) : BOOL
53 : eq(47, 26) : BOOL
54 : eq(47, 29) : BOOL
55 : eq(47, 32) : BOOL
56 : eq(47, 35) : BOOL
57 : ite(56, 15, 37) : BV:8
58 : ite(55, 34, 57) : BV:8
59 : ite(54, 31, 58) : BV:8
60 : ite(53, 28, 59) : BV:8
61 : ite(52, 18, 60) : BV:8
62 : ite(51, 23, 61) : BV:8
63 : ite(50, 20, 62) : BV:8
64 : ite(49, 18, 63) : BV:8
65 : ite(48, 15, 64) : BV:8
66 : bvadd(35, 11) : BV:32
67 : eq(66, 13) : BOOL
68 : eq(66, 16) : BOOL
69 : eq(66, 10) : BOOL
70 : eq(66, 21) : BOOL
71 : eq(66, 24) : BOOL
72 : eq(66, 26) : BOOL
73 : eq(66, 29) : BOOL
74 : eq(66, 32) : BOOL
75 : eq(66, 35) : BOOL
76 : ite(75, 15, 37) : BV:8
77 : ite(74, 34, 76) : BV:8
78 : ite(73, 31, 77) : BV:8
79 : ite(72, 28, 78) : BV:8
80 : ite(71, 18, 79) : BV:8
81 : ite(70, 23, 80) : BV:8
82 : ite(69, 20, 81) : BV:8
83 : ite(68, 18, 82) : BV:8
84 : ite(67, 15, 83) : BV:8
85 : bvadd(26, 11) : BV:32
86 : eq(85, 13) : BOOL
87 : eq(85, 16) : BOOL
88 : eq(85, 10) : BOOL
89 : eq(85, 21) : BOOL
90 : eq(85, 24) : BOOL
91 : eq(85, 26) : BOOL
92 : eq(85, 29) : BOOL
93 : eq(85, 32) : BOOL
94 : eq(85, 35) : BOOL
95 : ite(94, 15, 37) : BV:8
96 : ite(93, 34, 95) : BV:8
97 : ite(92, 31, 96) : BV:8
98 : ite(91, 28, 97) : BV:8
99 : ite(90, 18, 98) : BV:8
100 : ite(89, 23, 99) : BV:8
101 : ite(88, 20, 100) : BV:8
102 : ite(87, 18, 101) : BV:8
103 : ite(86, 15, 102) : BV:8
104 : bvconcat(46, 65, 84, 103) : BV:32
105 : bvadd(7, 9, 104) : BV:32
106 : eq(105, 13) : BOOL
107 : eq(105, 16) : BOOL
108 : eq(105, 10) : BOOL
109 : eq(105, 21) : BOOL
110 : eq(105, 24) : BOOL
111 : eq(105, 26) : BOOL
112 : eq(105, 29) : BOOL
113 : eq(105, 32) : BOOL
114 : eq(105, 35) : BOOL
115 : ite(114, 15, 37) : BV:8
116 : ite(113, 34, 115) : BV:8
117 : ite(112, 31, 116) : BV:8
118 : ite(111, 28, 117) : BV:8
119 : ite(110, 18, 118) : BV:8
120 : ite(109, 23, 119) : BV:8
121 : ite(108, 20, 120) : BV:8
122 : ite(107, 18, 121) : BV:8
123 : ite(106, 15, 122) : BV:8
124 : 2 { 0x2 +1.23e129 } : BV:32
125 : bvadd(124, 9, 104) : BV:32
126 : eq(125, 13) : BOOL
127 : eq(125, 16) : BOOL
128 : eq(125, 10) : BOOL
129 : eq(125, 21) : BOOL
130 : eq(125, 24) : BOOL
131 : eq(125, 26) : BOOL
132 : eq(125, 29) : BOOL
133 : eq(125, 32) : BOOL
134 : eq(125, 35) : BOOL
135 : ite(134, 15, 37) : BV:8
136 : ite(133, 34, 135) : BV:8
137 : ite(132, 31, 136) : BV:8
138 : ite(131, 28, 137) : BV:8
139 : ite(130, 18, 138) : BV:8
140 : ite(129, 23, 139) : BV:8
141 : ite(128, 20, 140) : BV:8
142 : ite(127, 18, 141) : BV:8
143 : ite(126, 15, 142) : BV:8
144 : 1 { 0x1 +1.11e129 } : BV:32
145 : bvadd(144, 9, 104) : BV:32
146 : eq(145, 13) : BOOL
147 : eq(145, 16) : BOOL
148 : eq(145, 10) : BOOL
149 : eq(145, 21) : BOOL
150 : eq(145, 24) : BOOL
151 : eq(145, 26) : BOOL
152 : eq(145, 29) : BOOL
153 : eq(145, 32) : BOOL
154 : eq(145, 35) : BOOL
155 : ite(154, 15, 37) : BV:8
156 : ite(153, 34, 155) : BV:8
157 : ite(152, 31, 156) : BV:8
158 : ite(151, 28, 157) : BV:8
159 : ite(150, 18, 158) : BV:8
160 : ite(149, 23, 159) : BV:8
161 : ite(148, 20, 160) : BV:8
162 : ite(147, 18, 161) : BV:8
163 : ite(146, 15, 162) : BV:8
164 : bvadd(9, 104) : BV:32
165 : eq(164, 13) : BOOL
166 : eq(164, 16) : BOOL
167 : eq(164, 10) : BOOL
168 : eq(164, 21) : BOOL
169 : eq(164, 24) : BOOL
170 : eq(164, 26) : BOOL
171 : eq(164, 29) : BOOL
172 : eq(164, 32) : BOOL
173 : eq(164, 35) : BOOL
174 : ite(173, 15, 37) : BV:8
175 : ite(172, 34, 174) : BV:8
176 : ite(171, 31, 175) : BV:8
177 : ite(170, 28, 176) : BV:8
178 : ite(169, 18, 177) : BV:8
179 : ite(168, 23, 178) : BV:8
180 : ite(167, 20, 179) : BV:8
181 : ite(166, 18, 180) : BV:8
182 : ite(165, 15, 181) : BV:8
183 : bvconcat(123, 143, 163, 182) : BV:32
184 : ite(6, 3, 183) : BV:32
185 : lambda(1, 2, 184) : FUNCTION[BV:32,BV:32 -> BV:32]
186 : sym_const(185) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45138Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 134217731 { 0x8000003 +1.35e145 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 134217730 { 0x8000002 +1.23e145 } : BV:32
15 : eq(10, 14) : BOOL
16 : 255 { 0xff -1 } : BV:8
17 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
18 : eq(10, 17) : BOOL
19 : 253 { 0xfd -3 } : BV:8
20 : 134217728 { 0x8000000 +1.0e145 } : BV:32
21 : eq(10, 20) : BOOL
22 : 244 { 0xf4 -12 } : BV:8
23 : 134217729 { 0x8000001 +1.11e145 } : BV:32
24 : eq(10, 23) : BOOL
25 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
26 : eq(10, 25) : BOOL
27 : 188 { 0xbc -68 } : BV:8
28 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
29 : eq(10, 28) : BOOL
30 : 2 { 0x2 } : BV:8
31 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
32 : eq(10, 31) : BOOL
33 : 119 { 0x77 } : BV:8
34 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
35 : eq(10, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(24, 16, 40) : BV:8
42 : ite(21, 22, 41) : BV:8
43 : ite(18, 19, 42) : BV:8
44 : ite(15, 16, 43) : BV:8
45 : ite(12, 13, 44) : BV:8
46 : bvadd(4, 8, 9) : BV:32
47 : eq(46, 11) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 20) : BOOL
51 : eq(46, 23) : BOOL
52 : eq(46, 25) : BOOL
53 : eq(46, 28) : BOOL
54 : eq(46, 31) : BOOL
55 : eq(46, 34) : BOOL
56 : ite(55, 13, 36) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 16, 59) : BV:8
61 : ite(50, 22, 60) : BV:8
62 : ite(49, 19, 61) : BV:8
63 : ite(48, 16, 62) : BV:8
64 : ite(47, 13, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 8, 9) : BV:32
67 : eq(66, 11) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : eq(66, 20) : BOOL
71 : eq(66, 23) : BOOL
72 : eq(66, 25) : BOOL
73 : eq(66, 28) : BOOL
74 : eq(66, 31) : BOOL
75 : eq(66, 34) : BOOL
76 : ite(75, 13, 36) : BV:8
77 : ite(74, 33, 76) : BV:8
78 : ite(73, 30, 77) : BV:8
79 : ite(72, 27, 78) : BV:8
80 : ite(71, 16, 79) : BV:8
81 : ite(70, 22, 80) : BV:8
82 : ite(69, 19, 81) : BV:8
83 : ite(68, 16, 82) : BV:8
84 : ite(67, 13, 83) : BV:8
85 : bvadd(8, 9) : BV:32
86 : eq(85, 11) : BOOL
87 : eq(85, 14) : BOOL
88 : eq(85, 17) : BOOL
89 : eq(85, 20) : BOOL
90 : eq(85, 23) : BOOL
91 : eq(85, 25) : BOOL
92 : eq(85, 28) : BOOL
93 : eq(85, 31) : BOOL
94 : eq(85, 34) : BOOL
95 : ite(94, 13, 36) : BV:8
96 : ite(93, 33, 95) : BV:8
97 : ite(92, 30, 96) : BV:8
98 : ite(91, 27, 97) : BV:8
99 : ite(90, 16, 98) : BV:8
100 : ite(89, 22, 99) : BV:8
101 : ite(88, 19, 100) : BV:8
102 : ite(87, 16, 101) : BV:8
103 : ite(86, 13, 102) : BV:8
104 : bvconcat(45, 64, 84, 103) : BV:32
105 : ite(6, 5, 104) : BV:32
106 : ite(3, 4, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45142Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
8 : bvadd(2, 6, 7) : BV:32
9 : 134217731 { 0x8000003 +1.35e145 } : BV:32
10 : eq(8, 9) : BOOL
11 : 127 { 0x7f } : BV:8
12 : 134217730 { 0x8000002 +1.23e145 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 134217728 { 0x8000000 +1.0e145 } : BV:32
19 : eq(8, 18) : BOOL
20 : 244 { 0xf4 -12 } : BV:8
21 : 134217729 { 0x8000001 +1.11e145 } : BV:32
22 : eq(8, 21) : BOOL
23 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
24 : eq(8, 23) : BOOL
25 : 188 { 0xbc -68 } : BV:8
26 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
30 : eq(8, 29) : BOOL
31 : 119 { 0x77 } : BV:8
32 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
33 : eq(8, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : ite(33, 11, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(27, 28, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(22, 14, 38) : BV:8
40 : ite(19, 20, 39) : BV:8
41 : ite(16, 17, 40) : BV:8
42 : ite(13, 14, 41) : BV:8
43 : ite(10, 11, 42) : BV:8
44 : bvadd(4, 6, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 15) : BOOL
48 : eq(44, 18) : BOOL
49 : eq(44, 21) : BOOL
50 : eq(44, 23) : BOOL
51 : eq(44, 26) : BOOL
52 : eq(44, 29) : BOOL
53 : eq(44, 32) : BOOL
54 : ite(53, 11, 34) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 14, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(46, 14, 60) : BV:8
62 : ite(45, 11, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 6, 7) : BV:32
65 : eq(64, 9) : BOOL
66 : eq(64, 12) : BOOL
67 : eq(64, 15) : BOOL
68 : eq(64, 18) : BOOL
69 : eq(64, 21) : BOOL
70 : eq(64, 23) : BOOL
71 : eq(64, 26) : BOOL
72 : eq(64, 29) : BOOL
73 : eq(64, 32) : BOOL
74 : ite(73, 11, 34) : BV:8
75 : ite(72, 31, 74) : BV:8
76 : ite(71, 28, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 14, 77) : BV:8
79 : ite(68, 20, 78) : BV:8
80 : ite(67, 17, 79) : BV:8
81 : ite(66, 14, 80) : BV:8
82 : ite(65, 11, 81) : BV:8
83 : bvadd(6, 7) : BV:32
84 : eq(83, 9) : BOOL
85 : eq(83, 12) : BOOL
86 : eq(83, 15) : BOOL
87 : eq(83, 18) : BOOL
88 : eq(83, 21) : BOOL
89 : eq(83, 23) : BOOL
90 : eq(83, 26) : BOOL
91 : eq(83, 29) : BOOL
92 : eq(83, 32) : BOOL
93 : ite(92, 11, 34) : BV:8
94 : ite(91, 31, 93) : BV:8
95 : ite(90, 28, 94) : BV:8
96 : ite(89, 25, 95) : BV:8
97 : ite(88, 14, 96) : BV:8
98 : ite(87, 20, 97) : BV:8
99 : ite(86, 17, 98) : BV:8
100 : ite(85, 14, 99) : BV:8
101 : ite(84, 11, 100) : BV:8
102 : bvconcat(43, 62, 82, 101) : BV:32
103 : ite(3, 4, 102) : BV:32
104 : lambda(1, 103) : FUNCTION[BV:32 -> BV:32]
105 : sym_const(104) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45143Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2147483636 { 0x7ffffff4 +1.99999856e128 } : BV:32
10 : bvadd(2, 8, 9) : BV:32
11 : 134217731 { 0x8000003 +1.35e145 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 134217730 { 0x8000002 +1.23e145 } : BV:32
15 : eq(10, 14) : BOOL
16 : 255 { 0xff -1 } : BV:8
17 : 134217719 { 0x7fffff7 +1.99999892e144 } : BV:32
18 : eq(10, 17) : BOOL
19 : 253 { 0xfd -3 } : BV:8
20 : 134217728 { 0x8000000 +1.0e145 } : BV:32
21 : eq(10, 20) : BOOL
22 : 244 { 0xf4 -12 } : BV:8
23 : 134217729 { 0x8000001 +1.11e145 } : BV:32
24 : eq(10, 23) : BOOL
25 : 134217716 { 0x7fffff4 +1.99999856e144 } : BV:32
26 : eq(10, 25) : BOOL
27 : 188 { 0xbc -68 } : BV:8
28 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
29 : eq(10, 28) : BOOL
30 : 2 { 0x2 } : BV:8
31 : 134217718 { 0x7fffff6 +1.99999880e144 } : BV:32
32 : eq(10, 31) : BOOL
33 : 119 { 0x77 } : BV:8
34 : 134217717 { 0x7fffff5 +1.99999868e144 } : BV:32
35 : eq(10, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : ite(35, 13, 36) : BV:8
38 : ite(32, 33, 37) : BV:8
39 : ite(29, 30, 38) : BV:8
40 : ite(26, 27, 39) : BV:8
41 : ite(24, 16, 40) : BV:8
42 : ite(21, 22, 41) : BV:8
43 : ite(18, 19, 42) : BV:8
44 : ite(15, 16, 43) : BV:8
45 : ite(12, 13, 44) : BV:8
46 : bvadd(4, 8, 9) : BV:32
47 : eq(46, 11) : BOOL
48 : eq(46, 14) : BOOL
49 : eq(46, 17) : BOOL
50 : eq(46, 20) : BOOL
51 : eq(46, 23) : BOOL
52 : eq(46, 25) : BOOL
53 : eq(46, 28) : BOOL
54 : eq(46, 31) : BOOL
55 : eq(46, 34) : BOOL
56 : ite(55, 13, 36) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 16, 59) : BV:8
61 : ite(50, 22, 60) : BV:8
62 : ite(49, 19, 61) : BV:8
63 : ite(48, 16, 62) : BV:8
64 : ite(47, 13, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 8, 9) : BV:32
67 : eq(66, 11) : BOOL
68 : eq(66, 14) : BOOL
69 : eq(66, 17) : BOOL
70 : eq(66, 20) : BOOL
71 : eq(66, 23) : BOOL
72 : eq(66, 25) : BOOL
73 : eq(66, 28) : BOOL
74 : eq(66, 31) : BOOL
75 : eq(66, 34) : BOOL
76 : ite(75, 13, 36) : BV:8
77 : ite(74, 33, 76) : BV:8
78 : ite(73, 30, 77) : BV:8
79 : ite(72, 27, 78) : BV:8
80 : ite(71, 16, 79) : BV:8
81 : ite(70, 22, 80) : BV:8
82 : ite(69, 19, 81) : BV:8
83 : ite(68, 16, 82) : BV:8
84 : ite(67, 13, 83) : BV:8
85 : bvadd(8, 9) : BV:32
86 : eq(85, 11) : BOOL
87 : eq(85, 14) : BOOL
88 : eq(85, 17) : BOOL
89 : eq(85, 20) : BOOL
90 : eq(85, 23) : BOOL
91 : eq(85, 25) : BOOL
92 : eq(85, 28) : BOOL
93 : eq(85, 31) : BOOL
94 : eq(85, 34) : BOOL
95 : ite(94, 13, 36) : BV:8
96 : ite(93, 33, 95) : BV:8
97 : ite(92, 30, 96) : BV:8
98 : ite(91, 27, 97) : BV:8
99 : ite(90, 16, 98) : BV:8
100 : ite(89, 22, 99) : BV:8
101 : ite(88, 19, 100) : BV:8
102 : ite(87, 16, 101) : BV:8
103 : ite(86, 13, 102) : BV:8
104 : bvconcat(45, 64, 84, 103) : BV:32
105 : ite(6, 5, 104) : BV:32
106 : ite(3, 4, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
3000145407
=counter_example_end
=global nodece 56 num_edges_traversed 4
=global nodece 56 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 57
=global nodece 57 nodece z3.ce4760.num_edges_traversed1
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3.ce4760 176e717ed648b2e2228c78e9273aa9c5
=input.spec-%var-x-1
1 : Lambda45879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda45880Var : BV:32
17 : Lambda45881Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(7, 17) : BOOL
36 : bvule(17, 7) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(24, 17) : BOOL
39 : bvule(17, 9) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 24, 24) : BV:32
42 : ite(37, 7, 41) : BV:32
43 : ite(34, 2, 42) : BV:32
44 : eq(43, 2) : BOOL
45 : and(31, 44) : BOOL
46 : ite(45, 6, 12) : BOOL
47 : lambda(17, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda45882Var : BV:32
49 : eq(16, 2) : BOOL
50 : eq(48, 2) : BOOL
51 : and(49, 50) : BOOL
52 : and(21, 26) : BOOL
53 : ite(52, 12, 12) : BOOL
54 : ite(20, 6, 53) : BOOL
55 : bvule(2, 48) : BOOL
56 : bvule(48, 2) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(7, 48) : BOOL
59 : bvule(48, 7) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(24, 48) : BOOL
62 : bvule(48, 9) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 24, 24) : BV:32
65 : ite(60, 7, 64) : BV:32
66 : ite(57, 2, 65) : BV:32
67 : eq(66, 2) : BOOL
68 : and(31, 67) : BOOL
69 : ite(68, 6, 12) : BOOL
70 : and(54, 69) : BOOL
71 : 3 { 0x3 +1.35e129 } : BV:32
72 : 4 { 0x4 +1.47e129 } : BV:32
73 : bvmul(72, 48) : BV:32
74 : 268435459 { 0x10000003 +1.35e161 } : BV:32
75 : bvmul(72, 16) : BV:32
76 : bvadd(74, 75) : BV:32
77 : 268435457 { 0x10000001 +1.11e161 } : BV:32
78 : eq(76, 77) : BOOL
79 : 45 { 0x2d } : BV:8
80 : eq(76, 74) : BOOL
81 : 140 { 0x8c -116 } : BV:8
82 : 268435458 { 0x10000002 +1.23e161 } : BV:32
83 : eq(76, 82) : BOOL
84 : 19 { 0x13 } : BV:8
85 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
86 : eq(76, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 268435456 { 0x10000000 +1.0e161 } : BV:32
89 : eq(76, 88) : BOOL
90 : 52 { 0x34 } : BV:8
91 : 0 { 0x0 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(86, 87, 92) : BV:8
94 : ite(83, 84, 93) : BV:8
95 : ite(80, 81, 94) : BV:8
96 : ite(78, 79, 95) : BV:8
97 : bvadd(82, 75) : BV:32
98 : eq(97, 77) : BOOL
99 : eq(97, 74) : BOOL
100 : eq(97, 82) : BOOL
101 : eq(97, 85) : BOOL
102 : eq(97, 88) : BOOL
103 : ite(102, 90, 91) : BV:8
104 : ite(101, 87, 103) : BV:8
105 : ite(100, 84, 104) : BV:8
106 : ite(99, 81, 105) : BV:8
107 : ite(98, 79, 106) : BV:8
108 : bvadd(77, 75) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 74) : BOOL
111 : eq(108, 82) : BOOL
112 : eq(108, 85) : BOOL
113 : eq(108, 88) : BOOL
114 : ite(113, 90, 91) : BV:8
115 : ite(112, 87, 114) : BV:8
116 : ite(111, 84, 115) : BV:8
117 : ite(110, 81, 116) : BV:8
118 : ite(109, 79, 117) : BV:8
119 : bvadd(88, 75) : BV:32
120 : eq(119, 77) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 82) : BOOL
123 : eq(119, 85) : BOOL
124 : eq(119, 88) : BOOL
125 : ite(124, 90, 91) : BV:8
126 : ite(123, 87, 125) : BV:8
127 : ite(122, 84, 126) : BV:8
128 : ite(121, 81, 127) : BV:8
129 : ite(120, 79, 128) : BV:8
130 : bvconcat(96, 107, 118, 129) : BV:32
131 : bvadd(71, 73, 130) : BV:32
132 : eq(131, 77) : BOOL
133 : eq(131, 74) : BOOL
134 : eq(131, 82) : BOOL
135 : eq(131, 85) : BOOL
136 : eq(131, 88) : BOOL
137 : ite(136, 90, 91) : BV:8
138 : ite(135, 87, 137) : BV:8
139 : ite(134, 84, 138) : BV:8
140 : ite(133, 81, 139) : BV:8
141 : ite(132, 79, 140) : BV:8
142 : bvadd(24, 73, 130) : BV:32
143 : eq(142, 77) : BOOL
144 : eq(142, 74) : BOOL
145 : eq(142, 82) : BOOL
146 : eq(142, 85) : BOOL
147 : eq(142, 88) : BOOL
148 : ite(147, 90, 91) : BV:8
149 : ite(146, 87, 148) : BV:8
150 : ite(145, 84, 149) : BV:8
151 : ite(144, 81, 150) : BV:8
152 : ite(143, 79, 151) : BV:8
153 : bvadd(7, 73, 130) : BV:32
154 : eq(153, 77) : BOOL
155 : eq(153, 74) : BOOL
156 : eq(153, 82) : BOOL
157 : eq(153, 85) : BOOL
158 : eq(153, 88) : BOOL
159 : ite(158, 90, 91) : BV:8
160 : ite(157, 87, 159) : BV:8
161 : ite(156, 84, 160) : BV:8
162 : ite(155, 81, 161) : BV:8
163 : ite(154, 79, 162) : BV:8
164 : bvadd(73, 130) : BV:32
165 : eq(164, 77) : BOOL
166 : eq(164, 74) : BOOL
167 : eq(164, 82) : BOOL
168 : eq(164, 85) : BOOL
169 : eq(164, 88) : BOOL
170 : ite(169, 90, 91) : BV:8
171 : ite(168, 87, 170) : BV:8
172 : ite(167, 84, 171) : BV:8
173 : ite(166, 81, 172) : BV:8
174 : ite(165, 79, 173) : BV:8
175 : bvconcat(141, 152, 163, 174) : BV:32
176 : ite(51, 7, 175) : BV:32
177 : ite(70, 175, 176) : BV:32
178 : ite(51, 7, 177) : BV:32
179 : lambda(48, 178) : FUNCTION[BV:32 -> BV:32]
180 : map(47, 179) : MAP[BV:32 -> BV:32]
181 : lambda(16, 180) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
182 : map(15, 181) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
183 : sym_const(182) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda45906Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda45907Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 268435457 { 0x10000001 +1.11e161 } : BV:32
24 : eq(22, 23) : BOOL
25 : 45 { 0x2d } : BV:8
26 : 268435459 { 0x10000003 +1.35e161 } : BV:32
27 : eq(22, 26) : BOOL
28 : 140 { 0x8c -116 } : BV:8
29 : 268435458 { 0x10000002 +1.23e161 } : BV:32
30 : eq(22, 29) : BOOL
31 : 19 { 0x13 } : BV:8
32 : eq(22, 21) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 268435456 { 0x10000000 +1.0e161 } : BV:32
35 : eq(22, 34) : BOOL
36 : 52 { 0x34 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 34) : BOOL
50 : ite(49, 36, 37) : BV:8
51 : ite(48, 33, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : bvadd(7, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 34) : BOOL
61 : ite(60, 36, 37) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 28, 63) : BV:8
65 : ite(56, 25, 64) : BV:8
66 : bvadd(20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 21) : BOOL
71 : eq(66, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 31, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : bvconcat(42, 54, 65, 76) : BV:32
78 : ite(17, 7, 77) : BV:32
79 : lambda(16, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(15, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 268435455 ] -> 0, [ 268435456; 268435456 ] -> 52, [ 268435457; 268435457 ] -> 45, [ 268435458; 268435458 ] -> 19, [ 268435459; 268435459 ] -> 140, [ 268435460; 2350066995 ] -> 0, [ 2350066996; 2350066996 ] -> 1, [ 2350066997; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193170191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193170192; 193170195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 193170196; 2325564675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2325564676; 2325564679 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2325564680; 2349534751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2349534752; 2349534755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2349534756; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2349534752 { 0x8c0b0e20 -1945432544 -1.8636856e153 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2325564676 { 0x8a9d4d04 -1969402620 -1.22891283e150 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 193170192 { 0xb838b10 +1.2768135e152 } : BV:32
=input.dst.llvm-%x
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 30014930 { 0x1c9fdd2 +1.57805848e132 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45899Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda45900Var : BV:32
17 : Lambda45901Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(7, 17) : BOOL
36 : bvule(17, 7) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(24, 17) : BOOL
39 : bvule(17, 9) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 24, 24) : BV:32
42 : ite(37, 7, 41) : BV:32
43 : ite(34, 2, 42) : BV:32
44 : eq(43, 2) : BOOL
45 : and(31, 44) : BOOL
46 : ite(45, 6, 12) : BOOL
47 : lambda(17, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda45902Var : BV:32
49 : eq(16, 2) : BOOL
50 : eq(48, 2) : BOOL
51 : and(49, 50) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 48) : BV:32
55 : 268435459 { 0x10000003 +1.35e161 } : BV:32
56 : bvmul(53, 16) : BV:32
57 : bvadd(55, 56) : BV:32
58 : 268435457 { 0x10000001 +1.11e161 } : BV:32
59 : eq(57, 58) : BOOL
60 : 45 { 0x2d } : BV:8
61 : eq(57, 55) : BOOL
62 : 140 { 0x8c -116 } : BV:8
63 : 268435458 { 0x10000002 +1.23e161 } : BV:32
64 : eq(57, 63) : BOOL
65 : 19 { 0x13 } : BV:8
66 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
67 : eq(57, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 268435456 { 0x10000000 +1.0e161 } : BV:32
70 : eq(57, 69) : BOOL
71 : 52 { 0x34 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : bvadd(63, 56) : BV:32
79 : eq(78, 58) : BOOL
80 : eq(78, 55) : BOOL
81 : eq(78, 63) : BOOL
82 : eq(78, 66) : BOOL
83 : eq(78, 69) : BOOL
84 : ite(83, 71, 72) : BV:8
85 : ite(82, 68, 84) : BV:8
86 : ite(81, 65, 85) : BV:8
87 : ite(80, 62, 86) : BV:8
88 : ite(79, 60, 87) : BV:8
89 : bvadd(58, 56) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 63) : BOOL
93 : eq(89, 66) : BOOL
94 : eq(89, 69) : BOOL
95 : ite(94, 71, 72) : BV:8
96 : ite(93, 68, 95) : BV:8
97 : ite(92, 65, 96) : BV:8
98 : ite(91, 62, 97) : BV:8
99 : ite(90, 60, 98) : BV:8
100 : bvadd(69, 56) : BV:32
101 : eq(100, 58) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 63) : BOOL
104 : eq(100, 66) : BOOL
105 : eq(100, 69) : BOOL
106 : ite(105, 71, 72) : BV:8
107 : ite(104, 68, 106) : BV:8
108 : ite(103, 65, 107) : BV:8
109 : ite(102, 62, 108) : BV:8
110 : ite(101, 60, 109) : BV:8
111 : bvconcat(77, 88, 99, 110) : BV:32
112 : bvadd(52, 54, 111) : BV:32
113 : eq(112, 58) : BOOL
114 : eq(112, 55) : BOOL
115 : eq(112, 63) : BOOL
116 : eq(112, 66) : BOOL
117 : eq(112, 69) : BOOL
118 : ite(117, 71, 72) : BV:8
119 : ite(116, 68, 118) : BV:8
120 : ite(115, 65, 119) : BV:8
121 : ite(114, 62, 120) : BV:8
122 : ite(113, 60, 121) : BV:8
123 : bvadd(24, 54, 111) : BV:32
124 : eq(123, 58) : BOOL
125 : eq(123, 55) : BOOL
126 : eq(123, 63) : BOOL
127 : eq(123, 66) : BOOL
128 : eq(123, 69) : BOOL
129 : ite(128, 71, 72) : BV:8
130 : ite(127, 68, 129) : BV:8
131 : ite(126, 65, 130) : BV:8
132 : ite(125, 62, 131) : BV:8
133 : ite(124, 60, 132) : BV:8
134 : bvadd(7, 54, 111) : BV:32
135 : eq(134, 58) : BOOL
136 : eq(134, 55) : BOOL
137 : eq(134, 63) : BOOL
138 : eq(134, 66) : BOOL
139 : eq(134, 69) : BOOL
140 : ite(139, 71, 72) : BV:8
141 : ite(138, 68, 140) : BV:8
142 : ite(137, 65, 141) : BV:8
143 : ite(136, 62, 142) : BV:8
144 : ite(135, 60, 143) : BV:8
145 : bvadd(54, 111) : BV:32
146 : eq(145, 58) : BOOL
147 : eq(145, 55) : BOOL
148 : eq(145, 63) : BOOL
149 : eq(145, 66) : BOOL
150 : eq(145, 69) : BOOL
151 : ite(150, 71, 72) : BV:8
152 : ite(149, 68, 151) : BV:8
153 : ite(148, 65, 152) : BV:8
154 : ite(147, 62, 153) : BV:8
155 : ite(146, 60, 154) : BV:8
156 : bvconcat(122, 133, 144, 155) : BV:32
157 : ite(51, 7, 156) : BV:32
158 : lambda(48, 157) : FUNCTION[BV:32 -> BV:32]
159 : map(47, 158) : MAP[BV:32 -> BV:32]
160 : lambda(16, 159) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
161 : map(15, 160) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
162 : sym_const(161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 128 { 0x80 +1.1525e129 } : BV:32
2 : unit : UNIT
3 : Lambda45888Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 4) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1 { 0x1 +1.11e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda45889Var : BV:32
19 : eq(18, 4) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 18) : BV:32
23 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
24 : bvadd(20, 22, 23) : BV:32
25 : 268435457 { 0x10000001 +1.11e161 } : BV:32
26 : eq(24, 25) : BOOL
27 : 45 { 0x2d } : BV:8
28 : 268435459 { 0x10000003 +1.35e161 } : BV:32
29 : eq(24, 28) : BOOL
30 : 140 { 0x8c -116 } : BV:8
31 : 268435458 { 0x10000002 +1.23e161 } : BV:32
32 : eq(24, 31) : BOOL
33 : 19 { 0x13 } : BV:8
34 : eq(24, 23) : BOOL
35 : 1 { 0x1 } : BV:8
36 : 268435456 { 0x10000000 +1.0e161 } : BV:32
37 : eq(24, 36) : BOOL
38 : 52 { 0x34 } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(32, 33, 41) : BV:8
43 : ite(29, 30, 42) : BV:8
44 : ite(26, 27, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 22, 23) : BV:32
47 : eq(46, 25) : BOOL
48 : eq(46, 28) : BOOL
49 : eq(46, 31) : BOOL
50 : eq(46, 23) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 33, 53) : BV:8
55 : ite(48, 30, 54) : BV:8
56 : ite(47, 27, 55) : BV:8
57 : bvadd(9, 22, 23) : BV:32
58 : eq(57, 25) : BOOL
59 : eq(57, 28) : BOOL
60 : eq(57, 31) : BOOL
61 : eq(57, 23) : BOOL
62 : eq(57, 36) : BOOL
63 : ite(62, 38, 39) : BV:8
64 : ite(61, 35, 63) : BV:8
65 : ite(60, 33, 64) : BV:8
66 : ite(59, 30, 65) : BV:8
67 : ite(58, 27, 66) : BV:8
68 : bvadd(22, 23) : BV:32
69 : eq(68, 25) : BOOL
70 : eq(68, 28) : BOOL
71 : eq(68, 31) : BOOL
72 : eq(68, 23) : BOOL
73 : eq(68, 36) : BOOL
74 : ite(73, 38, 39) : BV:8
75 : ite(72, 35, 74) : BV:8
76 : ite(71, 33, 75) : BV:8
77 : ite(70, 30, 76) : BV:8
78 : ite(69, 27, 77) : BV:8
79 : bvconcat(44, 56, 67, 78) : BV:32
80 : ite(19, 9, 79) : BV:32
81 : lambda(18, 80) : FUNCTION[BV:32 -> BV:32]
82 : map(17, 81) : MAP[BV:32 -> BV:32]
83 : sum(1, 2, 82) : SUM[UNIT,MAP[BV:32 -> BV:32]]
84 : sym_const(83) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : and(2, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
8 : bvule(1, 7) : BOOL
9 : and(6, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(3, 4, 11) : BOOL
13 : ite(12, 5, 1) : BV:32
14 : unit : UNIT
15 : eq(1, 1) : BOOL
16 : 3 { 0x3 +1.35e129 } : BV:32
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(17, 1) : BV:32
19 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
20 : bvadd(16, 18, 19) : BV:32
21 : 268435457 { 0x10000001 +1.11e161 } : BV:32
22 : eq(20, 21) : BOOL
23 : 45 { 0x2d } : BV:8
24 : 268435459 { 0x10000003 +1.35e161 } : BV:32
25 : eq(20, 24) : BOOL
26 : 140 { 0x8c -116 } : BV:8
27 : 268435458 { 0x10000002 +1.23e161 } : BV:32
28 : eq(20, 27) : BOOL
29 : 19 { 0x13 } : BV:8
30 : eq(20, 19) : BOOL
31 : 1 { 0x1 } : BV:8
32 : 268435456 { 0x10000000 +1.0e161 } : BV:32
33 : eq(20, 32) : BOOL
34 : 52 { 0x34 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(28, 29, 37) : BV:8
39 : ite(25, 26, 38) : BV:8
40 : ite(22, 23, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 18, 19) : BV:32
43 : eq(42, 21) : BOOL
44 : eq(42, 24) : BOOL
45 : eq(42, 27) : BOOL
46 : eq(42, 19) : BOOL
47 : eq(42, 32) : BOOL
48 : ite(47, 34, 35) : BV:8
49 : ite(46, 31, 48) : BV:8
50 : ite(45, 29, 49) : BV:8
51 : ite(44, 26, 50) : BV:8
52 : ite(43, 23, 51) : BV:8
53 : bvadd(5, 18, 19) : BV:32
54 : eq(53, 21) : BOOL
55 : eq(53, 24) : BOOL
56 : eq(53, 27) : BOOL
57 : eq(53, 19) : BOOL
58 : eq(53, 32) : BOOL
59 : ite(58, 34, 35) : BV:8
60 : ite(57, 31, 59) : BV:8
61 : ite(56, 29, 60) : BV:8
62 : ite(55, 26, 61) : BV:8
63 : ite(54, 23, 62) : BV:8
64 : bvadd(18, 19) : BV:32
65 : eq(64, 21) : BOOL
66 : eq(64, 24) : BOOL
67 : eq(64, 27) : BOOL
68 : eq(64, 19) : BOOL
69 : eq(64, 32) : BOOL
70 : ite(69, 34, 35) : BV:8
71 : ite(68, 31, 70) : BV:8
72 : ite(67, 29, 71) : BV:8
73 : ite(66, 26, 72) : BV:8
74 : ite(65, 23, 73) : BV:8
75 : bvconcat(40, 52, 63, 74) : BV:32
76 : ite(15, 5, 75) : BV:32
77 : sum(13, 14, 76) : SUM[UNIT,BV:32]
78 : sym_const(77) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 2097967294 { 0x7d0c70be +1.9719061e123 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda45911Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda45912Var : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 268435457 { 0x10000001 +1.11e161 } : BV:32
24 : eq(22, 23) : BOOL
25 : 45 { 0x2d } : BV:8
26 : 268435459 { 0x10000003 +1.35e161 } : BV:32
27 : eq(22, 26) : BOOL
28 : 140 { 0x8c -116 } : BV:8
29 : 268435458 { 0x10000002 +1.23e161 } : BV:32
30 : eq(22, 29) : BOOL
31 : 19 { 0x13 } : BV:8
32 : eq(22, 21) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 268435456 { 0x10000000 +1.0e161 } : BV:32
35 : eq(22, 34) : BOOL
36 : 52 { 0x34 } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(30, 31, 39) : BV:8
41 : ite(27, 28, 40) : BV:8
42 : ite(24, 25, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 20, 21) : BV:32
45 : eq(44, 23) : BOOL
46 : eq(44, 26) : BOOL
47 : eq(44, 29) : BOOL
48 : eq(44, 21) : BOOL
49 : eq(44, 34) : BOOL
50 : ite(49, 36, 37) : BV:8
51 : ite(48, 33, 50) : BV:8
52 : ite(47, 31, 51) : BV:8
53 : ite(46, 28, 52) : BV:8
54 : ite(45, 25, 53) : BV:8
55 : bvadd(7, 20, 21) : BV:32
56 : eq(55, 23) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 21) : BOOL
60 : eq(55, 34) : BOOL
61 : ite(60, 36, 37) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 31, 62) : BV:8
64 : ite(57, 28, 63) : BV:8
65 : ite(56, 25, 64) : BV:8
66 : bvadd(20, 21) : BV:32
67 : eq(66, 23) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 21) : BOOL
71 : eq(66, 34) : BOOL
72 : ite(71, 36, 37) : BV:8
73 : ite(70, 33, 72) : BV:8
74 : ite(69, 31, 73) : BV:8
75 : ite(68, 28, 74) : BV:8
76 : ite(67, 25, 75) : BV:8
77 : bvconcat(42, 54, 65, 76) : BV:32
78 : ite(17, 7, 77) : BV:32
79 : lambda(16, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(15, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 326929050 { 0x137c8a9a +1.97297978e167 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2325564676 { 0x8a9d4d04 -1969402620 -1.22891283e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2325564679 { 0x8a9d4d07 -1969402617 -1.22891318e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 193170192 { 0xb838b10 +1.2768135e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 193170195 { 0xb838b13 +1.2768170e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2349534752 { 0x8c0b0e20 -1945432544 -1.8636856e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2349534755 { 0x8c0b0e23 -1945432541 -1.8636891e153 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45771Var : BV:32
2 : Lambda45772Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(3, 1) : BOOL
9 : bvule(1, 3) : BOOL
10 : and(8, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : bvule(7, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 16, 16) : BOOL
18 : ite(10, 11, 17) : BOOL
19 : bvule(1, 7) : BOOL
20 : and(12, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 14) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(10, 3, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : bvule(3, 2) : BOOL
29 : bvule(2, 3) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(7, 2) : BOOL
32 : bvule(2, 7) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(21, 2) : BOOL
35 : bvule(2, 13) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 21, 21) : BV:32
38 : ite(33, 7, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(27, 40) : BOOL
42 : ite(41, 11, 16) : BOOL
43 : and(18, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 2) : BV:32
47 : 268435459 { 0x10000003 +1.35e161 } : BV:32
48 : bvmul(45, 1) : BV:32
49 : bvadd(47, 48) : BV:32
50 : 268435457 { 0x10000001 +1.11e161 } : BV:32
51 : eq(49, 50) : BOOL
52 : 45 { 0x2d } : BV:8
53 : eq(49, 47) : BOOL
54 : 140 { 0x8c -116 } : BV:8
55 : 268435458 { 0x10000002 +1.23e161 } : BV:32
56 : eq(49, 55) : BOOL
57 : 19 { 0x13 } : BV:8
58 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
59 : eq(49, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 268435456 { 0x10000000 +1.0e161 } : BV:32
62 : eq(49, 61) : BOOL
63 : 52 { 0x34 } : BV:8
64 : 0 { 0x0 } : BV:8
65 : ite(62, 63, 64) : BV:8
66 : ite(59, 60, 65) : BV:8
67 : ite(56, 57, 66) : BV:8
68 : ite(53, 54, 67) : BV:8
69 : ite(51, 52, 68) : BV:8
70 : bvadd(55, 48) : BV:32
71 : eq(70, 50) : BOOL
72 : eq(70, 47) : BOOL
73 : eq(70, 55) : BOOL
74 : eq(70, 58) : BOOL
75 : eq(70, 61) : BOOL
76 : ite(75, 63, 64) : BV:8
77 : ite(74, 60, 76) : BV:8
78 : ite(73, 57, 77) : BV:8
79 : ite(72, 54, 78) : BV:8
80 : ite(71, 52, 79) : BV:8
81 : bvadd(50, 48) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 47) : BOOL
84 : eq(81, 55) : BOOL
85 : eq(81, 58) : BOOL
86 : eq(81, 61) : BOOL
87 : ite(86, 63, 64) : BV:8
88 : ite(85, 60, 87) : BV:8
89 : ite(84, 57, 88) : BV:8
90 : ite(83, 54, 89) : BV:8
91 : ite(82, 52, 90) : BV:8
92 : bvadd(61, 48) : BV:32
93 : eq(92, 50) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 55) : BOOL
96 : eq(92, 58) : BOOL
97 : eq(92, 61) : BOOL
98 : ite(97, 63, 64) : BV:8
99 : ite(96, 60, 98) : BV:8
100 : ite(95, 57, 99) : BV:8
101 : ite(94, 54, 100) : BV:8
102 : ite(93, 52, 101) : BV:8
103 : bvconcat(69, 80, 91, 102) : BV:32
104 : bvadd(44, 46, 103) : BV:32
105 : eq(104, 50) : BOOL
106 : eq(104, 47) : BOOL
107 : eq(104, 55) : BOOL
108 : eq(104, 58) : BOOL
109 : eq(104, 61) : BOOL
110 : ite(109, 63, 64) : BV:8
111 : ite(108, 60, 110) : BV:8
112 : ite(107, 57, 111) : BV:8
113 : ite(106, 54, 112) : BV:8
114 : ite(105, 52, 113) : BV:8
115 : bvadd(21, 46, 103) : BV:32
116 : eq(115, 50) : BOOL
117 : eq(115, 47) : BOOL
118 : eq(115, 55) : BOOL
119 : eq(115, 58) : BOOL
120 : eq(115, 61) : BOOL
121 : ite(120, 63, 64) : BV:8
122 : ite(119, 60, 121) : BV:8
123 : ite(118, 57, 122) : BV:8
124 : ite(117, 54, 123) : BV:8
125 : ite(116, 52, 124) : BV:8
126 : bvadd(7, 46, 103) : BV:32
127 : eq(126, 50) : BOOL
128 : eq(126, 47) : BOOL
129 : eq(126, 55) : BOOL
130 : eq(126, 58) : BOOL
131 : eq(126, 61) : BOOL
132 : ite(131, 63, 64) : BV:8
133 : ite(130, 60, 132) : BV:8
134 : ite(129, 57, 133) : BV:8
135 : ite(128, 54, 134) : BV:8
136 : ite(127, 52, 135) : BV:8
137 : bvadd(46, 103) : BV:32
138 : eq(137, 50) : BOOL
139 : eq(137, 47) : BOOL
140 : eq(137, 55) : BOOL
141 : eq(137, 58) : BOOL
142 : eq(137, 61) : BOOL
143 : ite(142, 63, 64) : BV:8
144 : ite(141, 60, 143) : BV:8
145 : ite(140, 57, 144) : BV:8
146 : ite(139, 54, 145) : BV:8
147 : ite(138, 52, 146) : BV:8
148 : bvconcat(114, 125, 136, 147) : BV:32
149 : ite(6, 7, 148) : BV:32
150 : ite(43, 148, 149) : BV:32
151 : ite(6, 7, 150) : BV:32
152 : lambda(1, 2, 151) : FUNCTION[BV:32,BV:32 -> BV:32]
153 : sym_const(152) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45776Var : BV:32
2 : Lambda45777Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 2) : BOOL
24 : bvule(2, 7) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(11, 2) : BOOL
27 : bvule(2, 13) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 11, 11) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 3, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 2, 36) : FUNCTION[BV:32,BV:32 -> BOOL]
38 : sym_const(37) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45785Var : BV:32
2 : Lambda45786Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 2) : BOOL
24 : bvule(2, 7) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(11, 2) : BOOL
27 : bvule(2, 13) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 11, 11) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 3, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 2, 36) : FUNCTION[BV:32,BV:32 -> BOOL]
38 : sym_const(37) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45781Var : BV:32
2 : Lambda45782Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 2) : BV:32
11 : 268435459 { 0x10000003 +1.35e161 } : BV:32
12 : bvmul(9, 1) : BV:32
13 : bvadd(11, 12) : BV:32
14 : 268435457 { 0x10000001 +1.11e161 } : BV:32
15 : eq(13, 14) : BOOL
16 : 45 { 0x2d } : BV:8
17 : eq(13, 11) : BOOL
18 : 140 { 0x8c -116 } : BV:8
19 : 268435458 { 0x10000002 +1.23e161 } : BV:32
20 : eq(13, 19) : BOOL
21 : 19 { 0x13 } : BV:8
22 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
23 : eq(13, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 268435456 { 0x10000000 +1.0e161 } : BV:32
26 : eq(13, 25) : BOOL
27 : 52 { 0x34 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : bvadd(19, 12) : BV:32
35 : eq(34, 14) : BOOL
36 : eq(34, 11) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 16, 43) : BV:8
45 : bvadd(14, 12) : BV:32
46 : eq(45, 14) : BOOL
47 : eq(45, 11) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 16, 54) : BV:8
56 : bvadd(25, 12) : BV:32
57 : eq(56, 14) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 18, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : bvadd(8, 10, 67) : BV:32
69 : eq(68, 14) : BOOL
70 : eq(68, 11) : BOOL
71 : eq(68, 19) : BOOL
72 : eq(68, 22) : BOOL
73 : eq(68, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : bvadd(79, 10, 67) : BV:32
81 : eq(80, 14) : BOOL
82 : eq(80, 11) : BOOL
83 : eq(80, 19) : BOOL
84 : eq(80, 22) : BOOL
85 : eq(80, 25) : BOOL
86 : ite(85, 27, 28) : BV:8
87 : ite(84, 24, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 18, 88) : BV:8
90 : ite(81, 16, 89) : BV:8
91 : bvadd(7, 10, 67) : BV:32
92 : eq(91, 14) : BOOL
93 : eq(91, 11) : BOOL
94 : eq(91, 19) : BOOL
95 : eq(91, 22) : BOOL
96 : eq(91, 25) : BOOL
97 : ite(96, 27, 28) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 21, 98) : BV:8
100 : ite(93, 18, 99) : BV:8
101 : ite(92, 16, 100) : BV:8
102 : bvadd(10, 67) : BV:32
103 : eq(102, 14) : BOOL
104 : eq(102, 11) : BOOL
105 : eq(102, 19) : BOOL
106 : eq(102, 22) : BOOL
107 : eq(102, 25) : BOOL
108 : ite(107, 27, 28) : BV:8
109 : ite(106, 24, 108) : BV:8
110 : ite(105, 21, 109) : BV:8
111 : ite(104, 18, 110) : BV:8
112 : ite(103, 16, 111) : BV:8
113 : bvconcat(78, 90, 101, 112) : BV:32
114 : ite(6, 7, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45792Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 268435457 { 0x10000001 +1.11e161 } : BV:32
11 : eq(9, 10) : BOOL
12 : 45 { 0x2d } : BV:8
13 : 268435459 { 0x10000003 +1.35e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 140 { 0x8c -116 } : BV:8
16 : 268435458 { 0x10000002 +1.23e161 } : BV:32
17 : eq(9, 16) : BOOL
18 : 19 { 0x13 } : BV:8
19 : eq(9, 8) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 268435456 { 0x10000000 +1.0e161 } : BV:32
22 : eq(9, 21) : BOOL
23 : 52 { 0x34 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 8) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 8) : BOOL
47 : eq(42, 21) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 20, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 8) : BOOL
58 : eq(53, 21) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45796Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 268435457 { 0x10000001 +1.11e161 } : BV:32
11 : eq(9, 10) : BOOL
12 : 45 { 0x2d } : BV:8
13 : 268435459 { 0x10000003 +1.35e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 140 { 0x8c -116 } : BV:8
16 : 268435458 { 0x10000002 +1.23e161 } : BV:32
17 : eq(9, 16) : BOOL
18 : 19 { 0x13 } : BV:8
19 : eq(9, 8) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 268435456 { 0x10000000 +1.0e161 } : BV:32
22 : eq(9, 21) : BOOL
23 : 52 { 0x34 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 8) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 8) : BOOL
47 : eq(42, 21) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 20, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 8) : BOOL
58 : eq(53, 21) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45797Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 268435457 { 0x10000001 +1.11e161 } : BV:32
11 : eq(9, 10) : BOOL
12 : 45 { 0x2d } : BV:8
13 : 268435459 { 0x10000003 +1.35e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 140 { 0x8c -116 } : BV:8
16 : 268435458 { 0x10000002 +1.23e161 } : BV:32
17 : eq(9, 16) : BOOL
18 : 19 { 0x13 } : BV:8
19 : eq(9, 8) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 268435456 { 0x10000000 +1.0e161 } : BV:32
22 : eq(9, 21) : BOOL
23 : 52 { 0x34 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 8) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 8) : BOOL
47 : eq(42, 21) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 20, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 8) : BOOL
58 : eq(53, 21) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
1764328794
=counter_example_end
=global nodece 57 num_edges_traversed 1
=global nodece 57 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 58
=global nodece 58 nodece z3.ce4805.num_edges_traversed2
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(epsilon)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce4805 187d7a9f336e1e5ef26c5797db931468
=input.spec-%var-x-1
1 : Lambda45879Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda45880Var : BV:32
17 : Lambda45881Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(7, 17) : BOOL
36 : bvule(17, 7) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(24, 17) : BOOL
39 : bvule(17, 9) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 24, 24) : BV:32
42 : ite(37, 7, 41) : BV:32
43 : ite(34, 2, 42) : BV:32
44 : eq(43, 2) : BOOL
45 : and(31, 44) : BOOL
46 : ite(45, 6, 12) : BOOL
47 : lambda(17, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda45882Var : BV:32
49 : eq(16, 2) : BOOL
50 : eq(48, 2) : BOOL
51 : and(49, 50) : BOOL
52 : and(21, 26) : BOOL
53 : ite(52, 12, 12) : BOOL
54 : ite(20, 6, 53) : BOOL
55 : bvule(2, 48) : BOOL
56 : bvule(48, 2) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(7, 48) : BOOL
59 : bvule(48, 7) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(24, 48) : BOOL
62 : bvule(48, 9) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 24, 24) : BV:32
65 : ite(60, 7, 64) : BV:32
66 : ite(57, 2, 65) : BV:32
67 : eq(66, 2) : BOOL
68 : and(31, 67) : BOOL
69 : ite(68, 6, 12) : BOOL
70 : and(54, 69) : BOOL
71 : 3 { 0x3 +1.35e129 } : BV:32
72 : 4 { 0x4 +1.47e129 } : BV:32
73 : bvmul(72, 48) : BV:32
74 : 268435459 { 0x10000003 +1.35e161 } : BV:32
75 : bvmul(72, 16) : BV:32
76 : bvadd(74, 75) : BV:32
77 : 268435457 { 0x10000001 +1.11e161 } : BV:32
78 : eq(76, 77) : BOOL
79 : 45 { 0x2d } : BV:8
80 : eq(76, 74) : BOOL
81 : 140 { 0x8c -116 } : BV:8
82 : 268435458 { 0x10000002 +1.23e161 } : BV:32
83 : eq(76, 82) : BOOL
84 : 19 { 0x13 } : BV:8
85 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
86 : eq(76, 85) : BOOL
87 : 1 { 0x1 } : BV:8
88 : 268435456 { 0x10000000 +1.0e161 } : BV:32
89 : eq(76, 88) : BOOL
90 : 52 { 0x34 } : BV:8
91 : 0 { 0x0 } : BV:8
92 : ite(89, 90, 91) : BV:8
93 : ite(86, 87, 92) : BV:8
94 : ite(83, 84, 93) : BV:8
95 : ite(80, 81, 94) : BV:8
96 : ite(78, 79, 95) : BV:8
97 : bvadd(82, 75) : BV:32
98 : eq(97, 77) : BOOL
99 : eq(97, 74) : BOOL
100 : eq(97, 82) : BOOL
101 : eq(97, 85) : BOOL
102 : eq(97, 88) : BOOL
103 : ite(102, 90, 91) : BV:8
104 : ite(101, 87, 103) : BV:8
105 : ite(100, 84, 104) : BV:8
106 : ite(99, 81, 105) : BV:8
107 : ite(98, 79, 106) : BV:8
108 : bvadd(77, 75) : BV:32
109 : eq(108, 77) : BOOL
110 : eq(108, 74) : BOOL
111 : eq(108, 82) : BOOL
112 : eq(108, 85) : BOOL
113 : eq(108, 88) : BOOL
114 : ite(113, 90, 91) : BV:8
115 : ite(112, 87, 114) : BV:8
116 : ite(111, 84, 115) : BV:8
117 : ite(110, 81, 116) : BV:8
118 : ite(109, 79, 117) : BV:8
119 : bvadd(88, 75) : BV:32
120 : eq(119, 77) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 82) : BOOL
123 : eq(119, 85) : BOOL
124 : eq(119, 88) : BOOL
125 : ite(124, 90, 91) : BV:8
126 : ite(123, 87, 125) : BV:8
127 : ite(122, 84, 126) : BV:8
128 : ite(121, 81, 127) : BV:8
129 : ite(120, 79, 128) : BV:8
130 : bvconcat(96, 107, 118, 129) : BV:32
131 : bvadd(71, 73, 130) : BV:32
132 : eq(131, 77) : BOOL
133 : eq(131, 74) : BOOL
134 : eq(131, 82) : BOOL
135 : eq(131, 85) : BOOL
136 : eq(131, 88) : BOOL
137 : ite(136, 90, 91) : BV:8
138 : ite(135, 87, 137) : BV:8
139 : ite(134, 84, 138) : BV:8
140 : ite(133, 81, 139) : BV:8
141 : ite(132, 79, 140) : BV:8
142 : bvadd(24, 73, 130) : BV:32
143 : eq(142, 77) : BOOL
144 : eq(142, 74) : BOOL
145 : eq(142, 82) : BOOL
146 : eq(142, 85) : BOOL
147 : eq(142, 88) : BOOL
148 : ite(147, 90, 91) : BV:8
149 : ite(146, 87, 148) : BV:8
150 : ite(145, 84, 149) : BV:8
151 : ite(144, 81, 150) : BV:8
152 : ite(143, 79, 151) : BV:8
153 : bvadd(7, 73, 130) : BV:32
154 : eq(153, 77) : BOOL
155 : eq(153, 74) : BOOL
156 : eq(153, 82) : BOOL
157 : eq(153, 85) : BOOL
158 : eq(153, 88) : BOOL
159 : ite(158, 90, 91) : BV:8
160 : ite(157, 87, 159) : BV:8
161 : ite(156, 84, 160) : BV:8
162 : ite(155, 81, 161) : BV:8
163 : ite(154, 79, 162) : BV:8
164 : bvadd(73, 130) : BV:32
165 : eq(164, 77) : BOOL
166 : eq(164, 74) : BOOL
167 : eq(164, 82) : BOOL
168 : eq(164, 85) : BOOL
169 : eq(164, 88) : BOOL
170 : ite(169, 90, 91) : BV:8
171 : ite(168, 87, 170) : BV:8
172 : ite(167, 84, 171) : BV:8
173 : ite(166, 81, 172) : BV:8
174 : ite(165, 79, 173) : BV:8
175 : bvconcat(141, 152, 163, 174) : BV:32
176 : ite(51, 7, 175) : BV:32
177 : ite(70, 175, 176) : BV:32
178 : ite(51, 7, 177) : BV:32
179 : lambda(48, 178) : FUNCTION[BV:32 -> BV:32]
180 : map(47, 179) : MAP[BV:32 -> BV:32]
181 : lambda(16, 180) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
182 : map(15, 181) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
183 : sym_const(182) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 268435455 ] -> 0, [ 268435456; 268435456 ] -> 52, [ 268435457; 268435457 ] -> 45, [ 268435458; 268435458 ] -> 19, [ 268435459; 268435459 ] -> 140, [ 268435460; 2350066995 ] -> 0, [ 2350066996; 2350066996 ] -> 1, [ 2350066997; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 193170191 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 193170192; 193170195 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 193170196; 2325564675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2325564676; 2325564679 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2325564680; 2349534751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2349534752; 2349534755 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2349534756; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2349534752 { 0x8c0b0e20 -1945432544 -1.8636856e153 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2325564676 { 0x8a9d4d04 -1969402620 -1.22891283e150 } : BV:32
=input.dst.llvm-%n
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 193170192 { 0xb838b10 +1.2768135e152 } : BV:32
=input.dst.llvm-%x
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda45899Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda45900Var : BV:32
17 : Lambda45901Var : BV:32
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 7) : BOOL
23 : and(21, 22) : BOOL
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvule(24, 16) : BOOL
26 : bvule(16, 9) : BOOL
27 : and(25, 26) : BOOL
28 : ite(27, 24, 24) : BV:32
29 : ite(23, 7, 28) : BV:32
30 : ite(20, 2, 29) : BV:32
31 : eq(30, 2) : BOOL
32 : bvule(2, 17) : BOOL
33 : bvule(17, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvule(7, 17) : BOOL
36 : bvule(17, 7) : BOOL
37 : and(35, 36) : BOOL
38 : bvule(24, 17) : BOOL
39 : bvule(17, 9) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 24, 24) : BV:32
42 : ite(37, 7, 41) : BV:32
43 : ite(34, 2, 42) : BV:32
44 : eq(43, 2) : BOOL
45 : and(31, 44) : BOOL
46 : ite(45, 6, 12) : BOOL
47 : lambda(17, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda45902Var : BV:32
49 : eq(16, 2) : BOOL
50 : eq(48, 2) : BOOL
51 : and(49, 50) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 48) : BV:32
55 : 268435459 { 0x10000003 +1.35e161 } : BV:32
56 : bvmul(53, 16) : BV:32
57 : bvadd(55, 56) : BV:32
58 : 268435457 { 0x10000001 +1.11e161 } : BV:32
59 : eq(57, 58) : BOOL
60 : 45 { 0x2d } : BV:8
61 : eq(57, 55) : BOOL
62 : 140 { 0x8c -116 } : BV:8
63 : 268435458 { 0x10000002 +1.23e161 } : BV:32
64 : eq(57, 63) : BOOL
65 : 19 { 0x13 } : BV:8
66 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
67 : eq(57, 66) : BOOL
68 : 1 { 0x1 } : BV:8
69 : 268435456 { 0x10000000 +1.0e161 } : BV:32
70 : eq(57, 69) : BOOL
71 : 52 { 0x34 } : BV:8
72 : 0 { 0x0 } : BV:8
73 : ite(70, 71, 72) : BV:8
74 : ite(67, 68, 73) : BV:8
75 : ite(64, 65, 74) : BV:8
76 : ite(61, 62, 75) : BV:8
77 : ite(59, 60, 76) : BV:8
78 : bvadd(63, 56) : BV:32
79 : eq(78, 58) : BOOL
80 : eq(78, 55) : BOOL
81 : eq(78, 63) : BOOL
82 : eq(78, 66) : BOOL
83 : eq(78, 69) : BOOL
84 : ite(83, 71, 72) : BV:8
85 : ite(82, 68, 84) : BV:8
86 : ite(81, 65, 85) : BV:8
87 : ite(80, 62, 86) : BV:8
88 : ite(79, 60, 87) : BV:8
89 : bvadd(58, 56) : BV:32
90 : eq(89, 58) : BOOL
91 : eq(89, 55) : BOOL
92 : eq(89, 63) : BOOL
93 : eq(89, 66) : BOOL
94 : eq(89, 69) : BOOL
95 : ite(94, 71, 72) : BV:8
96 : ite(93, 68, 95) : BV:8
97 : ite(92, 65, 96) : BV:8
98 : ite(91, 62, 97) : BV:8
99 : ite(90, 60, 98) : BV:8
100 : bvadd(69, 56) : BV:32
101 : eq(100, 58) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 63) : BOOL
104 : eq(100, 66) : BOOL
105 : eq(100, 69) : BOOL
106 : ite(105, 71, 72) : BV:8
107 : ite(104, 68, 106) : BV:8
108 : ite(103, 65, 107) : BV:8
109 : ite(102, 62, 108) : BV:8
110 : ite(101, 60, 109) : BV:8
111 : bvconcat(77, 88, 99, 110) : BV:32
112 : bvadd(52, 54, 111) : BV:32
113 : eq(112, 58) : BOOL
114 : eq(112, 55) : BOOL
115 : eq(112, 63) : BOOL
116 : eq(112, 66) : BOOL
117 : eq(112, 69) : BOOL
118 : ite(117, 71, 72) : BV:8
119 : ite(116, 68, 118) : BV:8
120 : ite(115, 65, 119) : BV:8
121 : ite(114, 62, 120) : BV:8
122 : ite(113, 60, 121) : BV:8
123 : bvadd(24, 54, 111) : BV:32
124 : eq(123, 58) : BOOL
125 : eq(123, 55) : BOOL
126 : eq(123, 63) : BOOL
127 : eq(123, 66) : BOOL
128 : eq(123, 69) : BOOL
129 : ite(128, 71, 72) : BV:8
130 : ite(127, 68, 129) : BV:8
131 : ite(126, 65, 130) : BV:8
132 : ite(125, 62, 131) : BV:8
133 : ite(124, 60, 132) : BV:8
134 : bvadd(7, 54, 111) : BV:32
135 : eq(134, 58) : BOOL
136 : eq(134, 55) : BOOL
137 : eq(134, 63) : BOOL
138 : eq(134, 66) : BOOL
139 : eq(134, 69) : BOOL
140 : ite(139, 71, 72) : BV:8
141 : ite(138, 68, 140) : BV:8
142 : ite(137, 65, 141) : BV:8
143 : ite(136, 62, 142) : BV:8
144 : ite(135, 60, 143) : BV:8
145 : bvadd(54, 111) : BV:32
146 : eq(145, 58) : BOOL
147 : eq(145, 55) : BOOL
148 : eq(145, 63) : BOOL
149 : eq(145, 66) : BOOL
150 : eq(145, 69) : BOOL
151 : ite(150, 71, 72) : BV:8
152 : ite(149, 68, 151) : BV:8
153 : ite(148, 65, 152) : BV:8
154 : ite(147, 62, 153) : BV:8
155 : ite(146, 60, 154) : BV:8
156 : bvconcat(122, 133, 144, 155) : BV:32
157 : ite(51, 7, 156) : BV:32
158 : lambda(48, 157) : FUNCTION[BV:32 -> BV:32]
159 : map(47, 158) : MAP[BV:32 -> BV:32]
160 : lambda(16, 159) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
161 : map(15, 160) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
162 : sym_const(161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 22221090 { 0x1531122 +1.64896035e131 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 784088128 { 0x2ebc3c40 +1.47058868e222 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2325564676 { 0x8a9d4d04 -1969402620 -1.22891283e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2325564679 { 0x8a9d4d07 -1969402617 -1.22891318e150 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 193170192 { 0xb838b10 +1.2768135e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 193170195 { 0xb838b13 +1.2768170e152 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2349534752 { 0x8c0b0e20 -1945432544 -1.8636856e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2349534755 { 0x8c0b0e23 -1945432541 -1.8636891e153 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda45771Var : BV:32
2 : Lambda45772Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(3, 1) : BOOL
9 : bvule(1, 3) : BOOL
10 : and(8, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : bvule(7, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : 0 { 0x0 } : BOOL
17 : ite(15, 16, 16) : BOOL
18 : ite(10, 11, 17) : BOOL
19 : bvule(1, 7) : BOOL
20 : and(12, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvule(21, 1) : BOOL
23 : and(22, 14) : BOOL
24 : ite(23, 21, 21) : BV:32
25 : ite(20, 7, 24) : BV:32
26 : ite(10, 3, 25) : BV:32
27 : eq(26, 3) : BOOL
28 : bvule(3, 2) : BOOL
29 : bvule(2, 3) : BOOL
30 : and(28, 29) : BOOL
31 : bvule(7, 2) : BOOL
32 : bvule(2, 7) : BOOL
33 : and(31, 32) : BOOL
34 : bvule(21, 2) : BOOL
35 : bvule(2, 13) : BOOL
36 : and(34, 35) : BOOL
37 : ite(36, 21, 21) : BV:32
38 : ite(33, 7, 37) : BV:32
39 : ite(30, 3, 38) : BV:32
40 : eq(39, 3) : BOOL
41 : and(27, 40) : BOOL
42 : ite(41, 11, 16) : BOOL
43 : and(18, 42) : BOOL
44 : 3 { 0x3 +1.35e129 } : BV:32
45 : 4 { 0x4 +1.47e129 } : BV:32
46 : bvmul(45, 2) : BV:32
47 : 268435459 { 0x10000003 +1.35e161 } : BV:32
48 : bvmul(45, 1) : BV:32
49 : bvadd(47, 48) : BV:32
50 : 268435457 { 0x10000001 +1.11e161 } : BV:32
51 : eq(49, 50) : BOOL
52 : 45 { 0x2d } : BV:8
53 : eq(49, 47) : BOOL
54 : 140 { 0x8c -116 } : BV:8
55 : 268435458 { 0x10000002 +1.23e161 } : BV:32
56 : eq(49, 55) : BOOL
57 : 19 { 0x13 } : BV:8
58 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
59 : eq(49, 58) : BOOL
60 : 1 { 0x1 } : BV:8
61 : 268435456 { 0x10000000 +1.0e161 } : BV:32
62 : eq(49, 61) : BOOL
63 : 52 { 0x34 } : BV:8
64 : 0 { 0x0 } : BV:8
65 : ite(62, 63, 64) : BV:8
66 : ite(59, 60, 65) : BV:8
67 : ite(56, 57, 66) : BV:8
68 : ite(53, 54, 67) : BV:8
69 : ite(51, 52, 68) : BV:8
70 : bvadd(55, 48) : BV:32
71 : eq(70, 50) : BOOL
72 : eq(70, 47) : BOOL
73 : eq(70, 55) : BOOL
74 : eq(70, 58) : BOOL
75 : eq(70, 61) : BOOL
76 : ite(75, 63, 64) : BV:8
77 : ite(74, 60, 76) : BV:8
78 : ite(73, 57, 77) : BV:8
79 : ite(72, 54, 78) : BV:8
80 : ite(71, 52, 79) : BV:8
81 : bvadd(50, 48) : BV:32
82 : eq(81, 50) : BOOL
83 : eq(81, 47) : BOOL
84 : eq(81, 55) : BOOL
85 : eq(81, 58) : BOOL
86 : eq(81, 61) : BOOL
87 : ite(86, 63, 64) : BV:8
88 : ite(85, 60, 87) : BV:8
89 : ite(84, 57, 88) : BV:8
90 : ite(83, 54, 89) : BV:8
91 : ite(82, 52, 90) : BV:8
92 : bvadd(61, 48) : BV:32
93 : eq(92, 50) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 55) : BOOL
96 : eq(92, 58) : BOOL
97 : eq(92, 61) : BOOL
98 : ite(97, 63, 64) : BV:8
99 : ite(96, 60, 98) : BV:8
100 : ite(95, 57, 99) : BV:8
101 : ite(94, 54, 100) : BV:8
102 : ite(93, 52, 101) : BV:8
103 : bvconcat(69, 80, 91, 102) : BV:32
104 : bvadd(44, 46, 103) : BV:32
105 : eq(104, 50) : BOOL
106 : eq(104, 47) : BOOL
107 : eq(104, 55) : BOOL
108 : eq(104, 58) : BOOL
109 : eq(104, 61) : BOOL
110 : ite(109, 63, 64) : BV:8
111 : ite(108, 60, 110) : BV:8
112 : ite(107, 57, 111) : BV:8
113 : ite(106, 54, 112) : BV:8
114 : ite(105, 52, 113) : BV:8
115 : bvadd(21, 46, 103) : BV:32
116 : eq(115, 50) : BOOL
117 : eq(115, 47) : BOOL
118 : eq(115, 55) : BOOL
119 : eq(115, 58) : BOOL
120 : eq(115, 61) : BOOL
121 : ite(120, 63, 64) : BV:8
122 : ite(119, 60, 121) : BV:8
123 : ite(118, 57, 122) : BV:8
124 : ite(117, 54, 123) : BV:8
125 : ite(116, 52, 124) : BV:8
126 : bvadd(7, 46, 103) : BV:32
127 : eq(126, 50) : BOOL
128 : eq(126, 47) : BOOL
129 : eq(126, 55) : BOOL
130 : eq(126, 58) : BOOL
131 : eq(126, 61) : BOOL
132 : ite(131, 63, 64) : BV:8
133 : ite(130, 60, 132) : BV:8
134 : ite(129, 57, 133) : BV:8
135 : ite(128, 54, 134) : BV:8
136 : ite(127, 52, 135) : BV:8
137 : bvadd(46, 103) : BV:32
138 : eq(137, 50) : BOOL
139 : eq(137, 47) : BOOL
140 : eq(137, 55) : BOOL
141 : eq(137, 58) : BOOL
142 : eq(137, 61) : BOOL
143 : ite(142, 63, 64) : BV:8
144 : ite(141, 60, 143) : BV:8
145 : ite(140, 57, 144) : BV:8
146 : ite(139, 54, 145) : BV:8
147 : ite(138, 52, 146) : BV:8
148 : bvconcat(114, 125, 136, 147) : BV:32
149 : ite(6, 7, 148) : BV:32
150 : ite(43, 148, 149) : BV:32
151 : ite(6, 7, 150) : BV:32
152 : lambda(1, 2, 151) : FUNCTION[BV:32,BV:32 -> BV:32]
153 : sym_const(152) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda45776Var : BV:32
2 : Lambda45777Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 2) : BOOL
24 : bvule(2, 7) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(11, 2) : BOOL
27 : bvule(2, 13) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 11, 11) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 3, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 2, 36) : FUNCTION[BV:32,BV:32 -> BOOL]
38 : sym_const(37) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda45785Var : BV:32
2 : Lambda45786Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : bvule(1, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : bvule(1, 7) : BOOL
10 : and(8, 9) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(1, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 11, 11) : BV:32
17 : ite(10, 7, 16) : BV:32
18 : ite(6, 3, 17) : BV:32
19 : eq(18, 3) : BOOL
20 : bvule(3, 2) : BOOL
21 : bvule(2, 3) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(7, 2) : BOOL
24 : bvule(2, 7) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(11, 2) : BOOL
27 : bvule(2, 13) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 11, 11) : BV:32
30 : ite(25, 7, 29) : BV:32
31 : ite(22, 3, 30) : BV:32
32 : eq(31, 3) : BOOL
33 : and(19, 32) : BOOL
34 : 1 { 0x1 } : BOOL
35 : 0 { 0x0 } : BOOL
36 : ite(33, 34, 35) : BOOL
37 : lambda(1, 2, 36) : FUNCTION[BV:32,BV:32 -> BOOL]
38 : sym_const(37) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda45781Var : BV:32
2 : Lambda45782Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 2) : BV:32
11 : 268435459 { 0x10000003 +1.35e161 } : BV:32
12 : bvmul(9, 1) : BV:32
13 : bvadd(11, 12) : BV:32
14 : 268435457 { 0x10000001 +1.11e161 } : BV:32
15 : eq(13, 14) : BOOL
16 : 45 { 0x2d } : BV:8
17 : eq(13, 11) : BOOL
18 : 140 { 0x8c -116 } : BV:8
19 : 268435458 { 0x10000002 +1.23e161 } : BV:32
20 : eq(13, 19) : BOOL
21 : 19 { 0x13 } : BV:8
22 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
23 : eq(13, 22) : BOOL
24 : 1 { 0x1 } : BV:8
25 : 268435456 { 0x10000000 +1.0e161 } : BV:32
26 : eq(13, 25) : BOOL
27 : 52 { 0x34 } : BV:8
28 : 0 { 0x0 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(23, 24, 29) : BV:8
31 : ite(20, 21, 30) : BV:8
32 : ite(17, 18, 31) : BV:8
33 : ite(15, 16, 32) : BV:8
34 : bvadd(19, 12) : BV:32
35 : eq(34, 14) : BOOL
36 : eq(34, 11) : BOOL
37 : eq(34, 19) : BOOL
38 : eq(34, 22) : BOOL
39 : eq(34, 25) : BOOL
40 : ite(39, 27, 28) : BV:8
41 : ite(38, 24, 40) : BV:8
42 : ite(37, 21, 41) : BV:8
43 : ite(36, 18, 42) : BV:8
44 : ite(35, 16, 43) : BV:8
45 : bvadd(14, 12) : BV:32
46 : eq(45, 14) : BOOL
47 : eq(45, 11) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 22) : BOOL
50 : eq(45, 25) : BOOL
51 : ite(50, 27, 28) : BV:8
52 : ite(49, 24, 51) : BV:8
53 : ite(48, 21, 52) : BV:8
54 : ite(47, 18, 53) : BV:8
55 : ite(46, 16, 54) : BV:8
56 : bvadd(25, 12) : BV:32
57 : eq(56, 14) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 19) : BOOL
60 : eq(56, 22) : BOOL
61 : eq(56, 25) : BOOL
62 : ite(61, 27, 28) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 21, 63) : BV:8
65 : ite(58, 18, 64) : BV:8
66 : ite(57, 16, 65) : BV:8
67 : bvconcat(33, 44, 55, 66) : BV:32
68 : bvadd(8, 10, 67) : BV:32
69 : eq(68, 14) : BOOL
70 : eq(68, 11) : BOOL
71 : eq(68, 19) : BOOL
72 : eq(68, 22) : BOOL
73 : eq(68, 25) : BOOL
74 : ite(73, 27, 28) : BV:8
75 : ite(72, 24, 74) : BV:8
76 : ite(71, 21, 75) : BV:8
77 : ite(70, 18, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : 2 { 0x2 +1.23e129 } : BV:32
80 : bvadd(79, 10, 67) : BV:32
81 : eq(80, 14) : BOOL
82 : eq(80, 11) : BOOL
83 : eq(80, 19) : BOOL
84 : eq(80, 22) : BOOL
85 : eq(80, 25) : BOOL
86 : ite(85, 27, 28) : BV:8
87 : ite(84, 24, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 18, 88) : BV:8
90 : ite(81, 16, 89) : BV:8
91 : bvadd(7, 10, 67) : BV:32
92 : eq(91, 14) : BOOL
93 : eq(91, 11) : BOOL
94 : eq(91, 19) : BOOL
95 : eq(91, 22) : BOOL
96 : eq(91, 25) : BOOL
97 : ite(96, 27, 28) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 21, 98) : BV:8
100 : ite(93, 18, 99) : BV:8
101 : ite(92, 16, 100) : BV:8
102 : bvadd(10, 67) : BV:32
103 : eq(102, 14) : BOOL
104 : eq(102, 11) : BOOL
105 : eq(102, 19) : BOOL
106 : eq(102, 22) : BOOL
107 : eq(102, 25) : BOOL
108 : ite(107, 27, 28) : BV:8
109 : ite(106, 24, 108) : BV:8
110 : ite(105, 21, 109) : BV:8
111 : ite(104, 18, 110) : BV:8
112 : ite(103, 16, 111) : BV:8
113 : bvconcat(78, 90, 101, 112) : BV:32
114 : ite(6, 7, 113) : BV:32
115 : lambda(1, 2, 114) : FUNCTION[BV:32,BV:32 -> BV:32]
116 : sym_const(115) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda45792Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 268435457 { 0x10000001 +1.11e161 } : BV:32
11 : eq(9, 10) : BOOL
12 : 45 { 0x2d } : BV:8
13 : 268435459 { 0x10000003 +1.35e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 140 { 0x8c -116 } : BV:8
16 : 268435458 { 0x10000002 +1.23e161 } : BV:32
17 : eq(9, 16) : BOOL
18 : 19 { 0x13 } : BV:8
19 : eq(9, 8) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 268435456 { 0x10000000 +1.0e161 } : BV:32
22 : eq(9, 21) : BOOL
23 : 52 { 0x34 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 8) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 8) : BOOL
47 : eq(42, 21) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 20, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 8) : BOOL
58 : eq(53, 21) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda45796Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 268435457 { 0x10000001 +1.11e161 } : BV:32
11 : eq(9, 10) : BOOL
12 : 45 { 0x2d } : BV:8
13 : 268435459 { 0x10000003 +1.35e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 140 { 0x8c -116 } : BV:8
16 : 268435458 { 0x10000002 +1.23e161 } : BV:32
17 : eq(9, 16) : BOOL
18 : 19 { 0x13 } : BV:8
19 : eq(9, 8) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 268435456 { 0x10000000 +1.0e161 } : BV:32
22 : eq(9, 21) : BOOL
23 : 52 { 0x34 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 8) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 8) : BOOL
47 : eq(42, 21) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 20, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 8) : BOOL
58 : eq(53, 21) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda45797Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : 2350066996 { 0x8c132d34 -1944900300 -1.14981698e153 } : BV:32
9 : bvadd(5, 7, 8) : BV:32
10 : 268435457 { 0x10000001 +1.11e161 } : BV:32
11 : eq(9, 10) : BOOL
12 : 45 { 0x2d } : BV:8
13 : 268435459 { 0x10000003 +1.35e161 } : BV:32
14 : eq(9, 13) : BOOL
15 : 140 { 0x8c -116 } : BV:8
16 : 268435458 { 0x10000002 +1.23e161 } : BV:32
17 : eq(9, 16) : BOOL
18 : 19 { 0x13 } : BV:8
19 : eq(9, 8) : BOOL
20 : 1 { 0x1 } : BV:8
21 : 268435456 { 0x10000000 +1.0e161 } : BV:32
22 : eq(9, 21) : BOOL
23 : 52 { 0x34 } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(17, 18, 26) : BV:8
28 : ite(14, 15, 27) : BV:8
29 : ite(11, 12, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 7, 8) : BV:32
32 : eq(31, 10) : BOOL
33 : eq(31, 13) : BOOL
34 : eq(31, 16) : BOOL
35 : eq(31, 8) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 18, 38) : BV:8
40 : ite(33, 15, 39) : BV:8
41 : ite(32, 12, 40) : BV:8
42 : bvadd(4, 7, 8) : BV:32
43 : eq(42, 10) : BOOL
44 : eq(42, 13) : BOOL
45 : eq(42, 16) : BOOL
46 : eq(42, 8) : BOOL
47 : eq(42, 21) : BOOL
48 : ite(47, 23, 24) : BV:8
49 : ite(46, 20, 48) : BV:8
50 : ite(45, 18, 49) : BV:8
51 : ite(44, 15, 50) : BV:8
52 : ite(43, 12, 51) : BV:8
53 : bvadd(7, 8) : BV:32
54 : eq(53, 10) : BOOL
55 : eq(53, 13) : BOOL
56 : eq(53, 16) : BOOL
57 : eq(53, 8) : BOOL
58 : eq(53, 21) : BOOL
59 : ite(58, 23, 24) : BV:8
60 : ite(57, 20, 59) : BV:8
61 : ite(56, 18, 60) : BV:8
62 : ite(55, 15, 61) : BV:8
63 : ite(54, 12, 62) : BV:8
64 : bvconcat(29, 41, 52, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : lambda(1, 65) : FUNCTION[BV:32 -> BV:32]
67 : sym_const(66) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
562863970
=counter_example_end
=global nodece 58 num_edges_traversed 2
=global nodece 58 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 59
=global nodece 59 nodece z3.ce4845.num_edges_traversed1
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce4845 57c63659fdfde9eb24d2a2e17281e6e1
=input.spec-%var-x-1
1 : Lambda47441Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47442Var : BV:32
18 : Lambda47443Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8 { 0x8 +1.95e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 10 { 0xa +1.119e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47444Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
82 : eq(80, 81) : BOOL
83 : 27 { 0x1b } : BV:8
84 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
85 : eq(80, 84) : BOOL
86 : 90 { 0x5a } : BV:8
87 : eq(80, 78) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
90 : eq(80, 89) : BOOL
91 : 104 { 0x68 } : BV:8
92 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
93 : eq(80, 92) : BOOL
94 : 30 { 0x1e } : BV:8
95 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
96 : eq(80, 95) : BOOL
97 : 232 { 0xe8 -24 } : BV:8
98 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
99 : eq(80, 98) : BOOL
100 : 170 { 0xaa -86 } : BV:8
101 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
102 : eq(80, 101) : BOOL
103 : 238 { 0xee -18 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.dst.llvm-%add.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-1.L3%7%bbentry
1 : 3540193791 { 0xd30311ff -754773505 -1.2398669e39 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda47468Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47469Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
25 : eq(23, 24) : BOOL
26 : 27 { 0x1b } : BV:8
27 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
28 : eq(23, 27) : BOOL
29 : 90 { 0x5a } : BV:8
30 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
34 : eq(23, 33) : BOOL
35 : 104 { 0x68 } : BV:8
36 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
37 : eq(23, 36) : BOOL
38 : 30 { 0x1e } : BV:8
39 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
40 : eq(23, 39) : BOOL
41 : 232 { 0xe8 -24 } : BV:8
42 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
43 : eq(23, 42) : BOOL
44 : 170 { 0xaa -86 } : BV:8
45 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
46 : eq(23, 45) : BOOL
47 : 238 { 0xee -18 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 912504843 ] -> 0, [ 912504844; 912504844 ] -> 232, [ 912504845; 912504845 ] -> 238, [ 912504846; 912504846 ] -> 170, [ 912504847; 912504847 ] -> 253, [ 912504848; 2188378119 ] -> 0, [ 2188378120; 2188378120 ] -> 104, [ 2188378121; 2188378121 ] -> 30, [ 2188378122; 2188378122 ] -> 90, [ 2188378123; 2188378123 ] -> 27, [ 2188378124; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 497987419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 497987420; 497987423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 497987424; 1142202099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1142202100; 1142202103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1142202104; 3456675323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3456675324; 3456675327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3456675328; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1142202100 { 0x44149ef4 +1.16110086e9 } : BV:32
=input.dst.llvm-%m
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3456675324 { 0xce08adfc -838291972 -1.6780958e29 } : BV:32
=input.dst.llvm-%n
1 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 497987420 { 0x1daeaf5c +1.36472654e188 } : BV:32
=input.dst.llvm-%x
1 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 603107700 { 0x23f2b174 +1.89604043e200 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda47461Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47462Var : BV:32
18 : Lambda47463Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8 { 0x8 +1.95e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 10 { 0xa +1.119e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47464Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
63 : eq(61, 62) : BOOL
64 : 27 { 0x1b } : BV:8
65 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
66 : eq(61, 65) : BOOL
67 : 90 { 0x5a } : BV:8
68 : eq(61, 59) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
71 : eq(61, 70) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
74 : eq(61, 73) : BOOL
75 : 30 { 0x1e } : BV:8
76 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
77 : eq(61, 76) : BOOL
78 : 232 { 0xe8 -24 } : BV:8
79 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
80 : eq(61, 79) : BOOL
81 : 170 { 0xaa -86 } : BV:8
82 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
83 : eq(61, 82) : BOOL
84 : 238 { 0xee -18 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : unit : UNIT
3 : Lambda47450Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 1) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 9 { 0x9 +1.107e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda47451Var : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(19, 18) : BV:32
23 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
26 : eq(24, 25) : BOOL
27 : 27 { 0x1b } : BV:8
28 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
29 : eq(24, 28) : BOOL
30 : 90 { 0x5a } : BV:8
31 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
32 : eq(24, 31) : BOOL
33 : 253 { 0xfd -3 } : BV:8
34 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
35 : eq(24, 34) : BOOL
36 : 104 { 0x68 } : BV:8
37 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
38 : eq(24, 37) : BOOL
39 : 30 { 0x1e } : BV:8
40 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
41 : eq(24, 40) : BOOL
42 : 232 { 0xe8 -24 } : BV:8
43 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
44 : eq(24, 43) : BOOL
45 : 170 { 0xaa -86 } : BV:8
46 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
47 : eq(24, 46) : BOOL
48 : 238 { 0xee -18 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 4, 111) : BV:32
113 : lambda(18, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(17, 113) : MAP[BV:32 -> BV:32]
115 : sum(1, 2, 114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
116 : sym_const(115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3540193791 { 0xd30311ff -754773505 -1.2398669e39 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 1 { 0x1 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3540193792 { 0xd3031200 -754773504 -1.2398681e39 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : eq(2, 2) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(2, 2) : BV:32
22 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
25 : eq(23, 24) : BOOL
26 : 27 { 0x1b } : BV:8
27 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
28 : eq(23, 27) : BOOL
29 : 90 { 0x5a } : BV:8
30 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
34 : eq(23, 33) : BOOL
35 : 104 { 0x68 } : BV:8
36 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
37 : eq(23, 36) : BOOL
38 : 30 { 0x1e } : BV:8
39 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
40 : eq(23, 39) : BOOL
41 : 232 { 0xe8 -24 } : BV:8
42 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
43 : eq(23, 42) : BOOL
44 : 170 { 0xaa -86 } : BV:8
45 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
46 : eq(23, 45) : BOOL
47 : 238 { 0xee -18 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : bvadd(16, 21, 22) : BV:32
76 : eq(75, 24) : BOOL
77 : eq(75, 27) : BOOL
78 : eq(75, 30) : BOOL
79 : eq(75, 33) : BOOL
80 : eq(75, 36) : BOOL
81 : eq(75, 39) : BOOL
82 : eq(75, 42) : BOOL
83 : eq(75, 45) : BOOL
84 : ite(83, 47, 48) : BV:8
85 : ite(82, 44, 84) : BV:8
86 : ite(81, 41, 85) : BV:8
87 : ite(80, 38, 86) : BV:8
88 : ite(79, 35, 87) : BV:8
89 : ite(78, 32, 88) : BV:8
90 : ite(77, 29, 89) : BV:8
91 : ite(76, 26, 90) : BV:8
92 : bvadd(21, 22) : BV:32
93 : eq(92, 24) : BOOL
94 : eq(92, 27) : BOOL
95 : eq(92, 30) : BOOL
96 : eq(92, 33) : BOOL
97 : eq(92, 36) : BOOL
98 : eq(92, 39) : BOOL
99 : eq(92, 42) : BOOL
100 : eq(92, 45) : BOOL
101 : ite(100, 47, 48) : BV:8
102 : ite(99, 44, 101) : BV:8
103 : ite(98, 41, 102) : BV:8
104 : ite(97, 38, 103) : BV:8
105 : ite(96, 35, 104) : BV:8
106 : ite(95, 32, 105) : BV:8
107 : ite(94, 29, 106) : BV:8
108 : ite(93, 26, 107) : BV:8
109 : bvconcat(56, 74, 91, 108) : BV:32
110 : ite(19, 1, 109) : BV:32
111 : sum(17, 18, 110) : SUM[UNIT,BV:32]
112 : sym_const(111) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1275582150 { 0x4c07d6c6 +1.6124186e25 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda47473Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47474Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(18, 17) : BV:32
23 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
26 : eq(24, 25) : BOOL
27 : 27 { 0x1b } : BV:8
28 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
29 : eq(24, 28) : BOOL
30 : 90 { 0x5a } : BV:8
31 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
32 : eq(24, 31) : BOOL
33 : 253 { 0xfd -3 } : BV:8
34 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
35 : eq(24, 34) : BOOL
36 : 104 { 0x68 } : BV:8
37 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
38 : eq(24, 37) : BOOL
39 : 30 { 0x1e } : BV:8
40 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
41 : eq(24, 40) : BOOL
42 : 232 { 0xe8 -24 } : BV:8
43 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
44 : eq(24, 43) : BOOL
45 : 170 { 0xaa -86 } : BV:8
46 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
47 : eq(24, 46) : BOOL
48 : 238 { 0xee -18 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3540193791 { 0xd30311ff -754773505 -1.2398669e39 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 835884436 { 0x31d29594 +1.64518976e228 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%0.Lif.end%1%bbentry
1 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%1.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 1275873276 { 0x4c0c47fc +1.9594678e25 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
=input.dst.llvm-%30da477f4cf7b7cace245f3a7134e3.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 1275873276 { 0x4c0c47fc +1.9594678e25 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5b0468ce23c8140dd434a1b3d3856c.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 458890872 { 0x1b5a1e78 +1.70405483e183 } : BV:32
=input.dst.llvm-%arrayidx5.Lif.end%1%bbentry
1 : 458890872 { 0x1b5a1e78 +1.70405483e183 } : BV:32
=input.dst.llvm-%arrayidx.Lif.end%1%bbentry
1 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.then.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3456675324 { 0xce08adfc -838291972 -1.6780958e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3456675327 { 0xce08adff -838291969 -1.6780993e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 497987420 { 0x1daeaf5c +1.36472654e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 497987423 { 0x1daeaf5f +1.36472690e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1142202100 { 0x44149ef4 +1.16110086e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1142202103 { 0x44149ef7 +1.16110122e9 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda47333Var : BV:32
2 : Lambda47334Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 9 { 0x9 +1.107e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 10 { 0xa +1.119e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
55 : eq(53, 54) : BOOL
56 : 27 { 0x1b } : BV:8
57 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
58 : eq(53, 57) : BOOL
59 : 90 { 0x5a } : BV:8
60 : eq(53, 51) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
63 : eq(53, 62) : BOOL
64 : 104 { 0x68 } : BV:8
65 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
66 : eq(53, 65) : BOOL
67 : 30 { 0x1e } : BV:8
68 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
69 : eq(53, 68) : BOOL
70 : 232 { 0xe8 -24 } : BV:8
71 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
72 : eq(53, 71) : BOOL
73 : 170 { 0xaa -86 } : BV:8
74 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
75 : eq(53, 74) : BOOL
76 : 238 { 0xee -18 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda47338Var : BV:32
2 : Lambda47339Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8 { 0x8 +1.95e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 10 { 0xa +1.119e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3810660987 ] -> true, [ 3810660988; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3810660987 ] -> true, [ 3810660988; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda47347Var : BV:32
2 : Lambda47348Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8 { 0x8 +1.95e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 10 { 0xa +1.119e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda47343Var : BV:32
2 : Lambda47344Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
14 : eq(12, 13) : BOOL
15 : 27 { 0x1b } : BV:8
16 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
17 : eq(12, 16) : BOOL
18 : 90 { 0x5a } : BV:8
19 : eq(12, 10) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
22 : eq(12, 21) : BOOL
23 : 104 { 0x68 } : BV:8
24 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
25 : eq(12, 24) : BOOL
26 : 30 { 0x1e } : BV:8
27 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
28 : eq(12, 27) : BOOL
29 : 232 { 0xe8 -24 } : BV:8
30 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
31 : eq(12, 30) : BOOL
32 : 170 { 0xaa -86 } : BV:8
33 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
34 : eq(12, 33) : BOOL
35 : 238 { 0xee -18 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda47354Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
11 : eq(9, 10) : BOOL
12 : 27 { 0x1b } : BV:8
13 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
14 : eq(9, 13) : BOOL
15 : 90 { 0x5a } : BV:8
16 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
17 : eq(9, 16) : BOOL
18 : 253 { 0xfd -3 } : BV:8
19 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
20 : eq(9, 19) : BOOL
21 : 104 { 0x68 } : BV:8
22 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
23 : eq(9, 22) : BOOL
24 : 30 { 0x1e } : BV:8
25 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
26 : eq(9, 25) : BOOL
27 : 232 { 0xe8 -24 } : BV:8
28 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
29 : eq(9, 28) : BOOL
30 : 170 { 0xaa -86 } : BV:8
31 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
32 : eq(9, 31) : BOOL
33 : 238 { 0xee -18 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda47358Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
10 : eq(8, 9) : BOOL
11 : 27 { 0x1b } : BV:8
12 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
13 : eq(8, 12) : BOOL
14 : 90 { 0x5a } : BV:8
15 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
19 : eq(8, 18) : BOOL
20 : 104 { 0x68 } : BV:8
21 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
22 : eq(8, 21) : BOOL
23 : 30 { 0x1e } : BV:8
24 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
25 : eq(8, 24) : BOOL
26 : 232 { 0xe8 -24 } : BV:8
27 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
28 : eq(8, 27) : BOOL
29 : 170 { 0xaa -86 } : BV:8
30 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
31 : eq(8, 30) : BOOL
32 : 238 { 0xee -18 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda47359Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
10 : eq(8, 9) : BOOL
11 : 27 { 0x1b } : BV:8
12 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
13 : eq(8, 12) : BOOL
14 : 90 { 0x5a } : BV:8
15 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
19 : eq(8, 18) : BOOL
20 : 104 { 0x68 } : BV:8
21 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
22 : eq(8, 21) : BOOL
23 : 30 { 0x1e } : BV:8
24 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
25 : eq(8, 24) : BOOL
26 : 232 { 0xe8 -24 } : BV:8
27 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
28 : eq(8, 27) : BOOL
29 : 170 { 0xaa -86 } : BV:8
30 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
31 : eq(8, 30) : BOOL
32 : 238 { 0xee -18 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
2568090918
=counter_example_end
=global nodece 59 num_edges_traversed 1
=global nodece 59 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 60
=global nodece 60 nodece z3.ce4900.num_edges_traversed2
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(epsilon)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce4900 b4652f1bce6126daded79c25138a47
=input.spec-%var-x-1
1 : Lambda47441Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47442Var : BV:32
18 : Lambda47443Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8 { 0x8 +1.95e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 10 { 0xa +1.119e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47444Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
82 : eq(80, 81) : BOOL
83 : 27 { 0x1b } : BV:8
84 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
85 : eq(80, 84) : BOOL
86 : 90 { 0x5a } : BV:8
87 : eq(80, 78) : BOOL
88 : 253 { 0xfd -3 } : BV:8
89 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
90 : eq(80, 89) : BOOL
91 : 104 { 0x68 } : BV:8
92 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
93 : eq(80, 92) : BOOL
94 : 30 { 0x1e } : BV:8
95 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
96 : eq(80, 95) : BOOL
97 : 232 { 0xe8 -24 } : BV:8
98 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
99 : eq(80, 98) : BOOL
100 : 170 { 0xaa -86 } : BV:8
101 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
102 : eq(80, 101) : BOOL
103 : 238 { 0xee -18 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 3540193791 { 0xd30311ff -754773505 -1.2398669e39 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda47468Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47469Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
25 : eq(23, 24) : BOOL
26 : 27 { 0x1b } : BV:8
27 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
28 : eq(23, 27) : BOOL
29 : 90 { 0x5a } : BV:8
30 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
31 : eq(23, 30) : BOOL
32 : 253 { 0xfd -3 } : BV:8
33 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
34 : eq(23, 33) : BOOL
35 : 104 { 0x68 } : BV:8
36 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
37 : eq(23, 36) : BOOL
38 : 30 { 0x1e } : BV:8
39 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
40 : eq(23, 39) : BOOL
41 : 232 { 0xe8 -24 } : BV:8
42 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
43 : eq(23, 42) : BOOL
44 : 170 { 0xaa -86 } : BV:8
45 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
46 : eq(23, 45) : BOOL
47 : 238 { 0xee -18 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(19, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 912504843 ] -> 0, [ 912504844; 912504844 ] -> 232, [ 912504845; 912504845 ] -> 238, [ 912504846; 912504846 ] -> 170, [ 912504847; 912504847 ] -> 253, [ 912504848; 2188378119 ] -> 0, [ 2188378120; 2188378120 ] -> 104, [ 2188378121; 2188378121 ] -> 30, [ 2188378122; 2188378122 ] -> 90, [ 2188378123; 2188378123 ] -> 27, [ 2188378124; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 497987419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 497987420; 497987423 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 497987424; 1142202099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1142202100; 1142202103 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1142202104; 3456675323 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3456675324; 3456675327 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3456675328; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1142202100 { 0x44149ef4 +1.16110086e9 } : BV:32
=input.dst.llvm-%m
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3456675324 { 0xce08adfc -838291972 -1.6780958e29 } : BV:32
=input.dst.llvm-%n
1 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 497987420 { 0x1daeaf5c +1.36472654e188 } : BV:32
=input.dst.llvm-%x
1 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 603107700 { 0x23f2b174 +1.89604043e200 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda47461Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47462Var : BV:32
18 : Lambda47463Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 8 { 0x8 +1.95e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 9 { 0x9 +1.107e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 10 { 0xa +1.119e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda47464Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
63 : eq(61, 62) : BOOL
64 : 27 { 0x1b } : BV:8
65 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
66 : eq(61, 65) : BOOL
67 : 90 { 0x5a } : BV:8
68 : eq(61, 59) : BOOL
69 : 253 { 0xfd -3 } : BV:8
70 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
71 : eq(61, 70) : BOOL
72 : 104 { 0x68 } : BV:8
73 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
74 : eq(61, 73) : BOOL
75 : 30 { 0x1e } : BV:8
76 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
77 : eq(61, 76) : BOOL
78 : 232 { 0xe8 -24 } : BV:8
79 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
80 : eq(61, 79) : BOOL
81 : 170 { 0xaa -86 } : BV:8
82 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
83 : eq(61, 82) : BOOL
84 : 238 { 0xee -18 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : unit : UNIT
3 : Lambda47450Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : bvule(3, 1) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 9 { 0x9 +1.107e129 } : BV:32
10 : bvule(9, 3) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(3, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : lambda(3, 16) : FUNCTION[BV:32 -> BOOL]
18 : Lambda47451Var : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(19, 18) : BV:32
23 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
26 : eq(24, 25) : BOOL
27 : 27 { 0x1b } : BV:8
28 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
29 : eq(24, 28) : BOOL
30 : 90 { 0x5a } : BV:8
31 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
32 : eq(24, 31) : BOOL
33 : 253 { 0xfd -3 } : BV:8
34 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
35 : eq(24, 34) : BOOL
36 : 104 { 0x68 } : BV:8
37 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
38 : eq(24, 37) : BOOL
39 : 30 { 0x1e } : BV:8
40 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
41 : eq(24, 40) : BOOL
42 : 232 { 0xe8 -24 } : BV:8
43 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
44 : eq(24, 43) : BOOL
45 : 170 { 0xaa -86 } : BV:8
46 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
47 : eq(24, 46) : BOOL
48 : 238 { 0xee -18 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 4, 111) : BV:32
113 : lambda(18, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(17, 113) : MAP[BV:32 -> BV:32]
115 : sum(1, 2, 114) : SUM[UNIT,MAP[BV:32 -> BV:32]]
116 : sym_const(115) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 3540193791 { 0xd30311ff -754773505 -1.2398669e39 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 3540193792 { 0xd3031200 -754773504 -1.2398681e39 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1275582151 { 0x4c07d6c7 +1.6124198e25 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda47473Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda47474Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : bvmul(18, 17) : BV:32
23 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
24 : bvadd(21, 22, 23) : BV:32
25 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
26 : eq(24, 25) : BOOL
27 : 27 { 0x1b } : BV:8
28 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
29 : eq(24, 28) : BOOL
30 : 90 { 0x5a } : BV:8
31 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
32 : eq(24, 31) : BOOL
33 : 253 { 0xfd -3 } : BV:8
34 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
35 : eq(24, 34) : BOOL
36 : 104 { 0x68 } : BV:8
37 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
38 : eq(24, 37) : BOOL
39 : 30 { 0x1e } : BV:8
40 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
41 : eq(24, 40) : BOOL
42 : 232 { 0xe8 -24 } : BV:8
43 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
44 : eq(24, 43) : BOOL
45 : 170 { 0xaa -86 } : BV:8
46 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
47 : eq(24, 46) : BOOL
48 : 238 { 0xee -18 } : BV:8
49 : 0 { 0x0 } : BV:8
50 : ite(47, 48, 49) : BV:8
51 : ite(44, 45, 50) : BV:8
52 : ite(41, 42, 51) : BV:8
53 : ite(38, 39, 52) : BV:8
54 : ite(35, 36, 53) : BV:8
55 : ite(32, 33, 54) : BV:8
56 : ite(29, 30, 55) : BV:8
57 : ite(26, 27, 56) : BV:8
58 : 2 { 0x2 +1.23e129 } : BV:32
59 : bvadd(58, 22, 23) : BV:32
60 : eq(59, 25) : BOOL
61 : eq(59, 28) : BOOL
62 : eq(59, 31) : BOOL
63 : eq(59, 34) : BOOL
64 : eq(59, 37) : BOOL
65 : eq(59, 40) : BOOL
66 : eq(59, 43) : BOOL
67 : eq(59, 46) : BOOL
68 : ite(67, 48, 49) : BV:8
69 : ite(66, 45, 68) : BV:8
70 : ite(65, 42, 69) : BV:8
71 : ite(64, 39, 70) : BV:8
72 : ite(63, 36, 71) : BV:8
73 : ite(62, 33, 72) : BV:8
74 : ite(61, 30, 73) : BV:8
75 : ite(60, 27, 74) : BV:8
76 : 1 { 0x1 +1.11e129 } : BV:32
77 : bvadd(76, 22, 23) : BV:32
78 : eq(77, 25) : BOOL
79 : eq(77, 28) : BOOL
80 : eq(77, 31) : BOOL
81 : eq(77, 34) : BOOL
82 : eq(77, 37) : BOOL
83 : eq(77, 40) : BOOL
84 : eq(77, 43) : BOOL
85 : eq(77, 46) : BOOL
86 : ite(85, 48, 49) : BV:8
87 : ite(84, 45, 86) : BV:8
88 : ite(83, 42, 87) : BV:8
89 : ite(82, 39, 88) : BV:8
90 : ite(81, 36, 89) : BV:8
91 : ite(80, 33, 90) : BV:8
92 : ite(79, 30, 91) : BV:8
93 : ite(78, 27, 92) : BV:8
94 : bvadd(22, 23) : BV:32
95 : eq(94, 25) : BOOL
96 : eq(94, 28) : BOOL
97 : eq(94, 31) : BOOL
98 : eq(94, 34) : BOOL
99 : eq(94, 37) : BOOL
100 : eq(94, 40) : BOOL
101 : eq(94, 43) : BOOL
102 : eq(94, 46) : BOOL
103 : ite(102, 48, 49) : BV:8
104 : ite(101, 45, 103) : BV:8
105 : ite(100, 42, 104) : BV:8
106 : ite(99, 39, 105) : BV:8
107 : ite(98, 36, 106) : BV:8
108 : ite(97, 33, 107) : BV:8
109 : ite(96, 30, 108) : BV:8
110 : ite(95, 27, 109) : BV:8
111 : bvconcat(57, 75, 93, 110) : BV:32
112 : ite(20, 2, 111) : BV:32
113 : ite(19, 2, 112) : BV:32
114 : lambda(17, 113) : FUNCTION[BV:32 -> BV:32]
115 : map(16, 114) : MAP[BV:32 -> BV:32]
116 : sym_const(115) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 3540193791 { 0xd30311ff -754773505 -1.2398669e39 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 835884437 { 0x31d29595 +1.64518988e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3456675324 { 0xce08adfc -838291972 -1.6780958e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3456675327 { 0xce08adff -838291969 -1.6780993e29 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 497987420 { 0x1daeaf5c +1.36472654e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 497987423 { 0x1daeaf5f +1.36472690e188 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1142202100 { 0x44149ef4 +1.16110086e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1142202103 { 0x44149ef7 +1.16110122e9 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda47333Var : BV:32
2 : Lambda47334Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 8 { 0x8 +1.95e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 9 { 0x9 +1.107e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 10 { 0xa +1.119e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
55 : eq(53, 54) : BOOL
56 : 27 { 0x1b } : BV:8
57 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
58 : eq(53, 57) : BOOL
59 : 90 { 0x5a } : BV:8
60 : eq(53, 51) : BOOL
61 : 253 { 0xfd -3 } : BV:8
62 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
63 : eq(53, 62) : BOOL
64 : 104 { 0x68 } : BV:8
65 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
66 : eq(53, 65) : BOOL
67 : 30 { 0x1e } : BV:8
68 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
69 : eq(53, 68) : BOOL
70 : 232 { 0xe8 -24 } : BV:8
71 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
72 : eq(53, 71) : BOOL
73 : 170 { 0xaa -86 } : BV:8
74 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
75 : eq(53, 74) : BOOL
76 : 238 { 0xee -18 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda47338Var : BV:32
2 : Lambda47339Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8 { 0x8 +1.95e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 10 { 0xa +1.119e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 3810660987 ] -> true, [ 3810660988; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 3810660987 ] -> true, [ 3810660988; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda47347Var : BV:32
2 : Lambda47348Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 3810660987 { 0xe322127b -484306309 -1.26618897e71 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 3810660988 { 0xe322127c -484306308 -1.26618909e71 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 3810660989 { 0xe322127d -484306307 -1.26618921e71 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 8 { 0x8 +1.95e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 9 { 0x9 +1.107e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 10 { 0xa +1.119e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda47343Var : BV:32
2 : Lambda47344Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
14 : eq(12, 13) : BOOL
15 : 27 { 0x1b } : BV:8
16 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
17 : eq(12, 16) : BOOL
18 : 90 { 0x5a } : BV:8
19 : eq(12, 10) : BOOL
20 : 253 { 0xfd -3 } : BV:8
21 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
22 : eq(12, 21) : BOOL
23 : 104 { 0x68 } : BV:8
24 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
25 : eq(12, 24) : BOOL
26 : 30 { 0x1e } : BV:8
27 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
28 : eq(12, 27) : BOOL
29 : 232 { 0xe8 -24 } : BV:8
30 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
31 : eq(12, 30) : BOOL
32 : 170 { 0xaa -86 } : BV:8
33 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
34 : eq(12, 33) : BOOL
35 : 238 { 0xee -18 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda47354Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvmul(2, 1) : BV:32
8 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
9 : bvadd(6, 7, 8) : BV:32
10 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
11 : eq(9, 10) : BOOL
12 : 27 { 0x1b } : BV:8
13 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
14 : eq(9, 13) : BOOL
15 : 90 { 0x5a } : BV:8
16 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
17 : eq(9, 16) : BOOL
18 : 253 { 0xfd -3 } : BV:8
19 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
20 : eq(9, 19) : BOOL
21 : 104 { 0x68 } : BV:8
22 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
23 : eq(9, 22) : BOOL
24 : 30 { 0x1e } : BV:8
25 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
26 : eq(9, 25) : BOOL
27 : 232 { 0xe8 -24 } : BV:8
28 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
29 : eq(9, 28) : BOOL
30 : 170 { 0xaa -86 } : BV:8
31 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
32 : eq(9, 31) : BOOL
33 : 238 { 0xee -18 } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(20, 21, 38) : BV:8
40 : ite(17, 18, 39) : BV:8
41 : ite(14, 15, 40) : BV:8
42 : ite(11, 12, 41) : BV:8
43 : 2 { 0x2 +1.23e129 } : BV:32
44 : bvadd(43, 7, 8) : BV:32
45 : eq(44, 10) : BOOL
46 : eq(44, 13) : BOOL
47 : eq(44, 16) : BOOL
48 : eq(44, 19) : BOOL
49 : eq(44, 22) : BOOL
50 : eq(44, 25) : BOOL
51 : eq(44, 28) : BOOL
52 : eq(44, 31) : BOOL
53 : ite(52, 33, 34) : BV:8
54 : ite(51, 30, 53) : BV:8
55 : ite(50, 27, 54) : BV:8
56 : ite(49, 24, 55) : BV:8
57 : ite(48, 21, 56) : BV:8
58 : ite(47, 18, 57) : BV:8
59 : ite(46, 15, 58) : BV:8
60 : ite(45, 12, 59) : BV:8
61 : 1 { 0x1 +1.11e129 } : BV:32
62 : bvadd(61, 7, 8) : BV:32
63 : eq(62, 10) : BOOL
64 : eq(62, 13) : BOOL
65 : eq(62, 16) : BOOL
66 : eq(62, 19) : BOOL
67 : eq(62, 22) : BOOL
68 : eq(62, 25) : BOOL
69 : eq(62, 28) : BOOL
70 : eq(62, 31) : BOOL
71 : ite(70, 33, 34) : BV:8
72 : ite(69, 30, 71) : BV:8
73 : ite(68, 27, 72) : BV:8
74 : ite(67, 24, 73) : BV:8
75 : ite(66, 21, 74) : BV:8
76 : ite(65, 18, 75) : BV:8
77 : ite(64, 15, 76) : BV:8
78 : ite(63, 12, 77) : BV:8
79 : bvadd(7, 8) : BV:32
80 : eq(79, 10) : BOOL
81 : eq(79, 13) : BOOL
82 : eq(79, 16) : BOOL
83 : eq(79, 19) : BOOL
84 : eq(79, 22) : BOOL
85 : eq(79, 25) : BOOL
86 : eq(79, 28) : BOOL
87 : eq(79, 31) : BOOL
88 : ite(87, 33, 34) : BV:8
89 : ite(86, 30, 88) : BV:8
90 : ite(85, 27, 89) : BV:8
91 : ite(84, 24, 90) : BV:8
92 : ite(83, 21, 91) : BV:8
93 : ite(82, 18, 92) : BV:8
94 : ite(81, 15, 93) : BV:8
95 : ite(80, 12, 94) : BV:8
96 : bvconcat(42, 60, 78, 95) : BV:32
97 : ite(5, 4, 96) : BV:32
98 : ite(3, 4, 97) : BV:32
99 : lambda(1, 98) : FUNCTION[BV:32 -> BV:32]
100 : sym_const(99) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda47358Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
10 : eq(8, 9) : BOOL
11 : 27 { 0x1b } : BV:8
12 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
13 : eq(8, 12) : BOOL
14 : 90 { 0x5a } : BV:8
15 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
19 : eq(8, 18) : BOOL
20 : 104 { 0x68 } : BV:8
21 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
22 : eq(8, 21) : BOOL
23 : 30 { 0x1e } : BV:8
24 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
25 : eq(8, 24) : BOOL
26 : 232 { 0xe8 -24 } : BV:8
27 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
28 : eq(8, 27) : BOOL
29 : 170 { 0xaa -86 } : BV:8
30 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
31 : eq(8, 30) : BOOL
32 : 238 { 0xee -18 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda47359Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 458890856 { 0x1b5a1e68 +1.70405292e183 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 2188378123 { 0x8270000b -2106589173 -1.87500131e133 } : BV:32
10 : eq(8, 9) : BOOL
11 : 27 { 0x1b } : BV:8
12 : 2188378122 { 0x8270000a -2106589174 -1.87500119e133 } : BV:32
13 : eq(8, 12) : BOOL
14 : 90 { 0x5a } : BV:8
15 : 912504847 { 0x3663b80f +1.77905452e237 } : BV:32
16 : eq(8, 15) : BOOL
17 : 253 { 0xfd -3 } : BV:8
18 : 2188378120 { 0x82700008 -2106589176 -1.87500095e133 } : BV:32
19 : eq(8, 18) : BOOL
20 : 104 { 0x68 } : BV:8
21 : 2188378121 { 0x82700009 -2106589175 -1.87500107e133 } : BV:32
22 : eq(8, 21) : BOOL
23 : 30 { 0x1e } : BV:8
24 : 912504844 { 0x3663b80c +1.77905416e237 } : BV:32
25 : eq(8, 24) : BOOL
26 : 232 { 0xe8 -24 } : BV:8
27 : 912504846 { 0x3663b80e +1.77905440e237 } : BV:32
28 : eq(8, 27) : BOOL
29 : 170 { 0xaa -86 } : BV:8
30 : 912504845 { 0x3663b80d +1.77905428e237 } : BV:32
31 : eq(8, 30) : BOOL
32 : 238 { 0xee -18 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 4, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
2568090918
=counter_example_end
=global nodece 60 num_edges_traversed 2
=global nodece 60 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce4943.num_edges_traversed1
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce4943 4863f66a968f264ec953469d807a90
=input.spec-%var-x-1
1 : Lambda49022Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49023Var : BV:32
18 : Lambda49024Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda49025Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 134217731 { 0x8000003 +1.35e145 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
82 : eq(80, 81) : BOOL
83 : 194 { 0xc2 -62 } : BV:8
84 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
85 : eq(80, 84) : BOOL
86 : 85 { 0x55 } : BV:8
87 : eq(80, 78) : BOOL
88 : 126 { 0x7e } : BV:8
89 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
90 : eq(80, 89) : BOOL
91 : 56 { 0x38 } : BV:8
92 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
93 : eq(80, 92) : BOOL
94 : 184 { 0xb8 -72 } : BV:8
95 : 134217728 { 0x8000000 +1.0e145 } : BV:32
96 : eq(80, 95) : BOOL
97 : 216 { 0xd8 -40 } : BV:8
98 : 134217730 { 0x8000002 +1.23e145 } : BV:32
99 : eq(80, 98) : BOOL
100 : 151 { 0x97 -105 } : BV:8
101 : 134217729 { 0x8000001 +1.11e145 } : BV:32
102 : eq(80, 101) : BOOL
103 : 93 { 0x5d } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 83886079 { 0x4ffffff +1.99999988e138 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda49049Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49050Var : BV:32
18 : 83886080 { 0x5000000 +1.0e139 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
28 : eq(26, 27) : BOOL
29 : 194 { 0xc2 -62 } : BV:8
30 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
31 : eq(26, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 134217731 { 0x8000003 +1.35e145 } : BV:32
34 : eq(26, 33) : BOOL
35 : 126 { 0x7e } : BV:8
36 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
37 : eq(26, 36) : BOOL
38 : 56 { 0x38 } : BV:8
39 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
40 : eq(26, 39) : BOOL
41 : 184 { 0xb8 -72 } : BV:8
42 : 134217728 { 0x8000000 +1.0e145 } : BV:32
43 : eq(26, 42) : BOOL
44 : 216 { 0xd8 -40 } : BV:8
45 : 134217730 { 0x8000002 +1.23e145 } : BV:32
46 : eq(26, 45) : BOOL
47 : 151 { 0x97 -105 } : BV:8
48 : 134217729 { 0x8000001 +1.11e145 } : BV:32
49 : eq(26, 48) : BOOL
50 : 93 { 0x5d } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 134217727 ] -> 0, [ 134217728; 134217728 ] -> 216, [ 134217729; 134217729 ] -> 93, [ 134217730; 134217730 ] -> 151, [ 134217731; 134217731 ] -> 126, [ 134217732; 469762043 ] -> 0, [ 469762044; 469762044 ] -> 56, [ 469762045; 469762045 ] -> 184, [ 469762046; 469762046 ] -> 85, [ 469762047; 469762047 ] -> 194, [ 469762048; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 174594607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 174594608; 174594611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 174594612; 506091307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 506091308; 506091311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 506091312; 2401933611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2401933612; 2401933615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2401933616; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2401933612 { 0x8f2a992c -1893033684 -1.33279943e159 } : BV:32
=input.dst.llvm-%m
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 174594608 { 0xa681a30 +1.81329917e149 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 506091308 { 0x1e2a572c +1.33078527e189 } : BV:32
=input.dst.llvm-%x
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1468392016 { 0x5785e250 +1.4596900e48 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda49042Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49043Var : BV:32
18 : Lambda49044Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda49045Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 134217731 { 0x8000003 +1.35e145 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
63 : eq(61, 62) : BOOL
64 : 194 { 0xc2 -62 } : BV:8
65 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
66 : eq(61, 65) : BOOL
67 : 85 { 0x55 } : BV:8
68 : eq(61, 59) : BOOL
69 : 126 { 0x7e } : BV:8
70 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
71 : eq(61, 70) : BOOL
72 : 56 { 0x38 } : BV:8
73 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
74 : eq(61, 73) : BOOL
75 : 184 { 0xb8 -72 } : BV:8
76 : 134217728 { 0x8000000 +1.0e145 } : BV:32
77 : eq(61, 76) : BOOL
78 : 216 { 0xd8 -40 } : BV:8
79 : 134217730 { 0x8000002 +1.23e145 } : BV:32
80 : eq(61, 79) : BOOL
81 : 151 { 0x97 -105 } : BV:8
82 : 134217729 { 0x8000001 +1.11e145 } : BV:32
83 : eq(61, 82) : BOOL
84 : 93 { 0x5d } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : Lambda49031Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda49032Var : BV:32
20 : 83886080 { 0x5000000 +1.0e139 } : BV:32
21 : eq(19, 20) : BOOL
22 : 536870912 { 0x20000000 +1.0e193 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
31 : eq(29, 30) : BOOL
32 : 194 { 0xc2 -62 } : BV:8
33 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
34 : eq(29, 33) : BOOL
35 : 85 { 0x55 } : BV:8
36 : 134217731 { 0x8000003 +1.35e145 } : BV:32
37 : eq(29, 36) : BOOL
38 : 126 { 0x7e } : BV:8
39 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
40 : eq(29, 39) : BOOL
41 : 56 { 0x38 } : BV:8
42 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
43 : eq(29, 42) : BOOL
44 : 184 { 0xb8 -72 } : BV:8
45 : 134217728 { 0x8000000 +1.0e145 } : BV:32
46 : eq(29, 45) : BOOL
47 : 216 { 0xd8 -40 } : BV:8
48 : 134217730 { 0x8000002 +1.23e145 } : BV:32
49 : eq(29, 48) : BOOL
50 : 151 { 0x97 -105 } : BV:8
51 : 134217729 { 0x8000001 +1.11e145 } : BV:32
52 : eq(29, 51) : BOOL
53 : 93 { 0x5d } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(40, 41, 58) : BV:8
60 : ite(37, 38, 59) : BV:8
61 : ite(34, 35, 60) : BV:8
62 : ite(31, 32, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 27, 28) : BV:32
65 : eq(64, 30) : BOOL
66 : eq(64, 33) : BOOL
67 : eq(64, 36) : BOOL
68 : eq(64, 39) : BOOL
69 : eq(64, 42) : BOOL
70 : eq(64, 45) : BOOL
71 : eq(64, 48) : BOOL
72 : eq(64, 51) : BOOL
73 : ite(72, 53, 54) : BV:8
74 : ite(71, 50, 73) : BV:8
75 : ite(70, 47, 74) : BV:8
76 : ite(69, 44, 75) : BV:8
77 : ite(68, 41, 76) : BV:8
78 : ite(67, 38, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 32, 79) : BV:8
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : bvadd(81, 27, 28) : BV:32
83 : eq(82, 30) : BOOL
84 : eq(82, 33) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 39) : BOOL
87 : eq(82, 42) : BOOL
88 : eq(82, 45) : BOOL
89 : eq(82, 48) : BOOL
90 : eq(82, 51) : BOOL
91 : ite(90, 53, 54) : BV:8
92 : ite(89, 50, 91) : BV:8
93 : ite(88, 47, 92) : BV:8
94 : ite(87, 44, 93) : BV:8
95 : ite(86, 41, 94) : BV:8
96 : ite(85, 38, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : bvadd(27, 28) : BV:32
100 : eq(99, 30) : BOOL
101 : eq(99, 33) : BOOL
102 : eq(99, 36) : BOOL
103 : eq(99, 39) : BOOL
104 : eq(99, 42) : BOOL
105 : eq(99, 45) : BOOL
106 : eq(99, 48) : BOOL
107 : eq(99, 51) : BOOL
108 : ite(107, 53, 54) : BV:8
109 : ite(106, 50, 108) : BV:8
110 : ite(105, 47, 109) : BV:8
111 : ite(104, 44, 110) : BV:8
112 : ite(103, 41, 111) : BV:8
113 : ite(102, 38, 112) : BV:8
114 : ite(101, 35, 113) : BV:8
115 : ite(100, 32, 114) : BV:8
116 : bvconcat(62, 80, 98, 115) : BV:32
117 : ite(24, 4, 116) : BV:32
118 : ite(23, 4, 117) : BV:32
119 : ite(21, 4, 118) : BV:32
120 : lambda(19, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(18, 120) : MAP[BV:32 -> BV:32]
122 : sum(1, 2, 121) : SUM[UNIT,MAP[BV:32 -> BV:32]]
123 : sym_const(122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 83886079 { 0x4ffffff +1.99999988e138 } : BV:32
=input.spec-%tmpvar-3.L3%27%d
1 : 0 { 0x0 } : BOOL
=input.spec-%tmpvar-2.L3%27%d
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 83886080 { 0x5000000 +1.0e139 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 536870912 { 0x20000000 +1.0e193 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : 83886080 { 0x5000000 +1.0e139 } : BV:32
20 : eq(2, 19) : BOOL
21 : eq(2, 2) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 2) : BV:32
25 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
28 : eq(26, 27) : BOOL
29 : 194 { 0xc2 -62 } : BV:8
30 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
31 : eq(26, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 134217731 { 0x8000003 +1.35e145 } : BV:32
34 : eq(26, 33) : BOOL
35 : 126 { 0x7e } : BV:8
36 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
37 : eq(26, 36) : BOOL
38 : 56 { 0x38 } : BV:8
39 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
40 : eq(26, 39) : BOOL
41 : 184 { 0xb8 -72 } : BV:8
42 : 134217728 { 0x8000000 +1.0e145 } : BV:32
43 : eq(26, 42) : BOOL
44 : 216 { 0xd8 -40 } : BV:8
45 : 134217730 { 0x8000002 +1.23e145 } : BV:32
46 : eq(26, 45) : BOOL
47 : 151 { 0x97 -105 } : BV:8
48 : 134217729 { 0x8000001 +1.11e145 } : BV:32
49 : eq(26, 48) : BOOL
50 : 93 { 0x5d } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : bvadd(16, 24, 25) : BV:32
79 : eq(78, 27) : BOOL
80 : eq(78, 30) : BOOL
81 : eq(78, 33) : BOOL
82 : eq(78, 36) : BOOL
83 : eq(78, 39) : BOOL
84 : eq(78, 42) : BOOL
85 : eq(78, 45) : BOOL
86 : eq(78, 48) : BOOL
87 : ite(86, 50, 51) : BV:8
88 : ite(85, 47, 87) : BV:8
89 : ite(84, 44, 88) : BV:8
90 : ite(83, 41, 89) : BV:8
91 : ite(82, 38, 90) : BV:8
92 : ite(81, 35, 91) : BV:8
93 : ite(80, 32, 92) : BV:8
94 : ite(79, 29, 93) : BV:8
95 : bvadd(24, 25) : BV:32
96 : eq(95, 27) : BOOL
97 : eq(95, 30) : BOOL
98 : eq(95, 33) : BOOL
99 : eq(95, 36) : BOOL
100 : eq(95, 39) : BOOL
101 : eq(95, 42) : BOOL
102 : eq(95, 45) : BOOL
103 : eq(95, 48) : BOOL
104 : ite(103, 50, 51) : BV:8
105 : ite(102, 47, 104) : BV:8
106 : ite(101, 44, 105) : BV:8
107 : ite(100, 41, 106) : BV:8
108 : ite(99, 38, 107) : BV:8
109 : ite(98, 35, 108) : BV:8
110 : ite(97, 32, 109) : BV:8
111 : ite(96, 29, 110) : BV:8
112 : bvconcat(59, 77, 94, 111) : BV:32
113 : ite(21, 1, 112) : BV:32
114 : ite(20, 1, 113) : BV:32
115 : sum(17, 18, 114) : SUM[UNIT,BV:32]
116 : sym_const(115) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.spec-%var-x_ij-0.L3%27%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 657616909 { 0x2732700d +1.39404451e207 } : BV:32
=input.spec-%tmpvar-6.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda49054Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49055Var : BV:32
18 : 83886080 { 0x5000000 +1.0e139 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
29 : eq(27, 28) : BOOL
30 : 194 { 0xc2 -62 } : BV:8
31 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
32 : eq(27, 31) : BOOL
33 : 85 { 0x55 } : BV:8
34 : 134217731 { 0x8000003 +1.35e145 } : BV:32
35 : eq(27, 34) : BOOL
36 : 126 { 0x7e } : BV:8
37 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
38 : eq(27, 37) : BOOL
39 : 56 { 0x38 } : BV:8
40 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
41 : eq(27, 40) : BOOL
42 : 184 { 0xb8 -72 } : BV:8
43 : 134217728 { 0x8000000 +1.0e145 } : BV:32
44 : eq(27, 43) : BOOL
45 : 216 { 0xd8 -40 } : BV:8
46 : 134217730 { 0x8000002 +1.23e145 } : BV:32
47 : eq(27, 46) : BOOL
48 : 151 { 0x97 -105 } : BV:8
49 : 134217729 { 0x8000001 +1.11e145 } : BV:32
50 : eq(27, 49) : BOOL
51 : 93 { 0x5d } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(29, 30, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 36, 75) : BV:8
77 : ite(64, 33, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 36, 93) : BV:8
95 : ite(82, 33, 94) : BV:8
96 : ite(81, 30, 95) : BV:8
97 : bvadd(25, 26) : BV:32
98 : eq(97, 28) : BOOL
99 : eq(97, 31) : BOOL
100 : eq(97, 34) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 36, 110) : BV:8
112 : ite(99, 33, 111) : BV:8
113 : ite(98, 30, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(22, 2, 114) : BV:32
116 : ite(21, 2, 115) : BV:32
117 : ite(19, 2, 116) : BV:32
118 : lambda(17, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(16, 118) : MAP[BV:32 -> BV:32]
120 : sym_const(119) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L3%32%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 83886079 { 0x4ffffff +1.99999988e138 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1815875358 { 0x6c3c0f1e +1.46921133e89 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%cmp4.Lfor.body3%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret.2.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 536870913 { 0x20000001 +1.11e193 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.inc.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%2.Lif.end%1%bbentry
1 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
=input.dst.llvm-%3.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx6.Lif.end%1%bbentry
1 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 1112913976 { 0x4255b838 +1.66968441e5 } : BV:32
=input.dst.llvm-%cca3914b274b2a90fe9bc037578f89ba.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%ret.2.phi.tmpvar.if.else.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%sub.Lif.end%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arrayidx7.Lif.end%1%bbentry
1 : 1112913976 { 0x4255b838 +1.66968441e5 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.1.total_offset.Lif.end%1%bbentry
1 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.gepoffset.2.total_offset.Lif.end%1%bbentry
1 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
=input.dst.llvm-%b8e94af2891c838f1b6ef3d67dfa604d.intermediate.gepoffset.1.offset.Lif.end%1%bbentry
1 : 335544316 { 0x13fffffc +1.99999952e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 174594608 { 0xa681a30 +1.81329917e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 174594611 { 0xa681a33 +1.81329953e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 506091308 { 0x1e2a572c +1.33078527e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 506091311 { 0x1e2a572f +1.33078563e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2401933612 { 0x8f2a992c -1893033684 -1.33279943e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2401933615 { 0x8f2a992f -1893033681 -1.33279979e159 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda48914Var : BV:32
2 : Lambda48915Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 134217731 { 0x8000003 +1.35e145 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
55 : eq(53, 54) : BOOL
56 : 194 { 0xc2 -62 } : BV:8
57 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
58 : eq(53, 57) : BOOL
59 : 85 { 0x55 } : BV:8
60 : eq(53, 51) : BOOL
61 : 126 { 0x7e } : BV:8
62 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
63 : eq(53, 62) : BOOL
64 : 56 { 0x38 } : BV:8
65 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
66 : eq(53, 65) : BOOL
67 : 184 { 0xb8 -72 } : BV:8
68 : 134217728 { 0x8000000 +1.0e145 } : BV:32
69 : eq(53, 68) : BOOL
70 : 216 { 0xd8 -40 } : BV:8
71 : 134217730 { 0x8000002 +1.23e145 } : BV:32
72 : eq(53, 71) : BOOL
73 : 151 { 0x97 -105 } : BV:8
74 : 134217729 { 0x8000001 +1.11e145 } : BV:32
75 : eq(53, 74) : BOOL
76 : 93 { 0x5d } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda48919Var : BV:32
2 : Lambda48920Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda48928Var : BV:32
2 : Lambda48929Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda48924Var : BV:32
2 : Lambda48925Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 134217731 { 0x8000003 +1.35e145 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
14 : eq(12, 13) : BOOL
15 : 194 { 0xc2 -62 } : BV:8
16 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
17 : eq(12, 16) : BOOL
18 : 85 { 0x55 } : BV:8
19 : eq(12, 10) : BOOL
20 : 126 { 0x7e } : BV:8
21 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
22 : eq(12, 21) : BOOL
23 : 56 { 0x38 } : BV:8
24 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
25 : eq(12, 24) : BOOL
26 : 184 { 0xb8 -72 } : BV:8
27 : 134217728 { 0x8000000 +1.0e145 } : BV:32
28 : eq(12, 27) : BOOL
29 : 216 { 0xd8 -40 } : BV:8
30 : 134217730 { 0x8000002 +1.23e145 } : BV:32
31 : eq(12, 30) : BOOL
32 : 151 { 0x97 -105 } : BV:8
33 : 134217729 { 0x8000001 +1.11e145 } : BV:32
34 : eq(12, 33) : BOOL
35 : 93 { 0x5d } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 2147483651 ] -> true, [ 2147483652; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda48935Var : BV:32
2 : 83886080 { 0x5000000 +1.0e139 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
14 : eq(12, 13) : BOOL
15 : 194 { 0xc2 -62 } : BV:8
16 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
17 : eq(12, 16) : BOOL
18 : 85 { 0x55 } : BV:8
19 : 134217731 { 0x8000003 +1.35e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 126 { 0x7e } : BV:8
22 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
23 : eq(12, 22) : BOOL
24 : 56 { 0x38 } : BV:8
25 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
26 : eq(12, 25) : BOOL
27 : 184 { 0xb8 -72 } : BV:8
28 : 134217728 { 0x8000000 +1.0e145 } : BV:32
29 : eq(12, 28) : BOOL
30 : 216 { 0xd8 -40 } : BV:8
31 : 134217730 { 0x8000002 +1.23e145 } : BV:32
32 : eq(12, 31) : BOOL
33 : 151 { 0x97 -105 } : BV:8
34 : 134217729 { 0x8000001 +1.11e145 } : BV:32
35 : eq(12, 34) : BOOL
36 : 93 { 0x5d } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 2147483651 ] -> true, [ 2147483652; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda48939Var : BV:32
2 : 83886080 { 0x5000000 +1.0e139 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
13 : eq(11, 12) : BOOL
14 : 194 { 0xc2 -62 } : BV:8
15 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
16 : eq(11, 15) : BOOL
17 : 85 { 0x55 } : BV:8
18 : 134217731 { 0x8000003 +1.35e145 } : BV:32
19 : eq(11, 18) : BOOL
20 : 126 { 0x7e } : BV:8
21 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
22 : eq(11, 21) : BOOL
23 : 56 { 0x38 } : BV:8
24 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
25 : eq(11, 24) : BOOL
26 : 184 { 0xb8 -72 } : BV:8
27 : 134217728 { 0x8000000 +1.0e145 } : BV:32
28 : eq(11, 27) : BOOL
29 : 216 { 0xd8 -40 } : BV:8
30 : 134217730 { 0x8000002 +1.23e145 } : BV:32
31 : eq(11, 30) : BOOL
32 : 151 { 0x97 -105 } : BV:8
33 : 134217729 { 0x8000001 +1.11e145 } : BV:32
34 : eq(11, 33) : BOOL
35 : 93 { 0x5d } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda48940Var : BV:32
2 : 83886080 { 0x5000000 +1.0e139 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
14 : eq(12, 13) : BOOL
15 : 194 { 0xc2 -62 } : BV:8
16 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
17 : eq(12, 16) : BOOL
18 : 85 { 0x55 } : BV:8
19 : 134217731 { 0x8000003 +1.35e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 126 { 0x7e } : BV:8
22 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
23 : eq(12, 22) : BOOL
24 : 56 { 0x38 } : BV:8
25 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
26 : eq(12, 25) : BOOL
27 : 184 { 0xb8 -72 } : BV:8
28 : 134217728 { 0x8000000 +1.0e145 } : BV:32
29 : eq(12, 28) : BOOL
30 : 216 { 0xd8 -40 } : BV:8
31 : 134217730 { 0x8000002 +1.23e145 } : BV:32
32 : eq(12, 31) : BOOL
33 : 151 { 0x97 -105 } : BV:8
34 : 134217729 { 0x8000001 +1.11e145 } : BV:32
35 : eq(12, 34) : BOOL
36 : 93 { 0x5d } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 2147483651 ] -> true, [ 2147483652; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
2897962191
=counter_example_end
=global nodece 61 num_edges_traversed 1
=global nodece 61 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 62
=global nodece 62 nodece z3.ce4998.num_edges_traversed2
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(epsilon)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce4998 1d444c7039a3b7eb119bb5ed482cabb9
=input.spec-%var-x-1
1 : Lambda49022Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49023Var : BV:32
18 : Lambda49024Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda49025Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 134217731 { 0x8000003 +1.35e145 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
82 : eq(80, 81) : BOOL
83 : 194 { 0xc2 -62 } : BV:8
84 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
85 : eq(80, 84) : BOOL
86 : 85 { 0x55 } : BV:8
87 : eq(80, 78) : BOOL
88 : 126 { 0x7e } : BV:8
89 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
90 : eq(80, 89) : BOOL
91 : 56 { 0x38 } : BV:8
92 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
93 : eq(80, 92) : BOOL
94 : 184 { 0xb8 -72 } : BV:8
95 : 134217728 { 0x8000000 +1.0e145 } : BV:32
96 : eq(80, 95) : BOOL
97 : 216 { 0xd8 -40 } : BV:8
98 : 134217730 { 0x8000002 +1.23e145 } : BV:32
99 : eq(80, 98) : BOOL
100 : 151 { 0x97 -105 } : BV:8
101 : 134217729 { 0x8000001 +1.11e145 } : BV:32
102 : eq(80, 101) : BOOL
103 : 93 { 0x5d } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 83886079 { 0x4ffffff +1.99999988e138 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda49049Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49050Var : BV:32
18 : 83886080 { 0x5000000 +1.0e139 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : 3 { 0x3 +1.35e129 } : BV:32
23 : 4 { 0x4 +1.47e129 } : BV:32
24 : bvmul(23, 17) : BV:32
25 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
26 : bvadd(22, 24, 25) : BV:32
27 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
28 : eq(26, 27) : BOOL
29 : 194 { 0xc2 -62 } : BV:8
30 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
31 : eq(26, 30) : BOOL
32 : 85 { 0x55 } : BV:8
33 : 134217731 { 0x8000003 +1.35e145 } : BV:32
34 : eq(26, 33) : BOOL
35 : 126 { 0x7e } : BV:8
36 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
37 : eq(26, 36) : BOOL
38 : 56 { 0x38 } : BV:8
39 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
40 : eq(26, 39) : BOOL
41 : 184 { 0xb8 -72 } : BV:8
42 : 134217728 { 0x8000000 +1.0e145 } : BV:32
43 : eq(26, 42) : BOOL
44 : 216 { 0xd8 -40 } : BV:8
45 : 134217730 { 0x8000002 +1.23e145 } : BV:32
46 : eq(26, 45) : BOOL
47 : 151 { 0x97 -105 } : BV:8
48 : 134217729 { 0x8000001 +1.11e145 } : BV:32
49 : eq(26, 48) : BOOL
50 : 93 { 0x5d } : BV:8
51 : 0 { 0x0 } : BV:8
52 : ite(49, 50, 51) : BV:8
53 : ite(46, 47, 52) : BV:8
54 : ite(43, 44, 53) : BV:8
55 : ite(40, 41, 54) : BV:8
56 : ite(37, 38, 55) : BV:8
57 : ite(34, 35, 56) : BV:8
58 : ite(31, 32, 57) : BV:8
59 : ite(28, 29, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 24, 25) : BV:32
62 : eq(61, 27) : BOOL
63 : eq(61, 30) : BOOL
64 : eq(61, 33) : BOOL
65 : eq(61, 36) : BOOL
66 : eq(61, 39) : BOOL
67 : eq(61, 42) : BOOL
68 : eq(61, 45) : BOOL
69 : eq(61, 48) : BOOL
70 : ite(69, 50, 51) : BV:8
71 : ite(68, 47, 70) : BV:8
72 : ite(67, 44, 71) : BV:8
73 : ite(66, 41, 72) : BV:8
74 : ite(65, 38, 73) : BV:8
75 : ite(64, 35, 74) : BV:8
76 : ite(63, 32, 75) : BV:8
77 : ite(62, 29, 76) : BV:8
78 : 1 { 0x1 +1.11e129 } : BV:32
79 : bvadd(78, 24, 25) : BV:32
80 : eq(79, 27) : BOOL
81 : eq(79, 30) : BOOL
82 : eq(79, 33) : BOOL
83 : eq(79, 36) : BOOL
84 : eq(79, 39) : BOOL
85 : eq(79, 42) : BOOL
86 : eq(79, 45) : BOOL
87 : eq(79, 48) : BOOL
88 : ite(87, 50, 51) : BV:8
89 : ite(86, 47, 88) : BV:8
90 : ite(85, 44, 89) : BV:8
91 : ite(84, 41, 90) : BV:8
92 : ite(83, 38, 91) : BV:8
93 : ite(82, 35, 92) : BV:8
94 : ite(81, 32, 93) : BV:8
95 : ite(80, 29, 94) : BV:8
96 : bvadd(24, 25) : BV:32
97 : eq(96, 27) : BOOL
98 : eq(96, 30) : BOOL
99 : eq(96, 33) : BOOL
100 : eq(96, 36) : BOOL
101 : eq(96, 39) : BOOL
102 : eq(96, 42) : BOOL
103 : eq(96, 45) : BOOL
104 : eq(96, 48) : BOOL
105 : ite(104, 50, 51) : BV:8
106 : ite(103, 47, 105) : BV:8
107 : ite(102, 44, 106) : BV:8
108 : ite(101, 41, 107) : BV:8
109 : ite(100, 38, 108) : BV:8
110 : ite(99, 35, 109) : BV:8
111 : ite(98, 32, 110) : BV:8
112 : ite(97, 29, 111) : BV:8
113 : bvconcat(59, 77, 95, 112) : BV:32
114 : ite(21, 2, 113) : BV:32
115 : ite(19, 2, 114) : BV:32
116 : lambda(17, 115) : FUNCTION[BV:32 -> BV:32]
117 : map(16, 116) : MAP[BV:32 -> BV:32]
118 : sym_const(117) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 134217727 ] -> 0, [ 134217728; 134217728 ] -> 216, [ 134217729; 134217729 ] -> 93, [ 134217730; 134217730 ] -> 151, [ 134217731; 134217731 ] -> 126, [ 134217732; 469762043 ] -> 0, [ 469762044; 469762044 ] -> 56, [ 469762045; 469762045 ] -> 184, [ 469762046; 469762046 ] -> 85, [ 469762047; 469762047 ] -> 194, [ 469762048; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 174594607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 174594608; 174594611 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 174594612; 506091307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 506091308; 506091311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 506091312; 2401933611 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2401933612; 2401933615 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2401933616; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2401933612 { 0x8f2a992c -1893033684 -1.33279943e159 } : BV:32
=input.dst.llvm-%m
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 174594608 { 0xa681a30 +1.81329917e149 } : BV:32
=input.dst.llvm-%n
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 506091308 { 0x1e2a572c +1.33078527e189 } : BV:32
=input.dst.llvm-%x
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 1468392016 { 0x5785e250 +1.4596900e48 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda49042Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49043Var : BV:32
18 : Lambda49044Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 536870913 { 0x20000001 +1.11e193 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda49045Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 134217731 { 0x8000003 +1.35e145 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
63 : eq(61, 62) : BOOL
64 : 194 { 0xc2 -62 } : BV:8
65 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
66 : eq(61, 65) : BOOL
67 : 85 { 0x55 } : BV:8
68 : eq(61, 59) : BOOL
69 : 126 { 0x7e } : BV:8
70 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
71 : eq(61, 70) : BOOL
72 : 56 { 0x38 } : BV:8
73 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
74 : eq(61, 73) : BOOL
75 : 184 { 0xb8 -72 } : BV:8
76 : 134217728 { 0x8000000 +1.0e145 } : BV:32
77 : eq(61, 76) : BOOL
78 : 216 { 0xd8 -40 } : BV:8
79 : 134217730 { 0x8000002 +1.23e145 } : BV:32
80 : eq(61, 79) : BOOL
81 : 151 { 0x97 -105 } : BV:8
82 : 134217729 { 0x8000001 +1.11e145 } : BV:32
83 : eq(61, 82) : BOOL
84 : 93 { 0x5d } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : Lambda49031Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda49032Var : BV:32
20 : 83886080 { 0x5000000 +1.0e139 } : BV:32
21 : eq(19, 20) : BOOL
22 : 536870912 { 0x20000000 +1.0e193 } : BV:32
23 : eq(19, 22) : BOOL
24 : eq(19, 4) : BOOL
25 : 3 { 0x3 +1.35e129 } : BV:32
26 : 4 { 0x4 +1.47e129 } : BV:32
27 : bvmul(26, 19) : BV:32
28 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
29 : bvadd(25, 27, 28) : BV:32
30 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
31 : eq(29, 30) : BOOL
32 : 194 { 0xc2 -62 } : BV:8
33 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
34 : eq(29, 33) : BOOL
35 : 85 { 0x55 } : BV:8
36 : 134217731 { 0x8000003 +1.35e145 } : BV:32
37 : eq(29, 36) : BOOL
38 : 126 { 0x7e } : BV:8
39 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
40 : eq(29, 39) : BOOL
41 : 56 { 0x38 } : BV:8
42 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
43 : eq(29, 42) : BOOL
44 : 184 { 0xb8 -72 } : BV:8
45 : 134217728 { 0x8000000 +1.0e145 } : BV:32
46 : eq(29, 45) : BOOL
47 : 216 { 0xd8 -40 } : BV:8
48 : 134217730 { 0x8000002 +1.23e145 } : BV:32
49 : eq(29, 48) : BOOL
50 : 151 { 0x97 -105 } : BV:8
51 : 134217729 { 0x8000001 +1.11e145 } : BV:32
52 : eq(29, 51) : BOOL
53 : 93 { 0x5d } : BV:8
54 : 0 { 0x0 } : BV:8
55 : ite(52, 53, 54) : BV:8
56 : ite(49, 50, 55) : BV:8
57 : ite(46, 47, 56) : BV:8
58 : ite(43, 44, 57) : BV:8
59 : ite(40, 41, 58) : BV:8
60 : ite(37, 38, 59) : BV:8
61 : ite(34, 35, 60) : BV:8
62 : ite(31, 32, 61) : BV:8
63 : 2 { 0x2 +1.23e129 } : BV:32
64 : bvadd(63, 27, 28) : BV:32
65 : eq(64, 30) : BOOL
66 : eq(64, 33) : BOOL
67 : eq(64, 36) : BOOL
68 : eq(64, 39) : BOOL
69 : eq(64, 42) : BOOL
70 : eq(64, 45) : BOOL
71 : eq(64, 48) : BOOL
72 : eq(64, 51) : BOOL
73 : ite(72, 53, 54) : BV:8
74 : ite(71, 50, 73) : BV:8
75 : ite(70, 47, 74) : BV:8
76 : ite(69, 44, 75) : BV:8
77 : ite(68, 41, 76) : BV:8
78 : ite(67, 38, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 32, 79) : BV:8
81 : 1 { 0x1 +1.11e129 } : BV:32
82 : bvadd(81, 27, 28) : BV:32
83 : eq(82, 30) : BOOL
84 : eq(82, 33) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 39) : BOOL
87 : eq(82, 42) : BOOL
88 : eq(82, 45) : BOOL
89 : eq(82, 48) : BOOL
90 : eq(82, 51) : BOOL
91 : ite(90, 53, 54) : BV:8
92 : ite(89, 50, 91) : BV:8
93 : ite(88, 47, 92) : BV:8
94 : ite(87, 44, 93) : BV:8
95 : ite(86, 41, 94) : BV:8
96 : ite(85, 38, 95) : BV:8
97 : ite(84, 35, 96) : BV:8
98 : ite(83, 32, 97) : BV:8
99 : bvadd(27, 28) : BV:32
100 : eq(99, 30) : BOOL
101 : eq(99, 33) : BOOL
102 : eq(99, 36) : BOOL
103 : eq(99, 39) : BOOL
104 : eq(99, 42) : BOOL
105 : eq(99, 45) : BOOL
106 : eq(99, 48) : BOOL
107 : eq(99, 51) : BOOL
108 : ite(107, 53, 54) : BV:8
109 : ite(106, 50, 108) : BV:8
110 : ite(105, 47, 109) : BV:8
111 : ite(104, 44, 110) : BV:8
112 : ite(103, 41, 111) : BV:8
113 : ite(102, 38, 112) : BV:8
114 : ite(101, 35, 113) : BV:8
115 : ite(100, 32, 114) : BV:8
116 : bvconcat(62, 80, 98, 115) : BV:32
117 : ite(24, 4, 116) : BV:32
118 : ite(23, 4, 117) : BV:32
119 : ite(21, 4, 118) : BV:32
120 : lambda(19, 119) : FUNCTION[BV:32 -> BV:32]
121 : map(18, 120) : MAP[BV:32 -> BV:32]
122 : sum(1, 2, 121) : SUM[UNIT,MAP[BV:32 -> BV:32]]
123 : sym_const(122) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.spec-%var-ret-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 83886079 { 0x4ffffff +1.99999988e138 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 83886080 { 0x5000000 +1.0e139 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 536870914 { 0x20000002 +1.23e193 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 657616910 { 0x2732700e +1.39404463e207 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda49054Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda49055Var : BV:32
18 : 83886080 { 0x5000000 +1.0e139 } : BV:32
19 : eq(17, 18) : BOOL
20 : 536870912 { 0x20000000 +1.0e193 } : BV:32
21 : eq(17, 20) : BOOL
22 : eq(17, 2) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 17) : BV:32
26 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
29 : eq(27, 28) : BOOL
30 : 194 { 0xc2 -62 } : BV:8
31 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
32 : eq(27, 31) : BOOL
33 : 85 { 0x55 } : BV:8
34 : 134217731 { 0x8000003 +1.35e145 } : BV:32
35 : eq(27, 34) : BOOL
36 : 126 { 0x7e } : BV:8
37 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
38 : eq(27, 37) : BOOL
39 : 56 { 0x38 } : BV:8
40 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
41 : eq(27, 40) : BOOL
42 : 184 { 0xb8 -72 } : BV:8
43 : 134217728 { 0x8000000 +1.0e145 } : BV:32
44 : eq(27, 43) : BOOL
45 : 216 { 0xd8 -40 } : BV:8
46 : 134217730 { 0x8000002 +1.23e145 } : BV:32
47 : eq(27, 46) : BOOL
48 : 151 { 0x97 -105 } : BV:8
49 : 134217729 { 0x8000001 +1.11e145 } : BV:32
50 : eq(27, 49) : BOOL
51 : 93 { 0x5d } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(29, 30, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 36, 75) : BV:8
77 : ite(64, 33, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 36, 93) : BV:8
95 : ite(82, 33, 94) : BV:8
96 : ite(81, 30, 95) : BV:8
97 : bvadd(25, 26) : BV:32
98 : eq(97, 28) : BOOL
99 : eq(97, 31) : BOOL
100 : eq(97, 34) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 36, 110) : BV:8
112 : ite(99, 33, 111) : BV:8
113 : ite(98, 30, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(22, 2, 114) : BV:32
116 : ite(21, 2, 115) : BV:32
117 : ite(19, 2, 116) : BV:32
118 : lambda(17, 117) : FUNCTION[BV:32 -> BV:32]
119 : map(16, 118) : MAP[BV:32 -> BV:32]
120 : sym_const(119) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 83886079 { 0x4ffffff +1.99999988e138 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 536870914 { 0x20000002 +1.23e193 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1815875359 { 0x6c3c0f1f +1.46921145e89 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 174594608 { 0xa681a30 +1.81329917e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 174594611 { 0xa681a33 +1.81329953e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 506091308 { 0x1e2a572c +1.33078527e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 506091311 { 0x1e2a572f +1.33078563e189 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2401933612 { 0x8f2a992c -1893033684 -1.33279943e159 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2401933615 { 0x8f2a992f -1893033681 -1.33279979e159 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda48914Var : BV:32
2 : Lambda48915Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 536870912 { 0x20000000 +1.0e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 536870913 { 0x20000001 +1.11e193 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 134217731 { 0x8000003 +1.35e145 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
55 : eq(53, 54) : BOOL
56 : 194 { 0xc2 -62 } : BV:8
57 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
58 : eq(53, 57) : BOOL
59 : 85 { 0x55 } : BV:8
60 : eq(53, 51) : BOOL
61 : 126 { 0x7e } : BV:8
62 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
63 : eq(53, 62) : BOOL
64 : 56 { 0x38 } : BV:8
65 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
66 : eq(53, 65) : BOOL
67 : 184 { 0xb8 -72 } : BV:8
68 : 134217728 { 0x8000000 +1.0e145 } : BV:32
69 : eq(53, 68) : BOOL
70 : 216 { 0xd8 -40 } : BV:8
71 : 134217730 { 0x8000002 +1.23e145 } : BV:32
72 : eq(53, 71) : BOOL
73 : 151 { 0x97 -105 } : BV:8
74 : 134217729 { 0x8000001 +1.11e145 } : BV:32
75 : eq(53, 74) : BOOL
76 : 93 { 0x5d } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda48919Var : BV:32
2 : Lambda48920Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda48928Var : BV:32
2 : Lambda48929Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 536870913 { 0x20000001 +1.11e193 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 2147483653 { 0x80000005 -2147483643 -1.59e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda48924Var : BV:32
2 : Lambda48925Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 134217731 { 0x8000003 +1.35e145 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
14 : eq(12, 13) : BOOL
15 : 194 { 0xc2 -62 } : BV:8
16 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
17 : eq(12, 16) : BOOL
18 : 85 { 0x55 } : BV:8
19 : eq(12, 10) : BOOL
20 : 126 { 0x7e } : BV:8
21 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
22 : eq(12, 21) : BOOL
23 : 56 { 0x38 } : BV:8
24 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
25 : eq(12, 24) : BOOL
26 : 184 { 0xb8 -72 } : BV:8
27 : 134217728 { 0x8000000 +1.0e145 } : BV:32
28 : eq(12, 27) : BOOL
29 : 216 { 0xd8 -40 } : BV:8
30 : 134217730 { 0x8000002 +1.23e145 } : BV:32
31 : eq(12, 30) : BOOL
32 : 151 { 0x97 -105 } : BV:8
33 : 134217729 { 0x8000001 +1.11e145 } : BV:32
34 : eq(12, 33) : BOOL
35 : 93 { 0x5d } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 2147483651 ] -> true, [ 2147483652; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda48935Var : BV:32
2 : 83886080 { 0x5000000 +1.0e139 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
14 : eq(12, 13) : BOOL
15 : 194 { 0xc2 -62 } : BV:8
16 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
17 : eq(12, 16) : BOOL
18 : 85 { 0x55 } : BV:8
19 : 134217731 { 0x8000003 +1.35e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 126 { 0x7e } : BV:8
22 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
23 : eq(12, 22) : BOOL
24 : 56 { 0x38 } : BV:8
25 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
26 : eq(12, 25) : BOOL
27 : 184 { 0xb8 -72 } : BV:8
28 : 134217728 { 0x8000000 +1.0e145 } : BV:32
29 : eq(12, 28) : BOOL
30 : 216 { 0xd8 -40 } : BV:8
31 : 134217730 { 0x8000002 +1.23e145 } : BV:32
32 : eq(12, 31) : BOOL
33 : 151 { 0x97 -105 } : BV:8
34 : 134217729 { 0x8000001 +1.11e145 } : BV:32
35 : eq(12, 34) : BOOL
36 : 93 { 0x5d } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 2147483651 ] -> true, [ 2147483652; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda48939Var : BV:32
2 : 83886080 { 0x5000000 +1.0e139 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 1) : BV:32
10 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
11 : bvadd(7, 9, 10) : BV:32
12 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
13 : eq(11, 12) : BOOL
14 : 194 { 0xc2 -62 } : BV:8
15 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
16 : eq(11, 15) : BOOL
17 : 85 { 0x55 } : BV:8
18 : 134217731 { 0x8000003 +1.35e145 } : BV:32
19 : eq(11, 18) : BOOL
20 : 126 { 0x7e } : BV:8
21 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
22 : eq(11, 21) : BOOL
23 : 56 { 0x38 } : BV:8
24 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
25 : eq(11, 24) : BOOL
26 : 184 { 0xb8 -72 } : BV:8
27 : 134217728 { 0x8000000 +1.0e145 } : BV:32
28 : eq(11, 27) : BOOL
29 : 216 { 0xd8 -40 } : BV:8
30 : 134217730 { 0x8000002 +1.23e145 } : BV:32
31 : eq(11, 30) : BOOL
32 : 151 { 0x97 -105 } : BV:8
33 : 134217729 { 0x8000001 +1.11e145 } : BV:32
34 : eq(11, 33) : BOOL
35 : 93 { 0x5d } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(16, 17, 42) : BV:8
44 : ite(13, 14, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 9, 10) : BV:32
47 : eq(46, 12) : BOOL
48 : eq(46, 15) : BOOL
49 : eq(46, 18) : BOOL
50 : eq(46, 21) : BOOL
51 : eq(46, 24) : BOOL
52 : eq(46, 27) : BOOL
53 : eq(46, 30) : BOOL
54 : eq(46, 33) : BOOL
55 : ite(54, 35, 36) : BV:8
56 : ite(53, 32, 55) : BV:8
57 : ite(52, 29, 56) : BV:8
58 : ite(51, 26, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(49, 20, 59) : BV:8
61 : ite(48, 17, 60) : BV:8
62 : ite(47, 14, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 9, 10) : BV:32
65 : eq(64, 12) : BOOL
66 : eq(64, 15) : BOOL
67 : eq(64, 18) : BOOL
68 : eq(64, 21) : BOOL
69 : eq(64, 24) : BOOL
70 : eq(64, 27) : BOOL
71 : eq(64, 30) : BOOL
72 : eq(64, 33) : BOOL
73 : ite(72, 35, 36) : BV:8
74 : ite(71, 32, 73) : BV:8
75 : ite(70, 29, 74) : BV:8
76 : ite(69, 26, 75) : BV:8
77 : ite(68, 23, 76) : BV:8
78 : ite(67, 20, 77) : BV:8
79 : ite(66, 17, 78) : BV:8
80 : ite(65, 14, 79) : BV:8
81 : bvadd(9, 10) : BV:32
82 : eq(81, 12) : BOOL
83 : eq(81, 15) : BOOL
84 : eq(81, 18) : BOOL
85 : eq(81, 21) : BOOL
86 : eq(81, 24) : BOOL
87 : eq(81, 27) : BOOL
88 : eq(81, 30) : BOOL
89 : eq(81, 33) : BOOL
90 : ite(89, 35, 36) : BV:8
91 : ite(88, 32, 90) : BV:8
92 : ite(87, 29, 91) : BV:8
93 : ite(86, 26, 92) : BV:8
94 : ite(85, 23, 93) : BV:8
95 : ite(84, 20, 94) : BV:8
96 : ite(83, 17, 95) : BV:8
97 : ite(82, 14, 96) : BV:8
98 : bvconcat(44, 62, 80, 97) : BV:32
99 : ite(6, 4, 98) : BV:32
100 : ite(3, 4, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda48940Var : BV:32
2 : 83886080 { 0x5000000 +1.0e139 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 536870912 { 0x20000000 +1.0e193 } : BV:32
6 : eq(1, 5) : BOOL
7 : eq(1, 4) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvmul(9, 1) : BV:32
11 : 3260397624 { 0xc255b838 -1034569672 -1.66968441e5 } : BV:32
12 : bvadd(8, 10, 11) : BV:32
13 : 469762047 { 0x1bffffff +1.99999988e184 } : BV:32
14 : eq(12, 13) : BOOL
15 : 194 { 0xc2 -62 } : BV:8
16 : 469762046 { 0x1bfffffe +1.99999976e184 } : BV:32
17 : eq(12, 16) : BOOL
18 : 85 { 0x55 } : BV:8
19 : 134217731 { 0x8000003 +1.35e145 } : BV:32
20 : eq(12, 19) : BOOL
21 : 126 { 0x7e } : BV:8
22 : 469762044 { 0x1bfffffc +1.99999952e184 } : BV:32
23 : eq(12, 22) : BOOL
24 : 56 { 0x38 } : BV:8
25 : 469762045 { 0x1bfffffd +1.99999964e184 } : BV:32
26 : eq(12, 25) : BOOL
27 : 184 { 0xb8 -72 } : BV:8
28 : 134217728 { 0x8000000 +1.0e145 } : BV:32
29 : eq(12, 28) : BOOL
30 : 216 { 0xd8 -40 } : BV:8
31 : 134217730 { 0x8000002 +1.23e145 } : BV:32
32 : eq(12, 31) : BOOL
33 : 151 { 0x97 -105 } : BV:8
34 : 134217729 { 0x8000001 +1.11e145 } : BV:32
35 : eq(12, 34) : BOOL
36 : 93 { 0x5d } : BV:8
37 : 0 { 0x0 } : BV:8
38 : ite(35, 36, 37) : BV:8
39 : ite(32, 33, 38) : BV:8
40 : ite(29, 30, 39) : BV:8
41 : ite(26, 27, 40) : BV:8
42 : ite(23, 24, 41) : BV:8
43 : ite(20, 21, 42) : BV:8
44 : ite(17, 18, 43) : BV:8
45 : ite(14, 15, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 10, 11) : BV:32
48 : eq(47, 13) : BOOL
49 : eq(47, 16) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : eq(47, 25) : BOOL
53 : eq(47, 28) : BOOL
54 : eq(47, 31) : BOOL
55 : eq(47, 34) : BOOL
56 : ite(55, 36, 37) : BV:8
57 : ite(54, 33, 56) : BV:8
58 : ite(53, 30, 57) : BV:8
59 : ite(52, 27, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(50, 21, 60) : BV:8
62 : ite(49, 18, 61) : BV:8
63 : ite(48, 15, 62) : BV:8
64 : 1 { 0x1 +1.11e129 } : BV:32
65 : bvadd(64, 10, 11) : BV:32
66 : eq(65, 13) : BOOL
67 : eq(65, 16) : BOOL
68 : eq(65, 19) : BOOL
69 : eq(65, 22) : BOOL
70 : eq(65, 25) : BOOL
71 : eq(65, 28) : BOOL
72 : eq(65, 31) : BOOL
73 : eq(65, 34) : BOOL
74 : ite(73, 36, 37) : BV:8
75 : ite(72, 33, 74) : BV:8
76 : ite(71, 30, 75) : BV:8
77 : ite(70, 27, 76) : BV:8
78 : ite(69, 24, 77) : BV:8
79 : ite(68, 21, 78) : BV:8
80 : ite(67, 18, 79) : BV:8
81 : ite(66, 15, 80) : BV:8
82 : bvadd(10, 11) : BV:32
83 : eq(82, 13) : BOOL
84 : eq(82, 16) : BOOL
85 : eq(82, 19) : BOOL
86 : eq(82, 22) : BOOL
87 : eq(82, 25) : BOOL
88 : eq(82, 28) : BOOL
89 : eq(82, 31) : BOOL
90 : eq(82, 34) : BOOL
91 : ite(90, 36, 37) : BV:8
92 : ite(89, 33, 91) : BV:8
93 : ite(88, 30, 92) : BV:8
94 : ite(87, 27, 93) : BV:8
95 : ite(86, 24, 94) : BV:8
96 : ite(85, 21, 95) : BV:8
97 : ite(84, 18, 96) : BV:8
98 : ite(83, 15, 97) : BV:8
99 : bvconcat(45, 63, 81, 98) : BV:32
100 : ite(7, 4, 99) : BV:32
101 : ite(6, 4, 100) : BV:32
102 : ite(3, 4, 101) : BV:32
103 : lambda(1, 102) : FUNCTION[BV:32 -> BV:32]
104 : sym_const(103) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 2147483651 ] -> true, [ 2147483652; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
2897962191
=counter_example_end
=global nodece 62 num_edges_traversed 2
=global nodece 62 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 63
=global nodece 63 nodece z3.ce5041.num_edges_traversed1
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce5041 c4d612bb77f8573f752494c47e7620a6
=input.spec-%var-x-1
1 : Lambda53818Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda53819Var : BV:32
18 : Lambda53820Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda53821Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 127 { 0x7f } : BV:8
84 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
85 : eq(80, 84) : BOOL
86 : 108 { 0x6c } : BV:8
87 : eq(80, 78) : BOOL
88 : 141 { 0x8d -115 } : BV:8
89 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
90 : eq(80, 89) : BOOL
91 : 196 { 0xc4 -60 } : BV:8
92 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 103 { 0x67 } : BV:8
95 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
96 : eq(80, 95) : BOOL
97 : 33 { 0x21 } : BV:8
98 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
99 : eq(80, 98) : BOOL
100 : 250 { 0xfa -6 } : BV:8
101 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
102 : eq(80, 101) : BOOL
103 : 239 { 0xef -17 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda53845Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda53846Var : BV:32
18 : eq(17, 2) : BOOL
19 : 287232 { 0x46200 +1.3424072e129 } : BV:32
20 : eq(17, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
27 : eq(25, 26) : BOOL
28 : 127 { 0x7f } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(25, 29) : BOOL
31 : 108 { 0x6c } : BV:8
32 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
33 : eq(25, 32) : BOOL
34 : 141 { 0x8d -115 } : BV:8
35 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
36 : eq(25, 35) : BOOL
37 : 196 { 0xc4 -60 } : BV:8
38 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
39 : eq(25, 38) : BOOL
40 : 103 { 0x67 } : BV:8
41 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
42 : eq(25, 41) : BOOL
43 : 33 { 0x21 } : BV:8
44 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
45 : eq(25, 44) : BOOL
46 : 250 { 0xfa -6 } : BV:8
47 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
48 : eq(25, 47) : BOOL
49 : 239 { 0xef -17 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : eq(60, 41) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 37, 72) : BV:8
74 : ite(63, 34, 73) : BV:8
75 : ite(62, 31, 74) : BV:8
76 : ite(61, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 24) : BV:32
79 : eq(78, 26) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : eq(78, 35) : BOOL
83 : eq(78, 38) : BOOL
84 : eq(78, 41) : BOOL
85 : eq(78, 44) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 46, 87) : BV:8
89 : ite(84, 43, 88) : BV:8
90 : ite(83, 40, 89) : BV:8
91 : ite(82, 37, 90) : BV:8
92 : ite(81, 34, 91) : BV:8
93 : ite(80, 31, 92) : BV:8
94 : ite(79, 28, 93) : BV:8
95 : bvadd(23, 24) : BV:32
96 : eq(95, 26) : BOOL
97 : eq(95, 29) : BOOL
98 : eq(95, 32) : BOOL
99 : eq(95, 35) : BOOL
100 : eq(95, 38) : BOOL
101 : eq(95, 41) : BOOL
102 : eq(95, 44) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 46, 104) : BV:8
106 : ite(101, 43, 105) : BV:8
107 : ite(100, 40, 106) : BV:8
108 : ite(99, 37, 107) : BV:8
109 : ite(98, 34, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(20, 2, 112) : BV:32
114 : ite(18, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2146334719 ] -> 0, [ 2146334720; 2146334720 ] -> 33, [ 2146334721; 2146334721 ] -> 239, [ 2146334722; 2146334722 ] -> 250, [ 2146334723; 2146334723 ] -> 141, [ 2146334724; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 196, [ 2147483645; 2147483645 ] -> 103, [ 2147483646; 2147483646 ] -> 108, [ 2147483647; 2147483647 ] -> 127, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1375922391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1375922392; 1375922395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1375922396; 2090554843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2090554844; 2090554847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2090554848; 3482015963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3482015964; 3482015967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3482015968; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1375922392 { 0x5202e8d8 +1.2273082e37 } : BV:32
=input.dst.llvm-%m
1 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3482015964 { 0xcf8b58dc -812951332 -1.8864927e32 } : BV:32
=input.dst.llvm-%n
1 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2090554844 { 0x7c9b55dc +1.21355772e122 } : BV:32
=input.dst.llvm-%x
1 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda53838Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda53839Var : BV:32
18 : Lambda53840Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda53841Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
66 : eq(61, 65) : BOOL
67 : 108 { 0x6c } : BV:8
68 : eq(61, 59) : BOOL
69 : 141 { 0x8d -115 } : BV:8
70 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
71 : eq(61, 70) : BOOL
72 : 196 { 0xc4 -60 } : BV:8
73 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 103 { 0x67 } : BV:8
76 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
77 : eq(61, 76) : BOOL
78 : 33 { 0x21 } : BV:8
79 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
80 : eq(61, 79) : BOOL
81 : 250 { 0xfa -6 } : BV:8
82 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
83 : eq(61, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
2 : unit : UNIT
3 : Lambda53827Var : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 3) : BOOL
6 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
7 : bvule(3, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
11 : bvule(10, 3) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(3, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : lambda(3, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda53828Var : BV:32
20 : eq(19, 4) : BOOL
21 : 287232 { 0x46200 +1.3424072e129 } : BV:32
22 : eq(19, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 19) : BV:32
26 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
27 : bvadd(23, 25, 26) : BV:32
28 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
29 : eq(27, 28) : BOOL
30 : 127 { 0x7f } : BV:8
31 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
32 : eq(27, 31) : BOOL
33 : 108 { 0x6c } : BV:8
34 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
35 : eq(27, 34) : BOOL
36 : 141 { 0x8d -115 } : BV:8
37 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
38 : eq(27, 37) : BOOL
39 : 196 { 0xc4 -60 } : BV:8
40 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
41 : eq(27, 40) : BOOL
42 : 103 { 0x67 } : BV:8
43 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
44 : eq(27, 43) : BOOL
45 : 33 { 0x21 } : BV:8
46 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
47 : eq(27, 46) : BOOL
48 : 250 { 0xfa -6 } : BV:8
49 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
50 : eq(27, 49) : BOOL
51 : 239 { 0xef -17 } : BV:8
52 : 0 { 0x0 } : BV:8
53 : ite(50, 51, 52) : BV:8
54 : ite(47, 48, 53) : BV:8
55 : ite(44, 45, 54) : BV:8
56 : ite(41, 42, 55) : BV:8
57 : ite(38, 39, 56) : BV:8
58 : ite(35, 36, 57) : BV:8
59 : ite(32, 33, 58) : BV:8
60 : ite(29, 30, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 25, 26) : BV:32
63 : eq(62, 28) : BOOL
64 : eq(62, 31) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : eq(62, 40) : BOOL
68 : eq(62, 43) : BOOL
69 : eq(62, 46) : BOOL
70 : eq(62, 49) : BOOL
71 : ite(70, 51, 52) : BV:8
72 : ite(69, 48, 71) : BV:8
73 : ite(68, 45, 72) : BV:8
74 : ite(67, 42, 73) : BV:8
75 : ite(66, 39, 74) : BV:8
76 : ite(65, 36, 75) : BV:8
77 : ite(64, 33, 76) : BV:8
78 : ite(63, 30, 77) : BV:8
79 : 1 { 0x1 +1.11e129 } : BV:32
80 : bvadd(79, 25, 26) : BV:32
81 : eq(80, 28) : BOOL
82 : eq(80, 31) : BOOL
83 : eq(80, 34) : BOOL
84 : eq(80, 37) : BOOL
85 : eq(80, 40) : BOOL
86 : eq(80, 43) : BOOL
87 : eq(80, 46) : BOOL
88 : eq(80, 49) : BOOL
89 : ite(88, 51, 52) : BV:8
90 : ite(87, 48, 89) : BV:8
91 : ite(86, 45, 90) : BV:8
92 : ite(85, 42, 91) : BV:8
93 : ite(84, 39, 92) : BV:8
94 : ite(83, 36, 93) : BV:8
95 : ite(82, 33, 94) : BV:8
96 : ite(81, 30, 95) : BV:8
97 : bvadd(25, 26) : BV:32
98 : eq(97, 28) : BOOL
99 : eq(97, 31) : BOOL
100 : eq(97, 34) : BOOL
101 : eq(97, 37) : BOOL
102 : eq(97, 40) : BOOL
103 : eq(97, 43) : BOOL
104 : eq(97, 46) : BOOL
105 : eq(97, 49) : BOOL
106 : ite(105, 51, 52) : BV:8
107 : ite(104, 48, 106) : BV:8
108 : ite(103, 45, 107) : BV:8
109 : ite(102, 42, 108) : BV:8
110 : ite(101, 39, 109) : BV:8
111 : ite(100, 36, 110) : BV:8
112 : ite(99, 33, 111) : BV:8
113 : ite(98, 30, 112) : BV:8
114 : bvconcat(60, 78, 96, 113) : BV:32
115 : ite(22, 4, 114) : BV:32
116 : ite(20, 4, 115) : BV:32
117 : lambda(19, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(18, 117) : MAP[BV:32 -> BV:32]
119 : sum(1, 2, 118) : SUM[UNIT,MAP[BV:32 -> BV:32]]
120 : sym_const(119) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1851217596 { 0x6e5756bc +1.68233442e93 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 287231 { 0x461ff +1.3424060e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.spec-%tmpvar-0.L3%20%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(2, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : ite(14, 15, 1) : BV:32
17 : unit : UNIT
18 : eq(2, 1) : BOOL
19 : 287232 { 0x46200 +1.3424072e129 } : BV:32
20 : eq(2, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 2) : BV:32
24 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
27 : eq(25, 26) : BOOL
28 : 127 { 0x7f } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(25, 29) : BOOL
31 : 108 { 0x6c } : BV:8
32 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
33 : eq(25, 32) : BOOL
34 : 141 { 0x8d -115 } : BV:8
35 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
36 : eq(25, 35) : BOOL
37 : 196 { 0xc4 -60 } : BV:8
38 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
39 : eq(25, 38) : BOOL
40 : 103 { 0x67 } : BV:8
41 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
42 : eq(25, 41) : BOOL
43 : 33 { 0x21 } : BV:8
44 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
45 : eq(25, 44) : BOOL
46 : 250 { 0xfa -6 } : BV:8
47 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
48 : eq(25, 47) : BOOL
49 : 239 { 0xef -17 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : eq(60, 41) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 37, 72) : BV:8
74 : ite(63, 34, 73) : BV:8
75 : ite(62, 31, 74) : BV:8
76 : ite(61, 28, 75) : BV:8
77 : bvadd(15, 23, 24) : BV:32
78 : eq(77, 26) : BOOL
79 : eq(77, 29) : BOOL
80 : eq(77, 32) : BOOL
81 : eq(77, 35) : BOOL
82 : eq(77, 38) : BOOL
83 : eq(77, 41) : BOOL
84 : eq(77, 44) : BOOL
85 : eq(77, 47) : BOOL
86 : ite(85, 49, 50) : BV:8
87 : ite(84, 46, 86) : BV:8
88 : ite(83, 43, 87) : BV:8
89 : ite(82, 40, 88) : BV:8
90 : ite(81, 37, 89) : BV:8
91 : ite(80, 34, 90) : BV:8
92 : ite(79, 31, 91) : BV:8
93 : ite(78, 28, 92) : BV:8
94 : bvadd(23, 24) : BV:32
95 : eq(94, 26) : BOOL
96 : eq(94, 29) : BOOL
97 : eq(94, 32) : BOOL
98 : eq(94, 35) : BOOL
99 : eq(94, 38) : BOOL
100 : eq(94, 41) : BOOL
101 : eq(94, 44) : BOOL
102 : eq(94, 47) : BOOL
103 : ite(102, 49, 50) : BV:8
104 : ite(101, 46, 103) : BV:8
105 : ite(100, 43, 104) : BV:8
106 : ite(99, 40, 105) : BV:8
107 : ite(98, 37, 106) : BV:8
108 : ite(97, 34, 107) : BV:8
109 : ite(96, 31, 108) : BV:8
110 : ite(95, 28, 109) : BV:8
111 : bvconcat(58, 76, 93, 110) : BV:32
112 : ite(20, 1, 111) : BV:32
113 : ite(18, 1, 112) : BV:32
114 : sum(16, 17, 113) : SUM[UNIT,BV:32]
115 : sym_const(114) : SUM[UNIT,BV:32]
=input.spec-%var-j-0.L3%19%bbentry
1 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
=input.spec-%tmpvar-9.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-8.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda53850Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda53851Var : BV:32
18 : eq(17, 2) : BOOL
19 : 287232 { 0x46200 +1.3424072e129 } : BV:32
20 : eq(17, 19) : BOOL
21 : 3 { 0x3 +1.35e129 } : BV:32
22 : 4 { 0x4 +1.47e129 } : BV:32
23 : bvmul(22, 17) : BV:32
24 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
25 : bvadd(21, 23, 24) : BV:32
26 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
27 : eq(25, 26) : BOOL
28 : 127 { 0x7f } : BV:8
29 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
30 : eq(25, 29) : BOOL
31 : 108 { 0x6c } : BV:8
32 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
33 : eq(25, 32) : BOOL
34 : 141 { 0x8d -115 } : BV:8
35 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
36 : eq(25, 35) : BOOL
37 : 196 { 0xc4 -60 } : BV:8
38 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
39 : eq(25, 38) : BOOL
40 : 103 { 0x67 } : BV:8
41 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
42 : eq(25, 41) : BOOL
43 : 33 { 0x21 } : BV:8
44 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
45 : eq(25, 44) : BOOL
46 : 250 { 0xfa -6 } : BV:8
47 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
48 : eq(25, 47) : BOOL
49 : 239 { 0xef -17 } : BV:8
50 : 0 { 0x0 } : BV:8
51 : ite(48, 49, 50) : BV:8
52 : ite(45, 46, 51) : BV:8
53 : ite(42, 43, 52) : BV:8
54 : ite(39, 40, 53) : BV:8
55 : ite(36, 37, 54) : BV:8
56 : ite(33, 34, 55) : BV:8
57 : ite(30, 31, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : 2 { 0x2 +1.23e129 } : BV:32
60 : bvadd(59, 23, 24) : BV:32
61 : eq(60, 26) : BOOL
62 : eq(60, 29) : BOOL
63 : eq(60, 32) : BOOL
64 : eq(60, 35) : BOOL
65 : eq(60, 38) : BOOL
66 : eq(60, 41) : BOOL
67 : eq(60, 44) : BOOL
68 : eq(60, 47) : BOOL
69 : ite(68, 49, 50) : BV:8
70 : ite(67, 46, 69) : BV:8
71 : ite(66, 43, 70) : BV:8
72 : ite(65, 40, 71) : BV:8
73 : ite(64, 37, 72) : BV:8
74 : ite(63, 34, 73) : BV:8
75 : ite(62, 31, 74) : BV:8
76 : ite(61, 28, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 23, 24) : BV:32
79 : eq(78, 26) : BOOL
80 : eq(78, 29) : BOOL
81 : eq(78, 32) : BOOL
82 : eq(78, 35) : BOOL
83 : eq(78, 38) : BOOL
84 : eq(78, 41) : BOOL
85 : eq(78, 44) : BOOL
86 : eq(78, 47) : BOOL
87 : ite(86, 49, 50) : BV:8
88 : ite(85, 46, 87) : BV:8
89 : ite(84, 43, 88) : BV:8
90 : ite(83, 40, 89) : BV:8
91 : ite(82, 37, 90) : BV:8
92 : ite(81, 34, 91) : BV:8
93 : ite(80, 31, 92) : BV:8
94 : ite(79, 28, 93) : BV:8
95 : bvadd(23, 24) : BV:32
96 : eq(95, 26) : BOOL
97 : eq(95, 29) : BOOL
98 : eq(95, 32) : BOOL
99 : eq(95, 35) : BOOL
100 : eq(95, 38) : BOOL
101 : eq(95, 41) : BOOL
102 : eq(95, 44) : BOOL
103 : eq(95, 47) : BOOL
104 : ite(103, 49, 50) : BV:8
105 : ite(102, 46, 104) : BV:8
106 : ite(101, 43, 105) : BV:8
107 : ite(100, 40, 106) : BV:8
108 : ite(99, 37, 107) : BV:8
109 : ite(98, 34, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : bvconcat(58, 76, 94, 111) : BV:32
113 : ite(20, 2, 112) : BV:32
114 : ite(18, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.spec-%var-u-0.L3%7%bbentry
1 : unit : UNIT
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 36920455 { 0x2335c87 +1.40126121e133 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%cmp2.Lfor.cond1%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%i.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.dst.llvm-%inc9.Lfor.cond%1%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.for.inc8.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3482015964 { 0xcf8b58dc -812951332 -1.8864927e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3482015967 { 0xcf8b58df -812951329 -1.8864963e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2090554844 { 0x7c9b55dc +1.21355772e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2090554847 { 0x7c9b55df +1.21355807e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1375922392 { 0x5202e8d8 +1.2273082e37 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1375922395 { 0x5202e8db +1.2273118e37 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda53710Var : BV:32
2 : Lambda53711Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
58 : eq(53, 57) : BOOL
59 : 108 { 0x6c } : BV:8
60 : eq(53, 51) : BOOL
61 : 141 { 0x8d -115 } : BV:8
62 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
63 : eq(53, 62) : BOOL
64 : 196 { 0xc4 -60 } : BV:8
65 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 103 { 0x67 } : BV:8
68 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
69 : eq(53, 68) : BOOL
70 : 33 { 0x21 } : BV:8
71 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
72 : eq(53, 71) : BOOL
73 : 250 { 0xfa -6 } : BV:8
74 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
75 : eq(53, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda53715Var : BV:32
2 : Lambda53716Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147533553 ] -> true, [ 2147533554; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147533553 ] -> true, [ 2147533554; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda53724Var : BV:32
2 : Lambda53725Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda53720Var : BV:32
2 : Lambda53721Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
17 : eq(12, 16) : BOOL
18 : 108 { 0x6c } : BV:8
19 : eq(12, 10) : BOOL
20 : 141 { 0x8d -115 } : BV:8
21 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 196 { 0xc4 -60 } : BV:8
24 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 103 { 0x67 } : BV:8
27 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
28 : eq(12, 27) : BOOL
29 : 33 { 0x21 } : BV:8
30 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
31 : eq(12, 30) : BOOL
32 : 250 { 0xfa -6 } : BV:8
33 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda53731Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda53735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda53736Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
1379134855
=counter_example_end
=global nodece 63 num_edges_traversed 1
=global nodece 63 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce5074.num_edges_traversed2
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce5074 b38de8eafa9558d23e6c3eec7fd514
=input.spec-%var-x-1
1 : Lambda53818Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda53819Var : BV:32
18 : Lambda53820Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda53821Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 127 { 0x7f } : BV:8
84 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
85 : eq(80, 84) : BOOL
86 : 108 { 0x6c } : BV:8
87 : eq(80, 78) : BOOL
88 : 141 { 0x8d -115 } : BV:8
89 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
90 : eq(80, 89) : BOOL
91 : 196 { 0xc4 -60 } : BV:8
92 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 103 { 0x67 } : BV:8
95 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
96 : eq(80, 95) : BOOL
97 : 33 { 0x21 } : BV:8
98 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
99 : eq(80, 98) : BOOL
100 : 250 { 0xfa -6 } : BV:8
101 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
102 : eq(80, 101) : BOOL
103 : 239 { 0xef -17 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda54004Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 287232 { 0x46200 +1.3424072e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda54005Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 42) : BV:32
49 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
50 : bvmul(47, 3) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
53 : eq(51, 52) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
56 : eq(51, 55) : BOOL
57 : 108 { 0x6c } : BV:8
58 : eq(51, 49) : BOOL
59 : 141 { 0x8d -115 } : BV:8
60 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
61 : eq(51, 60) : BOOL
62 : 196 { 0xc4 -60 } : BV:8
63 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
64 : eq(51, 63) : BOOL
65 : 103 { 0x67 } : BV:8
66 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
67 : eq(51, 66) : BOOL
68 : 33 { 0x21 } : BV:8
69 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 250 { 0xfa -6 } : BV:8
72 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
73 : eq(51, 72) : BOOL
74 : 239 { 0xef -17 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : ite(58, 59, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(69, 50) : BV:32
85 : eq(84, 52) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 49) : BOOL
88 : eq(84, 60) : BOOL
89 : eq(84, 63) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 62, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(72, 50) : BV:32
102 : eq(101, 52) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 49) : BOOL
105 : eq(101, 60) : BOOL
106 : eq(101, 63) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 62, 113) : BV:8
115 : ite(104, 59, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : bvadd(66, 50) : BV:32
119 : eq(118, 52) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 49) : BOOL
122 : eq(118, 60) : BOOL
123 : eq(118, 63) : BOOL
124 : eq(118, 66) : BOOL
125 : eq(118, 69) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 71, 127) : BV:8
129 : ite(124, 68, 128) : BV:8
130 : ite(123, 65, 129) : BV:8
131 : ite(122, 62, 130) : BV:8
132 : ite(121, 59, 131) : BV:8
133 : ite(120, 57, 132) : BV:8
134 : ite(119, 54, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(46, 48, 135) : BV:32
137 : eq(136, 52) : BOOL
138 : eq(136, 55) : BOOL
139 : eq(136, 49) : BOOL
140 : eq(136, 60) : BOOL
141 : eq(136, 63) : BOOL
142 : eq(136, 66) : BOOL
143 : eq(136, 69) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 71, 145) : BV:8
147 : ite(142, 68, 146) : BV:8
148 : ite(141, 65, 147) : BV:8
149 : ite(140, 62, 148) : BV:8
150 : ite(139, 59, 149) : BV:8
151 : ite(138, 57, 150) : BV:8
152 : ite(137, 54, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 48, 135) : BV:32
155 : eq(154, 52) : BOOL
156 : eq(154, 55) : BOOL
157 : eq(154, 49) : BOOL
158 : eq(154, 60) : BOOL
159 : eq(154, 63) : BOOL
160 : eq(154, 66) : BOOL
161 : eq(154, 69) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 71, 163) : BV:8
165 : ite(160, 68, 164) : BV:8
166 : ite(159, 65, 165) : BV:8
167 : ite(158, 62, 166) : BV:8
168 : ite(157, 59, 167) : BV:8
169 : ite(156, 57, 168) : BV:8
170 : ite(155, 54, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 48, 135) : BV:32
173 : eq(172, 52) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 49) : BOOL
176 : eq(172, 60) : BOOL
177 : eq(172, 63) : BOOL
178 : eq(172, 66) : BOOL
179 : eq(172, 69) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 71, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 59, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : ite(173, 54, 187) : BV:8
189 : bvadd(48, 135) : BV:32
190 : eq(189, 52) : BOOL
191 : eq(189, 55) : BOOL
192 : eq(189, 49) : BOOL
193 : eq(189, 60) : BOOL
194 : eq(189, 63) : BOOL
195 : eq(189, 66) : BOOL
196 : eq(189, 69) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 71, 198) : BV:8
200 : ite(195, 68, 199) : BV:8
201 : ite(194, 65, 200) : BV:8
202 : ite(193, 62, 201) : BV:8
203 : ite(192, 59, 202) : BV:8
204 : ite(191, 57, 203) : BV:8
205 : ite(190, 54, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(45, 2, 206) : BV:32
208 : lambda(42, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(41, 208) : MAP[BV:32 -> BV:32]
210 : sym_const(209) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2146334719 ] -> 0, [ 2146334720; 2146334720 ] -> 33, [ 2146334721; 2146334721 ] -> 239, [ 2146334722; 2146334722 ] -> 250, [ 2146334723; 2146334723 ] -> 141, [ 2146334724; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 196, [ 2147483645; 2147483645 ] -> 103, [ 2147483646; 2147483646 ] -> 108, [ 2147483647; 2147483647 ] -> 127, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1375922391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1375922392; 1375922395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1375922396; 2090554843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2090554844; 2090554847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2090554848; 3482015963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3482015964; 3482015967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3482015968; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1375922392 { 0x5202e8d8 +1.2273082e37 } : BV:32
=input.dst.llvm-%m
1 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3482015964 { 0xcf8b58dc -812951332 -1.8864927e32 } : BV:32
=input.dst.llvm-%n
1 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2090554844 { 0x7c9b55dc +1.21355772e122 } : BV:32
=input.dst.llvm-%x
1 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda53838Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda53839Var : BV:32
18 : Lambda53840Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda53841Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
66 : eq(61, 65) : BOOL
67 : 108 { 0x6c } : BV:8
68 : eq(61, 59) : BOOL
69 : 141 { 0x8d -115 } : BV:8
70 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
71 : eq(61, 70) : BOOL
72 : 196 { 0xc4 -60 } : BV:8
73 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 103 { 0x67 } : BV:8
76 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
77 : eq(61, 76) : BOOL
78 : 33 { 0x21 } : BV:8
79 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
80 : eq(61, 79) : BOOL
81 : 250 { 0xfa -6 } : BV:8
82 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
83 : eq(61, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 287232 { 0x46200 +1.3424072e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda53994Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
31 : bvule(19, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
34 : bvule(33, 19) : BOOL
35 : bvule(19, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
38 : bvule(37, 19) : BOOL
39 : bvule(19, 10) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 1, 42) : BV:32
44 : eq(43, 1) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 7, 13) : BOOL
47 : lambda(19, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda53995Var : BV:32
49 : eq(2, 1) : BOOL
50 : eq(48, 1) : BOOL
51 : and(49, 50) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 48) : BV:32
55 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
56 : bvmul(53, 2) : BV:32
57 : bvadd(55, 56) : BV:32
58 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
59 : eq(57, 58) : BOOL
60 : 127 { 0x7f } : BV:8
61 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
62 : eq(57, 61) : BOOL
63 : 108 { 0x6c } : BV:8
64 : eq(57, 55) : BOOL
65 : 141 { 0x8d -115 } : BV:8
66 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
67 : eq(57, 66) : BOOL
68 : 196 { 0xc4 -60 } : BV:8
69 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
70 : eq(57, 69) : BOOL
71 : 103 { 0x67 } : BV:8
72 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
73 : eq(57, 72) : BOOL
74 : 33 { 0x21 } : BV:8
75 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
76 : eq(57, 75) : BOOL
77 : 250 { 0xfa -6 } : BV:8
78 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
79 : eq(57, 78) : BOOL
80 : 239 { 0xef -17 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : ite(59, 60, 88) : BV:8
90 : bvadd(75, 56) : BV:32
91 : eq(90, 58) : BOOL
92 : eq(90, 61) : BOOL
93 : eq(90, 55) : BOOL
94 : eq(90, 66) : BOOL
95 : eq(90, 69) : BOOL
96 : eq(90, 72) : BOOL
97 : eq(90, 75) : BOOL
98 : eq(90, 78) : BOOL
99 : ite(98, 80, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 74, 100) : BV:8
102 : ite(95, 71, 101) : BV:8
103 : ite(94, 68, 102) : BV:8
104 : ite(93, 65, 103) : BV:8
105 : ite(92, 63, 104) : BV:8
106 : ite(91, 60, 105) : BV:8
107 : bvadd(78, 56) : BV:32
108 : eq(107, 58) : BOOL
109 : eq(107, 61) : BOOL
110 : eq(107, 55) : BOOL
111 : eq(107, 66) : BOOL
112 : eq(107, 69) : BOOL
113 : eq(107, 72) : BOOL
114 : eq(107, 75) : BOOL
115 : eq(107, 78) : BOOL
116 : ite(115, 80, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 74, 117) : BV:8
119 : ite(112, 71, 118) : BV:8
120 : ite(111, 68, 119) : BV:8
121 : ite(110, 65, 120) : BV:8
122 : ite(109, 63, 121) : BV:8
123 : ite(108, 60, 122) : BV:8
124 : bvadd(72, 56) : BV:32
125 : eq(124, 58) : BOOL
126 : eq(124, 61) : BOOL
127 : eq(124, 55) : BOOL
128 : eq(124, 66) : BOOL
129 : eq(124, 69) : BOOL
130 : eq(124, 72) : BOOL
131 : eq(124, 75) : BOOL
132 : eq(124, 78) : BOOL
133 : ite(132, 80, 81) : BV:8
134 : ite(131, 77, 133) : BV:8
135 : ite(130, 74, 134) : BV:8
136 : ite(129, 71, 135) : BV:8
137 : ite(128, 68, 136) : BV:8
138 : ite(127, 65, 137) : BV:8
139 : ite(126, 63, 138) : BV:8
140 : ite(125, 60, 139) : BV:8
141 : bvconcat(89, 106, 123, 140) : BV:32
142 : bvadd(52, 54, 141) : BV:32
143 : eq(142, 58) : BOOL
144 : eq(142, 61) : BOOL
145 : eq(142, 55) : BOOL
146 : eq(142, 66) : BOOL
147 : eq(142, 69) : BOOL
148 : eq(142, 72) : BOOL
149 : eq(142, 75) : BOOL
150 : eq(142, 78) : BOOL
151 : ite(150, 80, 81) : BV:8
152 : ite(149, 77, 151) : BV:8
153 : ite(148, 74, 152) : BV:8
154 : ite(147, 71, 153) : BV:8
155 : ite(146, 68, 154) : BV:8
156 : ite(145, 65, 155) : BV:8
157 : ite(144, 63, 156) : BV:8
158 : ite(143, 60, 157) : BV:8
159 : 2 { 0x2 +1.23e129 } : BV:32
160 : bvadd(159, 54, 141) : BV:32
161 : eq(160, 58) : BOOL
162 : eq(160, 61) : BOOL
163 : eq(160, 55) : BOOL
164 : eq(160, 66) : BOOL
165 : eq(160, 69) : BOOL
166 : eq(160, 72) : BOOL
167 : eq(160, 75) : BOOL
168 : eq(160, 78) : BOOL
169 : ite(168, 80, 81) : BV:8
170 : ite(167, 77, 169) : BV:8
171 : ite(166, 74, 170) : BV:8
172 : ite(165, 71, 171) : BV:8
173 : ite(164, 68, 172) : BV:8
174 : ite(163, 65, 173) : BV:8
175 : ite(162, 63, 174) : BV:8
176 : ite(161, 60, 175) : BV:8
177 : bvadd(16, 54, 141) : BV:32
178 : eq(177, 58) : BOOL
179 : eq(177, 61) : BOOL
180 : eq(177, 55) : BOOL
181 : eq(177, 66) : BOOL
182 : eq(177, 69) : BOOL
183 : eq(177, 72) : BOOL
184 : eq(177, 75) : BOOL
185 : eq(177, 78) : BOOL
186 : ite(185, 80, 81) : BV:8
187 : ite(184, 77, 186) : BV:8
188 : ite(183, 74, 187) : BV:8
189 : ite(182, 71, 188) : BV:8
190 : ite(181, 68, 189) : BV:8
191 : ite(180, 65, 190) : BV:8
192 : ite(179, 63, 191) : BV:8
193 : ite(178, 60, 192) : BV:8
194 : bvadd(54, 141) : BV:32
195 : eq(194, 58) : BOOL
196 : eq(194, 61) : BOOL
197 : eq(194, 55) : BOOL
198 : eq(194, 66) : BOOL
199 : eq(194, 69) : BOOL
200 : eq(194, 72) : BOOL
201 : eq(194, 75) : BOOL
202 : eq(194, 78) : BOOL
203 : ite(202, 80, 81) : BV:8
204 : ite(201, 77, 203) : BV:8
205 : ite(200, 74, 204) : BV:8
206 : ite(199, 71, 205) : BV:8
207 : ite(198, 68, 206) : BV:8
208 : ite(197, 65, 207) : BV:8
209 : ite(196, 63, 208) : BV:8
210 : ite(195, 60, 209) : BV:8
211 : bvconcat(158, 176, 193, 210) : BV:32
212 : ite(51, 1, 211) : BV:32
213 : lambda(48, 212) : FUNCTION[BV:32 -> BV:32]
214 : map(47, 213) : MAP[BV:32 -> BV:32]
215 : sum(17, 18, 214) : SUM[UNIT,MAP[BV:32 -> BV:32]]
216 : sym_const(215) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1851217596 { 0x6e5756bc +1.68233442e93 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 287233 { 0x46201 +1.3424084e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda54010Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 287232 { 0x46200 +1.3424072e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda54011Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 42) : BV:32
49 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
50 : bvmul(47, 3) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
53 : eq(51, 52) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
56 : eq(51, 55) : BOOL
57 : 108 { 0x6c } : BV:8
58 : eq(51, 49) : BOOL
59 : 141 { 0x8d -115 } : BV:8
60 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
61 : eq(51, 60) : BOOL
62 : 196 { 0xc4 -60 } : BV:8
63 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
64 : eq(51, 63) : BOOL
65 : 103 { 0x67 } : BV:8
66 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
67 : eq(51, 66) : BOOL
68 : 33 { 0x21 } : BV:8
69 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 250 { 0xfa -6 } : BV:8
72 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
73 : eq(51, 72) : BOOL
74 : 239 { 0xef -17 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : ite(58, 59, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(69, 50) : BV:32
85 : eq(84, 52) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 49) : BOOL
88 : eq(84, 60) : BOOL
89 : eq(84, 63) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 62, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(72, 50) : BV:32
102 : eq(101, 52) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 49) : BOOL
105 : eq(101, 60) : BOOL
106 : eq(101, 63) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 62, 113) : BV:8
115 : ite(104, 59, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : bvadd(66, 50) : BV:32
119 : eq(118, 52) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 49) : BOOL
122 : eq(118, 60) : BOOL
123 : eq(118, 63) : BOOL
124 : eq(118, 66) : BOOL
125 : eq(118, 69) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 71, 127) : BV:8
129 : ite(124, 68, 128) : BV:8
130 : ite(123, 65, 129) : BV:8
131 : ite(122, 62, 130) : BV:8
132 : ite(121, 59, 131) : BV:8
133 : ite(120, 57, 132) : BV:8
134 : ite(119, 54, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(46, 48, 135) : BV:32
137 : eq(136, 52) : BOOL
138 : eq(136, 55) : BOOL
139 : eq(136, 49) : BOOL
140 : eq(136, 60) : BOOL
141 : eq(136, 63) : BOOL
142 : eq(136, 66) : BOOL
143 : eq(136, 69) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 71, 145) : BV:8
147 : ite(142, 68, 146) : BV:8
148 : ite(141, 65, 147) : BV:8
149 : ite(140, 62, 148) : BV:8
150 : ite(139, 59, 149) : BV:8
151 : ite(138, 57, 150) : BV:8
152 : ite(137, 54, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 48, 135) : BV:32
155 : eq(154, 52) : BOOL
156 : eq(154, 55) : BOOL
157 : eq(154, 49) : BOOL
158 : eq(154, 60) : BOOL
159 : eq(154, 63) : BOOL
160 : eq(154, 66) : BOOL
161 : eq(154, 69) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 71, 163) : BV:8
165 : ite(160, 68, 164) : BV:8
166 : ite(159, 65, 165) : BV:8
167 : ite(158, 62, 166) : BV:8
168 : ite(157, 59, 167) : BV:8
169 : ite(156, 57, 168) : BV:8
170 : ite(155, 54, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 48, 135) : BV:32
173 : eq(172, 52) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 49) : BOOL
176 : eq(172, 60) : BOOL
177 : eq(172, 63) : BOOL
178 : eq(172, 66) : BOOL
179 : eq(172, 69) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 71, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 59, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : ite(173, 54, 187) : BV:8
189 : bvadd(48, 135) : BV:32
190 : eq(189, 52) : BOOL
191 : eq(189, 55) : BOOL
192 : eq(189, 49) : BOOL
193 : eq(189, 60) : BOOL
194 : eq(189, 63) : BOOL
195 : eq(189, 66) : BOOL
196 : eq(189, 69) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 71, 198) : BV:8
200 : ite(195, 68, 199) : BV:8
201 : ite(194, 65, 200) : BV:8
202 : ite(193, 62, 201) : BV:8
203 : ite(192, 59, 202) : BV:8
204 : ite(191, 57, 203) : BV:8
205 : ite(190, 54, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(45, 2, 206) : BV:32
208 : lambda(42, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(41, 208) : MAP[BV:32 -> BV:32]
210 : sym_const(209) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 36920455 { 0x2335c87 +1.40126121e133 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3482015964 { 0xcf8b58dc -812951332 -1.8864927e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3482015967 { 0xcf8b58df -812951329 -1.8864963e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2090554844 { 0x7c9b55dc +1.21355772e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2090554847 { 0x7c9b55df +1.21355807e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1375922392 { 0x5202e8d8 +1.2273082e37 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1375922395 { 0x5202e8db +1.2273118e37 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda53710Var : BV:32
2 : Lambda53711Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
58 : eq(53, 57) : BOOL
59 : 108 { 0x6c } : BV:8
60 : eq(53, 51) : BOOL
61 : 141 { 0x8d -115 } : BV:8
62 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
63 : eq(53, 62) : BOOL
64 : 196 { 0xc4 -60 } : BV:8
65 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 103 { 0x67 } : BV:8
68 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
69 : eq(53, 68) : BOOL
70 : 33 { 0x21 } : BV:8
71 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
72 : eq(53, 71) : BOOL
73 : 250 { 0xfa -6 } : BV:8
74 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
75 : eq(53, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda53715Var : BV:32
2 : Lambda53716Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147533553 ] -> true, [ 2147533554; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147533553 ] -> true, [ 2147533554; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda53724Var : BV:32
2 : Lambda53725Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda53720Var : BV:32
2 : Lambda53721Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
17 : eq(12, 16) : BOOL
18 : 108 { 0x6c } : BV:8
19 : eq(12, 10) : BOOL
20 : 141 { 0x8d -115 } : BV:8
21 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 196 { 0xc4 -60 } : BV:8
24 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 103 { 0x67 } : BV:8
27 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
28 : eq(12, 27) : BOOL
29 : 33 { 0x21 } : BV:8
30 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
31 : eq(12, 30) : BOOL
32 : 250 { 0xfa -6 } : BV:8
33 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda53731Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda53735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda53736Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
1379134855
=counter_example_end
=global nodece 64 num_edges_traversed 2
=global nodece 64 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 65
=global nodece 65 nodece z3.ce5111.num_edges_traversed3
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(epsilon)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3.ce5111 fcd7de2db7f11ddf98b56772dba77a8a
=input.spec-%var-x-1
1 : Lambda53818Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda53819Var : BV:32
18 : Lambda53820Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda53821Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : and(22, 27) : BOOL
57 : ite(56, 13, 13) : BOOL
58 : ite(21, 7, 57) : BOOL
59 : bvule(2, 52) : BOOL
60 : bvule(52, 34) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(37, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 10) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:32
69 : ite(64, 37, 68) : BV:32
70 : ite(61, 2, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : and(32, 71) : BOOL
73 : ite(72, 7, 13) : BOOL
74 : and(58, 73) : BOOL
75 : 3 { 0x3 +1.35e129 } : BV:32
76 : 4 { 0x4 +1.47e129 } : BV:32
77 : bvmul(76, 52) : BV:32
78 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
79 : bvmul(76, 17) : BV:32
80 : bvadd(78, 79) : BV:32
81 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
82 : eq(80, 81) : BOOL
83 : 127 { 0x7f } : BV:8
84 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
85 : eq(80, 84) : BOOL
86 : 108 { 0x6c } : BV:8
87 : eq(80, 78) : BOOL
88 : 141 { 0x8d -115 } : BV:8
89 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
90 : eq(80, 89) : BOOL
91 : 196 { 0xc4 -60 } : BV:8
92 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
93 : eq(80, 92) : BOOL
94 : 103 { 0x67 } : BV:8
95 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
96 : eq(80, 95) : BOOL
97 : 33 { 0x21 } : BV:8
98 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
99 : eq(80, 98) : BOOL
100 : 250 { 0xfa -6 } : BV:8
101 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
102 : eq(80, 101) : BOOL
103 : 239 { 0xef -17 } : BV:8
104 : 0 { 0x0 } : BV:8
105 : ite(102, 103, 104) : BV:8
106 : ite(99, 100, 105) : BV:8
107 : ite(96, 97, 106) : BV:8
108 : ite(93, 94, 107) : BV:8
109 : ite(90, 91, 108) : BV:8
110 : ite(87, 88, 109) : BV:8
111 : ite(85, 86, 110) : BV:8
112 : ite(82, 83, 111) : BV:8
113 : bvadd(98, 79) : BV:32
114 : eq(113, 81) : BOOL
115 : eq(113, 84) : BOOL
116 : eq(113, 78) : BOOL
117 : eq(113, 89) : BOOL
118 : eq(113, 92) : BOOL
119 : eq(113, 95) : BOOL
120 : eq(113, 98) : BOOL
121 : eq(113, 101) : BOOL
122 : ite(121, 103, 104) : BV:8
123 : ite(120, 100, 122) : BV:8
124 : ite(119, 97, 123) : BV:8
125 : ite(118, 94, 124) : BV:8
126 : ite(117, 91, 125) : BV:8
127 : ite(116, 88, 126) : BV:8
128 : ite(115, 86, 127) : BV:8
129 : ite(114, 83, 128) : BV:8
130 : bvadd(101, 79) : BV:32
131 : eq(130, 81) : BOOL
132 : eq(130, 84) : BOOL
133 : eq(130, 78) : BOOL
134 : eq(130, 89) : BOOL
135 : eq(130, 92) : BOOL
136 : eq(130, 95) : BOOL
137 : eq(130, 98) : BOOL
138 : eq(130, 101) : BOOL
139 : ite(138, 103, 104) : BV:8
140 : ite(137, 100, 139) : BV:8
141 : ite(136, 97, 140) : BV:8
142 : ite(135, 94, 141) : BV:8
143 : ite(134, 91, 142) : BV:8
144 : ite(133, 88, 143) : BV:8
145 : ite(132, 86, 144) : BV:8
146 : ite(131, 83, 145) : BV:8
147 : bvadd(95, 79) : BV:32
148 : eq(147, 81) : BOOL
149 : eq(147, 84) : BOOL
150 : eq(147, 78) : BOOL
151 : eq(147, 89) : BOOL
152 : eq(147, 92) : BOOL
153 : eq(147, 95) : BOOL
154 : eq(147, 98) : BOOL
155 : eq(147, 101) : BOOL
156 : ite(155, 103, 104) : BV:8
157 : ite(154, 100, 156) : BV:8
158 : ite(153, 97, 157) : BV:8
159 : ite(152, 94, 158) : BV:8
160 : ite(151, 91, 159) : BV:8
161 : ite(150, 88, 160) : BV:8
162 : ite(149, 86, 161) : BV:8
163 : ite(148, 83, 162) : BV:8
164 : bvconcat(112, 129, 146, 163) : BV:32
165 : bvadd(75, 77, 164) : BV:32
166 : eq(165, 81) : BOOL
167 : eq(165, 84) : BOOL
168 : eq(165, 78) : BOOL
169 : eq(165, 89) : BOOL
170 : eq(165, 92) : BOOL
171 : eq(165, 95) : BOOL
172 : eq(165, 98) : BOOL
173 : eq(165, 101) : BOOL
174 : ite(173, 103, 104) : BV:8
175 : ite(172, 100, 174) : BV:8
176 : ite(171, 97, 175) : BV:8
177 : ite(170, 94, 176) : BV:8
178 : ite(169, 91, 177) : BV:8
179 : ite(168, 88, 178) : BV:8
180 : ite(167, 86, 179) : BV:8
181 : ite(166, 83, 180) : BV:8
182 : 2 { 0x2 +1.23e129 } : BV:32
183 : bvadd(182, 77, 164) : BV:32
184 : eq(183, 81) : BOOL
185 : eq(183, 84) : BOOL
186 : eq(183, 78) : BOOL
187 : eq(183, 89) : BOOL
188 : eq(183, 92) : BOOL
189 : eq(183, 95) : BOOL
190 : eq(183, 98) : BOOL
191 : eq(183, 101) : BOOL
192 : ite(191, 103, 104) : BV:8
193 : ite(190, 100, 192) : BV:8
194 : ite(189, 97, 193) : BV:8
195 : ite(188, 94, 194) : BV:8
196 : ite(187, 91, 195) : BV:8
197 : ite(186, 88, 196) : BV:8
198 : ite(185, 86, 197) : BV:8
199 : ite(184, 83, 198) : BV:8
200 : 1 { 0x1 +1.11e129 } : BV:32
201 : bvadd(200, 77, 164) : BV:32
202 : eq(201, 81) : BOOL
203 : eq(201, 84) : BOOL
204 : eq(201, 78) : BOOL
205 : eq(201, 89) : BOOL
206 : eq(201, 92) : BOOL
207 : eq(201, 95) : BOOL
208 : eq(201, 98) : BOOL
209 : eq(201, 101) : BOOL
210 : ite(209, 103, 104) : BV:8
211 : ite(208, 100, 210) : BV:8
212 : ite(207, 97, 211) : BV:8
213 : ite(206, 94, 212) : BV:8
214 : ite(205, 91, 213) : BV:8
215 : ite(204, 88, 214) : BV:8
216 : ite(203, 86, 215) : BV:8
217 : ite(202, 83, 216) : BV:8
218 : bvadd(77, 164) : BV:32
219 : eq(218, 81) : BOOL
220 : eq(218, 84) : BOOL
221 : eq(218, 78) : BOOL
222 : eq(218, 89) : BOOL
223 : eq(218, 92) : BOOL
224 : eq(218, 95) : BOOL
225 : eq(218, 98) : BOOL
226 : eq(218, 101) : BOOL
227 : ite(226, 103, 104) : BV:8
228 : ite(225, 100, 227) : BV:8
229 : ite(224, 97, 228) : BV:8
230 : ite(223, 94, 229) : BV:8
231 : ite(222, 91, 230) : BV:8
232 : ite(221, 88, 231) : BV:8
233 : ite(220, 86, 232) : BV:8
234 : ite(219, 83, 233) : BV:8
235 : bvconcat(181, 199, 217, 234) : BV:32
236 : ite(55, 2, 235) : BV:32
237 : ite(74, 235, 236) : BV:32
238 : ite(55, 2, 237) : BV:32
239 : lambda(52, 238) : FUNCTION[BV:32 -> BV:32]
240 : map(51, 239) : MAP[BV:32 -> BV:32]
241 : lambda(17, 240) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
242 : map(16, 241) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
243 : sym_const(242) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.spec-%var-x_i-0.L3%19%bbentry
1 : Lambda54004Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 287232 { 0x46200 +1.3424072e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda54005Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 42) : BV:32
49 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
50 : bvmul(47, 3) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
53 : eq(51, 52) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
56 : eq(51, 55) : BOOL
57 : 108 { 0x6c } : BV:8
58 : eq(51, 49) : BOOL
59 : 141 { 0x8d -115 } : BV:8
60 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
61 : eq(51, 60) : BOOL
62 : 196 { 0xc4 -60 } : BV:8
63 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
64 : eq(51, 63) : BOOL
65 : 103 { 0x67 } : BV:8
66 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
67 : eq(51, 66) : BOOL
68 : 33 { 0x21 } : BV:8
69 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 250 { 0xfa -6 } : BV:8
72 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
73 : eq(51, 72) : BOOL
74 : 239 { 0xef -17 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : ite(58, 59, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(69, 50) : BV:32
85 : eq(84, 52) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 49) : BOOL
88 : eq(84, 60) : BOOL
89 : eq(84, 63) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 62, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(72, 50) : BV:32
102 : eq(101, 52) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 49) : BOOL
105 : eq(101, 60) : BOOL
106 : eq(101, 63) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 62, 113) : BV:8
115 : ite(104, 59, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : bvadd(66, 50) : BV:32
119 : eq(118, 52) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 49) : BOOL
122 : eq(118, 60) : BOOL
123 : eq(118, 63) : BOOL
124 : eq(118, 66) : BOOL
125 : eq(118, 69) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 71, 127) : BV:8
129 : ite(124, 68, 128) : BV:8
130 : ite(123, 65, 129) : BV:8
131 : ite(122, 62, 130) : BV:8
132 : ite(121, 59, 131) : BV:8
133 : ite(120, 57, 132) : BV:8
134 : ite(119, 54, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(46, 48, 135) : BV:32
137 : eq(136, 52) : BOOL
138 : eq(136, 55) : BOOL
139 : eq(136, 49) : BOOL
140 : eq(136, 60) : BOOL
141 : eq(136, 63) : BOOL
142 : eq(136, 66) : BOOL
143 : eq(136, 69) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 71, 145) : BV:8
147 : ite(142, 68, 146) : BV:8
148 : ite(141, 65, 147) : BV:8
149 : ite(140, 62, 148) : BV:8
150 : ite(139, 59, 149) : BV:8
151 : ite(138, 57, 150) : BV:8
152 : ite(137, 54, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 48, 135) : BV:32
155 : eq(154, 52) : BOOL
156 : eq(154, 55) : BOOL
157 : eq(154, 49) : BOOL
158 : eq(154, 60) : BOOL
159 : eq(154, 63) : BOOL
160 : eq(154, 66) : BOOL
161 : eq(154, 69) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 71, 163) : BV:8
165 : ite(160, 68, 164) : BV:8
166 : ite(159, 65, 165) : BV:8
167 : ite(158, 62, 166) : BV:8
168 : ite(157, 59, 167) : BV:8
169 : ite(156, 57, 168) : BV:8
170 : ite(155, 54, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 48, 135) : BV:32
173 : eq(172, 52) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 49) : BOOL
176 : eq(172, 60) : BOOL
177 : eq(172, 63) : BOOL
178 : eq(172, 66) : BOOL
179 : eq(172, 69) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 71, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 59, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : ite(173, 54, 187) : BV:8
189 : bvadd(48, 135) : BV:32
190 : eq(189, 52) : BOOL
191 : eq(189, 55) : BOOL
192 : eq(189, 49) : BOOL
193 : eq(189, 60) : BOOL
194 : eq(189, 63) : BOOL
195 : eq(189, 66) : BOOL
196 : eq(189, 69) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 71, 198) : BV:8
200 : ite(195, 68, 199) : BV:8
201 : ite(194, 65, 200) : BV:8
202 : ite(193, 62, 201) : BV:8
203 : ite(192, 59, 202) : BV:8
204 : ite(191, 57, 203) : BV:8
205 : ite(190, 54, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(45, 2, 206) : BV:32
208 : lambda(42, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(41, 208) : MAP[BV:32 -> BV:32]
210 : sym_const(209) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2146334719 ] -> 0, [ 2146334720; 2146334720 ] -> 33, [ 2146334721; 2146334721 ] -> 239, [ 2146334722; 2146334722 ] -> 250, [ 2146334723; 2146334723 ] -> 141, [ 2146334724; 2147483643 ] -> 0, [ 2147483644; 2147483644 ] -> 196, [ 2147483645; 2147483645 ] -> 103, [ 2147483646; 2147483646 ] -> 108, [ 2147483647; 2147483647 ] -> 127, [ 2147483648; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1375922391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1375922392; 1375922395 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1375922396; 2090554843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2090554844; 2090554847 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2090554848; 3482015963 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3482015964; 3482015967 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3482015968; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1375922392 { 0x5202e8d8 +1.2273082e37 } : BV:32
=input.dst.llvm-%m
1 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3482015964 { 0xcf8b58dc -812951332 -1.8864927e32 } : BV:32
=input.dst.llvm-%n
1 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2090554844 { 0x7c9b55dc +1.21355772e122 } : BV:32
=input.dst.llvm-%x
1 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda53838Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda53839Var : BV:32
18 : Lambda53840Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 8) : BOOL
24 : and(22, 23) : BOOL
25 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
26 : bvule(25, 17) : BOOL
27 : bvule(17, 10) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 25, 25) : BV:32
30 : ite(24, 8, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
35 : bvule(18, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
38 : bvule(37, 18) : BOOL
39 : bvule(18, 37) : BOOL
40 : and(38, 39) : BOOL
41 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
42 : bvule(41, 18) : BOOL
43 : bvule(18, 10) : BOOL
44 : and(42, 43) : BOOL
45 : ite(44, 41, 41) : BV:32
46 : ite(40, 37, 45) : BV:32
47 : ite(36, 2, 46) : BV:32
48 : eq(47, 2) : BOOL
49 : and(32, 48) : BOOL
50 : ite(49, 7, 13) : BOOL
51 : lambda(18, 50) : FUNCTION[BV:32 -> BOOL]
52 : Lambda53841Var : BV:32
53 : eq(17, 2) : BOOL
54 : eq(52, 2) : BOOL
55 : and(53, 54) : BOOL
56 : 3 { 0x3 +1.35e129 } : BV:32
57 : 4 { 0x4 +1.47e129 } : BV:32
58 : bvmul(57, 52) : BV:32
59 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
60 : bvmul(57, 17) : BV:32
61 : bvadd(59, 60) : BV:32
62 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
63 : eq(61, 62) : BOOL
64 : 127 { 0x7f } : BV:8
65 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
66 : eq(61, 65) : BOOL
67 : 108 { 0x6c } : BV:8
68 : eq(61, 59) : BOOL
69 : 141 { 0x8d -115 } : BV:8
70 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
71 : eq(61, 70) : BOOL
72 : 196 { 0xc4 -60 } : BV:8
73 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
74 : eq(61, 73) : BOOL
75 : 103 { 0x67 } : BV:8
76 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
77 : eq(61, 76) : BOOL
78 : 33 { 0x21 } : BV:8
79 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
80 : eq(61, 79) : BOOL
81 : 250 { 0xfa -6 } : BV:8
82 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
83 : eq(61, 82) : BOOL
84 : 239 { 0xef -17 } : BV:8
85 : 0 { 0x0 } : BV:8
86 : ite(83, 84, 85) : BV:8
87 : ite(80, 81, 86) : BV:8
88 : ite(77, 78, 87) : BV:8
89 : ite(74, 75, 88) : BV:8
90 : ite(71, 72, 89) : BV:8
91 : ite(68, 69, 90) : BV:8
92 : ite(66, 67, 91) : BV:8
93 : ite(63, 64, 92) : BV:8
94 : bvadd(79, 60) : BV:32
95 : eq(94, 62) : BOOL
96 : eq(94, 65) : BOOL
97 : eq(94, 59) : BOOL
98 : eq(94, 70) : BOOL
99 : eq(94, 73) : BOOL
100 : eq(94, 76) : BOOL
101 : eq(94, 79) : BOOL
102 : eq(94, 82) : BOOL
103 : ite(102, 84, 85) : BV:8
104 : ite(101, 81, 103) : BV:8
105 : ite(100, 78, 104) : BV:8
106 : ite(99, 75, 105) : BV:8
107 : ite(98, 72, 106) : BV:8
108 : ite(97, 69, 107) : BV:8
109 : ite(96, 67, 108) : BV:8
110 : ite(95, 64, 109) : BV:8
111 : bvadd(82, 60) : BV:32
112 : eq(111, 62) : BOOL
113 : eq(111, 65) : BOOL
114 : eq(111, 59) : BOOL
115 : eq(111, 70) : BOOL
116 : eq(111, 73) : BOOL
117 : eq(111, 76) : BOOL
118 : eq(111, 79) : BOOL
119 : eq(111, 82) : BOOL
120 : ite(119, 84, 85) : BV:8
121 : ite(118, 81, 120) : BV:8
122 : ite(117, 78, 121) : BV:8
123 : ite(116, 75, 122) : BV:8
124 : ite(115, 72, 123) : BV:8
125 : ite(114, 69, 124) : BV:8
126 : ite(113, 67, 125) : BV:8
127 : ite(112, 64, 126) : BV:8
128 : bvadd(76, 60) : BV:32
129 : eq(128, 62) : BOOL
130 : eq(128, 65) : BOOL
131 : eq(128, 59) : BOOL
132 : eq(128, 70) : BOOL
133 : eq(128, 73) : BOOL
134 : eq(128, 76) : BOOL
135 : eq(128, 79) : BOOL
136 : eq(128, 82) : BOOL
137 : ite(136, 84, 85) : BV:8
138 : ite(135, 81, 137) : BV:8
139 : ite(134, 78, 138) : BV:8
140 : ite(133, 75, 139) : BV:8
141 : ite(132, 72, 140) : BV:8
142 : ite(131, 69, 141) : BV:8
143 : ite(130, 67, 142) : BV:8
144 : ite(129, 64, 143) : BV:8
145 : bvconcat(93, 110, 127, 144) : BV:32
146 : bvadd(56, 58, 145) : BV:32
147 : eq(146, 62) : BOOL
148 : eq(146, 65) : BOOL
149 : eq(146, 59) : BOOL
150 : eq(146, 70) : BOOL
151 : eq(146, 73) : BOOL
152 : eq(146, 76) : BOOL
153 : eq(146, 79) : BOOL
154 : eq(146, 82) : BOOL
155 : ite(154, 84, 85) : BV:8
156 : ite(153, 81, 155) : BV:8
157 : ite(152, 78, 156) : BV:8
158 : ite(151, 75, 157) : BV:8
159 : ite(150, 72, 158) : BV:8
160 : ite(149, 69, 159) : BV:8
161 : ite(148, 67, 160) : BV:8
162 : ite(147, 64, 161) : BV:8
163 : 2 { 0x2 +1.23e129 } : BV:32
164 : bvadd(163, 58, 145) : BV:32
165 : eq(164, 62) : BOOL
166 : eq(164, 65) : BOOL
167 : eq(164, 59) : BOOL
168 : eq(164, 70) : BOOL
169 : eq(164, 73) : BOOL
170 : eq(164, 76) : BOOL
171 : eq(164, 79) : BOOL
172 : eq(164, 82) : BOOL
173 : ite(172, 84, 85) : BV:8
174 : ite(171, 81, 173) : BV:8
175 : ite(170, 78, 174) : BV:8
176 : ite(169, 75, 175) : BV:8
177 : ite(168, 72, 176) : BV:8
178 : ite(167, 69, 177) : BV:8
179 : ite(166, 67, 178) : BV:8
180 : ite(165, 64, 179) : BV:8
181 : 1 { 0x1 +1.11e129 } : BV:32
182 : bvadd(181, 58, 145) : BV:32
183 : eq(182, 62) : BOOL
184 : eq(182, 65) : BOOL
185 : eq(182, 59) : BOOL
186 : eq(182, 70) : BOOL
187 : eq(182, 73) : BOOL
188 : eq(182, 76) : BOOL
189 : eq(182, 79) : BOOL
190 : eq(182, 82) : BOOL
191 : ite(190, 84, 85) : BV:8
192 : ite(189, 81, 191) : BV:8
193 : ite(188, 78, 192) : BV:8
194 : ite(187, 75, 193) : BV:8
195 : ite(186, 72, 194) : BV:8
196 : ite(185, 69, 195) : BV:8
197 : ite(184, 67, 196) : BV:8
198 : ite(183, 64, 197) : BV:8
199 : bvadd(58, 145) : BV:32
200 : eq(199, 62) : BOOL
201 : eq(199, 65) : BOOL
202 : eq(199, 59) : BOOL
203 : eq(199, 70) : BOOL
204 : eq(199, 73) : BOOL
205 : eq(199, 76) : BOOL
206 : eq(199, 79) : BOOL
207 : eq(199, 82) : BOOL
208 : ite(207, 84, 85) : BV:8
209 : ite(206, 81, 208) : BV:8
210 : ite(205, 78, 209) : BV:8
211 : ite(204, 75, 210) : BV:8
212 : ite(203, 72, 211) : BV:8
213 : ite(202, 69, 212) : BV:8
214 : ite(201, 67, 213) : BV:8
215 : ite(200, 64, 214) : BV:8
216 : bvconcat(162, 180, 198, 215) : BV:32
217 : ite(55, 2, 216) : BV:32
218 : lambda(52, 217) : FUNCTION[BV:32 -> BV:32]
219 : map(51, 218) : MAP[BV:32 -> BV:32]
220 : lambda(17, 219) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
221 : map(16, 220) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
222 : sym_const(221) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 287232 { 0x46200 +1.3424072e129 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 2) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(2, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : ite(15, 16, 1) : BV:32
18 : unit : UNIT
19 : Lambda53994Var : BV:32
20 : bvule(2, 8) : BOOL
21 : and(9, 20) : BOOL
22 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
23 : bvule(22, 2) : BOOL
24 : and(23, 11) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 8, 25) : BV:32
27 : ite(6, 1, 26) : BV:32
28 : eq(27, 1) : BOOL
29 : bvule(1, 19) : BOOL
30 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
31 : bvule(19, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
34 : bvule(33, 19) : BOOL
35 : bvule(19, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
38 : bvule(37, 19) : BOOL
39 : bvule(19, 10) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 1, 42) : BV:32
44 : eq(43, 1) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 7, 13) : BOOL
47 : lambda(19, 46) : FUNCTION[BV:32 -> BOOL]
48 : Lambda53995Var : BV:32
49 : eq(2, 1) : BOOL
50 : eq(48, 1) : BOOL
51 : and(49, 50) : BOOL
52 : 3 { 0x3 +1.35e129 } : BV:32
53 : 4 { 0x4 +1.47e129 } : BV:32
54 : bvmul(53, 48) : BV:32
55 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
56 : bvmul(53, 2) : BV:32
57 : bvadd(55, 56) : BV:32
58 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
59 : eq(57, 58) : BOOL
60 : 127 { 0x7f } : BV:8
61 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
62 : eq(57, 61) : BOOL
63 : 108 { 0x6c } : BV:8
64 : eq(57, 55) : BOOL
65 : 141 { 0x8d -115 } : BV:8
66 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
67 : eq(57, 66) : BOOL
68 : 196 { 0xc4 -60 } : BV:8
69 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
70 : eq(57, 69) : BOOL
71 : 103 { 0x67 } : BV:8
72 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
73 : eq(57, 72) : BOOL
74 : 33 { 0x21 } : BV:8
75 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
76 : eq(57, 75) : BOOL
77 : 250 { 0xfa -6 } : BV:8
78 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
79 : eq(57, 78) : BOOL
80 : 239 { 0xef -17 } : BV:8
81 : 0 { 0x0 } : BV:8
82 : ite(79, 80, 81) : BV:8
83 : ite(76, 77, 82) : BV:8
84 : ite(73, 74, 83) : BV:8
85 : ite(70, 71, 84) : BV:8
86 : ite(67, 68, 85) : BV:8
87 : ite(64, 65, 86) : BV:8
88 : ite(62, 63, 87) : BV:8
89 : ite(59, 60, 88) : BV:8
90 : bvadd(75, 56) : BV:32
91 : eq(90, 58) : BOOL
92 : eq(90, 61) : BOOL
93 : eq(90, 55) : BOOL
94 : eq(90, 66) : BOOL
95 : eq(90, 69) : BOOL
96 : eq(90, 72) : BOOL
97 : eq(90, 75) : BOOL
98 : eq(90, 78) : BOOL
99 : ite(98, 80, 81) : BV:8
100 : ite(97, 77, 99) : BV:8
101 : ite(96, 74, 100) : BV:8
102 : ite(95, 71, 101) : BV:8
103 : ite(94, 68, 102) : BV:8
104 : ite(93, 65, 103) : BV:8
105 : ite(92, 63, 104) : BV:8
106 : ite(91, 60, 105) : BV:8
107 : bvadd(78, 56) : BV:32
108 : eq(107, 58) : BOOL
109 : eq(107, 61) : BOOL
110 : eq(107, 55) : BOOL
111 : eq(107, 66) : BOOL
112 : eq(107, 69) : BOOL
113 : eq(107, 72) : BOOL
114 : eq(107, 75) : BOOL
115 : eq(107, 78) : BOOL
116 : ite(115, 80, 81) : BV:8
117 : ite(114, 77, 116) : BV:8
118 : ite(113, 74, 117) : BV:8
119 : ite(112, 71, 118) : BV:8
120 : ite(111, 68, 119) : BV:8
121 : ite(110, 65, 120) : BV:8
122 : ite(109, 63, 121) : BV:8
123 : ite(108, 60, 122) : BV:8
124 : bvadd(72, 56) : BV:32
125 : eq(124, 58) : BOOL
126 : eq(124, 61) : BOOL
127 : eq(124, 55) : BOOL
128 : eq(124, 66) : BOOL
129 : eq(124, 69) : BOOL
130 : eq(124, 72) : BOOL
131 : eq(124, 75) : BOOL
132 : eq(124, 78) : BOOL
133 : ite(132, 80, 81) : BV:8
134 : ite(131, 77, 133) : BV:8
135 : ite(130, 74, 134) : BV:8
136 : ite(129, 71, 135) : BV:8
137 : ite(128, 68, 136) : BV:8
138 : ite(127, 65, 137) : BV:8
139 : ite(126, 63, 138) : BV:8
140 : ite(125, 60, 139) : BV:8
141 : bvconcat(89, 106, 123, 140) : BV:32
142 : bvadd(52, 54, 141) : BV:32
143 : eq(142, 58) : BOOL
144 : eq(142, 61) : BOOL
145 : eq(142, 55) : BOOL
146 : eq(142, 66) : BOOL
147 : eq(142, 69) : BOOL
148 : eq(142, 72) : BOOL
149 : eq(142, 75) : BOOL
150 : eq(142, 78) : BOOL
151 : ite(150, 80, 81) : BV:8
152 : ite(149, 77, 151) : BV:8
153 : ite(148, 74, 152) : BV:8
154 : ite(147, 71, 153) : BV:8
155 : ite(146, 68, 154) : BV:8
156 : ite(145, 65, 155) : BV:8
157 : ite(144, 63, 156) : BV:8
158 : ite(143, 60, 157) : BV:8
159 : 2 { 0x2 +1.23e129 } : BV:32
160 : bvadd(159, 54, 141) : BV:32
161 : eq(160, 58) : BOOL
162 : eq(160, 61) : BOOL
163 : eq(160, 55) : BOOL
164 : eq(160, 66) : BOOL
165 : eq(160, 69) : BOOL
166 : eq(160, 72) : BOOL
167 : eq(160, 75) : BOOL
168 : eq(160, 78) : BOOL
169 : ite(168, 80, 81) : BV:8
170 : ite(167, 77, 169) : BV:8
171 : ite(166, 74, 170) : BV:8
172 : ite(165, 71, 171) : BV:8
173 : ite(164, 68, 172) : BV:8
174 : ite(163, 65, 173) : BV:8
175 : ite(162, 63, 174) : BV:8
176 : ite(161, 60, 175) : BV:8
177 : bvadd(16, 54, 141) : BV:32
178 : eq(177, 58) : BOOL
179 : eq(177, 61) : BOOL
180 : eq(177, 55) : BOOL
181 : eq(177, 66) : BOOL
182 : eq(177, 69) : BOOL
183 : eq(177, 72) : BOOL
184 : eq(177, 75) : BOOL
185 : eq(177, 78) : BOOL
186 : ite(185, 80, 81) : BV:8
187 : ite(184, 77, 186) : BV:8
188 : ite(183, 74, 187) : BV:8
189 : ite(182, 71, 188) : BV:8
190 : ite(181, 68, 189) : BV:8
191 : ite(180, 65, 190) : BV:8
192 : ite(179, 63, 191) : BV:8
193 : ite(178, 60, 192) : BV:8
194 : bvadd(54, 141) : BV:32
195 : eq(194, 58) : BOOL
196 : eq(194, 61) : BOOL
197 : eq(194, 55) : BOOL
198 : eq(194, 66) : BOOL
199 : eq(194, 69) : BOOL
200 : eq(194, 72) : BOOL
201 : eq(194, 75) : BOOL
202 : eq(194, 78) : BOOL
203 : ite(202, 80, 81) : BV:8
204 : ite(201, 77, 203) : BV:8
205 : ite(200, 74, 204) : BV:8
206 : ite(199, 71, 205) : BV:8
207 : ite(198, 68, 206) : BV:8
208 : ite(197, 65, 207) : BV:8
209 : ite(196, 63, 208) : BV:8
210 : ite(195, 60, 209) : BV:8
211 : bvconcat(158, 176, 193, 210) : BV:32
212 : ite(51, 1, 211) : BV:32
213 : lambda(48, 212) : FUNCTION[BV:32 -> BV:32]
214 : map(47, 213) : MAP[BV:32 -> BV:32]
215 : sum(17, 18, 214) : SUM[UNIT,MAP[BV:32 -> BV:32]]
216 : sym_const(215) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 1851217596 { 0x6e5756bc +1.68233442e93 } : BV:32
=input.spec-%var-ret-0.L3%19%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%19%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-12.L3%19%bbentry
1 : 287233 { 0x46201 +1.3424084e129 } : BV:32
=input.spec-%var-j-0.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.src.spec-ghostvar.itervar.2.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x_i-1.L3%19%bbentry
1 : Lambda54010Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 287232 { 0x46200 +1.3424072e129 } : BV:32
4 : bvule(2, 3) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(3, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 3) : BOOL
10 : bvule(3, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(3, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 2, 18) : BV:32
20 : eq(19, 2) : BOOL
21 : bvule(2, 1) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(1, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 1) : BOOL
27 : bvule(1, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 1) : BOOL
31 : bvule(1, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 2, 34) : BV:32
36 : eq(35, 2) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 40) : FUNCTION[BV:32 -> BOOL]
42 : Lambda54011Var : BV:32
43 : eq(3, 2) : BOOL
44 : eq(42, 2) : BOOL
45 : and(43, 44) : BOOL
46 : 3 { 0x3 +1.35e129 } : BV:32
47 : 4 { 0x4 +1.47e129 } : BV:32
48 : bvmul(47, 42) : BV:32
49 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
50 : bvmul(47, 3) : BV:32
51 : bvadd(49, 50) : BV:32
52 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
53 : eq(51, 52) : BOOL
54 : 127 { 0x7f } : BV:8
55 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
56 : eq(51, 55) : BOOL
57 : 108 { 0x6c } : BV:8
58 : eq(51, 49) : BOOL
59 : 141 { 0x8d -115 } : BV:8
60 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
61 : eq(51, 60) : BOOL
62 : 196 { 0xc4 -60 } : BV:8
63 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
64 : eq(51, 63) : BOOL
65 : 103 { 0x67 } : BV:8
66 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
67 : eq(51, 66) : BOOL
68 : 33 { 0x21 } : BV:8
69 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
70 : eq(51, 69) : BOOL
71 : 250 { 0xfa -6 } : BV:8
72 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
73 : eq(51, 72) : BOOL
74 : 239 { 0xef -17 } : BV:8
75 : 0 { 0x0 } : BV:8
76 : ite(73, 74, 75) : BV:8
77 : ite(70, 71, 76) : BV:8
78 : ite(67, 68, 77) : BV:8
79 : ite(64, 65, 78) : BV:8
80 : ite(61, 62, 79) : BV:8
81 : ite(58, 59, 80) : BV:8
82 : ite(56, 57, 81) : BV:8
83 : ite(53, 54, 82) : BV:8
84 : bvadd(69, 50) : BV:32
85 : eq(84, 52) : BOOL
86 : eq(84, 55) : BOOL
87 : eq(84, 49) : BOOL
88 : eq(84, 60) : BOOL
89 : eq(84, 63) : BOOL
90 : eq(84, 66) : BOOL
91 : eq(84, 69) : BOOL
92 : eq(84, 72) : BOOL
93 : ite(92, 74, 75) : BV:8
94 : ite(91, 71, 93) : BV:8
95 : ite(90, 68, 94) : BV:8
96 : ite(89, 65, 95) : BV:8
97 : ite(88, 62, 96) : BV:8
98 : ite(87, 59, 97) : BV:8
99 : ite(86, 57, 98) : BV:8
100 : ite(85, 54, 99) : BV:8
101 : bvadd(72, 50) : BV:32
102 : eq(101, 52) : BOOL
103 : eq(101, 55) : BOOL
104 : eq(101, 49) : BOOL
105 : eq(101, 60) : BOOL
106 : eq(101, 63) : BOOL
107 : eq(101, 66) : BOOL
108 : eq(101, 69) : BOOL
109 : eq(101, 72) : BOOL
110 : ite(109, 74, 75) : BV:8
111 : ite(108, 71, 110) : BV:8
112 : ite(107, 68, 111) : BV:8
113 : ite(106, 65, 112) : BV:8
114 : ite(105, 62, 113) : BV:8
115 : ite(104, 59, 114) : BV:8
116 : ite(103, 57, 115) : BV:8
117 : ite(102, 54, 116) : BV:8
118 : bvadd(66, 50) : BV:32
119 : eq(118, 52) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 49) : BOOL
122 : eq(118, 60) : BOOL
123 : eq(118, 63) : BOOL
124 : eq(118, 66) : BOOL
125 : eq(118, 69) : BOOL
126 : eq(118, 72) : BOOL
127 : ite(126, 74, 75) : BV:8
128 : ite(125, 71, 127) : BV:8
129 : ite(124, 68, 128) : BV:8
130 : ite(123, 65, 129) : BV:8
131 : ite(122, 62, 130) : BV:8
132 : ite(121, 59, 131) : BV:8
133 : ite(120, 57, 132) : BV:8
134 : ite(119, 54, 133) : BV:8
135 : bvconcat(83, 100, 117, 134) : BV:32
136 : bvadd(46, 48, 135) : BV:32
137 : eq(136, 52) : BOOL
138 : eq(136, 55) : BOOL
139 : eq(136, 49) : BOOL
140 : eq(136, 60) : BOOL
141 : eq(136, 63) : BOOL
142 : eq(136, 66) : BOOL
143 : eq(136, 69) : BOOL
144 : eq(136, 72) : BOOL
145 : ite(144, 74, 75) : BV:8
146 : ite(143, 71, 145) : BV:8
147 : ite(142, 68, 146) : BV:8
148 : ite(141, 65, 147) : BV:8
149 : ite(140, 62, 148) : BV:8
150 : ite(139, 59, 149) : BV:8
151 : ite(138, 57, 150) : BV:8
152 : ite(137, 54, 151) : BV:8
153 : 2 { 0x2 +1.23e129 } : BV:32
154 : bvadd(153, 48, 135) : BV:32
155 : eq(154, 52) : BOOL
156 : eq(154, 55) : BOOL
157 : eq(154, 49) : BOOL
158 : eq(154, 60) : BOOL
159 : eq(154, 63) : BOOL
160 : eq(154, 66) : BOOL
161 : eq(154, 69) : BOOL
162 : eq(154, 72) : BOOL
163 : ite(162, 74, 75) : BV:8
164 : ite(161, 71, 163) : BV:8
165 : ite(160, 68, 164) : BV:8
166 : ite(159, 65, 165) : BV:8
167 : ite(158, 62, 166) : BV:8
168 : ite(157, 59, 167) : BV:8
169 : ite(156, 57, 168) : BV:8
170 : ite(155, 54, 169) : BV:8
171 : 1 { 0x1 +1.11e129 } : BV:32
172 : bvadd(171, 48, 135) : BV:32
173 : eq(172, 52) : BOOL
174 : eq(172, 55) : BOOL
175 : eq(172, 49) : BOOL
176 : eq(172, 60) : BOOL
177 : eq(172, 63) : BOOL
178 : eq(172, 66) : BOOL
179 : eq(172, 69) : BOOL
180 : eq(172, 72) : BOOL
181 : ite(180, 74, 75) : BV:8
182 : ite(179, 71, 181) : BV:8
183 : ite(178, 68, 182) : BV:8
184 : ite(177, 65, 183) : BV:8
185 : ite(176, 62, 184) : BV:8
186 : ite(175, 59, 185) : BV:8
187 : ite(174, 57, 186) : BV:8
188 : ite(173, 54, 187) : BV:8
189 : bvadd(48, 135) : BV:32
190 : eq(189, 52) : BOOL
191 : eq(189, 55) : BOOL
192 : eq(189, 49) : BOOL
193 : eq(189, 60) : BOOL
194 : eq(189, 63) : BOOL
195 : eq(189, 66) : BOOL
196 : eq(189, 69) : BOOL
197 : eq(189, 72) : BOOL
198 : ite(197, 74, 75) : BV:8
199 : ite(196, 71, 198) : BV:8
200 : ite(195, 68, 199) : BV:8
201 : ite(194, 65, 200) : BV:8
202 : ite(193, 62, 201) : BV:8
203 : ite(192, 59, 202) : BV:8
204 : ite(191, 57, 203) : BV:8
205 : ite(190, 54, 204) : BV:8
206 : bvconcat(152, 170, 188, 205) : BV:32
207 : ite(45, 2, 206) : BV:32
208 : lambda(42, 207) : FUNCTION[BV:32 -> BV:32]
209 : map(41, 208) : MAP[BV:32 -> BV:32]
210 : sym_const(209) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 287232 { 0x46200 +1.3424072e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 36920455 { 0x2335c87 +1.40126121e133 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.src.llvm-ghostvar.itervar.2.Lfor.cond1%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%ret.1.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%j.0.phi.tmpvar.for.body.Lfor.cond1%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3482015964 { 0xcf8b58dc -812951332 -1.8864927e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3482015967 { 0xcf8b58df -812951329 -1.8864963e32 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2090554844 { 0x7c9b55dc +1.21355772e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2090554847 { 0x7c9b55df +1.21355807e122 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1375922392 { 0x5202e8d8 +1.2273082e37 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1375922395 { 0x5202e8db +1.2273118e37 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda53710Var : BV:32
2 : Lambda53711Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : bvule(1, 12) : BOOL
21 : and(13, 20) : BOOL
22 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
23 : bvule(22, 1) : BOOL
24 : and(23, 15) : BOOL
25 : ite(24, 22, 22) : BV:32
26 : ite(21, 12, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
31 : bvule(2, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
34 : bvule(33, 2) : BOOL
35 : bvule(2, 33) : BOOL
36 : and(34, 35) : BOOL
37 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
38 : bvule(37, 2) : BOOL
39 : bvule(2, 14) : BOOL
40 : and(38, 39) : BOOL
41 : ite(40, 37, 37) : BV:32
42 : ite(36, 33, 41) : BV:32
43 : ite(32, 3, 42) : BV:32
44 : eq(43, 3) : BOOL
45 : and(28, 44) : BOOL
46 : ite(45, 11, 17) : BOOL
47 : and(19, 46) : BOOL
48 : 3 { 0x3 +1.35e129 } : BV:32
49 : 4 { 0x4 +1.47e129 } : BV:32
50 : bvmul(49, 2) : BV:32
51 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
52 : bvmul(49, 1) : BV:32
53 : bvadd(51, 52) : BV:32
54 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
55 : eq(53, 54) : BOOL
56 : 127 { 0x7f } : BV:8
57 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
58 : eq(53, 57) : BOOL
59 : 108 { 0x6c } : BV:8
60 : eq(53, 51) : BOOL
61 : 141 { 0x8d -115 } : BV:8
62 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
63 : eq(53, 62) : BOOL
64 : 196 { 0xc4 -60 } : BV:8
65 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
66 : eq(53, 65) : BOOL
67 : 103 { 0x67 } : BV:8
68 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
69 : eq(53, 68) : BOOL
70 : 33 { 0x21 } : BV:8
71 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
72 : eq(53, 71) : BOOL
73 : 250 { 0xfa -6 } : BV:8
74 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
75 : eq(53, 74) : BOOL
76 : 239 { 0xef -17 } : BV:8
77 : 0 { 0x0 } : BV:8
78 : ite(75, 76, 77) : BV:8
79 : ite(72, 73, 78) : BV:8
80 : ite(69, 70, 79) : BV:8
81 : ite(66, 67, 80) : BV:8
82 : ite(63, 64, 81) : BV:8
83 : ite(60, 61, 82) : BV:8
84 : ite(58, 59, 83) : BV:8
85 : ite(55, 56, 84) : BV:8
86 : bvadd(71, 52) : BV:32
87 : eq(86, 54) : BOOL
88 : eq(86, 57) : BOOL
89 : eq(86, 51) : BOOL
90 : eq(86, 62) : BOOL
91 : eq(86, 65) : BOOL
92 : eq(86, 68) : BOOL
93 : eq(86, 71) : BOOL
94 : eq(86, 74) : BOOL
95 : ite(94, 76, 77) : BV:8
96 : ite(93, 73, 95) : BV:8
97 : ite(92, 70, 96) : BV:8
98 : ite(91, 67, 97) : BV:8
99 : ite(90, 64, 98) : BV:8
100 : ite(89, 61, 99) : BV:8
101 : ite(88, 59, 100) : BV:8
102 : ite(87, 56, 101) : BV:8
103 : bvadd(74, 52) : BV:32
104 : eq(103, 54) : BOOL
105 : eq(103, 57) : BOOL
106 : eq(103, 51) : BOOL
107 : eq(103, 62) : BOOL
108 : eq(103, 65) : BOOL
109 : eq(103, 68) : BOOL
110 : eq(103, 71) : BOOL
111 : eq(103, 74) : BOOL
112 : ite(111, 76, 77) : BV:8
113 : ite(110, 73, 112) : BV:8
114 : ite(109, 70, 113) : BV:8
115 : ite(108, 67, 114) : BV:8
116 : ite(107, 64, 115) : BV:8
117 : ite(106, 61, 116) : BV:8
118 : ite(105, 59, 117) : BV:8
119 : ite(104, 56, 118) : BV:8
120 : bvadd(68, 52) : BV:32
121 : eq(120, 54) : BOOL
122 : eq(120, 57) : BOOL
123 : eq(120, 51) : BOOL
124 : eq(120, 62) : BOOL
125 : eq(120, 65) : BOOL
126 : eq(120, 68) : BOOL
127 : eq(120, 71) : BOOL
128 : eq(120, 74) : BOOL
129 : ite(128, 76, 77) : BV:8
130 : ite(127, 73, 129) : BV:8
131 : ite(126, 70, 130) : BV:8
132 : ite(125, 67, 131) : BV:8
133 : ite(124, 64, 132) : BV:8
134 : ite(123, 61, 133) : BV:8
135 : ite(122, 59, 134) : BV:8
136 : ite(121, 56, 135) : BV:8
137 : bvconcat(85, 102, 119, 136) : BV:32
138 : bvadd(48, 50, 137) : BV:32
139 : eq(138, 54) : BOOL
140 : eq(138, 57) : BOOL
141 : eq(138, 51) : BOOL
142 : eq(138, 62) : BOOL
143 : eq(138, 65) : BOOL
144 : eq(138, 68) : BOOL
145 : eq(138, 71) : BOOL
146 : eq(138, 74) : BOOL
147 : ite(146, 76, 77) : BV:8
148 : ite(145, 73, 147) : BV:8
149 : ite(144, 70, 148) : BV:8
150 : ite(143, 67, 149) : BV:8
151 : ite(142, 64, 150) : BV:8
152 : ite(141, 61, 151) : BV:8
153 : ite(140, 59, 152) : BV:8
154 : ite(139, 56, 153) : BV:8
155 : 2 { 0x2 +1.23e129 } : BV:32
156 : bvadd(155, 50, 137) : BV:32
157 : eq(156, 54) : BOOL
158 : eq(156, 57) : BOOL
159 : eq(156, 51) : BOOL
160 : eq(156, 62) : BOOL
161 : eq(156, 65) : BOOL
162 : eq(156, 68) : BOOL
163 : eq(156, 71) : BOOL
164 : eq(156, 74) : BOOL
165 : ite(164, 76, 77) : BV:8
166 : ite(163, 73, 165) : BV:8
167 : ite(162, 70, 166) : BV:8
168 : ite(161, 67, 167) : BV:8
169 : ite(160, 64, 168) : BV:8
170 : ite(159, 61, 169) : BV:8
171 : ite(158, 59, 170) : BV:8
172 : ite(157, 56, 171) : BV:8
173 : 1 { 0x1 +1.11e129 } : BV:32
174 : bvadd(173, 50, 137) : BV:32
175 : eq(174, 54) : BOOL
176 : eq(174, 57) : BOOL
177 : eq(174, 51) : BOOL
178 : eq(174, 62) : BOOL
179 : eq(174, 65) : BOOL
180 : eq(174, 68) : BOOL
181 : eq(174, 71) : BOOL
182 : eq(174, 74) : BOOL
183 : ite(182, 76, 77) : BV:8
184 : ite(181, 73, 183) : BV:8
185 : ite(180, 70, 184) : BV:8
186 : ite(179, 67, 185) : BV:8
187 : ite(178, 64, 186) : BV:8
188 : ite(177, 61, 187) : BV:8
189 : ite(176, 59, 188) : BV:8
190 : ite(175, 56, 189) : BV:8
191 : bvadd(50, 137) : BV:32
192 : eq(191, 54) : BOOL
193 : eq(191, 57) : BOOL
194 : eq(191, 51) : BOOL
195 : eq(191, 62) : BOOL
196 : eq(191, 65) : BOOL
197 : eq(191, 68) : BOOL
198 : eq(191, 71) : BOOL
199 : eq(191, 74) : BOOL
200 : ite(199, 76, 77) : BV:8
201 : ite(198, 73, 200) : BV:8
202 : ite(197, 70, 201) : BV:8
203 : ite(196, 67, 202) : BV:8
204 : ite(195, 64, 203) : BV:8
205 : ite(194, 61, 204) : BV:8
206 : ite(193, 59, 205) : BV:8
207 : ite(192, 56, 206) : BV:8
208 : bvconcat(154, 172, 190, 207) : BV:32
209 : ite(6, 3, 208) : BV:32
210 : ite(47, 208, 209) : BV:32
211 : ite(6, 3, 210) : BV:32
212 : lambda(1, 2, 211) : FUNCTION[BV:32,BV:32 -> BV:32]
213 : sym_const(212) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda53715Var : BV:32
2 : Lambda53716Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2147533553 ] -> true, [ 2147533554; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2147533553 ] -> true, [ 2147533554; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda53724Var : BV:32
2 : Lambda53725Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147533553 { 0x8000c2f1 -2147433743 -1.594913e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147533554 { 0x8000c2f2 -2147433742 -1.594925e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 2147533555 { 0x8000c2f3 -2147433741 -1.594937e129 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : ite(16, 12, 12) : BV:32
18 : ite(11, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : 508681 { 0x7c309 +1.6063950e129 } : BV:32
23 : bvule(2, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 508682 { 0x7c30a +1.6063961e129 } : BV:32
26 : bvule(25, 2) : BOOL
27 : bvule(2, 25) : BOOL
28 : and(26, 27) : BOOL
29 : 508683 { 0x7c30b +1.6063973e129 } : BV:32
30 : bvule(29, 2) : BOOL
31 : bvule(2, 14) : BOOL
32 : and(30, 31) : BOOL
33 : ite(32, 29, 29) : BV:32
34 : ite(28, 25, 33) : BV:32
35 : ite(24, 3, 34) : BV:32
36 : eq(35, 3) : BOOL
37 : and(20, 36) : BOOL
38 : 1 { 0x1 } : BOOL
39 : 0 { 0x0 } : BOOL
40 : ite(37, 38, 39) : BOOL
41 : lambda(1, 2, 40) : FUNCTION[BV:32,BV:32 -> BOOL]
42 : sym_const(41) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda53720Var : BV:32
2 : Lambda53721Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
11 : bvmul(8, 1) : BV:32
12 : bvadd(10, 11) : BV:32
13 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : 127 { 0x7f } : BV:8
16 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
17 : eq(12, 16) : BOOL
18 : 108 { 0x6c } : BV:8
19 : eq(12, 10) : BOOL
20 : 141 { 0x8d -115 } : BV:8
21 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
22 : eq(12, 21) : BOOL
23 : 196 { 0xc4 -60 } : BV:8
24 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
25 : eq(12, 24) : BOOL
26 : 103 { 0x67 } : BV:8
27 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
28 : eq(12, 27) : BOOL
29 : 33 { 0x21 } : BV:8
30 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
31 : eq(12, 30) : BOOL
32 : 250 { 0xfa -6 } : BV:8
33 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
34 : eq(12, 33) : BOOL
35 : 239 { 0xef -17 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : ite(22, 23, 40) : BV:8
42 : ite(19, 20, 41) : BV:8
43 : ite(17, 18, 42) : BV:8
44 : ite(14, 15, 43) : BV:8
45 : bvadd(30, 11) : BV:32
46 : eq(45, 13) : BOOL
47 : eq(45, 16) : BOOL
48 : eq(45, 10) : BOOL
49 : eq(45, 21) : BOOL
50 : eq(45, 24) : BOOL
51 : eq(45, 27) : BOOL
52 : eq(45, 30) : BOOL
53 : eq(45, 33) : BOOL
54 : ite(53, 35, 36) : BV:8
55 : ite(52, 32, 54) : BV:8
56 : ite(51, 29, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : ite(49, 23, 57) : BV:8
59 : ite(48, 20, 58) : BV:8
60 : ite(47, 18, 59) : BV:8
61 : ite(46, 15, 60) : BV:8
62 : bvadd(33, 11) : BV:32
63 : eq(62, 13) : BOOL
64 : eq(62, 16) : BOOL
65 : eq(62, 10) : BOOL
66 : eq(62, 21) : BOOL
67 : eq(62, 24) : BOOL
68 : eq(62, 27) : BOOL
69 : eq(62, 30) : BOOL
70 : eq(62, 33) : BOOL
71 : ite(70, 35, 36) : BV:8
72 : ite(69, 32, 71) : BV:8
73 : ite(68, 29, 72) : BV:8
74 : ite(67, 26, 73) : BV:8
75 : ite(66, 23, 74) : BV:8
76 : ite(65, 20, 75) : BV:8
77 : ite(64, 18, 76) : BV:8
78 : ite(63, 15, 77) : BV:8
79 : bvadd(27, 11) : BV:32
80 : eq(79, 13) : BOOL
81 : eq(79, 16) : BOOL
82 : eq(79, 10) : BOOL
83 : eq(79, 21) : BOOL
84 : eq(79, 24) : BOOL
85 : eq(79, 27) : BOOL
86 : eq(79, 30) : BOOL
87 : eq(79, 33) : BOOL
88 : ite(87, 35, 36) : BV:8
89 : ite(86, 32, 88) : BV:8
90 : ite(85, 29, 89) : BV:8
91 : ite(84, 26, 90) : BV:8
92 : ite(83, 23, 91) : BV:8
93 : ite(82, 20, 92) : BV:8
94 : ite(81, 18, 93) : BV:8
95 : ite(80, 15, 94) : BV:8
96 : bvconcat(44, 61, 78, 95) : BV:32
97 : bvadd(7, 9, 96) : BV:32
98 : eq(97, 13) : BOOL
99 : eq(97, 16) : BOOL
100 : eq(97, 10) : BOOL
101 : eq(97, 21) : BOOL
102 : eq(97, 24) : BOOL
103 : eq(97, 27) : BOOL
104 : eq(97, 30) : BOOL
105 : eq(97, 33) : BOOL
106 : ite(105, 35, 36) : BV:8
107 : ite(104, 32, 106) : BV:8
108 : ite(103, 29, 107) : BV:8
109 : ite(102, 26, 108) : BV:8
110 : ite(101, 23, 109) : BV:8
111 : ite(100, 20, 110) : BV:8
112 : ite(99, 18, 111) : BV:8
113 : ite(98, 15, 112) : BV:8
114 : 2 { 0x2 +1.23e129 } : BV:32
115 : bvadd(114, 9, 96) : BV:32
116 : eq(115, 13) : BOOL
117 : eq(115, 16) : BOOL
118 : eq(115, 10) : BOOL
119 : eq(115, 21) : BOOL
120 : eq(115, 24) : BOOL
121 : eq(115, 27) : BOOL
122 : eq(115, 30) : BOOL
123 : eq(115, 33) : BOOL
124 : ite(123, 35, 36) : BV:8
125 : ite(122, 32, 124) : BV:8
126 : ite(121, 29, 125) : BV:8
127 : ite(120, 26, 126) : BV:8
128 : ite(119, 23, 127) : BV:8
129 : ite(118, 20, 128) : BV:8
130 : ite(117, 18, 129) : BV:8
131 : ite(116, 15, 130) : BV:8
132 : 1 { 0x1 +1.11e129 } : BV:32
133 : bvadd(132, 9, 96) : BV:32
134 : eq(133, 13) : BOOL
135 : eq(133, 16) : BOOL
136 : eq(133, 10) : BOOL
137 : eq(133, 21) : BOOL
138 : eq(133, 24) : BOOL
139 : eq(133, 27) : BOOL
140 : eq(133, 30) : BOOL
141 : eq(133, 33) : BOOL
142 : ite(141, 35, 36) : BV:8
143 : ite(140, 32, 142) : BV:8
144 : ite(139, 29, 143) : BV:8
145 : ite(138, 26, 144) : BV:8
146 : ite(137, 23, 145) : BV:8
147 : ite(136, 20, 146) : BV:8
148 : ite(135, 18, 147) : BV:8
149 : ite(134, 15, 148) : BV:8
150 : bvadd(9, 96) : BV:32
151 : eq(150, 13) : BOOL
152 : eq(150, 16) : BOOL
153 : eq(150, 10) : BOOL
154 : eq(150, 21) : BOOL
155 : eq(150, 24) : BOOL
156 : eq(150, 27) : BOOL
157 : eq(150, 30) : BOOL
158 : eq(150, 33) : BOOL
159 : ite(158, 35, 36) : BV:8
160 : ite(157, 32, 159) : BV:8
161 : ite(156, 29, 160) : BV:8
162 : ite(155, 26, 161) : BV:8
163 : ite(154, 23, 162) : BV:8
164 : ite(153, 20, 163) : BV:8
165 : ite(152, 18, 164) : BV:8
166 : ite(151, 15, 165) : BV:8
167 : bvconcat(113, 131, 149, 166) : BV:32
168 : ite(6, 3, 167) : BV:32
169 : lambda(1, 2, 168) : FUNCTION[BV:32,BV:32 -> BV:32]
170 : sym_const(169) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : Lambda53731Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : Lambda53735Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : Lambda53736Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 287232 { 0x46200 +1.3424072e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(7, 1) : BV:32
9 : 2137810884 { 0x7f6c67c4 +1.84691667e127 } : BV:32
10 : bvadd(6, 8, 9) : BV:32
11 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : 127 { 0x7f } : BV:8
14 : 2147483646 { 0x7ffffffe +1.99999976e128 } : BV:32
15 : eq(10, 14) : BOOL
16 : 108 { 0x6c } : BV:8
17 : 2146334723 { 0x7fee7803 +1.86303746e128 } : BV:32
18 : eq(10, 17) : BOOL
19 : 141 { 0x8d -115 } : BV:8
20 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
21 : eq(10, 20) : BOOL
22 : 196 { 0xc4 -60 } : BV:8
23 : 2147483645 { 0x7ffffffd +1.99999964e128 } : BV:32
24 : eq(10, 23) : BOOL
25 : 103 { 0x67 } : BV:8
26 : 2146334720 { 0x7fee7800 +1.86303710e128 } : BV:32
27 : eq(10, 26) : BOOL
28 : 33 { 0x21 } : BV:8
29 : 2146334722 { 0x7fee7802 +1.86303734e128 } : BV:32
30 : eq(10, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 2146334721 { 0x7fee7801 +1.86303722e128 } : BV:32
33 : eq(10, 32) : BOOL
34 : 239 { 0xef -17 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : ite(27, 28, 37) : BV:8
39 : ite(24, 25, 38) : BV:8
40 : ite(21, 22, 39) : BV:8
41 : ite(18, 19, 40) : BV:8
42 : ite(15, 16, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : 2 { 0x2 +1.23e129 } : BV:32
45 : bvadd(44, 8, 9) : BV:32
46 : eq(45, 11) : BOOL
47 : eq(45, 14) : BOOL
48 : eq(45, 17) : BOOL
49 : eq(45, 20) : BOOL
50 : eq(45, 23) : BOOL
51 : eq(45, 26) : BOOL
52 : eq(45, 29) : BOOL
53 : eq(45, 32) : BOOL
54 : ite(53, 34, 35) : BV:8
55 : ite(52, 31, 54) : BV:8
56 : ite(51, 28, 55) : BV:8
57 : ite(50, 25, 56) : BV:8
58 : ite(49, 22, 57) : BV:8
59 : ite(48, 19, 58) : BV:8
60 : ite(47, 16, 59) : BV:8
61 : ite(46, 13, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 8, 9) : BV:32
64 : eq(63, 11) : BOOL
65 : eq(63, 14) : BOOL
66 : eq(63, 17) : BOOL
67 : eq(63, 20) : BOOL
68 : eq(63, 23) : BOOL
69 : eq(63, 26) : BOOL
70 : eq(63, 29) : BOOL
71 : eq(63, 32) : BOOL
72 : ite(71, 34, 35) : BV:8
73 : ite(70, 31, 72) : BV:8
74 : ite(69, 28, 73) : BV:8
75 : ite(68, 25, 74) : BV:8
76 : ite(67, 22, 75) : BV:8
77 : ite(66, 19, 76) : BV:8
78 : ite(65, 16, 77) : BV:8
79 : ite(64, 13, 78) : BV:8
80 : bvadd(8, 9) : BV:32
81 : eq(80, 11) : BOOL
82 : eq(80, 14) : BOOL
83 : eq(80, 17) : BOOL
84 : eq(80, 20) : BOOL
85 : eq(80, 23) : BOOL
86 : eq(80, 26) : BOOL
87 : eq(80, 29) : BOOL
88 : eq(80, 32) : BOOL
89 : ite(88, 34, 35) : BV:8
90 : ite(87, 31, 89) : BV:8
91 : ite(86, 28, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 22, 92) : BV:8
94 : ite(83, 19, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : bvconcat(43, 61, 79, 96) : BV:32
98 : ite(5, 2, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 508681 ] -> true, [ 508682; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-ret-1.L3%7%bbentry_0_0
1 : 0 { 0x0 } : BV:1
=counter_example.random_seed
1379134855
=counter_example_end
=global nodece 65 num_edges_traversed 3
=global nodece 65 nodece_visted_pcs: 
L3%19%bbentry_Lfor.cond1%1%bbentry
=global nodece 66
=global nodece 66 nodece z3v487.ce5175.num_edges_traversed0
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(epsilon)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3v487.ce5175 15491959bfdcc4a5427dc489c0251f4a
=input.spec-%var-x-1
1 : Lambda59804Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda59805Var : BV:32
18 : Lambda59806Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda59807Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : 3 { 0x3 +1.35e129 } : BV:32
67 : 4 { 0x4 +1.47e129 } : BV:32
68 : bvmul(67, 60) : BV:32
69 : bvmul(67, 17) : BV:32
70 : bvadd(66, 69) : BV:32
71 : eq(70, 2) : BOOL
72 : 40 { 0x28 } : BV:8
73 : 16 { 0x10 +1.190e129 } : BV:32
74 : eq(70, 73) : BOOL
75 : 157 { 0x9d -99 } : BV:8
76 : 18 { 0x12 +1.214e129 } : BV:32
77 : eq(70, 76) : BOOL
78 : 133 { 0x85 -123 } : BV:8
79 : eq(70, 42) : BOOL
80 : 72 { 0x48 } : BV:8
81 : eq(70, 66) : BOOL
82 : 194 { 0xc2 -62 } : BV:8
83 : 17 { 0x11 +1.202e129 } : BV:32
84 : eq(70, 83) : BOOL
85 : 129 { 0x81 -127 } : BV:8
86 : 19 { 0x13 +1.226e129 } : BV:32
87 : eq(70, 86) : BOOL
88 : 10 { 0xa } : BV:8
89 : 0 { 0x0 } : BV:8
90 : ite(87, 88, 89) : BV:8
91 : ite(84, 85, 90) : BV:8
92 : ite(81, 82, 91) : BV:8
93 : ite(79, 80, 92) : BV:8
94 : ite(77, 78, 93) : BV:8
95 : ite(74, 75, 94) : BV:8
96 : ite(71, 72, 95) : BV:8
97 : bvadd(46, 69) : BV:32
98 : eq(97, 2) : BOOL
99 : eq(97, 73) : BOOL
100 : eq(97, 76) : BOOL
101 : eq(97, 42) : BOOL
102 : eq(97, 66) : BOOL
103 : eq(97, 83) : BOOL
104 : eq(97, 86) : BOOL
105 : ite(104, 88, 89) : BV:8
106 : ite(103, 85, 105) : BV:8
107 : ite(102, 82, 106) : BV:8
108 : ite(101, 80, 107) : BV:8
109 : ite(100, 78, 108) : BV:8
110 : ite(99, 75, 109) : BV:8
111 : ite(98, 72, 110) : BV:8
112 : bvadd(42, 69) : BV:32
113 : eq(112, 2) : BOOL
114 : eq(112, 73) : BOOL
115 : eq(112, 76) : BOOL
116 : eq(112, 42) : BOOL
117 : eq(112, 66) : BOOL
118 : eq(112, 83) : BOOL
119 : eq(112, 86) : BOOL
120 : ite(119, 88, 89) : BV:8
121 : ite(118, 85, 120) : BV:8
122 : ite(117, 82, 121) : BV:8
123 : ite(116, 80, 122) : BV:8
124 : ite(115, 78, 123) : BV:8
125 : ite(114, 75, 124) : BV:8
126 : ite(113, 72, 125) : BV:8
127 : eq(69, 2) : BOOL
128 : eq(69, 73) : BOOL
129 : eq(69, 76) : BOOL
130 : eq(69, 42) : BOOL
131 : eq(69, 66) : BOOL
132 : eq(69, 83) : BOOL
133 : eq(69, 86) : BOOL
134 : ite(133, 88, 89) : BV:8
135 : ite(132, 85, 134) : BV:8
136 : ite(131, 82, 135) : BV:8
137 : ite(130, 80, 136) : BV:8
138 : ite(129, 78, 137) : BV:8
139 : ite(128, 75, 138) : BV:8
140 : ite(127, 72, 139) : BV:8
141 : bvconcat(96, 111, 126, 140) : BV:32
142 : bvadd(66, 68, 141) : BV:32
143 : eq(142, 2) : BOOL
144 : eq(142, 73) : BOOL
145 : eq(142, 76) : BOOL
146 : eq(142, 42) : BOOL
147 : eq(142, 66) : BOOL
148 : eq(142, 83) : BOOL
149 : eq(142, 86) : BOOL
150 : ite(149, 88, 89) : BV:8
151 : ite(148, 85, 150) : BV:8
152 : ite(147, 82, 151) : BV:8
153 : ite(146, 80, 152) : BV:8
154 : ite(145, 78, 153) : BV:8
155 : ite(144, 75, 154) : BV:8
156 : ite(143, 72, 155) : BV:8
157 : bvadd(46, 68, 141) : BV:32
158 : eq(157, 2) : BOOL
159 : eq(157, 73) : BOOL
160 : eq(157, 76) : BOOL
161 : eq(157, 42) : BOOL
162 : eq(157, 66) : BOOL
163 : eq(157, 83) : BOOL
164 : eq(157, 86) : BOOL
165 : ite(164, 88, 89) : BV:8
166 : ite(163, 85, 165) : BV:8
167 : ite(162, 82, 166) : BV:8
168 : ite(161, 80, 167) : BV:8
169 : ite(160, 78, 168) : BV:8
170 : ite(159, 75, 169) : BV:8
171 : ite(158, 72, 170) : BV:8
172 : bvadd(42, 68, 141) : BV:32
173 : eq(172, 2) : BOOL
174 : eq(172, 73) : BOOL
175 : eq(172, 76) : BOOL
176 : eq(172, 42) : BOOL
177 : eq(172, 66) : BOOL
178 : eq(172, 83) : BOOL
179 : eq(172, 86) : BOOL
180 : ite(179, 88, 89) : BV:8
181 : ite(178, 85, 180) : BV:8
182 : ite(177, 82, 181) : BV:8
183 : ite(176, 80, 182) : BV:8
184 : ite(175, 78, 183) : BV:8
185 : ite(174, 75, 184) : BV:8
186 : ite(173, 72, 185) : BV:8
187 : bvadd(68, 141) : BV:32
188 : eq(187, 2) : BOOL
189 : eq(187, 73) : BOOL
190 : eq(187, 76) : BOOL
191 : eq(187, 42) : BOOL
192 : eq(187, 66) : BOOL
193 : eq(187, 83) : BOOL
194 : eq(187, 86) : BOOL
195 : ite(194, 88, 89) : BV:8
196 : ite(193, 85, 195) : BV:8
197 : ite(192, 82, 196) : BV:8
198 : ite(191, 80, 197) : BV:8
199 : ite(190, 78, 198) : BV:8
200 : ite(189, 75, 199) : BV:8
201 : ite(188, 72, 200) : BV:8
202 : bvconcat(156, 171, 186, 201) : BV:32
203 : ite(65, 2, 202) : BV:32
204 : ite(63, 2, 203) : BV:32
205 : lambda(60, 204) : FUNCTION[BV:32 -> BV:32]
206 : map(59, 205) : MAP[BV:32 -> BV:32]
207 : lambda(17, 206) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
208 : map(16, 207) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
209 : sym_const(208) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 40, [ 1; 1 ] -> 72, [ 2; 2 ] -> 0, [ 3; 3 ] -> 194, [ 4; 15 ] -> 0, [ 16; 16 ] -> 157, [ 17; 17 ] -> 129, [ 18; 18 ] -> 133, [ 19; 19 ] -> 10, [ 20; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 2396151 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2396152; 2396155 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2396156; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda59817Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda59818Var : BV:32
18 : Lambda59819Var : BV:32
19 : bvule(2, 17) : BOOL
20 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
21 : bvule(17, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
24 : bvule(23, 17) : BOOL
25 : bvule(17, 4) : BOOL
26 : and(24, 25) : BOOL
27 : bvule(8, 17) : BOOL
28 : bvule(17, 8) : BOOL
29 : and(27, 28) : BOOL
30 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
31 : bvule(30, 17) : BOOL
32 : bvule(17, 10) : BOOL
33 : and(31, 32) : BOOL
34 : ite(33, 30, 30) : BV:32
35 : ite(29, 8, 34) : BV:32
36 : ite(26, 23, 35) : BV:32
37 : ite(22, 2, 36) : BV:32
38 : eq(37, 23) : BOOL
39 : bvule(2, 18) : BOOL
40 : bvule(18, 2) : BOOL
41 : and(39, 40) : BOOL
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 42) : BOOL
45 : and(43, 44) : BOOL
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvule(46, 18) : BOOL
48 : bvule(18, 10) : BOOL
49 : and(47, 48) : BOOL
50 : ite(49, 46, 46) : BV:32
51 : ite(45, 42, 50) : BV:32
52 : ite(41, 2, 51) : BV:32
53 : eq(52, 2) : BOOL
54 : and(38, 53) : BOOL
55 : eq(37, 2) : BOOL
56 : and(55, 53) : BOOL
57 : or(54, 56) : BOOL
58 : ite(57, 7, 13) : BOOL
59 : lambda(18, 58) : FUNCTION[BV:32 -> BOOL]
60 : Lambda59820Var : BV:32
61 : eq(17, 2) : BOOL
62 : eq(60, 2) : BOOL
63 : and(61, 62) : BOOL
64 : eq(17, 23) : BOOL
65 : and(64, 62) : BOOL
66 : and(19, 25) : BOOL
67 : and(27, 32) : BOOL
68 : ite(67, 13, 13) : BOOL
69 : ite(66, 7, 68) : BOOL
70 : bvule(2, 60) : BOOL
71 : bvule(60, 2) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(42, 60) : BOOL
74 : bvule(60, 42) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(46, 60) : BOOL
77 : bvule(60, 10) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 46, 46) : BV:32
80 : ite(75, 42, 79) : BV:32
81 : ite(72, 2, 80) : BV:32
82 : eq(81, 2) : BOOL
83 : and(38, 82) : BOOL
84 : and(55, 82) : BOOL
85 : or(83, 84) : BOOL
86 : ite(85, 7, 13) : BOOL
87 : and(69, 86) : BOOL
88 : 3 { 0x3 +1.35e129 } : BV:32
89 : 4 { 0x4 +1.47e129 } : BV:32
90 : bvmul(89, 60) : BV:32
91 : bvmul(89, 17) : BV:32
92 : bvadd(88, 91) : BV:32
93 : eq(92, 2) : BOOL
94 : 40 { 0x28 } : BV:8
95 : 16 { 0x10 +1.190e129 } : BV:32
96 : eq(92, 95) : BOOL
97 : 157 { 0x9d -99 } : BV:8
98 : 18 { 0x12 +1.214e129 } : BV:32
99 : eq(92, 98) : BOOL
100 : 133 { 0x85 -123 } : BV:8
101 : eq(92, 42) : BOOL
102 : 72 { 0x48 } : BV:8
103 : eq(92, 88) : BOOL
104 : 194 { 0xc2 -62 } : BV:8
105 : 17 { 0x11 +1.202e129 } : BV:32
106 : eq(92, 105) : BOOL
107 : 129 { 0x81 -127 } : BV:8
108 : 19 { 0x13 +1.226e129 } : BV:32
109 : eq(92, 108) : BOOL
110 : 10 { 0xa } : BV:8
111 : 0 { 0x0 } : BV:8
112 : ite(109, 110, 111) : BV:8
113 : ite(106, 107, 112) : BV:8
114 : ite(103, 104, 113) : BV:8
115 : ite(101, 102, 114) : BV:8
116 : ite(99, 100, 115) : BV:8
117 : ite(96, 97, 116) : BV:8
118 : ite(93, 94, 117) : BV:8
119 : bvadd(46, 91) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 95) : BOOL
122 : eq(119, 98) : BOOL
123 : eq(119, 42) : BOOL
124 : eq(119, 88) : BOOL
125 : eq(119, 105) : BOOL
126 : eq(119, 108) : BOOL
127 : ite(126, 110, 111) : BV:8
128 : ite(125, 107, 127) : BV:8
129 : ite(124, 104, 128) : BV:8
130 : ite(123, 102, 129) : BV:8
131 : ite(122, 100, 130) : BV:8
132 : ite(121, 97, 131) : BV:8
133 : ite(120, 94, 132) : BV:8
134 : bvadd(42, 91) : BV:32
135 : eq(134, 2) : BOOL
136 : eq(134, 95) : BOOL
137 : eq(134, 98) : BOOL
138 : eq(134, 42) : BOOL
139 : eq(134, 88) : BOOL
140 : eq(134, 105) : BOOL
141 : eq(134, 108) : BOOL
142 : ite(141, 110, 111) : BV:8
143 : ite(140, 107, 142) : BV:8
144 : ite(139, 104, 143) : BV:8
145 : ite(138, 102, 144) : BV:8
146 : ite(137, 100, 145) : BV:8
147 : ite(136, 97, 146) : BV:8
148 : ite(135, 94, 147) : BV:8
149 : eq(91, 2) : BOOL
150 : eq(91, 95) : BOOL
151 : eq(91, 98) : BOOL
152 : eq(91, 42) : BOOL
153 : eq(91, 88) : BOOL
154 : eq(91, 105) : BOOL
155 : eq(91, 108) : BOOL
156 : ite(155, 110, 111) : BV:8
157 : ite(154, 107, 156) : BV:8
158 : ite(153, 104, 157) : BV:8
159 : ite(152, 102, 158) : BV:8
160 : ite(151, 100, 159) : BV:8
161 : ite(150, 97, 160) : BV:8
162 : ite(149, 94, 161) : BV:8
163 : bvconcat(118, 133, 148, 162) : BV:32
164 : bvadd(88, 90, 163) : BV:32
165 : eq(164, 2) : BOOL
166 : eq(164, 95) : BOOL
167 : eq(164, 98) : BOOL
168 : eq(164, 42) : BOOL
169 : eq(164, 88) : BOOL
170 : eq(164, 105) : BOOL
171 : eq(164, 108) : BOOL
172 : ite(171, 110, 111) : BV:8
173 : ite(170, 107, 172) : BV:8
174 : ite(169, 104, 173) : BV:8
175 : ite(168, 102, 174) : BV:8
176 : ite(167, 100, 175) : BV:8
177 : ite(166, 97, 176) : BV:8
178 : ite(165, 94, 177) : BV:8
179 : bvadd(46, 90, 163) : BV:32
180 : eq(179, 2) : BOOL
181 : eq(179, 95) : BOOL
182 : eq(179, 98) : BOOL
183 : eq(179, 42) : BOOL
184 : eq(179, 88) : BOOL
185 : eq(179, 105) : BOOL
186 : eq(179, 108) : BOOL
187 : ite(186, 110, 111) : BV:8
188 : ite(185, 107, 187) : BV:8
189 : ite(184, 104, 188) : BV:8
190 : ite(183, 102, 189) : BV:8
191 : ite(182, 100, 190) : BV:8
192 : ite(181, 97, 191) : BV:8
193 : ite(180, 94, 192) : BV:8
194 : bvadd(42, 90, 163) : BV:32
195 : eq(194, 2) : BOOL
196 : eq(194, 95) : BOOL
197 : eq(194, 98) : BOOL
198 : eq(194, 42) : BOOL
199 : eq(194, 88) : BOOL
200 : eq(194, 105) : BOOL
201 : eq(194, 108) : BOOL
202 : ite(201, 110, 111) : BV:8
203 : ite(200, 107, 202) : BV:8
204 : ite(199, 104, 203) : BV:8
205 : ite(198, 102, 204) : BV:8
206 : ite(197, 100, 205) : BV:8
207 : ite(196, 97, 206) : BV:8
208 : ite(195, 94, 207) : BV:8
209 : bvadd(90, 163) : BV:32
210 : eq(209, 2) : BOOL
211 : eq(209, 95) : BOOL
212 : eq(209, 98) : BOOL
213 : eq(209, 42) : BOOL
214 : eq(209, 88) : BOOL
215 : eq(209, 105) : BOOL
216 : eq(209, 108) : BOOL
217 : ite(216, 110, 111) : BV:8
218 : ite(215, 107, 217) : BV:8
219 : ite(214, 104, 218) : BV:8
220 : ite(213, 102, 219) : BV:8
221 : ite(212, 100, 220) : BV:8
222 : ite(211, 97, 221) : BV:8
223 : ite(210, 94, 222) : BV:8
224 : bvconcat(178, 193, 208, 223) : BV:32
225 : ite(65, 2, 224) : BV:32
226 : ite(63, 2, 225) : BV:32
227 : ite(87, 224, 226) : BV:32
228 : ite(65, 2, 227) : BV:32
229 : ite(63, 2, 228) : BV:32
230 : lambda(60, 229) : FUNCTION[BV:32 -> BV:32]
231 : map(59, 230) : MAP[BV:32 -> BV:32]
232 : lambda(17, 231) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
233 : map(16, 232) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
234 : sym_const(233) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2396152 { 0x248ff8 +1.28564357e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2396155 { 0x248ffb +1.28564393e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda59734Var : BV:32
2 : Lambda59735Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : 3 { 0x3 +1.35e129 } : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvmul(11, 2) : BV:32
13 : bvmul(11, 1) : BV:32
14 : bvadd(10, 13) : BV:32
15 : eq(14, 3) : BOOL
16 : 40 { 0x28 } : BV:8
17 : 16 { 0x10 +1.190e129 } : BV:32
18 : eq(14, 17) : BOOL
19 : 157 { 0x9d -99 } : BV:8
20 : 18 { 0x12 +1.214e129 } : BV:32
21 : eq(14, 20) : BOOL
22 : 133 { 0x85 -123 } : BV:8
23 : 1 { 0x1 +1.11e129 } : BV:32
24 : eq(14, 23) : BOOL
25 : 72 { 0x48 } : BV:8
26 : eq(14, 10) : BOOL
27 : 194 { 0xc2 -62 } : BV:8
28 : 17 { 0x11 +1.202e129 } : BV:32
29 : eq(14, 28) : BOOL
30 : 129 { 0x81 -127 } : BV:8
31 : 19 { 0x13 +1.226e129 } : BV:32
32 : eq(14, 31) : BOOL
33 : 10 { 0xa } : BV:8
34 : 0 { 0x0 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(29, 30, 35) : BV:8
37 : ite(26, 27, 36) : BV:8
38 : ite(24, 25, 37) : BV:8
39 : ite(21, 22, 38) : BV:8
40 : ite(18, 19, 39) : BV:8
41 : ite(15, 16, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13) : BV:32
44 : eq(43, 3) : BOOL
45 : eq(43, 17) : BOOL
46 : eq(43, 20) : BOOL
47 : eq(43, 23) : BOOL
48 : eq(43, 10) : BOOL
49 : eq(43, 28) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 30, 51) : BV:8
53 : ite(48, 27, 52) : BV:8
54 : ite(47, 25, 53) : BV:8
55 : ite(46, 22, 54) : BV:8
56 : ite(45, 19, 55) : BV:8
57 : ite(44, 16, 56) : BV:8
58 : bvadd(23, 13) : BV:32
59 : eq(58, 3) : BOOL
60 : eq(58, 17) : BOOL
61 : eq(58, 20) : BOOL
62 : eq(58, 23) : BOOL
63 : eq(58, 10) : BOOL
64 : eq(58, 28) : BOOL
65 : eq(58, 31) : BOOL
66 : ite(65, 33, 34) : BV:8
67 : ite(64, 30, 66) : BV:8
68 : ite(63, 27, 67) : BV:8
69 : ite(62, 25, 68) : BV:8
70 : ite(61, 22, 69) : BV:8
71 : ite(60, 19, 70) : BV:8
72 : ite(59, 16, 71) : BV:8
73 : eq(13, 3) : BOOL
74 : eq(13, 17) : BOOL
75 : eq(13, 20) : BOOL
76 : eq(13, 23) : BOOL
77 : eq(13, 10) : BOOL
78 : eq(13, 28) : BOOL
79 : eq(13, 31) : BOOL
80 : ite(79, 33, 34) : BV:8
81 : ite(78, 30, 80) : BV:8
82 : ite(77, 27, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 22, 83) : BV:8
85 : ite(74, 19, 84) : BV:8
86 : ite(73, 16, 85) : BV:8
87 : bvconcat(41, 57, 72, 86) : BV:32
88 : bvadd(10, 12, 87) : BV:32
89 : eq(88, 3) : BOOL
90 : eq(88, 17) : BOOL
91 : eq(88, 20) : BOOL
92 : eq(88, 23) : BOOL
93 : eq(88, 10) : BOOL
94 : eq(88, 28) : BOOL
95 : eq(88, 31) : BOOL
96 : ite(95, 33, 34) : BV:8
97 : ite(94, 30, 96) : BV:8
98 : ite(93, 27, 97) : BV:8
99 : ite(92, 25, 98) : BV:8
100 : ite(91, 22, 99) : BV:8
101 : ite(90, 19, 100) : BV:8
102 : ite(89, 16, 101) : BV:8
103 : bvadd(42, 12, 87) : BV:32
104 : eq(103, 3) : BOOL
105 : eq(103, 17) : BOOL
106 : eq(103, 20) : BOOL
107 : eq(103, 23) : BOOL
108 : eq(103, 10) : BOOL
109 : eq(103, 28) : BOOL
110 : eq(103, 31) : BOOL
111 : ite(110, 33, 34) : BV:8
112 : ite(109, 30, 111) : BV:8
113 : ite(108, 27, 112) : BV:8
114 : ite(107, 25, 113) : BV:8
115 : ite(106, 22, 114) : BV:8
116 : ite(105, 19, 115) : BV:8
117 : ite(104, 16, 116) : BV:8
118 : bvadd(23, 12, 87) : BV:32
119 : eq(118, 3) : BOOL
120 : eq(118, 17) : BOOL
121 : eq(118, 20) : BOOL
122 : eq(118, 23) : BOOL
123 : eq(118, 10) : BOOL
124 : eq(118, 28) : BOOL
125 : eq(118, 31) : BOOL
126 : ite(125, 33, 34) : BV:8
127 : ite(124, 30, 126) : BV:8
128 : ite(123, 27, 127) : BV:8
129 : ite(122, 25, 128) : BV:8
130 : ite(121, 22, 129) : BV:8
131 : ite(120, 19, 130) : BV:8
132 : ite(119, 16, 131) : BV:8
133 : bvadd(12, 87) : BV:32
134 : eq(133, 3) : BOOL
135 : eq(133, 17) : BOOL
136 : eq(133, 20) : BOOL
137 : eq(133, 23) : BOOL
138 : eq(133, 10) : BOOL
139 : eq(133, 28) : BOOL
140 : eq(133, 31) : BOOL
141 : ite(140, 33, 34) : BV:8
142 : ite(139, 30, 141) : BV:8
143 : ite(138, 27, 142) : BV:8
144 : ite(137, 25, 143) : BV:8
145 : ite(136, 22, 144) : BV:8
146 : ite(135, 19, 145) : BV:8
147 : ite(134, 16, 146) : BV:8
148 : bvconcat(102, 117, 132, 147) : BV:32
149 : ite(9, 3, 148) : BV:32
150 : ite(6, 3, 149) : BV:32
151 : lambda(1, 2, 150) : FUNCTION[BV:32,BV:32 -> BV:32]
152 : sym_const(151) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda59736Var : BV:32
2 : Lambda59737Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 19) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 2411427025 ] -> true, [ 2411427026; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda59746Var : BV:32
2 : Lambda59747Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
18 : bvule(17, 1) : BOOL
19 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
20 : bvule(1, 19) : BOOL
21 : and(18, 20) : BOOL
22 : ite(21, 17, 17) : BV:32
23 : ite(16, 13, 22) : BV:32
24 : ite(12, 8, 23) : BV:32
25 : ite(7, 3, 24) : BV:32
26 : eq(25, 8) : BOOL
27 : bvule(3, 2) : BOOL
28 : bvule(2, 3) : BOOL
29 : and(27, 28) : BOOL
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvule(30, 2) : BOOL
32 : bvule(2, 30) : BOOL
33 : and(31, 32) : BOOL
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvule(34, 2) : BOOL
36 : bvule(2, 19) : BOOL
37 : and(35, 36) : BOOL
38 : ite(37, 34, 34) : BV:32
39 : ite(33, 30, 38) : BV:32
40 : ite(29, 3, 39) : BV:32
41 : eq(40, 3) : BOOL
42 : and(26, 41) : BOOL
43 : eq(25, 3) : BOOL
44 : and(43, 41) : BOOL
45 : or(42, 44) : BOOL
46 : 1 { 0x1 } : BOOL
47 : 0 { 0x0 } : BOOL
48 : ite(45, 46, 47) : BOOL
49 : lambda(1, 2, 48) : FUNCTION[BV:32,BV:32 -> BOOL]
50 : sym_const(49) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda59750Var : BV:32
2 : Lambda59751Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : and(8, 5) : BOOL
10 : bvule(3, 1) : BOOL
11 : 2411427025 { 0x8fbb74d1 -1883540271 -1.46450245e160 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 1 { 0x1 } : BOOL
15 : 2411427026 { 0x8fbb74d2 -1883540270 -1.46450257e160 } : BV:32
16 : bvule(15, 1) : BOOL
17 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
18 : bvule(1, 17) : BOOL
19 : and(16, 18) : BOOL
20 : 0 { 0x0 } : BOOL
21 : ite(19, 20, 20) : BOOL
22 : ite(13, 14, 21) : BOOL
23 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
24 : bvule(1, 23) : BOOL
25 : and(10, 24) : BOOL
26 : bvule(7, 1) : BOOL
27 : and(26, 12) : BOOL
28 : bvule(1, 15) : BOOL
29 : and(16, 28) : BOOL
30 : 2411427027 { 0x8fbb74d3 -1883540269 -1.46450269e160 } : BV:32
31 : bvule(30, 1) : BOOL
32 : and(31, 18) : BOOL
33 : ite(32, 30, 30) : BV:32
34 : ite(29, 15, 33) : BV:32
35 : ite(27, 7, 34) : BV:32
36 : ite(25, 3, 35) : BV:32
37 : eq(36, 7) : BOOL
38 : bvule(3, 2) : BOOL
39 : bvule(2, 3) : BOOL
40 : and(38, 39) : BOOL
41 : 1 { 0x1 +1.11e129 } : BV:32
42 : bvule(41, 2) : BOOL
43 : bvule(2, 41) : BOOL
44 : and(42, 43) : BOOL
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvule(45, 2) : BOOL
47 : bvule(2, 17) : BOOL
48 : and(46, 47) : BOOL
49 : ite(48, 45, 45) : BV:32
50 : ite(44, 41, 49) : BV:32
51 : ite(40, 3, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : and(37, 52) : BOOL
54 : eq(36, 3) : BOOL
55 : and(54, 52) : BOOL
56 : or(53, 55) : BOOL
57 : ite(56, 14, 20) : BOOL
58 : and(22, 57) : BOOL
59 : 3 { 0x3 +1.35e129 } : BV:32
60 : 4 { 0x4 +1.47e129 } : BV:32
61 : bvmul(60, 2) : BV:32
62 : bvmul(60, 1) : BV:32
63 : bvadd(59, 62) : BV:32
64 : eq(63, 3) : BOOL
65 : 40 { 0x28 } : BV:8
66 : 16 { 0x10 +1.190e129 } : BV:32
67 : eq(63, 66) : BOOL
68 : 157 { 0x9d -99 } : BV:8
69 : 18 { 0x12 +1.214e129 } : BV:32
70 : eq(63, 69) : BOOL
71 : 133 { 0x85 -123 } : BV:8
72 : eq(63, 41) : BOOL
73 : 72 { 0x48 } : BV:8
74 : eq(63, 59) : BOOL
75 : 194 { 0xc2 -62 } : BV:8
76 : 17 { 0x11 +1.202e129 } : BV:32
77 : eq(63, 76) : BOOL
78 : 129 { 0x81 -127 } : BV:8
79 : 19 { 0x13 +1.226e129 } : BV:32
80 : eq(63, 79) : BOOL
81 : 10 { 0xa } : BV:8
82 : 0 { 0x0 } : BV:8
83 : ite(80, 81, 82) : BV:8
84 : ite(77, 78, 83) : BV:8
85 : ite(74, 75, 84) : BV:8
86 : ite(72, 73, 85) : BV:8
87 : ite(70, 71, 86) : BV:8
88 : ite(67, 68, 87) : BV:8
89 : ite(64, 65, 88) : BV:8
90 : bvadd(45, 62) : BV:32
91 : eq(90, 3) : BOOL
92 : eq(90, 66) : BOOL
93 : eq(90, 69) : BOOL
94 : eq(90, 41) : BOOL
95 : eq(90, 59) : BOOL
96 : eq(90, 76) : BOOL
97 : eq(90, 79) : BOOL
98 : ite(97, 81, 82) : BV:8
99 : ite(96, 78, 98) : BV:8
100 : ite(95, 75, 99) : BV:8
101 : ite(94, 73, 100) : BV:8
102 : ite(93, 71, 101) : BV:8
103 : ite(92, 68, 102) : BV:8
104 : ite(91, 65, 103) : BV:8
105 : bvadd(41, 62) : BV:32
106 : eq(105, 3) : BOOL
107 : eq(105, 66) : BOOL
108 : eq(105, 69) : BOOL
109 : eq(105, 41) : BOOL
110 : eq(105, 59) : BOOL
111 : eq(105, 76) : BOOL
112 : eq(105, 79) : BOOL
113 : ite(112, 81, 82) : BV:8
114 : ite(111, 78, 113) : BV:8
115 : ite(110, 75, 114) : BV:8
116 : ite(109, 73, 115) : BV:8
117 : ite(108, 71, 116) : BV:8
118 : ite(107, 68, 117) : BV:8
119 : ite(106, 65, 118) : BV:8
120 : eq(62, 3) : BOOL
121 : eq(62, 66) : BOOL
122 : eq(62, 69) : BOOL
123 : eq(62, 41) : BOOL
124 : eq(62, 59) : BOOL
125 : eq(62, 76) : BOOL
126 : eq(62, 79) : BOOL
127 : ite(126, 81, 82) : BV:8
128 : ite(125, 78, 127) : BV:8
129 : ite(124, 75, 128) : BV:8
130 : ite(123, 73, 129) : BV:8
131 : ite(122, 71, 130) : BV:8
132 : ite(121, 68, 131) : BV:8
133 : ite(120, 65, 132) : BV:8
134 : bvconcat(89, 104, 119, 133) : BV:32
135 : bvadd(59, 61, 134) : BV:32
136 : eq(135, 3) : BOOL
137 : eq(135, 66) : BOOL
138 : eq(135, 69) : BOOL
139 : eq(135, 41) : BOOL
140 : eq(135, 59) : BOOL
141 : eq(135, 76) : BOOL
142 : eq(135, 79) : BOOL
143 : ite(142, 81, 82) : BV:8
144 : ite(141, 78, 143) : BV:8
145 : ite(140, 75, 144) : BV:8
146 : ite(139, 73, 145) : BV:8
147 : ite(138, 71, 146) : BV:8
148 : ite(137, 68, 147) : BV:8
149 : ite(136, 65, 148) : BV:8
150 : bvadd(45, 61, 134) : BV:32
151 : eq(150, 3) : BOOL
152 : eq(150, 66) : BOOL
153 : eq(150, 69) : BOOL
154 : eq(150, 41) : BOOL
155 : eq(150, 59) : BOOL
156 : eq(150, 76) : BOOL
157 : eq(150, 79) : BOOL
158 : ite(157, 81, 82) : BV:8
159 : ite(156, 78, 158) : BV:8
160 : ite(155, 75, 159) : BV:8
161 : ite(154, 73, 160) : BV:8
162 : ite(153, 71, 161) : BV:8
163 : ite(152, 68, 162) : BV:8
164 : ite(151, 65, 163) : BV:8
165 : bvadd(41, 61, 134) : BV:32
166 : eq(165, 3) : BOOL
167 : eq(165, 66) : BOOL
168 : eq(165, 69) : BOOL
169 : eq(165, 41) : BOOL
170 : eq(165, 59) : BOOL
171 : eq(165, 76) : BOOL
172 : eq(165, 79) : BOOL
173 : ite(172, 81, 82) : BV:8
174 : ite(171, 78, 173) : BV:8
175 : ite(170, 75, 174) : BV:8
176 : ite(169, 73, 175) : BV:8
177 : ite(168, 71, 176) : BV:8
178 : ite(167, 68, 177) : BV:8
179 : ite(166, 65, 178) : BV:8
180 : bvadd(61, 134) : BV:32
181 : eq(180, 3) : BOOL
182 : eq(180, 66) : BOOL
183 : eq(180, 69) : BOOL
184 : eq(180, 41) : BOOL
185 : eq(180, 59) : BOOL
186 : eq(180, 76) : BOOL
187 : eq(180, 79) : BOOL
188 : ite(187, 81, 82) : BV:8
189 : ite(186, 78, 188) : BV:8
190 : ite(185, 75, 189) : BV:8
191 : ite(184, 73, 190) : BV:8
192 : ite(183, 71, 191) : BV:8
193 : ite(182, 68, 192) : BV:8
194 : ite(181, 65, 193) : BV:8
195 : bvconcat(149, 164, 179, 194) : BV:32
196 : ite(9, 3, 195) : BV:32
197 : ite(6, 3, 196) : BV:32
198 : ite(58, 195, 197) : BV:32
199 : ite(9, 3, 198) : BV:32
200 : ite(6, 3, 199) : BV:32
201 : lambda(1, 2, 200) : FUNCTION[BV:32,BV:32 -> BV:32]
202 : sym_const(201) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1025493986
=counter_example_end
=global nodece 66 num_edges_traversed 0
=global nodece 66 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 67
=global nodece 67 nodece z3.ce5176.num_edges_traversed0
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3.ce5176 4d6aa4c7b3b9bc1ed96f720e83337b3
=input.spec-%var-x-1
1 : Lambda59854Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda59855Var : BV:32
18 : Lambda59856Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda59857Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : and(26, 24) : BOOL
56 : ite(55, 13, 13) : BOOL
57 : ite(21, 7, 56) : BOOL
58 : bvule(2, 51) : BOOL
59 : bvule(51, 2) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(36, 51) : BOOL
62 : bvule(51, 36) : BOOL
63 : and(61, 62) : BOOL
64 : bvule(40, 51) : BOOL
65 : bvule(51, 10) : BOOL
66 : and(64, 65) : BOOL
67 : ite(66, 40, 40) : BV:32
68 : ite(63, 36, 67) : BV:32
69 : ite(60, 2, 68) : BV:32
70 : eq(69, 2) : BOOL
71 : and(32, 70) : BOOL
72 : ite(71, 7, 13) : BOOL
73 : and(57, 72) : BOOL
74 : 3 { 0x3 +1.35e129 } : BV:32
75 : 4 { 0x4 +1.47e129 } : BV:32
76 : bvmul(75, 51) : BV:32
77 : bvmul(75, 17) : BV:32
78 : bvadd(74, 77) : BV:32
79 : eq(78, 2) : BOOL
80 : 168 { 0xa8 -88 } : BV:8
81 : eq(78, 74) : BOOL
82 : 212 { 0xd4 -44 } : BV:8
83 : eq(78, 36) : BOOL
84 : 245 { 0xf5 -11 } : BV:8
85 : eq(78, 40) : BOOL
86 : 180 { 0xb4 -76 } : BV:8
87 : 0 { 0x0 } : BV:8
88 : ite(85, 86, 87) : BV:8
89 : ite(83, 84, 88) : BV:8
90 : ite(81, 82, 89) : BV:8
91 : ite(79, 80, 90) : BV:8
92 : bvadd(40, 77) : BV:32
93 : eq(92, 2) : BOOL
94 : eq(92, 74) : BOOL
95 : eq(92, 36) : BOOL
96 : eq(92, 40) : BOOL
97 : ite(96, 86, 87) : BV:8
98 : ite(95, 84, 97) : BV:8
99 : ite(94, 82, 98) : BV:8
100 : ite(93, 80, 99) : BV:8
101 : bvadd(36, 77) : BV:32
102 : eq(101, 2) : BOOL
103 : eq(101, 74) : BOOL
104 : eq(101, 36) : BOOL
105 : eq(101, 40) : BOOL
106 : ite(105, 86, 87) : BV:8
107 : ite(104, 84, 106) : BV:8
108 : ite(103, 82, 107) : BV:8
109 : ite(102, 80, 108) : BV:8
110 : eq(77, 2) : BOOL
111 : eq(77, 74) : BOOL
112 : eq(77, 36) : BOOL
113 : eq(77, 40) : BOOL
114 : ite(113, 86, 87) : BV:8
115 : ite(112, 84, 114) : BV:8
116 : ite(111, 82, 115) : BV:8
117 : ite(110, 80, 116) : BV:8
118 : bvconcat(91, 100, 109, 117) : BV:32
119 : bvadd(74, 76, 118) : BV:32
120 : eq(119, 2) : BOOL
121 : eq(119, 74) : BOOL
122 : eq(119, 36) : BOOL
123 : eq(119, 40) : BOOL
124 : ite(123, 86, 87) : BV:8
125 : ite(122, 84, 124) : BV:8
126 : ite(121, 82, 125) : BV:8
127 : ite(120, 80, 126) : BV:8
128 : bvadd(40, 76, 118) : BV:32
129 : eq(128, 2) : BOOL
130 : eq(128, 74) : BOOL
131 : eq(128, 36) : BOOL
132 : eq(128, 40) : BOOL
133 : ite(132, 86, 87) : BV:8
134 : ite(131, 84, 133) : BV:8
135 : ite(130, 82, 134) : BV:8
136 : ite(129, 80, 135) : BV:8
137 : bvadd(36, 76, 118) : BV:32
138 : eq(137, 2) : BOOL
139 : eq(137, 74) : BOOL
140 : eq(137, 36) : BOOL
141 : eq(137, 40) : BOOL
142 : ite(141, 86, 87) : BV:8
143 : ite(140, 84, 142) : BV:8
144 : ite(139, 82, 143) : BV:8
145 : ite(138, 80, 144) : BV:8
146 : bvadd(76, 118) : BV:32
147 : eq(146, 2) : BOOL
148 : eq(146, 74) : BOOL
149 : eq(146, 36) : BOOL
150 : eq(146, 40) : BOOL
151 : ite(150, 86, 87) : BV:8
152 : ite(149, 84, 151) : BV:8
153 : ite(148, 82, 152) : BV:8
154 : ite(147, 80, 153) : BV:8
155 : bvconcat(127, 136, 145, 154) : BV:32
156 : ite(54, 2, 155) : BV:32
157 : ite(73, 155, 156) : BV:32
158 : ite(54, 2, 157) : BV:32
159 : lambda(51, 158) : FUNCTION[BV:32 -> BV:32]
160 : map(50, 159) : MAP[BV:32 -> BV:32]
161 : lambda(17, 160) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
162 : map(16, 161) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
163 : sym_const(162) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 168, [ 1; 1 ] -> 245, [ 2; 2 ] -> 180, [ 3; 3 ] -> 212, [ 4; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1093150351 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1093150352; 1093150355 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 1093150356; 1515532167 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1515532168; 1515532171 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 1515532172; 3443193451 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3443193452; 3443193455 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3443193456; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.llvm-%n
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda59867Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda59868Var : BV:32
18 : Lambda59869Var : BV:32
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
23 : bvule(22, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : bvule(8, 17) : BOOL
27 : bvule(17, 8) : BOOL
28 : and(26, 27) : BOOL
29 : ite(28, 8, 8) : BV:32
30 : ite(25, 22, 29) : BV:32
31 : ite(21, 2, 30) : BV:32
32 : eq(31, 2) : BOOL
33 : bvule(2, 18) : BOOL
34 : bvule(18, 2) : BOOL
35 : and(33, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 36) : BOOL
39 : and(37, 38) : BOOL
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvule(40, 18) : BOOL
42 : bvule(18, 10) : BOOL
43 : and(41, 42) : BOOL
44 : ite(43, 40, 40) : BV:32
45 : ite(39, 36, 44) : BV:32
46 : ite(35, 2, 45) : BV:32
47 : eq(46, 2) : BOOL
48 : and(32, 47) : BOOL
49 : ite(48, 7, 13) : BOOL
50 : lambda(18, 49) : FUNCTION[BV:32 -> BOOL]
51 : Lambda59870Var : BV:32
52 : eq(17, 2) : BOOL
53 : eq(51, 2) : BOOL
54 : and(52, 53) : BOOL
55 : 3 { 0x3 +1.35e129 } : BV:32
56 : 4 { 0x4 +1.47e129 } : BV:32
57 : bvmul(56, 51) : BV:32
58 : bvmul(56, 17) : BV:32
59 : bvadd(55, 58) : BV:32
60 : eq(59, 2) : BOOL
61 : 168 { 0xa8 -88 } : BV:8
62 : eq(59, 55) : BOOL
63 : 212 { 0xd4 -44 } : BV:8
64 : eq(59, 36) : BOOL
65 : 245 { 0xf5 -11 } : BV:8
66 : eq(59, 40) : BOOL
67 : 180 { 0xb4 -76 } : BV:8
68 : 0 { 0x0 } : BV:8
69 : ite(66, 67, 68) : BV:8
70 : ite(64, 65, 69) : BV:8
71 : ite(62, 63, 70) : BV:8
72 : ite(60, 61, 71) : BV:8
73 : bvadd(40, 58) : BV:32
74 : eq(73, 2) : BOOL
75 : eq(73, 55) : BOOL
76 : eq(73, 36) : BOOL
77 : eq(73, 40) : BOOL
78 : ite(77, 67, 68) : BV:8
79 : ite(76, 65, 78) : BV:8
80 : ite(75, 63, 79) : BV:8
81 : ite(74, 61, 80) : BV:8
82 : bvadd(36, 58) : BV:32
83 : eq(82, 2) : BOOL
84 : eq(82, 55) : BOOL
85 : eq(82, 36) : BOOL
86 : eq(82, 40) : BOOL
87 : ite(86, 67, 68) : BV:8
88 : ite(85, 65, 87) : BV:8
89 : ite(84, 63, 88) : BV:8
90 : ite(83, 61, 89) : BV:8
91 : eq(58, 2) : BOOL
92 : eq(58, 55) : BOOL
93 : eq(58, 36) : BOOL
94 : eq(58, 40) : BOOL
95 : ite(94, 67, 68) : BV:8
96 : ite(93, 65, 95) : BV:8
97 : ite(92, 63, 96) : BV:8
98 : ite(91, 61, 97) : BV:8
99 : bvconcat(72, 81, 90, 98) : BV:32
100 : bvadd(55, 57, 99) : BV:32
101 : eq(100, 2) : BOOL
102 : eq(100, 55) : BOOL
103 : eq(100, 36) : BOOL
104 : eq(100, 40) : BOOL
105 : ite(104, 67, 68) : BV:8
106 : ite(103, 65, 105) : BV:8
107 : ite(102, 63, 106) : BV:8
108 : ite(101, 61, 107) : BV:8
109 : bvadd(40, 57, 99) : BV:32
110 : eq(109, 2) : BOOL
111 : eq(109, 55) : BOOL
112 : eq(109, 36) : BOOL
113 : eq(109, 40) : BOOL
114 : ite(113, 67, 68) : BV:8
115 : ite(112, 65, 114) : BV:8
116 : ite(111, 63, 115) : BV:8
117 : ite(110, 61, 116) : BV:8
118 : bvadd(36, 57, 99) : BV:32
119 : eq(118, 2) : BOOL
120 : eq(118, 55) : BOOL
121 : eq(118, 36) : BOOL
122 : eq(118, 40) : BOOL
123 : ite(122, 67, 68) : BV:8
124 : ite(121, 65, 123) : BV:8
125 : ite(120, 63, 124) : BV:8
126 : ite(119, 61, 125) : BV:8
127 : bvadd(57, 99) : BV:32
128 : eq(127, 2) : BOOL
129 : eq(127, 55) : BOOL
130 : eq(127, 36) : BOOL
131 : eq(127, 40) : BOOL
132 : ite(131, 67, 68) : BV:8
133 : ite(130, 65, 132) : BV:8
134 : ite(129, 63, 133) : BV:8
135 : ite(128, 61, 134) : BV:8
136 : bvconcat(108, 117, 126, 135) : BV:32
137 : ite(54, 2, 136) : BV:32
138 : lambda(51, 137) : FUNCTION[BV:32 -> BV:32]
139 : map(50, 138) : MAP[BV:32 -> BV:32]
140 : lambda(17, 139) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141 : map(16, 140) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
142 : sym_const(141) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L3%27%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-11.L3%19%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L3%19%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 1515532168 { 0x5a552f88 +1.66551303e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 1515532171 { 0x5a552f8b +1.66551339e53 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 1093150352 { 0x41282690 +1.31367683e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 1093150355 { 0x41282693 +1.31367719e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3443193452 { 0xcd3af66c -851773844 -1.46064519e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3443193455 { 0xcd3af66f -851773841 -1.46064555e27 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda59753Var : BV:32
2 : Lambda59754Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : bvule(3, 1) : BOOL
8 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
9 : bvule(1, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BOOL
12 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
13 : bvule(12, 1) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : bvule(1, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 0 { 0x0 } : BOOL
18 : ite(16, 17, 17) : BOOL
19 : ite(10, 11, 18) : BOOL
20 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
21 : bvule(20, 1) : BOOL
22 : and(21, 15) : BOOL
23 : bvule(1, 12) : BOOL
24 : and(13, 23) : BOOL
25 : ite(24, 12, 12) : BV:32
26 : ite(22, 20, 25) : BV:32
27 : ite(10, 3, 26) : BV:32
28 : eq(27, 3) : BOOL
29 : bvule(3, 2) : BOOL
30 : bvule(2, 3) : BOOL
31 : and(29, 30) : BOOL
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvule(32, 2) : BOOL
34 : bvule(2, 32) : BOOL
35 : and(33, 34) : BOOL
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvule(36, 2) : BOOL
38 : bvule(2, 14) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 36, 36) : BV:32
41 : ite(35, 32, 40) : BV:32
42 : ite(31, 3, 41) : BV:32
43 : eq(42, 3) : BOOL
44 : and(28, 43) : BOOL
45 : ite(44, 11, 17) : BOOL
46 : and(19, 45) : BOOL
47 : 3 { 0x3 +1.35e129 } : BV:32
48 : 4 { 0x4 +1.47e129 } : BV:32
49 : bvmul(48, 2) : BV:32
50 : bvmul(48, 1) : BV:32
51 : bvadd(47, 50) : BV:32
52 : eq(51, 3) : BOOL
53 : 168 { 0xa8 -88 } : BV:8
54 : eq(51, 47) : BOOL
55 : 212 { 0xd4 -44 } : BV:8
56 : eq(51, 32) : BOOL
57 : 245 { 0xf5 -11 } : BV:8
58 : eq(51, 36) : BOOL
59 : 180 { 0xb4 -76 } : BV:8
60 : 0 { 0x0 } : BV:8
61 : ite(58, 59, 60) : BV:8
62 : ite(56, 57, 61) : BV:8
63 : ite(54, 55, 62) : BV:8
64 : ite(52, 53, 63) : BV:8
65 : bvadd(36, 50) : BV:32
66 : eq(65, 3) : BOOL
67 : eq(65, 47) : BOOL
68 : eq(65, 32) : BOOL
69 : eq(65, 36) : BOOL
70 : ite(69, 59, 60) : BV:8
71 : ite(68, 57, 70) : BV:8
72 : ite(67, 55, 71) : BV:8
73 : ite(66, 53, 72) : BV:8
74 : bvadd(32, 50) : BV:32
75 : eq(74, 3) : BOOL
76 : eq(74, 47) : BOOL
77 : eq(74, 32) : BOOL
78 : eq(74, 36) : BOOL
79 : ite(78, 59, 60) : BV:8
80 : ite(77, 57, 79) : BV:8
81 : ite(76, 55, 80) : BV:8
82 : ite(75, 53, 81) : BV:8
83 : eq(50, 3) : BOOL
84 : eq(50, 47) : BOOL
85 : eq(50, 32) : BOOL
86 : eq(50, 36) : BOOL
87 : ite(86, 59, 60) : BV:8
88 : ite(85, 57, 87) : BV:8
89 : ite(84, 55, 88) : BV:8
90 : ite(83, 53, 89) : BV:8
91 : bvconcat(64, 73, 82, 90) : BV:32
92 : bvadd(47, 49, 91) : BV:32
93 : eq(92, 3) : BOOL
94 : eq(92, 47) : BOOL
95 : eq(92, 32) : BOOL
96 : eq(92, 36) : BOOL
97 : ite(96, 59, 60) : BV:8
98 : ite(95, 57, 97) : BV:8
99 : ite(94, 55, 98) : BV:8
100 : ite(93, 53, 99) : BV:8
101 : bvadd(36, 49, 91) : BV:32
102 : eq(101, 3) : BOOL
103 : eq(101, 47) : BOOL
104 : eq(101, 32) : BOOL
105 : eq(101, 36) : BOOL
106 : ite(105, 59, 60) : BV:8
107 : ite(104, 57, 106) : BV:8
108 : ite(103, 55, 107) : BV:8
109 : ite(102, 53, 108) : BV:8
110 : bvadd(32, 49, 91) : BV:32
111 : eq(110, 3) : BOOL
112 : eq(110, 47) : BOOL
113 : eq(110, 32) : BOOL
114 : eq(110, 36) : BOOL
115 : ite(114, 59, 60) : BV:8
116 : ite(113, 57, 115) : BV:8
117 : ite(112, 55, 116) : BV:8
118 : ite(111, 53, 117) : BV:8
119 : bvadd(49, 91) : BV:32
120 : eq(119, 3) : BOOL
121 : eq(119, 47) : BOOL
122 : eq(119, 32) : BOOL
123 : eq(119, 36) : BOOL
124 : ite(123, 59, 60) : BV:8
125 : ite(122, 57, 124) : BV:8
126 : ite(121, 55, 125) : BV:8
127 : ite(120, 53, 126) : BV:8
128 : bvconcat(100, 109, 118, 127) : BV:32
129 : ite(6, 3, 128) : BV:32
130 : ite(46, 128, 129) : BV:32
131 : ite(6, 3, 130) : BV:32
132 : lambda(1, 2, 131) : FUNCTION[BV:32,BV:32 -> BV:32]
133 : sym_const(132) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : Lambda59758Var : BV:32
2 : Lambda59759Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4110164523 ] -> true, [ 4110164524; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : Lambda59767Var : BV:32
2 : Lambda59768Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 1) : BOOL
5 : 4110164523 { 0xf4fc222b -184802773 -1.96979272e106 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 4110164525 { 0xf4fc222d -184802771 -1.96979296e106 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 4110164524 { 0xf4fc222c -184802772 -1.96979284e106 } : BV:32
14 : bvule(13, 1) : BOOL
15 : bvule(1, 13) : BOOL
16 : and(14, 15) : BOOL
17 : ite(16, 13, 13) : BV:32
18 : ite(12, 8, 17) : BV:32
19 : ite(7, 3, 18) : BV:32
20 : eq(19, 3) : BOOL
21 : bvule(3, 2) : BOOL
22 : bvule(2, 3) : BOOL
23 : and(21, 22) : BOOL
24 : 1 { 0x1 +1.11e129 } : BV:32
25 : bvule(24, 2) : BOOL
26 : bvule(2, 24) : BOOL
27 : and(25, 26) : BOOL
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvule(28, 2) : BOOL
30 : bvule(2, 10) : BOOL
31 : and(29, 30) : BOOL
32 : ite(31, 28, 28) : BV:32
33 : ite(27, 24, 32) : BV:32
34 : ite(23, 3, 33) : BV:32
35 : eq(34, 3) : BOOL
36 : and(20, 35) : BOOL
37 : 1 { 0x1 } : BOOL
38 : 0 { 0x0 } : BOOL
39 : ite(36, 37, 38) : BOOL
40 : lambda(1, 2, 39) : FUNCTION[BV:32,BV:32 -> BOOL]
41 : sym_const(40) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda59763Var : BV:32
2 : Lambda59764Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(1, 3) : BOOL
5 : eq(2, 3) : BOOL
6 : and(4, 5) : BOOL
7 : 3 { 0x3 +1.35e129 } : BV:32
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvmul(8, 2) : BV:32
10 : bvmul(8, 1) : BV:32
11 : bvadd(7, 10) : BV:32
12 : eq(11, 3) : BOOL
13 : 168 { 0xa8 -88 } : BV:8
14 : eq(11, 7) : BOOL
15 : 212 { 0xd4 -44 } : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : eq(11, 16) : BOOL
18 : 245 { 0xf5 -11 } : BV:8
19 : 2 { 0x2 +1.23e129 } : BV:32
20 : eq(11, 19) : BOOL
21 : 180 { 0xb4 -76 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : ite(17, 18, 23) : BV:8
25 : ite(14, 15, 24) : BV:8
26 : ite(12, 13, 25) : BV:8
27 : bvadd(19, 10) : BV:32
28 : eq(27, 3) : BOOL
29 : eq(27, 7) : BOOL
30 : eq(27, 16) : BOOL
31 : eq(27, 19) : BOOL
32 : ite(31, 21, 22) : BV:8
33 : ite(30, 18, 32) : BV:8
34 : ite(29, 15, 33) : BV:8
35 : ite(28, 13, 34) : BV:8
36 : bvadd(16, 10) : BV:32
37 : eq(36, 3) : BOOL
38 : eq(36, 7) : BOOL
39 : eq(36, 16) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : ite(39, 18, 41) : BV:8
43 : ite(38, 15, 42) : BV:8
44 : ite(37, 13, 43) : BV:8
45 : eq(10, 3) : BOOL
46 : eq(10, 7) : BOOL
47 : eq(10, 16) : BOOL
48 : eq(10, 19) : BOOL
49 : ite(48, 21, 22) : BV:8
50 : ite(47, 18, 49) : BV:8
51 : ite(46, 15, 50) : BV:8
52 : ite(45, 13, 51) : BV:8
53 : bvconcat(26, 35, 44, 52) : BV:32
54 : bvadd(7, 9, 53) : BV:32
55 : eq(54, 3) : BOOL
56 : eq(54, 7) : BOOL
57 : eq(54, 16) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 21, 22) : BV:8
60 : ite(57, 18, 59) : BV:8
61 : ite(56, 15, 60) : BV:8
62 : ite(55, 13, 61) : BV:8
63 : bvadd(19, 9, 53) : BV:32
64 : eq(63, 3) : BOOL
65 : eq(63, 7) : BOOL
66 : eq(63, 16) : BOOL
67 : eq(63, 19) : BOOL
68 : ite(67, 21, 22) : BV:8
69 : ite(66, 18, 68) : BV:8
70 : ite(65, 15, 69) : BV:8
71 : ite(64, 13, 70) : BV:8
72 : bvadd(16, 9, 53) : BV:32
73 : eq(72, 3) : BOOL
74 : eq(72, 7) : BOOL
75 : eq(72, 16) : BOOL
76 : eq(72, 19) : BOOL
77 : ite(76, 21, 22) : BV:8
78 : ite(75, 18, 77) : BV:8
79 : ite(74, 15, 78) : BV:8
80 : ite(73, 13, 79) : BV:8
81 : bvadd(9, 53) : BV:32
82 : eq(81, 3) : BOOL
83 : eq(81, 7) : BOOL
84 : eq(81, 16) : BOOL
85 : eq(81, 19) : BOOL
86 : ite(85, 21, 22) : BV:8
87 : ite(84, 18, 86) : BV:8
88 : ite(83, 15, 87) : BV:8
89 : ite(82, 13, 88) : BV:8
90 : bvconcat(62, 71, 80, 89) : BV:32
91 : ite(6, 3, 90) : BV:32
92 : lambda(1, 2, 91) : FUNCTION[BV:32,BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4000205340
=counter_example_end
=global nodece 67 num_edges_traversed 0
=global nodece 67 nodece_visted_pcs: 
L3%7%bbentry_Lfor.cond%1%bbentry
=global nodece 68
=global nodece 68 nodece z3.ce5430.num_edges_traversed2
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3.ce5430 c4dd8ff9ae4d1293d256261fdc57881
=retaddr_const
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.spec-%var-x-1
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1235122207 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1235122208; 1235122211 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 1235122212; 3382590495 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3382590496; 3382590499 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3382590500; 3892314115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3892314116; 3892314119 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3892314120; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 1235122208 { 0x499e7820 +1.23804092e20 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3892314116 { 0xe8000004 -402653180 -1.47e81 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3382590496 { 0xc99e3c20 -912376800 -1.23620986e20 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda156Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda157Var : BV:32
11 : Lambda158Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda159Var : BV:32
14 : lambda(13, 2) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : lambda(10, 15) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
17 : map(9, 16) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
18 : sym_const(17) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda60725Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda60726Var : BV:32
14 : lambda(13, 1) : FUNCTION[BV:32 -> BV:32]
15 : map(12, 14) : MAP[BV:32 -> BV:32]
16 : sum(9, 10, 15) : SUM[UNIT,MAP[BV:32 -> BV:32]]
17 : sym_const(16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1015735436 { 0x3c8ae48c +1.8509969e250 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 271969334 { 0x1035ec36 +1.42127108e161 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 987351383 { 0x3ad9c957 +1.70145690e246 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3892314116 { 0xe8000004 -402653180 -1.47e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3892314119 { 0xe8000007 -402653177 -1.83e81 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3382590496 { 0xc99e3c20 -912376800 -1.23620986e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3382590499 { 0xc99e3c23 -912376797 -1.23621022e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 1235122208 { 0x499e7820 +1.23804092e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 1235122211 { 0x499e7823 +1.23804128e20 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
4158135134
=counter_example_end
=global nodece 68 num_edges_traversed 2
=global nodece 68 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 69
=global nodece 69 nodece z3v487.ce5412.num_edges_traversed2
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(epsilon)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3v487.ce5412 e46a3ac693916ccdf6a2f75add540bc
=retaddr_const
1 : 1624585274 { 0x60d5343a +1.66565632e66 } : BV:32
=input.spec-%var-x-1
1 : Lambda482Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda483Var : BV:32
11 : Lambda484Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda485Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 259 ] -> 0, [ 260; 260 ] -> 8, [ 261; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 259 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 260; 263 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 264; 4223 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4224; 4227 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 4228; 4194307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4194308; 4194311 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4194312; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4224 { 0x1080 +1.50354e129 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.llvm-%x
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda482Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda483Var : BV:32
11 : Lambda484Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda485Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 17, 18) : BV:32
31 : eq(30, 20) : BOOL
32 : ite(31, 22, 23) : BV:8
33 : bvadd(17, 18) : BV:32
34 : eq(33, 20) : BOOL
35 : ite(34, 22, 23) : BV:8
36 : bvconcat(24, 28, 32, 35) : BV:32
37 : bvadd(14, 16, 36) : BV:32
38 : eq(37, 20) : BOOL
39 : ite(38, 22, 23) : BV:8
40 : bvadd(25, 16, 36) : BV:32
41 : eq(40, 20) : BOOL
42 : ite(41, 22, 23) : BV:8
43 : bvadd(29, 16, 36) : BV:32
44 : eq(43, 20) : BOOL
45 : ite(44, 22, 23) : BV:8
46 : bvadd(16, 36) : BV:32
47 : eq(46, 20) : BOOL
48 : ite(47, 22, 23) : BV:8
49 : bvconcat(39, 42, 45, 48) : BV:32
50 : lambda(13, 49) : FUNCTION[BV:32 -> BV:32]
51 : map(12, 50) : MAP[BV:32 -> BV:32]
52 : lambda(10, 51) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
53 : map(9, 52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
54 : sym_const(53) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda60663Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda60664Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 260 { 0x104 +1.3099e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : 8 { 0x8 } : BV:8
23 : 0 { 0x0 } : BV:8
24 : ite(21, 22, 23) : BV:8
25 : 2 { 0x2 +1.23e129 } : BV:32
26 : bvadd(25, 17, 18) : BV:32
27 : eq(26, 20) : BOOL
28 : ite(27, 22, 23) : BV:8
29 : bvadd(8, 17, 18) : BV:32
30 : eq(29, 20) : BOOL
31 : ite(30, 22, 23) : BV:8
32 : bvadd(17, 18) : BV:32
33 : eq(32, 20) : BOOL
34 : ite(33, 22, 23) : BV:8
35 : bvconcat(24, 28, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 20) : BOOL
38 : ite(37, 22, 23) : BV:8
39 : bvadd(25, 16, 35) : BV:32
40 : eq(39, 20) : BOOL
41 : ite(40, 22, 23) : BV:8
42 : bvadd(8, 16, 35) : BV:32
43 : eq(42, 20) : BOOL
44 : ite(43, 22, 23) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 20) : BOOL
47 : ite(46, 22, 23) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : sum(9, 10, 50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
52 : sym_const(51) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 311977812 { 0x12986754 +1.19065332e166 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1624585274 { 0x60d5343a +1.66565632e66 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 573668743 { 0x22317d87 +1.38664329e197 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4224 { 0x1080 +1.50354e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 4227 { 0x1083 +1.50389e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 263 { 0x107 +1.3135e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 4194308 { 0x400004 +1.50000047e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 4194311 { 0x400007 +1.50000083e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda426Var : BV:32
2 : Lambda427Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 260 { 0x104 +1.3099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda434Var : BV:32
2 : Lambda435Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 260 { 0x104 +1.3099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 8 { 0x8 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1914138126
=counter_example_end
=global nodece 69 num_edges_traversed 2
=global nodece 69 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 70
=global nodece 70 nodece z3.ce5394.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3.ce5394 a8543cbdce0b41341b2b16b8aefeab
=retaddr_const
1 : 471436968 { 0x1c198ea8 +1.19966602e185 } : BV:32
=input.spec-%var-x-1
1 : Lambda709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda710Var : BV:32
11 : Lambda711Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda712Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3398718947 ] -> 4, [ 3398718948; 3398718951 ] -> 0, [ 3398718952; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3335065055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3335065056; 3335065059 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3335065060; 3398718947 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3398718948; 3398718951 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 3398718952; 3403367135 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3403367136; 3403367139 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 3403367140; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 3403367136 { 0xcadb42e0 -891600160 -1.71297836e22 } : BV:32
=input.dst.llvm-%m
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3335065056 { 0xc6c90de0 -959902240 -1.57073593e14 } : BV:32
=input.dst.llvm-%x
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda709Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda710Var : BV:32
11 : Lambda711Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda712Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 17, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : bvadd(17, 18) : BV:32
55 : eq(54, 20) : BOOL
56 : eq(54, 23) : BOOL
57 : eq(54, 25) : BOOL
58 : eq(54, 27) : BOOL
59 : ite(58, 22, 29) : BV:8
60 : ite(57, 22, 59) : BV:8
61 : ite(56, 22, 60) : BV:8
62 : ite(55, 22, 61) : BV:8
63 : bvconcat(33, 43, 53, 62) : BV:32
64 : bvadd(14, 16, 63) : BV:32
65 : eq(64, 20) : BOOL
66 : eq(64, 23) : BOOL
67 : eq(64, 25) : BOOL
68 : eq(64, 27) : BOOL
69 : ite(68, 22, 29) : BV:8
70 : ite(67, 22, 69) : BV:8
71 : ite(66, 22, 70) : BV:8
72 : ite(65, 22, 71) : BV:8
73 : bvadd(34, 16, 63) : BV:32
74 : eq(73, 20) : BOOL
75 : eq(73, 23) : BOOL
76 : eq(73, 25) : BOOL
77 : eq(73, 27) : BOOL
78 : ite(77, 22, 29) : BV:8
79 : ite(76, 22, 78) : BV:8
80 : ite(75, 22, 79) : BV:8
81 : ite(74, 22, 80) : BV:8
82 : bvadd(44, 16, 63) : BV:32
83 : eq(82, 20) : BOOL
84 : eq(82, 23) : BOOL
85 : eq(82, 25) : BOOL
86 : eq(82, 27) : BOOL
87 : ite(86, 22, 29) : BV:8
88 : ite(85, 22, 87) : BV:8
89 : ite(84, 22, 88) : BV:8
90 : ite(83, 22, 89) : BV:8
91 : bvadd(16, 63) : BV:32
92 : eq(91, 20) : BOOL
93 : eq(91, 23) : BOOL
94 : eq(91, 25) : BOOL
95 : eq(91, 27) : BOOL
96 : ite(95, 22, 29) : BV:8
97 : ite(94, 22, 96) : BV:8
98 : ite(93, 22, 97) : BV:8
99 : ite(92, 22, 98) : BV:8
100 : bvconcat(72, 81, 90, 99) : BV:32
101 : lambda(13, 100) : FUNCTION[BV:32 -> BV:32]
102 : map(12, 101) : MAP[BV:32 -> BV:32]
103 : lambda(10, 102) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
104 : map(9, 103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
105 : sym_const(104) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda60601Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda60602Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
19 : bvadd(14, 17, 18) : BV:32
20 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
28 : eq(19, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 17, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : bvadd(8, 17, 18) : BV:32
45 : eq(44, 20) : BOOL
46 : eq(44, 23) : BOOL
47 : eq(44, 25) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 22, 29) : BV:8
50 : ite(47, 22, 49) : BV:8
51 : ite(46, 22, 50) : BV:8
52 : ite(45, 22, 51) : BV:8
53 : bvadd(17, 18) : BV:32
54 : eq(53, 20) : BOOL
55 : eq(53, 23) : BOOL
56 : eq(53, 25) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 22, 29) : BV:8
59 : ite(56, 22, 58) : BV:8
60 : ite(55, 22, 59) : BV:8
61 : ite(54, 22, 60) : BV:8
62 : bvconcat(33, 43, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 20) : BOOL
65 : eq(63, 23) : BOOL
66 : eq(63, 25) : BOOL
67 : eq(63, 27) : BOOL
68 : ite(67, 22, 29) : BV:8
69 : ite(66, 22, 68) : BV:8
70 : ite(65, 22, 69) : BV:8
71 : ite(64, 22, 70) : BV:8
72 : bvadd(34, 16, 62) : BV:32
73 : eq(72, 20) : BOOL
74 : eq(72, 23) : BOOL
75 : eq(72, 25) : BOOL
76 : eq(72, 27) : BOOL
77 : ite(76, 22, 29) : BV:8
78 : ite(75, 22, 77) : BV:8
79 : ite(74, 22, 78) : BV:8
80 : ite(73, 22, 79) : BV:8
81 : bvadd(8, 16, 62) : BV:32
82 : eq(81, 20) : BOOL
83 : eq(81, 23) : BOOL
84 : eq(81, 25) : BOOL
85 : eq(81, 27) : BOOL
86 : ite(85, 22, 29) : BV:8
87 : ite(84, 22, 86) : BV:8
88 : ite(83, 22, 87) : BV:8
89 : ite(82, 22, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 20) : BOOL
92 : eq(90, 23) : BOOL
93 : eq(90, 25) : BOOL
94 : eq(90, 27) : BOOL
95 : ite(94, 22, 29) : BV:8
96 : ite(93, 22, 95) : BV:8
97 : ite(92, 22, 96) : BV:8
98 : ite(91, 22, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : sum(9, 10, 101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
103 : sym_const(102) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1948334767 { 0x74213aaf +1.25960338e105 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 471436968 { 0x1c198ea8 +1.19966602e185 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1098236385 { 0x4175c1e1 +1.91997921e3 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3335065056 { 0xc6c90de0 -959902240 -1.57073593e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3335065059 { 0xc6c90de3 -959902237 -1.57073628e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 3403367136 { 0xcadb42e0 -891600160 -1.71297836e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3403367139 { 0xcadb42e3 -891600157 -1.71297872e22 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda651Var : BV:32
2 : Lambda652Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda659Var : BV:32
2 : Lambda660Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 3398718949 { 0xca9455e5 -896248347 -1.15887129e22 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3398718950 { 0xca9455e6 -896248346 -1.15887141e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3398718948 { 0xca9455e4 -896248348 -1.15887117e22 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3398718951 { 0xca9455e7 -896248345 -1.15887153e22 } : BV:32
17 : eq(8, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2125224397
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 71
=global nodece 71 nodece z3v487.ce5376.num_edges_traversed2
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3v487.ce5376 209e9672f9bf33fdf0f3cd0c2e86d6b
=retaddr_const
1 : 32215678 { 0x1eb927e +1.84040808e132 } : BV:32
=input.spec-%var-x-1
1 : Lambda1258Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1259Var : BV:32
11 : Lambda1260Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1261Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 171550847 ] -> 0, [ 171550848; 171550848 ] -> 1, [ 171550849; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 171550847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 171550848; 171550851 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 171550852; 171944003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 171944004; 171944007 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 171944008; 310237215 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 310237216; 310237219 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 310237220; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
=input.dst.llvm-%m
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 310237216 { 0x127dd820 +1.98315811e165 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 171944004 { 0xa3fa844 +1.49732255e149 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1258Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1259Var : BV:32
11 : Lambda1260Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1261Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 2) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : 1 { 0x1 +1.11e129 } : BV:32
29 : bvadd(28, 17, 2) : BV:32
30 : eq(29, 19) : BOOL
31 : ite(30, 21, 22) : BV:8
32 : bvadd(17, 2) : BV:32
33 : eq(32, 19) : BOOL
34 : ite(33, 21, 22) : BV:8
35 : bvconcat(23, 27, 31, 34) : BV:32
36 : bvadd(14, 16, 35) : BV:32
37 : eq(36, 19) : BOOL
38 : ite(37, 21, 22) : BV:8
39 : bvadd(24, 16, 35) : BV:32
40 : eq(39, 19) : BOOL
41 : ite(40, 21, 22) : BV:8
42 : bvadd(28, 16, 35) : BV:32
43 : eq(42, 19) : BOOL
44 : ite(43, 21, 22) : BV:8
45 : bvadd(16, 35) : BV:32
46 : eq(45, 19) : BOOL
47 : ite(46, 21, 22) : BV:8
48 : bvconcat(38, 41, 44, 47) : BV:32
49 : lambda(13, 48) : FUNCTION[BV:32 -> BV:32]
50 : map(12, 49) : MAP[BV:32 -> BV:32]
51 : lambda(10, 50) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
52 : map(9, 51) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
53 : sym_const(52) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda60539Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda60540Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
20 : eq(18, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 0 { 0x0 } : BV:8
23 : ite(20, 21, 22) : BV:8
24 : 2 { 0x2 +1.23e129 } : BV:32
25 : bvadd(24, 17, 1) : BV:32
26 : eq(25, 19) : BOOL
27 : ite(26, 21, 22) : BV:8
28 : bvadd(8, 17, 1) : BV:32
29 : eq(28, 19) : BOOL
30 : ite(29, 21, 22) : BV:8
31 : bvadd(17, 1) : BV:32
32 : eq(31, 19) : BOOL
33 : ite(32, 21, 22) : BV:8
34 : bvconcat(23, 27, 30, 33) : BV:32
35 : bvadd(14, 16, 34) : BV:32
36 : eq(35, 19) : BOOL
37 : ite(36, 21, 22) : BV:8
38 : bvadd(24, 16, 34) : BV:32
39 : eq(38, 19) : BOOL
40 : ite(39, 21, 22) : BV:8
41 : bvadd(8, 16, 34) : BV:32
42 : eq(41, 19) : BOOL
43 : ite(42, 21, 22) : BV:8
44 : bvadd(16, 34) : BV:32
45 : eq(44, 19) : BOOL
46 : ite(45, 21, 22) : BV:8
47 : bvconcat(37, 40, 43, 46) : BV:32
48 : lambda(13, 47) : FUNCTION[BV:32 -> BV:32]
49 : map(12, 48) : MAP[BV:32 -> BV:32]
50 : sum(9, 10, 49) : SUM[UNIT,MAP[BV:32 -> BV:32]]
51 : sym_const(50) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1545770477 { 0x5c2295ed +1.27020037e57 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 32215678 { 0x1eb927e +1.84040808e132 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 712131944 { 0x2a724568 +1.89274311e213 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 310237216 { 0x127dd820 +1.98315811e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 310237219 { 0x127dd823 +1.98315846e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 171944004 { 0xa3fa844 +1.49732255e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 171944007 { 0xa3fa847 +1.49732291e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 171550851 { 0xa39a883 +1.45045506e149 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1202Var : BV:32
2 : Lambda1203Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1210Var : BV:32
2 : Lambda1211Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 171550848 { 0xa39a880 +1.45045471e149 } : BV:32
10 : eq(8, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 0 { 0x0 } : BV:8
13 : ite(10, 11, 12) : BV:8
14 : 2 { 0x2 +1.23e129 } : BV:32
15 : bvadd(14, 6, 7) : BV:32
16 : eq(15, 9) : BOOL
17 : ite(16, 11, 12) : BV:8
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : bvadd(18, 6, 7) : BV:32
20 : eq(19, 9) : BOOL
21 : ite(20, 11, 12) : BV:8
22 : bvadd(6, 7) : BV:32
23 : eq(22, 9) : BOOL
24 : ite(23, 11, 12) : BV:8
25 : bvconcat(13, 17, 21, 24) : BV:32
26 : bvadd(3, 5, 25) : BV:32
27 : eq(26, 9) : BOOL
28 : ite(27, 11, 12) : BV:8
29 : bvadd(14, 5, 25) : BV:32
30 : eq(29, 9) : BOOL
31 : ite(30, 11, 12) : BV:8
32 : bvadd(18, 5, 25) : BV:32
33 : eq(32, 9) : BOOL
34 : ite(33, 11, 12) : BV:8
35 : bvadd(5, 25) : BV:32
36 : eq(35, 9) : BOOL
37 : ite(36, 11, 12) : BV:8
38 : bvconcat(28, 31, 34, 37) : BV:32
39 : lambda(1, 2, 38) : FUNCTION[BV:32,BV:32 -> BV:32]
40 : sym_const(39) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
1145670766
=counter_example_end
=global nodece 71 num_edges_traversed 2
=global nodece 71 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 72
=global nodece 72 nodece z3v487.ce5358.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(epsilon)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3v487.ce5358 1121976639e24ac8c927bce09fb7c9ad
=retaddr_const
1 : 1087646517 { 0x40d42b35 +1.65756857e2 } : BV:32
=input.spec-%var-x-1
1 : Lambda1712Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1713Var : BV:32
11 : Lambda1714Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1715Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2114179 ] -> 0, [ 2114180; 2114183 ] -> 255, [ 2114184; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2114179 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2114180; 2114183 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 2114184; 571886851 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 571886852; 571886855 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 571886856; 807216671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 807216672; 807216675 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 807216676; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 807216672 { 0x301d2620 +1.22772598e225 } : BV:32
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 571886852 { 0x22164d04 +1.17422533e197 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda1712Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda1713Var : BV:32
11 : Lambda1714Var : BV:32
12 : lambda(11, 7) : FUNCTION[BV:32 -> BOOL]
13 : Lambda1715Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 10) : BV:32
18 : bvadd(14, 17, 2) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 2) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : 1 { 0x1 +1.11e129 } : BV:32
44 : bvadd(43, 17, 2) : BV:32
45 : eq(44, 19) : BOOL
46 : eq(44, 22) : BOOL
47 : eq(44, 24) : BOOL
48 : eq(44, 26) : BOOL
49 : ite(48, 21, 28) : BV:8
50 : ite(47, 21, 49) : BV:8
51 : ite(46, 21, 50) : BV:8
52 : ite(45, 21, 51) : BV:8
53 : bvadd(17, 2) : BV:32
54 : eq(53, 19) : BOOL
55 : eq(53, 22) : BOOL
56 : eq(53, 24) : BOOL
57 : eq(53, 26) : BOOL
58 : ite(57, 21, 28) : BV:8
59 : ite(56, 21, 58) : BV:8
60 : ite(55, 21, 59) : BV:8
61 : ite(54, 21, 60) : BV:8
62 : bvconcat(32, 42, 52, 61) : BV:32
63 : bvadd(14, 16, 62) : BV:32
64 : eq(63, 19) : BOOL
65 : eq(63, 22) : BOOL
66 : eq(63, 24) : BOOL
67 : eq(63, 26) : BOOL
68 : ite(67, 21, 28) : BV:8
69 : ite(66, 21, 68) : BV:8
70 : ite(65, 21, 69) : BV:8
71 : ite(64, 21, 70) : BV:8
72 : bvadd(33, 16, 62) : BV:32
73 : eq(72, 19) : BOOL
74 : eq(72, 22) : BOOL
75 : eq(72, 24) : BOOL
76 : eq(72, 26) : BOOL
77 : ite(76, 21, 28) : BV:8
78 : ite(75, 21, 77) : BV:8
79 : ite(74, 21, 78) : BV:8
80 : ite(73, 21, 79) : BV:8
81 : bvadd(43, 16, 62) : BV:32
82 : eq(81, 19) : BOOL
83 : eq(81, 22) : BOOL
84 : eq(81, 24) : BOOL
85 : eq(81, 26) : BOOL
86 : ite(85, 21, 28) : BV:8
87 : ite(84, 21, 86) : BV:8
88 : ite(83, 21, 87) : BV:8
89 : ite(82, 21, 88) : BV:8
90 : bvadd(16, 62) : BV:32
91 : eq(90, 19) : BOOL
92 : eq(90, 22) : BOOL
93 : eq(90, 24) : BOOL
94 : eq(90, 26) : BOOL
95 : ite(94, 21, 28) : BV:8
96 : ite(93, 21, 95) : BV:8
97 : ite(92, 21, 96) : BV:8
98 : ite(91, 21, 97) : BV:8
99 : bvconcat(71, 80, 89, 98) : BV:32
100 : lambda(13, 99) : FUNCTION[BV:32 -> BV:32]
101 : map(12, 100) : MAP[BV:32 -> BV:32]
102 : lambda(10, 101) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
103 : map(9, 102) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
104 : sym_const(103) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : bvule(1, 1) : BOOL
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : bvule(1, 3) : BOOL
5 : and(2, 4) : BOOL
6 : 0 { 0x0 } : BOOL
7 : ite(5, 6, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : ite(7, 8, 1) : BV:32
10 : unit : UNIT
11 : Lambda60477Var : BV:32
12 : lambda(11, 6) : FUNCTION[BV:32 -> BOOL]
13 : Lambda60478Var : BV:32
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : 4 { 0x4 +1.47e129 } : BV:32
16 : bvmul(15, 13) : BV:32
17 : bvmul(15, 1) : BV:32
18 : bvadd(14, 17, 1) : BV:32
19 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
20 : eq(18, 19) : BOOL
21 : 255 { 0xff -1 } : BV:8
22 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
23 : eq(18, 22) : BOOL
24 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
25 : eq(18, 24) : BOOL
26 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
27 : eq(18, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : ite(27, 21, 28) : BV:8
30 : ite(25, 21, 29) : BV:8
31 : ite(23, 21, 30) : BV:8
32 : ite(20, 21, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 17, 1) : BV:32
35 : eq(34, 19) : BOOL
36 : eq(34, 22) : BOOL
37 : eq(34, 24) : BOOL
38 : eq(34, 26) : BOOL
39 : ite(38, 21, 28) : BV:8
40 : ite(37, 21, 39) : BV:8
41 : ite(36, 21, 40) : BV:8
42 : ite(35, 21, 41) : BV:8
43 : bvadd(8, 17, 1) : BV:32
44 : eq(43, 19) : BOOL
45 : eq(43, 22) : BOOL
46 : eq(43, 24) : BOOL
47 : eq(43, 26) : BOOL
48 : ite(47, 21, 28) : BV:8
49 : ite(46, 21, 48) : BV:8
50 : ite(45, 21, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : bvadd(17, 1) : BV:32
53 : eq(52, 19) : BOOL
54 : eq(52, 22) : BOOL
55 : eq(52, 24) : BOOL
56 : eq(52, 26) : BOOL
57 : ite(56, 21, 28) : BV:8
58 : ite(55, 21, 57) : BV:8
59 : ite(54, 21, 58) : BV:8
60 : ite(53, 21, 59) : BV:8
61 : bvconcat(32, 42, 51, 60) : BV:32
62 : bvadd(14, 16, 61) : BV:32
63 : eq(62, 19) : BOOL
64 : eq(62, 22) : BOOL
65 : eq(62, 24) : BOOL
66 : eq(62, 26) : BOOL
67 : ite(66, 21, 28) : BV:8
68 : ite(65, 21, 67) : BV:8
69 : ite(64, 21, 68) : BV:8
70 : ite(63, 21, 69) : BV:8
71 : bvadd(33, 16, 61) : BV:32
72 : eq(71, 19) : BOOL
73 : eq(71, 22) : BOOL
74 : eq(71, 24) : BOOL
75 : eq(71, 26) : BOOL
76 : ite(75, 21, 28) : BV:8
77 : ite(74, 21, 76) : BV:8
78 : ite(73, 21, 77) : BV:8
79 : ite(72, 21, 78) : BV:8
80 : bvadd(8, 16, 61) : BV:32
81 : eq(80, 19) : BOOL
82 : eq(80, 22) : BOOL
83 : eq(80, 24) : BOOL
84 : eq(80, 26) : BOOL
85 : ite(84, 21, 28) : BV:8
86 : ite(83, 21, 85) : BV:8
87 : ite(82, 21, 86) : BV:8
88 : ite(81, 21, 87) : BV:8
89 : bvadd(16, 61) : BV:32
90 : eq(89, 19) : BOOL
91 : eq(89, 22) : BOOL
92 : eq(89, 24) : BOOL
93 : eq(89, 26) : BOOL
94 : ite(93, 21, 28) : BV:8
95 : ite(92, 21, 94) : BV:8
96 : ite(91, 21, 95) : BV:8
97 : ite(90, 21, 96) : BV:8
98 : bvconcat(70, 79, 88, 97) : BV:32
99 : lambda(13, 98) : FUNCTION[BV:32 -> BV:32]
100 : map(12, 99) : MAP[BV:32 -> BV:32]
101 : sum(9, 10, 100) : SUM[UNIT,MAP[BV:32 -> BV:32]]
102 : sym_const(101) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1472875710 { 0x57ca4cbe +1.58046698e48 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 1087646517 { 0x40d42b35 +1.65756857e2 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%ret.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 470490015 { 0x1c0b1b9f +1.8678042e185 } : COUNT
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 807216672 { 0x301d2620 +1.22772598e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 807216675 { 0x301d2623 +1.22772634e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 571886852 { 0x22164d04 +1.17422533e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 571886855 { 0x22164d07 +1.17422568e197 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : Lambda1656Var : BV:32
2 : Lambda1657Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : Lambda1664Var : BV:32
2 : Lambda1665Var : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 2) : BV:32
6 : bvmul(4, 1) : BV:32
7 : 0 { 0x0 +1.0e129 } : BV:32
8 : bvadd(3, 6, 7) : BV:32
9 : 2114183 { 0x204287 +1.25203025e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 2114182 { 0x204286 +1.25203013e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2114181 { 0x204285 +1.25203001e129 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2114180 { 0x204284 +1.25202989e129 } : BV:32
17 : eq(8, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : bvadd(23, 6, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1 { 0x1 +1.11e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : bvadd(6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 14) : BOOL
47 : eq(43, 16) : BOOL
48 : ite(47, 11, 18) : BV:8
49 : ite(46, 11, 48) : BV:8
50 : ite(45, 11, 49) : BV:8
51 : ite(44, 11, 50) : BV:8
52 : bvconcat(22, 32, 42, 51) : BV:32
53 : bvadd(3, 5, 52) : BV:32
54 : eq(53, 9) : BOOL
55 : eq(53, 12) : BOOL
56 : eq(53, 14) : BOOL
57 : eq(53, 16) : BOOL
58 : ite(57, 11, 18) : BV:8
59 : ite(56, 11, 58) : BV:8
60 : ite(55, 11, 59) : BV:8
61 : ite(54, 11, 60) : BV:8
62 : bvadd(23, 5, 52) : BV:32
63 : eq(62, 9) : BOOL
64 : eq(62, 12) : BOOL
65 : eq(62, 14) : BOOL
66 : eq(62, 16) : BOOL
67 : ite(66, 11, 18) : BV:8
68 : ite(65, 11, 67) : BV:8
69 : ite(64, 11, 68) : BV:8
70 : ite(63, 11, 69) : BV:8
71 : bvadd(33, 5, 52) : BV:32
72 : eq(71, 9) : BOOL
73 : eq(71, 12) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 16) : BOOL
76 : ite(75, 11, 18) : BV:8
77 : ite(74, 11, 76) : BV:8
78 : ite(73, 11, 77) : BV:8
79 : ite(72, 11, 78) : BV:8
80 : bvadd(5, 52) : BV:32
81 : eq(80, 9) : BOOL
82 : eq(80, 12) : BOOL
83 : eq(80, 14) : BOOL
84 : eq(80, 16) : BOOL
85 : ite(84, 11, 18) : BV:8
86 : ite(83, 11, 85) : BV:8
87 : ite(82, 11, 86) : BV:8
88 : ite(81, 11, 87) : BV:8
89 : bvconcat(61, 70, 79, 88) : BV:32
90 : lambda(1, 2, 89) : FUNCTION[BV:32,BV:32 -> BV:32]
91 : sym_const(90) : FUNCTION[BV:32,BV:32 -> BV:32]
=counter_example.random_seed
2883521815
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
E0%0%d_E0%0%d
=global nodece 73
=global nodece 73 nodece z3v487.ce5274.num_edges_traversed2
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3v487.ce5274 211c49ea70e4f72cc1fff721640e1ce
=retaddr_const
1 : 604932308 { 0x240e88d4 +1.11355066e201 } : BV:32
=input.spec-%var-x-1
1 : Lambda40803Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda40804Var : BV:32
17 : Lambda40805Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda40806Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%var-i-1.L3%7%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/, [ 4; 7 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/, [ 8; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 131 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 132; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum2=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%x
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-ret-1.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-x-0.L3%7%bbentry
1 : Lambda40828Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda40829Var : BV:32
17 : Lambda40830Var : BV:32
18 : lambda(17, 12) : FUNCTION[BV:32 -> BOOL]
19 : Lambda40831Var : BV:32
20 : lambda(19, 2) : FUNCTION[BV:32 -> BV:32]
21 : map(18, 20) : MAP[BV:32 -> BV:32]
22 : lambda(16, 21) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
23 : map(15, 22) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
24 : sym_const(23) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=input.spec-%tmpvar-10.L3%8%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvule(1, 2) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(2, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : bvule(2, 2) : BOOL
9 : and(8, 8) : BOOL
10 : 0 { 0x0 } : BOOL
11 : ite(9, 10, 10) : BOOL
12 : ite(6, 7, 11) : BOOL
13 : 1 { 0x1 +1.11e129 } : BV:32
14 : ite(12, 13, 1) : BV:32
15 : unit : UNIT
16 : Lambda60217Var : BV:32
17 : lambda(16, 10) : FUNCTION[BV:32 -> BOOL]
18 : Lambda60218Var : BV:32
19 : lambda(18, 1) : FUNCTION[BV:32 -> BV:32]
20 : map(17, 19) : MAP[BV:32 -> BV:32]
21 : sum(14, 15, 20) : SUM[UNIT,MAP[BV:32 -> BV:32]]
22 : sym_const(21) : SUM[UNIT,MAP[BV:32 -> BV:32]]
=input.src.spec-ghostvar.itervar.1.L3%7%bbentry
1 : 2050334942 { 0x7a35a0de +1.41897177e117 } : BV:32
=input.spec-%var-u-1.E0%0%d
1 : unit : UNIT
=input.spec-%tmpvar-17.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-18.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-16.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-20.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-19.L3%7%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-21.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.src.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 715470198 { 0x2aa53576 +1.29069399e214 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 0 { 0x0 } : BOOL
=input.dst.llvm-%ret-reg.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%hidden-reg.E0%0%d
1 : 1326123922 { 0x4f0b0b92 +1.8629059e31 } : BV:32
=input.dst.llvm-indir_tgt.E0%0%d
1 : 604932308 { 0x240e88d4 +1.11355066e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 131 { 0x83 +1.1561e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-x-1.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x-1.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.0.1
1 : (() -> false, ) : FUNCTION[BV:32,BV:32 -> BOOL]
=input.spec-%var-x-0.L3%7%bbentry.1.1.1.1
1 : (() -> 0, ) : FUNCTION[BV:32,BV:32 -> BV:32]
=input.spec-%var-x_i-1.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-1.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-x_i-0.L3%19%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-x_i-0.L3%19%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%8%d.2.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-10.L3%8%d.2.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=counter_example.random_seed
1554417038
=counter_example_end
=global nodece 73 num_edges_traversed 2
=global nodece 73 nodece_visted_pcs: 
E0%0%d_E0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%m : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%n : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%x : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 41
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=inductive-invariants point_set point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 44
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 45
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=inductive-invariants point_set point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 47
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 49
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 51
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=inductive-invariants point_set point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 73
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 74
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=inductive-invariants point_set point_expr 75
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=inductive-invariants point_set point_expr 76
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set point_expr 77
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce100
=inductive-invariants point_set point z3.ce100 expr point z3.ce100
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce100 expr point z3.ce100 done
=inductive-invariants point_set point z3v487.ce99
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce99 expr point z3v487.ce99 done
=inductive-invariants point_set point z3v487.ce52
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce52 expr point z3v487.ce52 done
=inductive-invariants point_set point z3.ce28
=inductive-invariants point_set point z3.ce28 expr point z3.ce28
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 6 for input.dst.llvm-%x
256
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce28 expr point z3.ce28 done
=inductive-invariants point_set point z3.ce76
=inductive-invariants point_set point z3.ce76 expr point z3.ce76
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 5 for input.dst.llvm-%n
4211211259
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce76 expr point z3.ce76 done
=inductive-invariants point_set point z3v487.ce27
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 6 for input.dst.llvm-%x
8
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce27 expr point z3v487.ce27 done
=inductive-invariants point_set point z3.ce51
=inductive-invariants point_set point z3.ce51 expr point z3.ce51
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 4 for input.dst.llvm-%m
67372036
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 6 for input.dst.llvm-%x
67372036
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce51 expr point z3.ce51 done
=inductive-invariants point_set point z3v487.ce123
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce123 expr point z3v487.ce123 done
=inductive-invariants point_set point z3.ce219
=inductive-invariants point_set point z3.ce219 expr point z3.ce219
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce219 expr point z3.ce219 done
=inductive-invariants point_set point z3.ce243
=inductive-invariants point_set point z3.ce243 expr point z3.ce243
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 5 for input.dst.llvm-%n
65536
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 done
=inductive-invariants point_set point z3v487.ce244
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 done
=inductive-invariants point_set point z3v487.ce75
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 5 for input.dst.llvm-%n
1048576
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce75 expr point z3v487.ce75 done
=inductive-invariants point_set point z3.ce124
=inductive-invariants point_set point z3.ce124 expr point z3.ce124
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce124 expr point z3.ce124 done
=inductive-invariants point_set point z3.ce291
=inductive-invariants point_set point z3.ce291 expr point z3.ce291
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce291 expr point z3.ce291 done
=inductive-invariants point_set point z3.ce267
=inductive-invariants point_set point z3.ce267 expr point z3.ce267
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 6 for input.dst.llvm-%x
2600433408
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce267 expr point z3.ce267 done
=inductive-invariants point_set point z3v487.ce268
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce268 expr point z3v487.ce268 done
=inductive-invariants point_set point z3v487.ce292
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce292 expr point z3v487.ce292 done
=inductive-invariants point_set point z3.ce326
=inductive-invariants point_set point z3.ce326 expr point z3.ce326
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 4 for input.dst.llvm-%m
4096
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce326 expr point z3.ce326 done
=inductive-invariants point_set point z3v487.ce327
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 5 for input.dst.llvm-%n
32
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce327 expr point z3v487.ce327 done
=inductive-invariants point_set point z3v487.ce220
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce220 expr point z3v487.ce220 done
=inductive-invariants point_set point z3.ce195
=inductive-invariants point_set point z3.ce195 expr point z3.ce195
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 6 for input.dst.llvm-%x
3933454080
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce195 expr point z3.ce195 done
=inductive-invariants point_set point z3v487.ce196
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 6 for input.dst.llvm-%x
3426812416
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce196 expr point z3v487.ce196 done
=inductive-invariants point_set point z3v487.ce147
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce147 expr point z3v487.ce147 done
=inductive-invariants point_set point z3.ce148
=inductive-invariants point_set point z3.ce148 expr point z3.ce148
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce148 expr point z3.ce148 done
=inductive-invariants point_set point z3.ce172
=inductive-invariants point_set point z3.ce172 expr point z3.ce172
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 4 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 5 for input.dst.llvm-%n
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce172 expr point z3.ce172 done
=inductive-invariants point_set point z3v487.ce171
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 4 for input.dst.llvm-%m
2147483648
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 done
=inductive-invariants point_set point z3v487.ce2077
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2077 expr point z3v487.ce2077 done
=inductive-invariants point_set point z3v487.ce2035
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2035 expr point z3v487.ce2035 done
=inductive-invariants point_set point z3v487.ce1825
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1825 expr point z3v487.ce1825 done
=inductive-invariants point_set point z3.ce1824
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 4 for input.dst.llvm-%m
512
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1824 expr point z3.ce1824 done
=inductive-invariants point_set point z3v487.ce1867
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1867 expr point z3v487.ce1867 done
=inductive-invariants point_set point z3.ce1866
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 5 for input.dst.llvm-%n
16384
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1866 expr point z3.ce1866 done
=inductive-invariants point_set point z3v487.ce1909
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 5 for input.dst.llvm-%n
1073741824
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1909 expr point z3v487.ce1909 done
=inductive-invariants point_set point z3.ce1908
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 5 for input.dst.llvm-%n
32768
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1908 expr point z3.ce1908 done
=inductive-invariants point_set point z3v487.ce1951
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1951 expr point z3v487.ce1951 done
=inductive-invariants point_set point z3.ce2034
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2034 expr point z3.ce2034 done
=inductive-invariants point_set point z3.ce1993
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 5 for input.dst.llvm-%n
1048576
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1993 expr point z3.ce1993 done
=inductive-invariants point_set point z3.ce2076
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2076 expr point z3.ce2076 done
=inductive-invariants point_set point z3.ce1950
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1950 expr point z3.ce1950 done
=inductive-invariants point_set point z3.ce2160
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2160 expr point z3.ce2160 done
=inductive-invariants point_set point z3v487.ce1992
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1992 expr point z3v487.ce1992 done
=inductive-invariants point_set point z3.ce2118
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 5 for input.dst.llvm-%n
256
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2118 expr point z3.ce2118 done
=inductive-invariants point_set point z3v487.ce2119
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 5 for input.dst.llvm-%n
2048
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2119 expr point z3v487.ce2119 done
=inductive-invariants point_set point z3.ce2202
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 5 for input.dst.llvm-%n
8
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2202 expr point z3.ce2202 done
=inductive-invariants point_set point z3v487.ce2161
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2161 expr point z3v487.ce2161 done
=inductive-invariants point_set point z3.ce2244
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2244 expr point z3.ce2244 done
=inductive-invariants point_set point z3v487.ce2203
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2203 expr point z3v487.ce2203 done
=inductive-invariants point_set point z3v487.ce2287
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2287 expr point z3v487.ce2287 done
=inductive-invariants point_set point z3v487.ce2245
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2245 expr point z3v487.ce2245 done
=inductive-invariants point_set point z3.ce2329
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2329 expr point z3.ce2329 done
=inductive-invariants point_set point z3.ce2286
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2286 expr point z3.ce2286 done
=inductive-invariants point_set point z3v487.ce2328
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 5 for input.dst.llvm-%n
524288
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2328 expr point z3v487.ce2328 done
=inductive-invariants point_set point z3.ce3258
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3258 expr point z3.ce3258 done
=inductive-invariants point_set point z3v487.ce3376
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 40 for input.spec-%var-i-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3376 expr point z3v487.ce3376 done
=inductive-invariants point_set point z3v487.ce3268
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3268 expr point z3v487.ce3268 done
=inductive-invariants point_set point z3v487.ce3310
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3310 expr point z3v487.ce3310 done
=inductive-invariants point_set point z3.ce3320
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 5 for input.dst.llvm-%n
4211211259
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3320 expr point z3.ce3320 done
=inductive-invariants point_set point z3v487.ce3330
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 5 for input.dst.llvm-%n
1048576
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3330 expr point z3v487.ce3330 done
=inductive-invariants point_set point z3v487.ce3340
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 5 for input.dst.llvm-%n
268435456
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 6 for input.dst.llvm-%x
4
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3340 expr point z3v487.ce3340 done
=inductive-invariants point_set point z3.ce3541
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3541 expr point z3.ce3541 done
=inductive-invariants point_set point z3v487.ce3540
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3540 expr point z3v487.ce3540 done
=inductive-invariants point_set point z3v487.ce3514
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3514 expr point z3v487.ce3514 done
=inductive-invariants point_set point z3v487.ce3571
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 2 for input.spec-%var-i-1.L3%7%bbentry
2
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 5 for input.dst.llvm-%n
4
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 40 for input.spec-%var-i-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3571 expr point z3v487.ce3571 done
=inductive-invariants point_set point z3v487.ce3606
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 5 for input.dst.llvm-%n
33554432
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 40 for input.spec-%var-i-0.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3606 expr point z3v487.ce3606 done
=inductive-invariants point_set point z3.ce3607
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 5 for input.dst.llvm-%n
1073741826
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 40 for input.spec-%var-i-0.L3%19%bbentry
3
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3607 expr point z3.ce3607 done
=inductive-invariants point_set point z3.ce3658
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 5 for input.dst.llvm-%n
10
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3658 expr point z3.ce3658 done
=inductive-invariants point_set point z3v487.ce3659
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 5 for input.dst.llvm-%n
4096
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3659 expr point z3v487.ce3659 done
=inductive-invariants point_set point z3.ce3689
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 5 for input.dst.llvm-%n
10
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 40 for input.spec-%var-i-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3689 expr point z3.ce3689 done
=inductive-invariants point_set point z3.ce3713
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 2 for input.spec-%var-i-1.L3%7%bbentry
5
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 5 for input.dst.llvm-%n
10
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 40 for input.spec-%var-i-0.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
6
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3713 expr point z3.ce3713 done
=inductive-invariants point_set point z3.ce3761
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 2 for input.spec-%var-i-1.L3%7%bbentry
268698122
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 5 for input.dst.llvm-%n
2164264994
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
268698122
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3761 expr point z3.ce3761 done
=inductive-invariants point_set point z3v487.ce3760
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 2 for input.spec-%var-i-1.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 5 for input.dst.llvm-%n
1794878544
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3760 expr point z3v487.ce3760 done
=inductive-invariants point_set point z3v487.ce3791
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 2 for input.spec-%var-i-1.L3%7%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 5 for input.dst.llvm-%n
1794878544
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 40 for input.spec-%var-i-0.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1073741825
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3791 expr point z3v487.ce3791 done
=inductive-invariants point_set point z3v487.ce3859
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 5 for input.dst.llvm-%n
4294279024
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 40 for input.spec-%var-i-0.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2147483649
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3859 expr point z3v487.ce3859 done
=inductive-invariants point_set point z3v487.ce3899
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 2 for input.spec-%var-i-1.L3%7%bbentry
3221225471
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 5 for input.dst.llvm-%n
4202004479
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3221225471
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3899 expr point z3v487.ce3899 done
=inductive-invariants point_set point z3v487.ce3826
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 2 for input.spec-%var-i-1.L3%7%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 5 for input.dst.llvm-%n
4294279024
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 40 for input.spec-%var-i-0.L3%19%bbentry
2147483647
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3826 expr point z3v487.ce3826 done
=inductive-invariants point_set point z3.ce3900
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 2 for input.spec-%var-i-1.L3%7%bbentry
2308333824
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 5 for input.dst.llvm-%n
2359775384
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2308333824
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3900 expr point z3.ce3900 done
=inductive-invariants point_set point z3v487.ce3930
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 2 for input.spec-%var-i-1.L3%7%bbentry
3221225471
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 5 for input.dst.llvm-%n
4202004479
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3221225471
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 40 for input.spec-%var-i-0.L3%19%bbentry
3221225471
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3221225472
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3930 expr point z3v487.ce3930 done
=inductive-invariants point_set point z3v487.ce3966
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 4 for input.dst.llvm-%m
16
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 40 for input.spec-%var-i-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3966 expr point z3v487.ce3966 done
=inductive-invariants point_set point z3.ce3965
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 40 for input.spec-%var-i-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3965 expr point z3.ce3965 done
=inductive-invariants point_set point z3v487.ce4017
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4017 expr point z3v487.ce4017 done
=inductive-invariants point_set point z3.ce4018
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 2 for input.spec-%var-i-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 4 for input.dst.llvm-%m
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 5 for input.dst.llvm-%n
4294967295
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4018 expr point z3.ce4018 done
=inductive-invariants point_set point z3.ce4101
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 2 for input.spec-%var-i-1.L3%7%bbentry
570687487
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 4 for input.dst.llvm-%m
16
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 5 for input.dst.llvm-%n
2215116796
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 6 for input.dst.llvm-%x
3417309188
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
570687487
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 40 for input.spec-%var-i-0.L3%19%bbentry
570687487
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
570687488
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4101 expr point z3.ce4101 done
=inductive-invariants point_set point z3v487.ce4282
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 4 for input.dst.llvm-%m
8
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4282 expr point z3v487.ce4282 done
=inductive-invariants point_set point z3.ce4625
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 2 for input.spec-%var-i-1.L3%7%bbentry
3
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 6 for input.dst.llvm-%x
134217716
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 39 for input.spec-%var-j-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 40 for input.spec-%var-i-0.L3%19%bbentry
3
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
4
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4625 expr point z3.ce4625 done
=inductive-invariants point_set point z3v487.ce4626
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 4 for input.dst.llvm-%m
5
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 5 for input.dst.llvm-%n
2147483648
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 6 for input.dst.llvm-%x
94898424
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 39 for input.spec-%var-j-0.L3%19%bbentry
3
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
3
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967294
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4626 expr point z3v487.ce4626 done
=inductive-invariants point_set point z3v487.ce4382
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 40 for input.spec-%var-i-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4382 expr point z3v487.ce4382 done
=inductive-invariants point_set point z3v487.ce4355
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 4 for input.dst.llvm-%m
2
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 5 for input.dst.llvm-%n
2
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4355 expr point z3v487.ce4355 done
=inductive-invariants point_set point z3.ce4427
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 2 for input.spec-%var-i-1.L3%7%bbentry
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 5 for input.dst.llvm-%n
32768
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4427 expr point z3.ce4427 done
=inductive-invariants point_set point z3.ce4464
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 4 for input.dst.llvm-%m
4294967295
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 5 for input.dst.llvm-%n
1024
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4464 expr point z3.ce4464 done
=inductive-invariants point_set point z3v487.ce4530
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 2 for input.spec-%var-i-1.L3%7%bbentry
16793599
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 4 for input.dst.llvm-%m
9
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 5 for input.dst.llvm-%n
16817188
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 6 for input.dst.llvm-%x
3182739456
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
16793599
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 40 for input.spec-%var-i-0.L3%19%bbentry
16793599
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 41 for input.spec-%var-ret-0.L3%19%bbentry
1073881216
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
16793600
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
1073881216
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4530 expr point z3v487.ce4530 done
=inductive-invariants point_set point z3.ce4529
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 2 for input.spec-%var-i-1.L3%7%bbentry
3221225600
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 3 for input.spec-%var-ret-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 4 for input.dst.llvm-%m
4097
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 5 for input.dst.llvm-%n
3221225601
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 6 for input.dst.llvm-%x
3221224992
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3221225600
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 40 for input.spec-%var-i-0.L3%19%bbentry
3221225600
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 41 for input.spec-%var-ret-0.L3%19%bbentry
268517380
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3221225601
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
268517380
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4529 expr point z3.ce4529 done
=inductive-invariants point_set point z3.ce4668
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 2 for input.spec-%var-i-1.L3%7%bbentry
4
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967294
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 4 for input.dst.llvm-%m
4
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 5 for input.dst.llvm-%n
67108864
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 6 for input.dst.llvm-%x
134217716
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 40 for input.spec-%var-i-0.L3%19%bbentry
4
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967294
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967294
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4668 expr point z3.ce4668 done
=inductive-invariants point_set point z3.ce4760
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 3 for input.spec-%var-ret-1.L3%7%bbentry
30014930
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 4 for input.dst.llvm-%m
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 5 for input.dst.llvm-%n
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 6 for input.dst.llvm-%x
268435456
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 39 for input.spec-%var-j-0.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4760 expr point z3.ce4760 done
=inductive-invariants point_set point z3v487.ce4761
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 2 for input.spec-%var-i-1.L3%7%bbentry
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1832857746
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 4 for input.dst.llvm-%m
128
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 5 for input.dst.llvm-%n
134217728
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 6 for input.dst.llvm-%x
2147483644
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 40 for input.spec-%var-i-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4761 expr point z3v487.ce4761 done
=inductive-invariants point_set point z3.ce4845
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 2 for input.spec-%var-i-1.L3%7%bbentry
3540193791
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 3 for input.spec-%var-ret-1.L3%7%bbentry
603107700
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 4 for input.dst.llvm-%m
9
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 5 for input.dst.llvm-%n
3810660988
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 6 for input.dst.llvm-%x
912504844
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
3540193791
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 40 for input.spec-%var-i-0.L3%19%bbentry
3540193791
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
3540193792
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4845 expr point z3.ce4845 done
=inductive-invariants point_set point z3v487.ce4846
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 2 for input.spec-%var-i-1.L3%7%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 3 for input.spec-%var-ret-1.L3%7%bbentry
2037880594
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 4 for input.dst.llvm-%m
16777221
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 5 for input.dst.llvm-%n
2726297600
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 6 for input.dst.llvm-%x
1610612736
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 39 for input.spec-%var-j-0.L3%19%bbentry
5
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 40 for input.spec-%var-i-0.L3%19%bbentry
1073741823
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
5
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4846 expr point z3v487.ce4846 done
=inductive-invariants point_set point z3v487.ce4944
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 2 for input.spec-%var-i-1.L3%7%bbentry
536870911
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 3 for input.spec-%var-ret-1.L3%7%bbentry
796368608
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 4 for input.dst.llvm-%m
1079246850
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 5 for input.dst.llvm-%n
542253056
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 6 for input.dst.llvm-%x
1155530752
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
536870911
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 39 for input.spec-%var-j-0.L3%19%bbentry
542253057
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 40 for input.spec-%var-i-0.L3%19%bbentry
536870911
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
536870912
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
542253057
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4944 expr point z3v487.ce4944 done
=inductive-invariants point_set point z3.ce4943
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 2 for input.spec-%var-i-1.L3%7%bbentry
83886079
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 3 for input.spec-%var-ret-1.L3%7%bbentry
1468392016
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 4 for input.dst.llvm-%m
2147483652
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 5 for input.dst.llvm-%n
536870912
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 6 for input.dst.llvm-%x
134217728
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
83886079
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 39 for input.spec-%var-j-0.L3%19%bbentry
536870913
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 40 for input.spec-%var-i-0.L3%19%bbentry
83886079
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 41 for input.spec-%var-ret-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
83886080
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
536870913
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4943 expr point z3.ce4943 done
=inductive-invariants point_set point z3.ce5074
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 2 for input.spec-%var-i-1.L3%7%bbentry
287232
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 4 for input.dst.llvm-%m
508682
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 5 for input.dst.llvm-%n
2147533554
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 6 for input.dst.llvm-%x
2146334720
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
287232
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 39 for input.spec-%var-j-0.L3%19%bbentry
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 40 for input.spec-%var-i-0.L3%19%bbentry
287232
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
287233
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5074 expr point z3.ce5074 done
=inductive-invariants point_set point z3.ce5041
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 2 for input.spec-%var-i-1.L3%7%bbentry
287232
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 4 for input.dst.llvm-%m
508682
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 5 for input.dst.llvm-%n
2147533554
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 6 for input.dst.llvm-%x
2146334720
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
287232
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5041 expr point z3.ce5041 done
=inductive-invariants point_set point z3v487.ce5042
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 2 for input.spec-%var-i-1.L3%7%bbentry
2373976064
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 4 for input.dst.llvm-%m
1133821552
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 5 for input.dst.llvm-%n
2781942496
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 6 for input.dst.llvm-%x
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2373976064
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 8 for input.dst.llvm-%ret.0.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3v487.ce5042 expr point z3v487.ce5042 done
=inductive-invariants point_set point z3.ce5137
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 1 for and(and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), eq(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, bvadd(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, bvadd(4, 4294967295)))), and(and(and(and(and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end))))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))))), and(and(eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, 3), 0)), eq(bvand(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, 3), 0))), and(and(eq(input.dst.local./*___y___foo__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___foo__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)), eq(input.dst.local./*___y___foo__x__=L0%0%argnum2=/, input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin)))
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 2 for input.spec-%var-i-1.L3%7%bbentry
287232
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 3 for input.spec-%var-ret-1.L3%7%bbentry
4294967295
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 4 for input.dst.llvm-%m
508682
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 5 for input.dst.llvm-%n
2147533554
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 6 for input.dst.llvm-%x
2146334720
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 7 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
287232
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 9 for bvslt(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 10 for bvult(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 11 for bvslt(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 12 for bvult(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 13 for bvsle(input.dst.llvm-%m, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 14 for bvule(input.dst.llvm-%m, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 15 for bvsle(input.dst.llvm-%n, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 16 for bvule(input.dst.llvm-%n, input.dst.llvm-%m)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 17 for bvslt(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 18 for bvult(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 19 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 20 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 21 for bvsle(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 22 for bvule(input.dst.llvm-%m, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 23 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 24 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 25 for bvslt(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 26 for bvult(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 27 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 28 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 29 for bvsle(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 30 for bvule(input.dst.llvm-%n, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 31 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 32 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 39 for input.spec-%var-j-0.L3%19%bbentry
2
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 40 for input.spec-%var-i-0.L3%19%bbentry
287232
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 41 for input.spec-%var-ret-0.L3%19%bbentry
4294967295
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 42 for input.spec-%tmpvar-12.L3%19%bbentry
287233
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 43 for input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
2
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 44 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 45 for input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 46 for bvslt(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 47 for bvult(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 48 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 49 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 50 for bvsle(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 51 for bvule(input.dst.llvm-%m, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 52 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 53 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%m)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 54 for bvslt(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 55 for bvult(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 56 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 57 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 58 for bvsle(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 59 for bvule(input.dst.llvm-%n, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 60 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 61 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%n)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 62 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 63 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 64 for bvslt(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 65 for bvult(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 66 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 67 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%j.0.Lfor.cond1%1%bbentry)
0
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 68 for bvsle(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 val 69 for bvule(input.dst.llvm-%j.0.Lfor.cond1%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce5137 expr point z3.ce5137 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%7%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at L3%19%bbentry_Lfor.cond1%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%7%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 7 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 8
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.8
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce99
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce52
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce76
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce27
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce75
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce3268
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce5041
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=7; number of visited CEs=9; number of preds=3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 8->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 8->0; 
8
-2147483648->0; 2->0; 3->4294967295; 4->0; 5->0; 6->0; 7->0; 8->1; 
matrix done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce3268
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce3540
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce3658
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce3760
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3899
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce4017
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce52
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce76
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce123
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce147
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce171
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3v487.ce3268
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce3540
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3.ce3658
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 4: z3v487.ce3760
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 5: z3v487.ce3899
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 6: z3v487.ce4017
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini name dst-ineq
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini expr_group_type HOUDINI with 24 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 1: z3v487.ce52
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 2: z3.ce76
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 3: z3.ce51
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 4: z3v487.ce147
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ce 5: z3v487.ce3268
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini summary: number of exprs=24; number of visited CEs=6; number of preds=1
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based name spec-coupling-invariants
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 6 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based point_expr 38
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 7 type houdini-axiom-based summary: number of exprs=6; number of visited CEs=1; number of preds=2
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini name local-sizes-are-equal
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini predicate_set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini is assumed eqclass : 0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ce 0: z3.ce3
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini visited ces set done
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 8 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%7%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node L3%19%bbentry_Lfor.cond1%1%bbentry for reason inductive-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
18 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
19 : bvule(17, 18) : BOOL
20 : and(16, 19) : BOOL
21 : bvadd(17, 6) : BV:32
22 : eq(18, 21) : BOOL
23 : and(20, 22) : BOOL
24 : bvuge(1, 10) : BOOL
25 : bvule(1, 11) : BOOL
26 : and(24, 25) : BOOL
27 : bvuge(2, 10) : BOOL
28 : bvule(2, 11) : BOOL
29 : and(27, 28) : BOOL
30 : not(29) : BOOL
31 : andnot1(26, 30) : BOOL
32 : bvuge(10, 1) : BOOL
33 : bvule(10, 2) : BOOL
34 : and(32, 33) : BOOL
35 : bvuge(11, 1) : BOOL
36 : bvule(11, 2) : BOOL
37 : and(35, 36) : BOOL
38 : not(37) : BOOL
39 : andnot1(34, 38) : BOOL
40 : and(31, 39) : BOOL
41 : bvuge(1, 17) : BOOL
42 : bvule(1, 18) : BOOL
43 : and(41, 42) : BOOL
44 : bvuge(2, 17) : BOOL
45 : bvule(2, 18) : BOOL
46 : and(44, 45) : BOOL
47 : not(46) : BOOL
48 : andnot1(43, 47) : BOOL
49 : and(40, 48) : BOOL
50 : bvuge(17, 1) : BOOL
51 : bvule(17, 2) : BOOL
52 : and(50, 51) : BOOL
53 : bvuge(18, 1) : BOOL
54 : bvule(18, 2) : BOOL
55 : and(53, 54) : BOOL
56 : not(55) : BOOL
57 : andnot1(52, 56) : BOOL
58 : and(49, 57) : BOOL
59 : bvuge(10, 17) : BOOL
60 : bvule(10, 18) : BOOL
61 : and(59, 60) : BOOL
62 : bvuge(11, 17) : BOOL
63 : bvule(11, 18) : BOOL
64 : and(62, 63) : BOOL
65 : not(64) : BOOL
66 : andnot1(61, 65) : BOOL
67 : and(58, 66) : BOOL
68 : bvuge(17, 10) : BOOL
69 : bvule(17, 11) : BOOL
70 : and(68, 69) : BOOL
71 : bvuge(18, 10) : BOOL
72 : bvule(18, 11) : BOOL
73 : and(71, 72) : BOOL
74 : not(73) : BOOL
75 : andnot1(70, 74) : BOOL
76 : and(67, 75) : BOOL
77 : and(23, 76) : BOOL
78 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
79 : 3 { 0x3 +1.35e129 } : BV:32
80 : bvand(78, 79) : BV:32
81 : 0 { 0x0 +1.0e129 } : BV:32
82 : eq(80, 81) : BOOL
83 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
84 : bvand(83, 79) : BV:32
85 : eq(84, 81) : BOOL
86 : and(82, 85) : BOOL
87 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
88 : bvand(87, 79) : BV:32
89 : eq(88, 81) : BOOL
90 : and(86, 89) : BOOL
91 : and(77, 90) : BOOL
92 : eq(78, 1) : BOOL
93 : eq(83, 10) : BOOL
94 : and(92, 93) : BOOL
95 : eq(87, 17) : BOOL
96 : and(94, 95) : BOOL
97 : and(91, 96) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%x : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 41
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 44
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 45
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.45
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-32-free_var_idx.44
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.42
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-i-1.L3%7%bbentry : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvneg(4) : BV:32
6 : bvadd(1, 5) : BV:32
=RhsExpr
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.40
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 4
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-i-1.L3%7%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 5
=Comment
expr-group-bvs.linear2-32-free_var_idx.43
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%var-j-0.L3%19%bbentry : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 6
=Comment
expr-group-bvs.linear1-2-free_var_idx.6
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%x : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce76
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce75
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce326
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce171
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce1825
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce1824
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce1866
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce1908
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce3340
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce4101
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3v487.ce4282
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3.ce4625
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3.ce4529
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 14: z3.ce4668
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 15: z3.ce4760
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 16: z3.ce5074
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=13; number of visited CEs=17; number of preds=7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
6
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->1073741824; 7->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 45->0; 
7
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->1; 39->0; 40->0; 41->0; 42->0; 43->0; 44->0; 45->0; 
40
-2147483648->0; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->1; 41->0; 42->0; 43->0; 44->0; 45->0; 
42
-2147483648->4294967295; 2->4294967295; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->0; 42->1; 43->0; 44->0; 45->0; 
43
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->4294967295; 40->0; 41->0; 42->0; 43->1; 44->0; 45->0; 
44
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->0; 42->0; 43->0; 44->1; 45->0; 
45
-2147483648->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 39->0; 40->0; 41->4294967295; 42->0; 43->0; 44->0; 45->1; 
matrix done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 39
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce4282
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce4625
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce4845
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 40
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce3376
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce3340
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce3689
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce3713
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce3859
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name src-branches-const-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 42
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
src-branches-const-ineq.lb-unsigned
=LhsExpr
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce3340
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce3606
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce3689
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3v487.ce3826
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 5: z3.ce3965
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const point_expr 5
1 : input.dst.llvm-%n : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 1: z3.ce76
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 2: z3v487.ce123
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ce 3: z3v487.ce1867
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 5 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%m
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const point_expr 4
1 : input.dst.llvm-%m : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 1: z3.ce326
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 2: z3v487.ce171
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ce 3: z3.ce1950
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 6 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 1: z3v487.ce3376
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 2: z3v487.ce3340
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 3: z3.ce3689
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 4: z3.ce3713
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ce 5: z3v487.ce3859
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 7 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const point_expr 43
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%j.0.Lfor.cond1%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 1: z3v487.ce4282
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 2: z3.ce4625
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ce 3: z3.ce4845
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 2
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_expr 3
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 8 type ineq_const const_bound_exprs done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini name dst-ineq
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini expr_group_type HOUDINI with 48 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 9
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 10
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 11
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 12
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 13
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 14
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 15
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 16
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 17
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 18
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 19
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 20
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 21
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 22
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 23
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 24
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 25
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 26
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 27
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 28
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 29
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 30
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 31
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 32
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 46
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 47
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 48
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 49
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 50
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 51
1 : input.dst.llvm-%m : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 52
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 53
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 54
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 55
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 56
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 57
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 58
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 59
1 : input.dst.llvm-%n : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 60
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 61
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 62
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 63
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 64
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 65
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 66
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 67
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 68
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini point_expr 69
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini pred 2
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 1: z3.ce76
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 2: z3.ce326
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 3: z3v487.ce171
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 4: z3v487.ce3340
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 5: z3v487.ce3859
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 6: z3v487.ce4282
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 7: z3v487.ce4355
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ce 8: z3.ce4943
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 9 type houdini summary: number of exprs=48; number of visited CEs=9; number of preds=3
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based name spec-coupling-invariants
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 33
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 34
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 35
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 36
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 37
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 70
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%x : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : bvadd(20, 11) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(15, 16, 17, 21, 22, 23) : BV:32
25 : bvadd(19, 24) : BV:32
26 : select(15, 16, 17, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(14, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 71
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : bvult(9, 5) : BOOL
12 : and(10, 11) : BOOL
13 : lambda(9, 12) : FUNCTION[BV:32 -> BOOL]
14 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
15 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
16 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
17 : 4 { 0x4 +1.47e129 } : BV:32
18 : bvmul(9, 17) : BV:32
19 : bvmul(2, 17) : BV:32
20 : input.dst.llvm-%x : BV:32
21 : bvadd(19, 20) : BV:32
22 : 4 { 0x4 +1.0e1025 } : INT
23 : 0 { 0x0 } : BOOL
24 : select(14, 15, 16, 21, 22, 23) : BV:32
25 : bvadd(18, 24) : BV:32
26 : select(14, 15, 16, 25, 22, 23) : BV:32
27 : lambda(9, 26) : FUNCTION[BV:32 -> BV:32]
28 : map(13, 27) : MAP[BV:32 -> BV:32]
29 : lambda(2, 28) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
30 : map(8, 29) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
31 : eq(1, 30) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 72
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 73
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 74
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 75
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 76
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based point_expr 77
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : eq(1, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : 1 { 0x1 +1.0e1025 } : INT
35 : sum_get(33, 34) : MAP[BV:32 -> BV:32]
36 : eq(1, 35) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : bvule(3, 9) : BOOL
11 : input.dst.llvm-%m : BV:32
12 : bvult(9, 11) : BOOL
13 : and(10, 12) : BOOL
14 : lambda(9, 13) : FUNCTION[BV:32 -> BOOL]
15 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
16 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
17 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(9, 18) : BV:32
20 : bvmul(2, 18) : BV:32
21 : input.dst.llvm-%x : BV:32
22 : bvadd(20, 21) : BV:32
23 : 4 { 0x4 +1.0e1025 } : INT
24 : 0 { 0x0 } : BOOL
25 : select(15, 16, 17, 22, 23, 24) : BV:32
26 : bvadd(19, 25) : BV:32
27 : select(15, 16, 17, 26, 23, 24) : BV:32
28 : lambda(9, 27) : FUNCTION[BV:32 -> BV:32]
29 : map(14, 28) : MAP[BV:32 -> BV:32]
30 : lambda(2, 29) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
31 : map(8, 30) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
32 : input.spec-%var-i-1.L3%7%bbentry : BV:32
33 : map_get(31, 32) : SUM[UNIT,MAP[BV:32 -> BV:32]]
34 : eq(1, 33) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 10 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=5
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini name local-sizes-are-equal
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini expr_group_type HOUDINI with 0 exprs
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini predicate_set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini is assumed eqclass : 0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini visited ce 0: z3v487.ce52
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini visited ces set done
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants smallest_point_cover 11 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L3%19%bbentry_Lfor.cond1%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
6 : input.spec-%var-i-1.L3%7%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,MAP[BV:32 -> BV:32]]
8 : 1 { 0x1 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : or(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%7%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
5 : input.spec-%var-i-1.L3%7%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,MAP[BV:32 -> BV:32]]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-regs
=LhsExpr
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
2 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%7%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-j-0.L3%19%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%19%bbentry_Lfor.cond1%1%bbentry.to_pcL3%19%bbentry_Lfor.cond1%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvult(1, 2) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvugt(4, 1) : BOOL
6 : not(5) : BOOL
7 : or(5, 6) : BOOL
8 : and(3, 7) : BOOL
9 : not(8) : BOOL
10 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
11 : input.spec-%var-j-0.L3%19%bbentry : BV:32
12 : map_get(10, 11) : SUM[UNIT,BV:32]
13 : 0 { 0x0 +1.0e1025 } : INT
14 : sum_is(12, 13) : BOOL
15 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
16 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
17 : map_get(15, 16) : SUM[UNIT,MAP[BV:32 -> BV:32]]
18 : 1 { 0x1 +1.0e1025 } : INT
19 : sum_is(17, 18) : BOOL
20 : and(14, 19) : BOOL
21 : sum_is(12, 18) : BOOL
22 : input.spec-%var-i-0.L3%19%bbentry : BV:32
23 : bvugt(22, 11) : BOOL
24 : not(23) : BOOL
25 : or(23, 24) : BOOL
26 : and(21, 25) : BOOL
27 : or(20, 26) : BOOL
28 : or(9, 27) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry edge well-formedness condition done
=Ranking exprs at node L3%7%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%ret.0.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%19%bbentry_Lfor.cond1%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-j-0.L3%19%bbentry : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-i-0.L3%19%bbentry : BV:32
=SRC Ranking expr 2
1 : input.spec-%var-ret-0.L3%19%bbentry : BV:32
=SRC Ranking expr 3
1 : input.spec-%tmpvar-12.L3%19%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 1
1 : input.spec-%tmpvar-10.L3%8%d : SUM[UNIT,MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 2
1 : input.spec-%var-x_i-0.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 3
1 : input.spec-%var-x_i-1.L3%19%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 4
1 : input.spec-%var-i-1.L3%7%bbentry : BV:32
=SRC Tie Breaking expr 5
1 : input.spec-%var-x-0.L3%7%bbentry : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
=SRC Tie Breaking expr 6
1 : input.spec-%var-ret-1.L3%7%bbentry : BV:32
=DST Ranking expr 0
1 : input.dst.llvm-%m : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%n : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%x : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
=DST Ranking expr 5
1 : input.dst.llvm-%ret.1.Lfor.cond1%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140505 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/ : MEMLABEL
140394 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140506 : select(140392, 140393, 140505, 140394, 140378, 140379) : BV:32
=RhsExpr
140395 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140507 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/ : MEMLABEL
140396 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140508 : select(140392, 140393, 140507, 140396, 140378, 140379) : BV:32
=RhsExpr
140397 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140509 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
140510 : select(140392, 140393, 140509, 140398, 140378, 140379) : BV:32
=RhsExpr
140399 : input.dst.llvm-%x : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140399 : input.dst.llvm-%x : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140405 : islangaligned(140399, 140378) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
double-pointer-implements-variable-sized-2d-map
=LhsExpr
140273 : input.spec-%var-x-1 : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
140359 : Lambda0Var : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140363 : bvule(140276, 140359) : BOOL
140397 : input.dst.llvm-%n : BV:32
141170 : bvult(140359, 140397) : BOOL
141171 : and(140363, 141170) : BOOL
141172 : lambda(140359, 141171) : FUNCTION[BV:32 -> BOOL]
140360 : Lambda1Var : BV:32
140367 : bvule(140276, 140360) : BOOL
140395 : input.dst.llvm-%m : BV:32
141173 : bvult(140360, 140395) : BOOL
141192 : and(140367, 141173) : BOOL
141193 : lambda(140360, 141192) : FUNCTION[BV:32 -> BOOL]
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
141169 : memlabel-mem-may-straddle-symbol.1-local./*___y___foo__x__=L0%0%argnum0=/-local./*___y___foo__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum2=/-heap : MEMLABEL
140375 : 4 { 0x4 +1.47e129 } : BV:32
140381 : bvmul(140360, 140375) : BV:32
140376 : bvmul(140359, 140375) : BV:32
140399 : input.dst.llvm-%x : BV:32
141213 : bvadd(140376, 140399) : BV:32
140378 : 4 { 0x4 +1.0e1025 } : INT
140379 : 0 { 0x0 } : BOOL
141233 : select(140392, 140393, 141169, 141213, 140378, 140379) : BV:32
141234 : bvadd(140381, 141233) : BV:32
141235 : select(140392, 140393, 141169, 141234, 140378, 140379) : BV:32
141236 : lambda(140360, 141235) : FUNCTION[BV:32 -> BV:32]
141237 : map(141193, 141236) : MAP[BV:32 -> BV:32]
141238 : lambda(140359, 141237) : FUNCTION[BV:32 -> MAP[BV:32 -> BV:32]]
141239 : map(141172, 141238) : MAP[BV:32 -> MAP[BV:32 -> BV:32]]
141240 : eq(140273, 141239) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry assume #5.pred
=Comment
precond-mlasserts
=LhsExpr
141077 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin : BV:32
141079 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end : BV:32
141080 : bvule(141077, 141079) : BOOL
140375 : 4 { 0x4 +1.47e129 } : BV:32
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141081 : bvadd(140375, 140337) : BV:32
141082 : bvadd(141077, 141081) : BV:32
141083 : eq(141079, 141082) : BOOL
141084 : and(141080, 141083) : BOOL
141085 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
141086 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
141087 : bvule(141085, 141086) : BOOL
141088 : and(141084, 141087) : BOOL
141089 : bvadd(141085, 141081) : BV:32
141090 : eq(141086, 141089) : BOOL
141091 : and(141088, 141090) : BOOL
141092 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_begin : BV:32
141093 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum2=/_end : BV:32
141094 : bvule(141092, 141093) : BOOL
141095 : and(141091, 141094) : BOOL
141096 : bvadd(141092, 141081) : BV:32
141097 : eq(141093, 141096) : BOOL
141098 : and(141095, 141097) : BOOL
141099 : bvuge(141077, 141085) : BOOL
141100 : bvule(141077, 141086) : BOOL
141101 : and(141099, 141100) : BOOL
141103 : bvuge(141079, 141085) : BOOL
141104 : bvule(141079, 141086) : BOOL
141105 : and(141103, 141104) : BOOL
141106 : not(141105) : BOOL
141107 : andnot1(141101, 141106) : BOOL
141102 : bvuge(141085, 141077) : BOOL
141108 : bvule(141085, 141079) : BOOL
141109 : and(141102, 141108) : BOOL
141111 : bvuge(141086, 141077) : BOOL
141112 : bvule(141086, 141079) : BOOL
141113 : and(141111, 141112) : BOOL
141114 : not(141113) : BOOL
141115 : andnot1(141109, 141114) : BOOL
141110 : and(141107, 141115) : BOOL
141116 : bvuge(141077, 141092) : BOOL
141117 : bvule(141077, 141093) : BOOL
141118 : and(141116, 141117) : BOOL
141120 : bvuge(141079, 141092) : BOOL
141121 : bvule(141079, 141093) : BOOL
141122 : and(141120, 141121) : BOOL
141123 : not(141122) : BOOL
141124 : andnot1(141118, 141123) : BOOL
141127 : and(141110, 141124) : BOOL
141119 : bvuge(141092, 141077) : BOOL
141125 : bvule(141092, 141079) : BOOL
141126 : and(141119, 141125) : BOOL
141128 : bvuge(141093, 141077) : BOOL
141129 : bvule(141093, 141079) : BOOL
141130 : and(141128, 141129) : BOOL
141131 : not(141130) : BOOL
141132 : andnot1(141126, 141131) : BOOL
141133 : and(141127, 141132) : BOOL
141134 : bvuge(141085, 141092) : BOOL
141135 : bvule(141085, 141093) : BOOL
141136 : and(141134, 141135) : BOOL
141138 : bvuge(141086, 141092) : BOOL
141139 : bvule(141086, 141093) : BOOL
141140 : and(141138, 141139) : BOOL
141141 : not(141140) : BOOL
141142 : andnot1(141136, 141141) : BOOL
141145 : and(141133, 141142) : BOOL
141137 : bvuge(141092, 141085) : BOOL
141143 : bvule(141092, 141086) : BOOL
141144 : and(141137, 141143) : BOOL
141146 : bvuge(141093, 141085) : BOOL
141147 : bvule(141093, 141086) : BOOL
141148 : and(141146, 141147) : BOOL
141149 : not(141148) : BOOL
141150 : andnot1(141144, 141149) : BOOL
141151 : and(141145, 141150) : BOOL
141152 : and(141098, 141151) : BOOL
140396 : input.dst.local./*___y___foo__x__=L0%0%argnum1=/ : BV:32
141153 : 3 { 0x3 +1.35e129 } : BV:32
141154 : bvand(140396, 141153) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141155 : eq(141154, 140276) : BOOL
140398 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
141156 : bvand(140398, 141153) : BV:32
141157 : eq(141156, 140276) : BOOL
141158 : and(141155, 141157) : BOOL
140394 : input.dst.local./*___y___foo__x__=L0%0%argnum2=/ : BV:32
141159 : bvand(140394, 141153) : BV:32
141160 : eq(141159, 140276) : BOOL
141161 : and(141158, 141160) : BOOL
141162 : and(141152, 141161) : BOOL
141163 : eq(140396, 141077) : BOOL
141164 : eq(140398, 141085) : BOOL
141165 : and(141163, 141164) : BOOL
141166 : eq(140394, 141092) : BOOL
141167 : and(141165, 141166) : BOOL
141168 : and(141162, 141167) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%7%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%7%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry assume #0.pred
=Comment
fold-conjunct
=LhsExpr
140700 : input.dst.llvm-%j.0.Lfor.cond1%1%bbentry : BV:32
140395 : input.dst.llvm-%m : BV:32
140710 : bvult(140700, 140395) : BOOL
140699 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140701 : bvugt(140699, 140700) : BOOL
204690 : not(140701) : BOOL
204691 : or(140701, 204690) : BOOL
204702 : and(140710, 204691) : BOOL
140555 : 4 { 0x4 +1.0e1025 } : BV:64
140426 : 32 { 0x20 +1.0e1025 } : INT
140729 : bvsign_ext(140699, 140426) : BV:64
140880 : bvmul(140555, 140729) : BV:64
140430 : 63 { 0x3f +1.0e1025 } : INT
140881 : bvextract(140880, 140430, 140426) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140728 : bvslt(140699, 140276) : BOOL
140337 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140894 : ite(140728, 140337, 140276) : BV:32
140896 : eq(140881, 140894) : BOOL
140378 : 4 { 0x4 +1.0e1025 } : INT
140898 : isindexforsize(140896, 140378) : BOOL
140399 : input.dst.llvm-%x : BV:32
140375 : 4 { 0x4 +1.47e129 } : BV:32
140821 : bvmul(140375, 140699) : BV:32
140824 : bvadd(140399, 140821) : BV:32
140900 : isgepoffset(140824, 140821) : BOOL
140904 : islangaligned(140824, 140378) : BOOL
140392 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140393 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140543 : memlabel-mem-no-straddle-symbol.1-heap-arg.0 : MEMLABEL
140379 : 0 { 0x0 } : BOOL
140830 : select(140392, 140393, 140543, 140824, 140378, 140379) : BV:32
140906 : islangaligned(140830, 140378) : BOOL
140909 : and(140904, 140906) : BOOL
140744 : bvsign_ext(140700, 140426) : BV:64
140922 : bvmul(140555, 140744) : BV:64
140923 : bvextract(140922, 140430, 140426) : BV:32
140743 : bvslt(140700, 140276) : BOOL
140936 : ite(140743, 140337, 140276) : BV:32
140938 : eq(140923, 140936) : BOOL
140940 : isindexforsize(140938, 140378) : BOOL
140833 : bvmul(140375, 140700) : BV:32
140835 : bvadd(140830, 140833) : BV:32
140942 : isgepoffset(140835, 140833) : BOOL
140947 : and(140898, 140900, 140904, 140909, 140940, 140942) : BOOL
140862 : islangaligned(140835, 140378) : BOOL
204779 : and(140947, 140862) : BOOL
140275 : 1 { 0x1 } : BOOL
205878 : eq(204779, 140275) : BOOL
207010 : implies(204690, 205878) : BOOL
207011 : implies(140701, 205878) : BOOL
207012 : and(207010, 207011) : BOOL
205887 : eq(207012, 140275) : BOOL
207008 : implies(204702, 205887) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%19%bbentry_Lfor.cond1%1%bbentry=>L3%19%bbentry_Lfor.cond1%1%bbentry done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%7%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 5
=bv_rank at L3%19%bbentry_Lfor.cond1%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 9
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
